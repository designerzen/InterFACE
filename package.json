{
	"name": "PhotoSYNTH",
	"description": "Instant Musical Superpowers! Body controllable accessible musical instrument",
	"version": "0.28.0",
	"time": 1737650431301,
	"author": "designerzen <github@designerzen.com>",
	"license": "GPL-2.0-only",
	"repository": "https://github.com/designerzen/InterFACE.git",
	"bugs": "https://github.com/designerzen/InterFACE/issues",
	"homepage": "https://interface.place",
	"keywords": [
		"music",
		"accessibility",
		"machine learning",
		"ai",
		"xr",
		"ar"
	],
	"targets": {
		"main": false,
		"electron-preload": {
			"source": "source/electron/preload.ts",
			"distDir": "./dist-electron/electron/",
			"context": "electron-renderer",
			"publicUrl": "./",
			"sourceMap": false,
			"engines": {
				"electron": ">=19.x"
			}
		},
		"electron-main": {
			"source": "source/electron/main.ts",
			"distDir": "./dist-electron/electron/",
			"context": "electron-main",
			"publicUrl": "./",
			"sourceMap": true,
			"scopeHoist": false
		},
		"electron-renderer": {
			"source": "source/app.pug",
			"includeNodeModules": true,
			"distDir": "./dist-electron/main",
			"publicUrl": "./",
			"context": "electron-renderer",
			"sourceMap": true
		},
		"web": {
			"source": "source/sitemap.pug",
			"distDir": "./release/web/",
			"publicUrl": "./",
			"context": "browser",
			"sourceMap": false
		},
		"dev": {
			"source": "source/sitemap.pug",
			"distDir": "./release/web/",
			"publicUrl": "./",
			"context": "browser",
			"sourceMap": true,
			"outputFormat": "esmodule"
		}
	},
	"pnpm": {
		"onlyBuiltDependencies": [
			"electron"
		]
	},
	"scripts": {
		"kill": "npx kill-port 303",
		"optional": "node-gyp-build-optional-packages",
		"postinstall": "electron-builder install-app-deps",
		"secure": "npx @socketsecurity/cli optimize",
		"test": "jest",
		"test-watch": "jest --watch",
		"present": "parcel serve source/presentation.pug -p 909",
		"tests": "parcel serve source/tests.pug -p 606",
		"test:serve": "parcel serve source/tests.pug -p 909",
		"push:": "git push origin --tags && git push origin",
		"=UTILITIES=": "------------------------------------",
		"killport": "npx kill-port 909",
		"deps": "npm ci",
		"hardreset": "node actions/reset.mjs --total",
		"reset": "node actions/reset.mjs",
		"rebuild": "./node_modules/.bin/electron-rebuild.cmd",
		"node:rebuild": "electron-rebuild -f -w",
		"mobile:icons": "npx capacitor-assets generate",
		"icons": "npm run electron:icons && npm run mobile:icons",
		"analyse": "parcel build source/index.pug --profile --detailed-report",
		"=SLIDES=": "------------------------------------",
		"slides": "decktape automatic http://localhost:909/updates.html ./documentation/updates.pdf",
		"=START=": "------------------------------------",
		"freshstart": "npm run reset && npm run start",
		"zips": "node actions/zips.js",
		"start": "npm run serve",
		"index": "npm run serve:index",
		"wam": "npm run serve:wam",
		"upgrader": "npx npm-check-updates --interactive -u",
		"changes": "node actions/changelog.mjs",
		"clean": "node actions/clean.mjs",
		"copy": "node actions/copy.mjs",
		"assets": "npm run copy && npm run zips",
		"clear": "npm run clean && npm run copy",
		"doc": "jsdoc -d docs --configure .jsdoc.json source/interface.js",
		"=SERVE=": "------------------------------------",
		"serve": "npm run assets && parcel serve -p 909 --target dev",
		"serve:index": "parcel serve source/index.pug -p 909",
		"serve:tests": "parcel serve source/tests.pug -p 909",
		"serve:wam": "parcel serve source/tests.pug -p 909",
		"=BUILD=": "------------------------------------",
		"build": "npm run assets && npm run build:web",
		"report": "parcel build --reporter @parcel/reporter-bundle-analyzer source/index.pug --public-url ./ --target web",
		"build:help": "parcel build --public-url ./ source/help.pug --target web",
		"build:roadmap": "parcel build --public-url ./ source/roadmap.pug --target web",
		"build:debug": "parcel build --no-minify --no-scope-hoist ---no-content-hash --public-url ./  source/*.pug --target web",
		"build:all": "parcel build --public-url ./ source/*.pug --target web",
		"build:wam": "parcel build --no-content-hash --public-url ./ source/wam.pug --target web",
		"build:index": "parcel build --public-url ./ source/index.pug --target web",
		"build:release": "parcel build --target electron-main --target electron-renderer --target web",
		"build:web": "parcel build --target web",
		"vite": "vite",
		"=ELECTRON=": "------------------------------------",
		"electron:rebuild": "npx electron-rebuild",
		"electron:clean": "rimraf dist-electron && rimraf release",
		"electron:icons": "electron-icon-maker --input=./source/assets/logos/interface_round.2048.png --output=./static/",
		"electron:secure": "electronegativity -i ./dist-electron/",
		"electron:postinstall": "electron-builder install-app-deps",
		"electron:postuninstall": "electron-builder install-app-deps",
		"electron:test": "electron --inspect=9229  --enable-logging dist-electron/electron/main.js",
		"electron:build": "npm run electron:compile && npm run electron:renderer",
		"electron:compile": "parcel build --target electron-preload --target electron-main --config ./.parcelnocopyrc",
		"electron:renderer": "parcel build --target electron-renderer --no-content-hash",
		"electron:serve": "parcel serve --target electron-renderer -p 303",
		"electron:dev": "npm run electron:compile && concurrently 'npm:electron:serve' 'npm:electron:test'",
		"electron:package": "electron-builder",
		"electron:make": "npm run electron:clean && npm run electron:build && npm run electron:package",
		"build:electron-main": "parcel build --target electron-main --config ./.parcelnocopyrc",
		"build:electron-preload": "parcel build --target electron-preload --config ./.parcelnocopyrc",
		"build:electron-renderer": "parcel build --target electron-renderer --no-content-hash",
		"build:electron": "npm run electron:build",
		"run:electron": "electron . --enable-logging",
		"packager:electron": "electron-packager . photosynth-interface --overwrite --out=releases --icon=./source/assets/icons/icon.ico",
		"open:electron": "npx cap open @capacitor-community/electron",
		"status:electron": "electron-packager --version",
		"debug:electron": "electron --inspect",
		"make:electron": "electron-builder -mwl",
		"=ANDROID=": "------------------------------------",
		"build:android": "parcel build --public-url ./ --dist-dir ./dist --no-source-maps source/app.pug",
		"android:add": "npx cap add android",
		"android:open": "npx cap open android",
		"android:run": "npx cap run android",
		"android": "npm run clear && npm run build:android && node actions/app.mjs && npm run android:add && npm run android:open",
		"=LICENSES=": "------------------------------------",
		"copyrights:list": "NODE_ENV=production yarn licenses list && node license.mjs",
		"license:summary": "npx license-checker --summary > LICENSES.md && npx license-checker --summary > source/licenses.md",
		"license:table": "npx license-report --output=table >> LICENSES.md  && npx license-checker --output=table >> source/licenses.md",
		"license:smallprint": "yarn licenses generate-disclaimer >> LICENSES.md && yarn licenses generate-disclaimer >> source/licenses.md",
		"license:report": "npx license-report --output=markdown >> LICENSES.md && npx license-report --output=markdown >> source/licenses.md",
		"license": "npm run license:report && npm run license:smallprint && npm run license:table && npm run license:summary",
		"license:build": "parcel build --public-url ./ source/licenses.pug",
		"=REVISION=": "------------------------------------",
		"revise": "node actions/revision.mjs",
		"patch": "changelog -p && npm version patch -m 'Hotfix Release v%s' --force && npm run revise",
		"minor": "changelog -m && npm version minor -m 'Minor Release v%s' --force && npm run revise",
		"major": "changelog -M && npm version major -m 'Major Release v%s' --force && npm run revise",
		"=RELEASE=": "------------------------------------",
		"package": "npm run minor && npm run clear && npm run build",
		"release:patch": "npm run patch && npm run build:all",
		"release:minor": "npm run minor && npm run build:all",
		"release:major": "npm run major && npm run build:all",
		"release:app": "npm run patch && npm run assets && npm run push",
		"release": "npm run changes && npm run build",
		"deploy":"npx partykit deploy",
		"=QUALITY=": "",
		"knip": "knip",
		"help": "npx https://github.com/google-gemini/gemini-cli"
	},
	"staticFiles": {
		"staticFiles": [
			{
				"staticPath": "static"
			},
			{
				"staticPath": "./node_modules/@tensorflow/tfjs-backend-wasm/dist",
				"staticOutPath": "tf/"
			},
			{
				"staticPath": "./node_modules/@mediapipe/face_mesh",
				"staticOutPath": "@mediapipe/"
			},
			{
				"staticPath": "./node_modules/@mediapipe/tasks-vision/wasm",
				"staticOutPath": "@mediapipe/"
			}
		]
	},
	"engines": {},
	"dependencies": {
		"@babylonjs/assets": "^5.20.0",
		"@babylonjs/core": "^8.30.0",
		"@babylonjs/gui-editor": "^8.30.0",
		"@babylonjs/havok": "^1.3.10",
		"@babylonjs/inspector": "^8.30.0",
		"@babylonjs/loaders": "^8.30.0",
		"@babylonjs/materials": "^8.30.0",
		"@capacitor/android": "^7.4.3",
		"@capacitor/core": "^7.4.3",
		"@capacitor/electron": "^2.5.0",
		"@capacitor/ios": "^7.4.3",
		"@electron-toolkit/utils": "^4.0.0",
		"@grame/faustwasm": "^0.11.2",
		"@lookingglass/bridge": "^0.0.8-alpha.4",
		"@lookingglass/webxr": "^0.6.0",
		"@mediapipe/face_detection": "^0.4.1646425229",
		"@mediapipe/face_mesh": "^0.4.1633559619",
		"@mediapipe/pose": "^0.5.1675469404",
		"@mediapipe/tasks-genai": "^0.10.25",
		"@tensorflow/tfjs": "^4.22.0",
		"@tweakpane/core": "^2.0.5",
		"@visualsource/selective-unrealbloompass": "^1.0.1",
		"@webaudiomodules/api": "^2.0.0-alpha.6",
		"@webaudiomodules/sdk": "^0.0.12",
		"@webaudiomodules/sdk-parammgr": "^0.0.13",
		"abcjs": "^6.5.2",
		"audio-decode": "^2.2.3",
		"audioworklet-polyfill": "^1.1.2",
		"bonjour-service": "^1.3.0",
		"dialog-polyfill": "^0.5.6",
		"easyqrcodejs": "^4.6.2",
		"electron-debug": "^4.1.0",
		"electron-log": "^5.4.3",
		"electron-reloader": "^1.2.3",
		"electron-updater": "^6.6.2",
		"electron-window-state": "^5.0.3",
		"essentia.js": "^0.1.3",
		"fflate": "^0.8.2",
		"holoplay-core": "^0.0.11",
		"is-electron": "^2.2.2",
		"midi-manufacturers": "^1.1.0",
		"midi-writer-js": "^3.1.1",
		"mpe": "^1.0.4",
		"qrcode-svg": "^1.1.0",
		"reveal.js": "^5.2.1",
		"ringbuf.js": "^0.4.0",
		"serialport": "^13.0.0",
		"share-menu": "^5.1.0",
		"stats-gl": "^3.6.0",
		"svgo": "^4.0.0",
		"three": "^0.180.0",
		"three-addons": "^1.2.0",
		"three-mesh-bvh": "^0.9.1",
		"troika-3d": "^0.52.4",
		"troika-three-text": "^0.52.4",
		"tweakpane": "^4.0.5",
		"update-electron-app": "^3.1.1",
		"wavefile": "^11.0.0",
		"webmidi": "^3.1.13",
		"workbox-cacheable-response": "^7.3.0",
		"workbox-core": "^7.3.0",
		"workbox-expiration": "^7.3.0",
		"workbox-google-analytics": "^7.3.0",
		"workbox-precaching": "^7.3.0",
		"workbox-range-requests": "^7.3.0",
		"workbox-recipes": "^7.3.0",
		"workbox-routing": "^7.3.0",
		"workbox-strategies": "^7.3.0",
		"workbox-sw": "^7.3.0",
		"ws": "^8.18.3",
		"partysocket": "1.1.6"
	},
	"devDependencies": {
		"@babel/core": "^7.28.4",
		"@babel/preset-env": "^7.28.3",
		"@biomejs/biome": "^2.2.5",
		"@bubblewrap/cli": "^1.24.1",
		"@capacitor/assets": "^3.0.5",
		"@capacitor/cli": "^7.4.3",
		"@electron-toolkit/utils": "^4.0.0",
		"@electron/packager": "^18.4.4",
		"@electron/rebuild": "^4.0.1",
		"@mediapipe/tasks-vision": "^20230920.0.0",
		"@parcel/config-default": "^2.16.0",
		"@parcel/core": "^2.16.0",
		"@parcel/packager-raw-url": "2.16.0",
		"@parcel/packager-xml": "2.16.0",
		"@parcel/reporter-bundle-analyzer": "^2.16.0",
		"@parcel/transformer-inline-string": "2.16.0",
		"@parcel/transformer-js": "^2.16.0",
		"@parcel/transformer-pug": "^2.16.0",
		"@parcel/transformer-raw": "^2.16.0",
		"@parcel/transformer-react-refresh-wrap": "^2.16.0",
		"@parcel/transformer-sass": "2.16.0",
		"@parcel/transformer-webmanifest": "2.16.0",
		"@parcel/transformer-worklet": "2.16.0",
		"@parcel/transformer-xml": "2.16.0",
		"@pixiv/three-vrm": "^3.4.2",
		"@types/node": "^24.6.2",
		"@vituum/vite-plugin-pug": "^1.1.0",
		"assert": "^2.1.0",
		"babel-jest": "30.2.0",
		"browser-fs-access": "^0.38.0",
		"buffer": "^6.0.3",
		"concurrently": "^9.2.1",
		"console-browserify": "^1.2.0",
		"crypto-browserify": "^3.12.1",
		"domain-browser": "^5.7.0",
		"electron": "^38.2.0",
		"electron-builder": "^26.0.12",
		"electron-devtools-installer": "^4.0.0",
		"electron-icon-maker": "^0.0.5",
		"electron-winstaller": "^5.4.0",
		"events": "^3.3.0",
		"feed": "^5.1.0",
		"generate-changelog": "^1.8.0",
		"jest": "^30.2.0",
		"jest-environment-jsdom": "30.2.0",
		"jsdoc": "^4.0.4",
		"jstransformer-markdown-it": "^3.0.0",
		"knip": "^5.64.1",
		"node-html-parser": "^7.0.1",
		"parcel": "^2.16.0",
		"parcel-reporter-static-files-copy": "^1.5.3",
		"path-browserify": "^1.0.1",
		"postcss": "^8.5.6",
		"postcss-preset-env": "^10.4.0",
		"process": "^0.11.10",
		"rimraf": "^6.0.1",
		"sass": "^1.93.2",
		"showdown": "^2.1.0",
		"stream-browserify": "^3.0.0",
		"string_decoder": "^1.3.0",
		"typescript": "^5.9.3",
		"util": "^0.12.5",
		"vm-browserify": "^1.1.2",
		"partykit": "0.0.115"
	}
}
