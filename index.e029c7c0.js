function e(e,t,n){Object.defineProperty(e,t,{get:n,enumerable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */class n{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class r{time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}numDataIds(){return s("numDataIds")}disposeData(e){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,r){return s("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:r,bias:a,activation:i,preluActivationWeights:o}){return s("fusedBatchMatMul")}slice(e,t,n){return s("slice")}stridedSlice(e,t,n,r){return s("stridedSlice")}unstack(e,t){return s("unstack")}reverse(e,t){return s("reverse")}concat(e,t){return s("concat")}neg(e){return s("neg")}add(e,t){return s("add")}addN(e){return s("addN")}subtract(e,t){return s("subtract")}multiply(e,t){return s("multiply")}realDivide(e,t){return s("realDivide")}floorDiv(e,t){return s("floorDiv")}sum(e,t){return s("sum")}prod(e,t){return s("prod")}unsortedSegmentSum(e,t,n){return s("unsortedSegmentSum")}argMin(e,t){return s("argMin")}argMax(e,t){return s("argMax")}equal(e,t){return s("equal")}notEqual(e,t){return s("notEqual")}less(e,t){return s("less")}lessEqual(e,t){return s("lessEqual")}greater(e,t){return s("greater")}greaterEqual(e,t){return s("greaterEqual")}logicalNot(e){return s("logicalNot")}logicalAnd(e,t){return s("logicalAnd")}logicalOr(e,t){return s("logicalOr")}where(e){return s("where")}select(e,t,n){return s("select")}topk(e,t,n){return s("topk")}min(e,t){return s("min")}minimum(e,t){return s("minimum")}mod(e,t){return s("mod")}max(e,t){return s("max")}maximum(e,t){return s("maximum")}all(e,t){return s("all")}any(e,t){return s("any")}squaredDifference(e,t){return s("squaredDifference")}ceil(e){return s("ceil")}floor(e){return s("floor")}round(e){return s("round")}sign(e){return s("sign")}isNaN(e){return s("isNaN")}isInf(e){return s("isInf")}isFinite(e){return s("isFinite")}pow(e,t){return s("pow")}exp(e){return s("exp")}expm1(e){return s("expm1")}softmax(e,t){return s("softmax")}log(e){return s("log")}log1p(e){return s("log1p")}sqrt(e){return s("sqrt")}rsqrt(e){return s("rsqrt")}square(e){return s("square")}reciprocal(e){return s("reciprocal")}relu(e){return s("relu")}relu6(e){return s("relu6")}prelu(e,t){return s("prelu")}elu(e){return s("elu")}eluDer(e,t){return s("eluDer")}selu(e){return s("selu")}int(e){return s("int")}clip(e,t,n){return s("clip")}abs(e){return s("abs")}complexAbs(e){return s("complexAbs")}sigmoid(e){return s("sigmoid")}softplus(e){return s("softplus")}sin(e){return s("sin")}cos(e){return s("cos")}tan(e){return s("tan")}asin(e){return s("asin")}acos(e){return s("acos")}atan(e){return s("atan")}atan2(e,t){return s("atan2")}sinh(e){return s("sinh")}cosh(e){return s("cosh")}tanh(e){return s("tanh")}asinh(e){return s("asinh")}acosh(e){return s("acosh")}atanh(e){return s("atanh")}erf(e){return s("erf")}step(e,t){return s("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:r,activation:a,preluActivationWeights:i}){return s("fusedConv2d")}conv2d(e,t,n){return s("conv2d")}conv2dDerInput(e,t,n){return s("conv2dDerInput")}conv2dDerFilter(e,t,n){return s("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:r,activation:a,preluActivationWeights:i}){return s("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return s("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return s("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return s("depthwiseConv2DDerFilter")}conv3d(e,t,n){return s("conv3d")}conv3dDerInput(e,t,n){return s("conv3dDerInput")}conv3dDerFilter(e,t,n){return s("conv3dDerFilter")}maxPool(e,t){return s("maxPool")}maxPoolBackprop(e,t,n,r){return s("maxPoolBackprop")}avgPool(e,t){return s("avgPool")}avgPoolBackprop(e,t,n){return s("avgPoolBackprop")}avgPool3d(e,t){return s("avgPool3d")}avgPool3dBackprop(e,t,n){return s("avgPool3dBackprop")}maxPool3d(e,t){return s("maxPool3d")}maxPool3dBackprop(e,t,n,r){return s("maxPool3dBackprop")}reshape(e,t){return s("reshape")}cast(e,t){return s("cast")}tile(e,t){return s("tile")}pad(e,t,n){return s("pad")}transpose(e,t){return s("transpose")}gather(e,t,n,r=0){return s("gather")}gatherND(e,t){return s("gatherND")}scatterND(e,t,n){return s("scatterND")}batchToSpaceND(e,t,n){return s("batchToSpaceND")}spaceToBatchND(e,t,n){return s("spaceToBatchND")}resizeBilinear(e,t,n,r,a){return s("resizeBilinear")}resizeBilinearBackprop(e,t,n){return s("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,r,a){return s("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return s("resizeNearestNeighborBackprop")}batchNorm(e,t,n,r,a,i){return s("batchNorm")}localResponseNormalization4D(e,t,n,r,a){return s("localResponseNormalization4D")}LRNGrad(e,t,n,r,a,i,o){return s("LRNGrad")}multinomial(e,t,n,r){return s("multinomial")}oneHot(e,t,n,r){return s("oneHot")}cumsum(e,t,n,r){return s("cumsum")}nonMaxSuppression(e,t,n,r,a){return s("nonMaxSuppression")}fft(e){return s("fft")}ifft(e){return s("ifft")}complex(e,t){return s("complex")}real(e){return s("real")}imag(e){return s("imag")}cropAndResize(e,t,n,r,a,i){return s("cropAndResize")}depthToSpace(e,t,n){return s("depthToSpace")}split(e,t,n){return s("split")}sparseToDense(e,t,n,r){return s("sparseToDense")}diag(e){return s("diag")}fill(e,t,n){return s("fill")}onesLike(e){return s("onesLike")}zerosLike(e){return s("zerosLike")}linspace(e,t,n){return s("linspace")}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function a(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function i(e,t,n){return Math.max(e,Math.min(t,n))}function o(e){return e%2==0?e:e+1}function u(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function l(e,t,n=""){u(d(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function c(e){u(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function h(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||N(e)&&!n)for(let r=0;r<e.length;++r)h(e[r],t,n);else t.push(e);return t}function p(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function d(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function f(e){return e%1==0}function m(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function g(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function y(e,t=(e=>0),n){return new Promise(((r,s)=>{let a=0;const i=()=>{if(e())return void r();a++;const o=t(a);null!=n&&a>=n?s():setTimeout(i,o)};i()}))}function b(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function x(e,t){const n=t.length;return u((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),u(e.every((e=>f(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function w(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:x(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function v(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function k(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function I(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function N(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function S(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function E(e){return"string"==typeof e||e instanceof String}function T(e){return"number"==typeof e}function C(e){return Array.isArray(e)?C(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":T(e)?"float32":E(e)?"string":"boolean"==typeof e?"bool":"float32"}function $(e){return!!(e&&e.constructor&&e.call&&e.apply)}function A(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function R(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function _(e,t,n){const r=new Array;if(1===t.length){const s=t[0];for(let t=0;t<s;t++)r[t]=n[e+t]}else{const s=t[0],a=t.slice(1),i=a.reduce(((e,t)=>e*t));for(let t=0;t<s;t++)r[t]=_(e+t*i,a,n)}return r}function D(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return _(0,e,t)}function F(e,t){const n=M(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function M(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function O(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return D(e,new Float32Array(n));if("int32"===t)return D(e,new Int32Array(n));if("bool"===t)return D(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function L(e){e.forEach((t=>{u(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function z(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function P(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function B(e){return e&&e.then&&"function"==typeof e.then}class W{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(B(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function V(){return U}let U=null;var G,H,j={},q=j={};function K(){throw new Error("setTimeout has not been defined")}function X(){throw new Error("clearTimeout has not been defined")}function Y(e){if(G===setTimeout)return setTimeout(e,0);if((G===K||!G)&&setTimeout)return G=setTimeout,setTimeout(e,0);try{return G(e,0)}catch(t){try{return G.call(null,e,0)}catch(t){return G.call(this,e,0)}}}!function(){try{G="function"==typeof setTimeout?setTimeout:K}catch(e){G=K}try{H="function"==typeof clearTimeout?clearTimeout:X}catch(e){H=X}}();var Z,J=[],Q=!1,ee=-1;function te(){Q&&Z&&(Q=!1,Z.length?J=Z.concat(J):ee=-1,J.length&&ne())}function ne(){if(!Q){var e=Y(te);Q=!0;for(var t=J.length;t;){for(Z=J,J=[];++ee<t;)Z&&Z[ee].run();ee=-1,t=J.length}Z=null,Q=!1,function(e){if(H===clearTimeout)return clearTimeout(e);if((H===X||!H)&&clearTimeout)return H=clearTimeout,clearTimeout(e);try{H(e)}catch(t){try{return H.call(null,e)}catch(t){return H.call(this,e)}}}(e)}}function re(e,t){this.fun=e,this.array=t}function se(){}let ae;function ie(){if(null==ae){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==j)e=j;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}ae=e}return ae}function oe(e,t){const n=function(){const e=ie();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}q.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];J.push(new re(e,t)),1!==J.length||Q||Y(ne)},re.prototype.run=function(){this.fun.apply(null,this.array)},q.title="browser",q.browser=!0,q.env={},q.argv=[],q.version="",q.versions={},q.on=se,q.addListener=se,q.once=se,q.off=se,q.removeListener=se,q.removeAllListeners=se,q.emit=se,q.prependListener=se,q.prependOnceListener=se,q.listeners=function(e){return[]},q.binding=function(e){throw new Error("process.binding is not supported")},q.cwd=function(){return"/"},q.chdir=function(e){throw new Error("process.chdir is not supported")},q.umask=function(){return 0};const ue=oe("kernelRegistry",(()=>new Map)),le=oe("gradRegistry",(()=>new Map));function ce(e,t){const n=me(e,t);return ue.get(n)}function he(e){return le.get(e)}function pe(e){const t=ue.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function de(e){const{kernelName:t,backendName:n}=e,r=me(t,n);ue.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),ue.set(r,e)}function fe(e){const{kernelName:t}=e;le.has(t)&&V().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),le.set(t,e)}function me(e,t){return`${t}_${e}`}function ge(e,t){return"string"===t?xe(e):ye([e],t)}function ye(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=h(e)),V().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function be(){return V().platform.now()}function xe(e,t="utf-8"){return t=t||"utf-8",V().platform.encode(e,t)}function we(e,t="utf-8"){return t=t||"utf-8",V().platform.decode(e,t)}class ve{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ie)}profileKernel(e,t,n){let r;const s=this.backendTimer.time((()=>{r=n()}));if(V().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{ke(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function ke(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Ie{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?g(`${r}ms`,9):r.error,o=g(e,25),u=t.rank,l=t.size,c=g(t.shape.toString(),14);let h="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;h+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ne(e,t,n,r){const s=R(t),a=function(e,t,n,r){const s=p(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,u="complex64"===n?Ce(e):e;if(o>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],Se(u[t+e],0,n).length)}return i}(e,t,n,s),i=t.length,o=Te(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map((e=>"    "+e)).join("\n")),u.join("\n")}function Se(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:E(e)?`'${e}'`:"bool"===n?Ee(e):parseFloat(e.toFixed(7)).toString(),g(r,t)}function Ee(e){return 0===e?"false":"true"}function Te(e,t,n,r,s,a=!0){const i="complex64"===n?2:1,o=t[0],u=t.length;if(0===u){if("complex64"===n){return[Se(Ce(e)[0],0,n)]}return"bool"===n?[Ee(e[0])]:[e[0].toString()]}if(1===u){if(o>20){const t=3*i;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(r=Ce(r),a=Ce(a)),["["+r.map(((e,t)=>Se(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Se(e,s[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Ce(e):Array.from(e)).map(((e,t)=>Se(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const r=t*h,a=r+h;p.push(...Te(e.slice(r,a),l,n,c,s,!1))}p.push("...");for(let t=o-3;t<o;t++){const r=t*h,a=r+h;p.push(...Te(e.slice(r,a),l,n,c,s,t===o-1))}}else for(let t=0;t<o;t++){const r=t*h,a=r+h;p.push(...Te(e.slice(r,a),l,n,c,s,t===o-1))}const d=2===u?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Ce(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class $e{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=p(e),null!=n){const e=n.length;u(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||k(t,this.size),this.strides=R(e)}set(e,...t){0===t.length&&(t=[0]),u(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ae().makeTensor(this.values,this.shape,this.dtype)}}let Ae=null,Re=null,_e=null;class De{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=p(e),this.strides=R(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Re.buffer(this.shape,this.dtype,e)}bufferSync(){return Re.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return D(this.shape,e)}arraySync(){return D(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=Ae().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>we(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Ae().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>we(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ae().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ae().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Re.print(this,e)}clone(){return this.throwIfDisposed(),Re.clone(this)}toString(e=!1){return Ne(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Re.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ae().makeVariable(this,e,t,n)}}Object.defineProperty(De,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class Fe extends De{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!d(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ae().disposeTensor(this),this.dataId=e.dataId,Ae().incRef(this,null)}dispose(){Ae().disposeVariable(this),this.isDisposedInternal=!0}}var Me,Oe,Le,ze,Pe,Be,We,Ve,Ue,Ge;Object.defineProperty(Fe,Symbol.hasInstance,{value:e=>e instanceof De&&null!=e.assign&&e.assign instanceof Function}),(Oe=Me||(Me={})).R0="R0",Oe.R1="R1",Oe.R2="R2",Oe.R3="R3",Oe.R4="R4",Oe.R5="R5",Oe.R6="R6",(ze=Le||(Le={})).float32="float32",ze.int32="int32",ze.bool="int32",ze.complex64="complex64",(Be=Pe||(Pe={})).float32="float32",Be.int32="int32",Be.bool="bool",Be.complex64="complex64",(Ve=We||(We={})).float32="float32",Ve.int32="float32",Ve.bool="float32",Ve.complex64="complex64",(Ge=Ue||(Ue={})).float32="complex64",Ge.int32="complex64",Ge.bool="complex64",Ge.complex64="complex64";const He={float32:We,int32:Le,bool:Pe,complex64:Ue};function je(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return He[e][t]}function qe(e){return je(e,"int32")}function Ke(e,t){if(e.dtype===t.dtype)return[e,t];const n=je(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Xe(e,t){return t.some((t=>t.id===e.id))}function Ye(e){const t=[];return Ze(e,t,new Set),t}function Ze(e,t,n){if(null==e)return;if(e instanceof De)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),Ze(r,t,n))}}class Je{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Qe{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Je}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ve(this.backendInstance),!0}setupRegisteredKernels(){pe(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){pe(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t);r.disposeData(t),n.backend=e,e.move(t,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Qe.nextTensorId++}nextVariableId(){return Qe.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t="float32",n={x:e},r={dtype:t};return tt.runKernelFunc((n=>n.cast(e,t)),n,null,"Cast",r)}})),[],{}),t}runKernel(e,t,n,r,s){return this.runKernelFunc(null,t,null,e,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e,t,n,r,s,a,i){let o,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=ce(r,this.backendName);let f,m;if(null!=d)p=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,e,n);const o=n.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(l){let e=this.getTensorsForGradient(r,t,o);if(null==e){null==i&&(i=[]);const t=o.filter(((e,t)=>i[t]));e=(a||[]).slice().concat(t)}u=this.saveTensorsForBackwardMode(e)}return o};else{if(null==e)throw new Error(`Error running ${r}: Neither modular kernel nor forward func passed`);const t=e=>{l&&(u=e.map((e=>this.keep(this.clone(e)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>e(this.backend,t)));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,t,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),l&&this.addTapeNode(r,t,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((e=>null!=t[e]?t[e].shape:null)),outputShapes:o.map((e=>e.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=he(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(u(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>s[t]));return a.concat(i)}return null}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&E(e[0])&&(s=e.map((e=>xe(e))));const a=r.write(s,t,n),i=new De(t,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s=new De(t,n=n||"float32",e,this.nextTensorId());return this.incRef(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Fe(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*S(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof Fe||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):this.state.tensorInfo.get(e.dataId).refCount--}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=he(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=M(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ye(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(u(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));u(s instanceof De,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=F(p(e),"float32");return tt.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!d(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),nt);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return u($(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;u(t.every((e=>e instanceof De)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return t.forEach(((e,t)=>{r[t]=e})),this.runKernelFunc(((r,s)=>(n=e(...t,s),u(n.value instanceof De,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),u($(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];u(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),u(a.every((e=>e instanceof De)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i}))}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=be(),n=await this.backend.time(e);return n.wallMs=be()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Je;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function et(){const e=ie();if(null==e._tfengine){const t=new W(e);e._tfengine=new Qe(t)}var t;return t=e._tfengine.ENV,U=t,Ae=()=>e._tfengine,e._tfengine}Qe.nextTensorId=0,Qe.nextVariableId=0;const tt=et();function nt(e,t){const n={a:e,b:t};return tt.runKernel("Add",n)}function rt(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function st(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const at=V();at.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),at.registerFlag("IS_BROWSER",(()=>st())),at.registerFlag("IS_NODE",(()=>void 0!==j&&void 0!==j.versions&&void 0!==j.versions.node)),at.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),at.registerFlag("PROD",(()=>!1)),at.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>at.getBool("DEBUG"))),at.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),at.registerFlag("IS_TEST",(()=>!1)),at.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));for(var it=function(e){var t,n,r=function(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");-1===n&&(n=t);return[n,n===t?0:4-n%4]}(e),s=r[0],a=r[1],i=new ct(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),o=0,u=a>0?s-4:s;for(n=0;n<u;n+=4)t=lt[e.charCodeAt(n)]<<18|lt[e.charCodeAt(n+1)]<<12|lt[e.charCodeAt(n+2)]<<6|lt[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;2===a&&(t=lt[e.charCodeAt(n)]<<2|lt[e.charCodeAt(n+1)]>>4,i[o++]=255&t);1===a&&(t=lt[e.charCodeAt(n)]<<10|lt[e.charCodeAt(n+1)]<<4|lt[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t);return i},ot=function(e){for(var t,n=e.length,r=n%3,s=[],a=16383,i=0,o=n-r;i<o;i+=a)s.push(dt(e,i,i+a>o?o:i+a));1===r?(t=e[n-1],s.push(ut[t>>2]+ut[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],s.push(ut[t>>10]+ut[t>>4&63]+ut[t<<2&63]+"="));return s.join("")},ut=[],lt=[],ct="undefined"!=typeof Uint8Array?Uint8Array:Array,ht=0,pt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".length;ht<pt;++ht)ut[ht]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"[ht],lt["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(ht)]=ht;function dt(e,t,n){for(var r,s,a=[],i=t;i<n;i+=3)r=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(ut[(s=r)>>18&63]+ut[s>>12&63]+ut[s>>6&63]+ut[63&s]);return a.join("")}lt["-".charCodeAt(0)]=62,lt["_".charCodeAt(0)]=63;var ft=function(e,t,n,r,s){var a,i,o=8*s-r-1,u=(1<<o)-1,l=u>>1,c=-7,h=n?s-1:0,p=n?-1:1,d=e[t+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+e[t+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=r;c>0;i=256*i+e[t+h],h+=p,c-=8);if(0===a)a=1-l;else{if(a===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,r),a-=l}return(d?-1:1)*i*Math.pow(2,a-r)},mt=function(e,t,n,r,s,a){var i,o,u,l=8*a-s-1,c=(1<<l)-1,h=c>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(t*u-1)*Math.pow(2,s),i+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;e[n+d]=255&o,d+=f,o/=256,s-=8);for(i=i<<s|o,l+=s;l>0;e[n+d]=255&i,d+=f,i/=256,l-=8);e[n+d-f]|=128*m},gt="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null,yt=xt;function bt(e){if(e>2147483647)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,xt.prototype),t}function xt(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return kt(e)}return wt(e,t,n)}function wt(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!xt.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|Et(e,t),r=bt(n),s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Zt(e,Uint8Array)){var t=new Uint8Array(e);return Nt(t.buffer,t.byteOffset,t.byteLength)}return It(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Zt(e,ArrayBuffer)||e&&Zt(e.buffer,ArrayBuffer))return Nt(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(Zt(e,SharedArrayBuffer)||e&&Zt(e.buffer,SharedArrayBuffer)))return Nt(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return xt.from(r,t,n);var s=function(e){if(xt.isBuffer(e)){var t=0|St(e.length),n=bt(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Jt(e.length)?bt(0):It(e);if("Buffer"===e.type&&Array.isArray(e.data))return It(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return xt.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function vt(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function kt(e){return vt(e),bt(e<0?0:0|St(e))}function It(e){for(var t=e.length<0?0:0|St(e.length),n=bt(t),r=0;r<t;r+=1)n[r]=255&e[r];return n}function Nt(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,xt.prototype),r}function St(e){if(e>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|e}function Et(e,t){if(xt.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Zt(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;for(var s=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Kt(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Xt(e).length;default:if(s)return r?-1:Kt(e).length;t=(""+t).toLowerCase(),s=!0}}function Tt(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Bt(this,t,n);case"utf8":case"utf-8":return Lt(this,t,n);case"ascii":return zt(this,t,n);case"latin1":case"binary":return Pt(this,t,n);case"base64":return Ot(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Wt(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function Ct(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function $t(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Jt(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=xt.from(t,r)),xt.isBuffer(t))return 0===t.length?-1:At(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):At(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function At(e,t,n,r,s){var a,i=1,o=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;i=2,o/=2,u/=2,n/=2}function l(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(s){var c=-1;for(a=n;a<o;a++)if(l(e,a)===l(t,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===u)return c*i}else-1!==c&&(a-=a-c),c=-1}else for(n+u>o&&(n=o-u),a=n;a>=0;a--){for(var h=!0,p=0;p<u;p++)if(l(e,a+p)!==l(t,p)){h=!1;break}if(h)return a}return-1}function Rt(e,t,n,r){n=Number(n)||0;var s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;var a=t.length;r>a/2&&(r=a/2);for(var i=0;i<r;++i){var o=parseInt(t.substr(2*i,2),16);if(Jt(o))return i;e[n+i]=o}return i}function _t(e,t,n,r){return Yt(Kt(t,e.length-n),e,n,r)}function Dt(e,t,n,r){return Yt(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function Ft(e,t,n,r){return Yt(Xt(t),e,n,r)}function Mt(e,t,n,r){return Yt(function(e,t){for(var n,r,s,a=[],i=0;i<e.length&&!((t-=2)<0);++i)r=(n=e.charCodeAt(i))>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function Ot(e,t,n){return 0===t&&n===e.length?ot(e):ot(e.slice(t,n))}function Lt(e,t,n){n=Math.min(e.length,n);for(var r=[],s=t;s<n;){var a,i,o,u,l=e[s],c=null,h=l>239?4:l>223?3:l>191?2:1;if(s+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(a=e[s+1]))&&(u=(31&l)<<6|63&a)>127&&(c=u);break;case 3:a=e[s+1],i=e[s+2],128==(192&a)&&128==(192&i)&&(u=(15&l)<<12|(63&a)<<6|63&i)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:a=e[s+1],i=e[s+2],o=e[s+3],128==(192&a)&&128==(192&i)&&128==(192&o)&&(u=(15&l)<<18|(63&a)<<12|(63&i)<<6|63&o)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),s+=h}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}xt.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),xt.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(xt.prototype,"parent",{enumerable:!0,get:function(){if(xt.isBuffer(this))return this.buffer}}),Object.defineProperty(xt.prototype,"offset",{enumerable:!0,get:function(){if(xt.isBuffer(this))return this.byteOffset}}),xt.poolSize=8192,xt.from=function(e,t,n){return wt(e,t,n)},Object.setPrototypeOf(xt.prototype,Uint8Array.prototype),Object.setPrototypeOf(xt,Uint8Array),xt.alloc=function(e,t,n){return function(e,t,n){return vt(e),e<=0?bt(e):void 0!==t?"string"==typeof n?bt(e).fill(t,n):bt(e).fill(t):bt(e)}(e,t,n)},xt.allocUnsafe=function(e){return kt(e)},xt.allocUnsafeSlow=function(e){return kt(e)},xt.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==xt.prototype},xt.compare=function(e,t){if(Zt(e,Uint8Array)&&(e=xt.from(e,e.offset,e.byteLength)),Zt(t,Uint8Array)&&(t=xt.from(t,t.offset,t.byteLength)),!xt.isBuffer(e)||!xt.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},xt.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},xt.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return xt.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=xt.allocUnsafe(t),s=0;for(n=0;n<e.length;++n){var a=e[n];if(Zt(a,Uint8Array))s+a.length>r.length?xt.from(a).copy(r,s):Uint8Array.prototype.set.call(r,a,s);else{if(!xt.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,s)}s+=a.length}return r},xt.byteLength=Et,xt.prototype._isBuffer=!0,xt.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)Ct(this,t,t+1);return this},xt.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)Ct(this,t,t+3),Ct(this,t+1,t+2);return this},xt.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)Ct(this,t,t+7),Ct(this,t+1,t+6),Ct(this,t+2,t+5),Ct(this,t+3,t+4);return this},xt.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?Lt(this,0,e):Tt.apply(this,arguments)},xt.prototype.toLocaleString=xt.prototype.toString,xt.prototype.equals=function(e){if(!xt.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===xt.compare(this,e)},xt.prototype.inspect=function(){var e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},gt&&(xt.prototype[gt]=xt.prototype.inspect),xt.prototype.compare=function(e,t,n,r,s){if(Zt(e,Uint8Array)&&(e=xt.from(e,e.offset,e.byteLength)),!xt.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;for(var a=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(t>>>=0),o=Math.min(a,i),u=this.slice(r,s),l=e.slice(t,n),c=0;c<o;++c)if(u[c]!==l[c]){a=u[c],i=l[c];break}return a<i?-1:i<a?1:0},xt.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},xt.prototype.indexOf=function(e,t,n){return $t(this,e,t,n,!0)},xt.prototype.lastIndexOf=function(e,t,n){return $t(this,e,t,n,!1)},xt.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return Rt(this,e,t,n);case"utf8":case"utf-8":return _t(this,e,t,n);case"ascii":case"latin1":case"binary":return Dt(this,e,t,n);case"base64":return Ft(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Mt(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},xt.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function zt(e,t,n){var r="";n=Math.min(e.length,n);for(var s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function Pt(e,t,n){var r="";n=Math.min(e.length,n);for(var s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function Bt(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var s="",a=t;a<n;++a)s+=Qt[e[a]];return s}function Wt(e,t,n){for(var r=e.slice(t,n),s="",a=0;a<r.length-1;a+=2)s+=String.fromCharCode(r[a]+256*r[a+1]);return s}function Vt(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function Ut(e,t,n,r,s,a){if(!xt.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function Gt(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Ht(e,t,n,r,s){return t=+t,n>>>=0,s||Gt(e,0,n,4),mt(e,t,n,r,23,4),n+4}function jt(e,t,n,r,s){return t=+t,n>>>=0,s||Gt(e,0,n,8),mt(e,t,n,r,52,8),n+8}xt.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,xt.prototype),r},xt.prototype.readUintLE=xt.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||Vt(e,t,this.length);for(var r=this[e],s=1,a=0;++a<t&&(s*=256);)r+=this[e+a]*s;return r},xt.prototype.readUintBE=xt.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||Vt(e,t,this.length);for(var r=this[e+--t],s=1;t>0&&(s*=256);)r+=this[e+--t]*s;return r},xt.prototype.readUint8=xt.prototype.readUInt8=function(e,t){return e>>>=0,t||Vt(e,1,this.length),this[e]},xt.prototype.readUint16LE=xt.prototype.readUInt16LE=function(e,t){return e>>>=0,t||Vt(e,2,this.length),this[e]|this[e+1]<<8},xt.prototype.readUint16BE=xt.prototype.readUInt16BE=function(e,t){return e>>>=0,t||Vt(e,2,this.length),this[e]<<8|this[e+1]},xt.prototype.readUint32LE=xt.prototype.readUInt32LE=function(e,t){return e>>>=0,t||Vt(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},xt.prototype.readUint32BE=xt.prototype.readUInt32BE=function(e,t){return e>>>=0,t||Vt(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},xt.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||Vt(e,t,this.length);for(var r=this[e],s=1,a=0;++a<t&&(s*=256);)r+=this[e+a]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*t)),r},xt.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||Vt(e,t,this.length);for(var r=t,s=1,a=this[e+--r];r>0&&(s*=256);)a+=this[e+--r]*s;return a>=(s*=128)&&(a-=Math.pow(2,8*t)),a},xt.prototype.readInt8=function(e,t){return e>>>=0,t||Vt(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},xt.prototype.readInt16LE=function(e,t){e>>>=0,t||Vt(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},xt.prototype.readInt16BE=function(e,t){e>>>=0,t||Vt(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},xt.prototype.readInt32LE=function(e,t){return e>>>=0,t||Vt(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},xt.prototype.readInt32BE=function(e,t){return e>>>=0,t||Vt(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},xt.prototype.readFloatLE=function(e,t){return e>>>=0,t||Vt(e,4,this.length),ft(this,e,!0,23,4)},xt.prototype.readFloatBE=function(e,t){return e>>>=0,t||Vt(e,4,this.length),ft(this,e,!1,23,4)},xt.prototype.readDoubleLE=function(e,t){return e>>>=0,t||Vt(e,8,this.length),ft(this,e,!0,52,8)},xt.prototype.readDoubleBE=function(e,t){return e>>>=0,t||Vt(e,8,this.length),ft(this,e,!1,52,8)},xt.prototype.writeUintLE=xt.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t>>>=0,n>>>=0,r)||Ut(this,e,t,n,Math.pow(2,8*n)-1,0);var s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},xt.prototype.writeUintBE=xt.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t>>>=0,n>>>=0,r)||Ut(this,e,t,n,Math.pow(2,8*n)-1,0);var s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},xt.prototype.writeUint8=xt.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,1,255,0),this[t]=255&e,t+1},xt.prototype.writeUint16LE=xt.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},xt.prototype.writeUint16BE=xt.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},xt.prototype.writeUint32LE=xt.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},xt.prototype.writeUint32BE=xt.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},xt.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){var s=Math.pow(2,8*n-1);Ut(this,e,t,n,s-1,-s)}var a=0,i=1,o=0;for(this[t]=255&e;++a<n&&(i*=256);)e<0&&0===o&&0!==this[t+a-1]&&(o=1),this[t+a]=(e/i>>0)-o&255;return t+n},xt.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){var s=Math.pow(2,8*n-1);Ut(this,e,t,n,s-1,-s)}var a=n-1,i=1,o=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===o&&0!==this[t+a+1]&&(o=1),this[t+a]=(e/i>>0)-o&255;return t+n},xt.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},xt.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},xt.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},xt.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},xt.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Ut(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},xt.prototype.writeFloatLE=function(e,t,n){return Ht(this,e,t,!0,n)},xt.prototype.writeFloatBE=function(e,t,n){return Ht(this,e,t,!1,n)},xt.prototype.writeDoubleLE=function(e,t,n){return jt(this,e,t,!0,n)},xt.prototype.writeDoubleBE=function(e,t,n){return jt(this,e,t,!1,n)},xt.prototype.copy=function(e,t,n,r){if(!xt.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},xt.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!xt.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){var s=e.charCodeAt(0);("utf8"===r&&s<128||"latin1"===r)&&(e=s)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var a;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{var i=xt.isBuffer(e)?e:xt.from(e,r),o=i.length;if(0===o)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<n-t;++a)this[a+t]=i[a%o]}return this};var qt=/[^+/0-9A-Za-z-_]/g;function Kt(e,t){var n;t=t||1/0;for(var r=e.length,s=null,a=[],i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Xt(e){return it(function(e){if((e=(e=e.split("=")[0]).trim().replace(qt,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Yt(e,t,n,r){for(var s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function Zt(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Jt(e){return e!=e}var Qt=function(){for(var e="0123456789abcdef",t=new Array(256),n=0;n<16;++n)for(var r=16*n,s=0;s<16;++s)t[r+s]=e[n]+e[s];return t}();function en(e,t){let n=e;if(N(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||N(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&V().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&tn(e,r,[]),r}function tn(e,t,n){if(n=n||[],!Array.isArray(e)&&!N(e))return void u(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));u(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),u(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)tn(e[t],r,n.concat(t))}function nn(e,t,n,r){if(null!=e&&("numeric"!==e&&e!==t||"numeric"===e&&"string"===t))throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}function rn(e,t,n,r="numeric"){if(e instanceof De)return nn(r,e.dtype,t,n),e;let s=C(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),nn(r,s,t,n),null==e||!N(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=en(e,s);N(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?ye(e,s):h(e,[],!0);return tt.makeTensor(i,a,s)}function sn(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>rn(e,`${t}[${r}]`,n)),r)}function an(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...e)=>{tt.startScope(n);try{const t=r(...e);return B(t)&&console.error("Cannot return a Promise inside of tidy."),tt.endScope(t),t}catch(e){throw tt.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const on=an({complex_:function(e,t){const n=rn(e,"real","complex"),r=rn(t,"imag","complex");l(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return tt.runKernel("Complex",s)}});function un(e,t,n,r){if(null==r&&(r=C(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!N(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){L(t);const e=p(t),r=p(n);u(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==p(t.slice(e));u(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return N(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?ye(e,r):h(e,[],!0),tt.makeTensor(e,t,r)}function ln(e,t,n){return un(e,t,en(e,n),n)}const cn={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var hn=yt;async function pn(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:dn(await Promise.all(r)),specs:n}}function dn(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const fn=void 0!==hn&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function mn(e){return fn?hn.byteLength(e):new Blob([e]).size}function gn(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function yn(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:mn(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:mn(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function bn(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[s]=o}return new Float32Array(s)}}class xn{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==xn.instance&&(xn.instance=new xn),xn.instance}static registerSaveRouter(e){xn.getInstance().saveRouters.push(e)}static registerLoadRouter(e){xn.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return xn.getHandlers(e,"save")}static getLoadHandlers(e,t){return xn.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?xn.getInstance().loadRouters:xn.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const wn=e=>xn.getSaveHandlers(e);function vn(){if(!V().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function kn(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class In{constructor(e){if(this.indexedDB=vn(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>kn(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=yn(t),a=s.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction("models_store","readwrite");const o=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{i=a.objectStore("model_info_store");const t=i.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(o.error)),t.onerror=e=>(s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}In.URL_SCHEME="indexeddb://";const Nn=e=>{return V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(In.URL_SCHEME)?(t=e.slice(In.URL_SCHEME.length),new In(t)):null;var t};xn.registerSaveRouter(Nn),xn.registerLoadRouter(Nn);class Sn{constructor(){this.indexedDB=vn()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>kn(n),n.onsuccess=()=>{const r=n.result,s=r.transaction("model_info_store","readonly"),a=s.objectStore("model_info_store").getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(In.URL_SCHEME)?t.slice(In.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>kn(r),r.onsuccess=()=>{const s=r.result,a=s.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{u=s.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const En="tensorflowjs_models",Tn="info",Cn="model_topology",$n="weight_specs",An="weight_data",Rn="model_metadata";function _n(e){return{info:[En,e,Tn].join("/"),topology:[En,e,Cn].join("/"),weightSpecs:[En,e,$n].join("/"),weightData:[En,e,An].join("/"),modelMetadata:[En,e,Rn].join("/")}}function Dn(e){const t=e.split("/");if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}class Fn{constructor(e){if(!V().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=_n(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=yn(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(fn)return hn.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(fn){const t=hn.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Fn.URL_SCHEME="localstorage://";const Mn=e=>{return V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Fn.URL_SCHEME)?(t=e.slice(Fn.URL_SCHEME.length),new Fn(t)):null;var t};xn.registerSaveRouter(Mn),xn.registerLoadRouter(Mn);class On{constructor(){u(V().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),u("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=En+"/",n="/"+Tn;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[Dn(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=_n(e=(t=e).startsWith(Fn.URL_SCHEME)?t.slice(Fn.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}class Ln{constructor(){this.managers={}}static getInstance(){return null==Ln.instance&&(Ln.instance=new Ln),Ln.instance}static registerManager(e,t){u(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),u(e.length>0,(()=>"scheme must not be an empty string."));const n=Ln.getInstance();u(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}class zn{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(V().get("IS_BROWSER")){V().setPlatform("browser",new zn);try{Ln.registerManager(Fn.URL_SCHEME,new On)}catch(e){}try{Ln.registerManager(In.URL_SCHEME,new Sn)}catch(e){}}var Pn=!1;function Bn(){return Pn||(Pn=!0),{}}const Wn=()=>Bn();let Vn;class Un{constructor(){this.util=Bn(),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=V().global.fetch?V().global.fetch(e,t):(null==Vn&&(Vn=Wn()),Vn(e,t))}now(){const e=j.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function Gn(e,t="float32",n){return t=t||"float32",L(e),new $e(e,t,n)}V().get("IS_NODE")&&V().setPlatform("node",new Un);const Hn=an({cast_:function(e,t){const n=rn(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return tt.runKernel("Cast",r,s)}});const jn=an({clone_:function(e){const t={x:rn(e,"x","clone",null)};return tt.runKernel("Identity",t)}});et();Re={buffer:Gn,cast:Hn,clone:jn,print:function(e,t=!1){console.log(e.toString(t))}};function qn(e){return new Promise((e=>setTimeout(e))).then(e)}class Kn{constructor(e){if(!V().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Kn.URL_SCHEME)&&(e=e.slice(Kn.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer);const s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await qn((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await qn((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:yn(e)}}}}Kn.URL_SCHEME="downloads://";function Xn(e,t,n,r){!function(e){u(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){u(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),u(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),u(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++s/e.length*(r-n);return t(i),a})),a))))}xn.registerSaveRouter((e=>V().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Kn.URL_SCHEME)?function(e="model"){return new Kn(e)}(e.slice(Kn.URL_SCHEME.length)):null));class Yn{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(u("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=V().platform.fetch,u(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&u(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:yn(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,s=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,u=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,c;if(null!=r){const e=await this.loadWeights(r);[l,c]=e}const h={modelTopology:n,weightSpecs:l,weightData:c,generatedBy:s,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=u&&(h.userDefinedMetadata=u);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(s+e+r);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,gn(await async function(e,t){null==t&&(t={});const n=null==t.fetchFunc?V().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Xn(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Xn(s,t.onProgress,.5,1)}(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Zn(e){return null!=e.match(Yn.URL_SCHEME_REGEX)}Yn.URL_SCHEME_REGEX=/^https?:\/\//;const Jn=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Zn(e))):Zn(e),n)return Qn(e,t)}return null};function Qn(e,t){return new Yn(e,t)}function er(e,t){return Qn(e,t)}xn.registerSaveRouter(Jn),xn.registerLoadRouter(Jn);const tr=an({matMul_:function(e,t,n=!1,r=!1){let s=rn(e,"a","matMul"),a=rn(t,"b","matMul");[s,a]=Ke(s,a);const i={a:s,b:a},o={transposeA:n,transposeB:r};return tt.runKernel("BatchMatMul",i,o)}});const nr=an({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:rn(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:r};return tt.runKernel("OneHot",s,a)}});const rr=an({transpose_:function(e,t){const n=rn(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),u(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{u(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:t};return tt.runKernel("Transpose",r,s)}});an({confusionMatrix_:function(e,t,n){const r=rn(e,"labels","confusionMatrix"),s=rn(t,"predictions","confusionMatrix");u(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),u(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),u(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),u(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),u(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=nr(Hn(r,"int32"),n),i=nr(Hn(s,"int32"),n),o=rr(a),l=tr(o,i);return Hn(l,"int32")}});let sr;const ar=an({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else{if(null==e.getContext)throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=ce("FromPixels",tt.backendName)){const n={pixels:e},r={numChannels:t};return tt.runKernel("FromPixels",n,r)}const[o,u]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let l,h;if(i?l=e.getContext("2d").getImageData(0,0,o,u).data:r||n?l=e.data:(a||s)&&(null==sr&&(sr=document.createElement("canvas").getContext("2d")),sr.canvas.width=o,sr.canvas.height=u,sr.drawImage(e,0,0,o,u),l=sr.getImageData(0,0,o,u).data),4===t)h=new Int32Array(l);else{const e=o*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=l[4*n+e]}return function(e,t,n){if(c(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=en(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return un(e,t,r,n)}(h,[u,o,t],"int32")}});function ir(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===p(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let e=0;e<s.length-1;++e)i*=s[e];const o=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=o[e],u.push(o[e]);const c=[...R(e.shape).map((e=>e/l)),1].slice(0,a);return[u,i,l,c]}function or(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}function ur(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let e=s;e<a;++e)i*=n[e];const o=s<1?1:s;return{sliceRank:s,numUpdates:p(t.shape)/o,sliceSize:i,strides:[...R(n.slice(0,s)),1],outputSize:p(n)}}function lr(e,t,n){const r=e.shape.length;u(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),u(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)u(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function cr(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function hr(e,t,n){return n<=e?n:n-(t-1)}function pr(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function dr(e,t,n,r,s,a,o,u,l){const c=e.length;let h=new Array(c),p=new Array(c),d=new Array(c);if(t.length&&n>0){const l=t[0],c=n+1;h=function(e,t,n,r,s){const a=[...s],i=pr(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=hr(t,n,s);let o=r[i];e&1<<i&&(o=0),a[s]=o}return a}(o,l,c,r,e),p=function(e,t,n,r,s){const a=[...s],o=pr(n,t);for(let s=0;s<a.length;s++)if(o.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=hr(t,n,s);let o=r[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=i(0,a[e],s[e])}return a}(u,l,c,s,e),d=function(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}(a,l,c,e)}else for(let t=0;t<c;t++)h[t]=mr(o,r,a,e,t,l),p[t]=gr(u,s,a,e,t,l),d[t]=fr(a,t,l);return{begin:h,end:p,strides:d}}function fr(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function mr(e,t,n,r,s,a){let o=t[s];const u=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=i(0,o,l-1),o}function gr(e,t,n,r,s,a){let o=t[s];const u=n[s]||1;(e&1<<s||a&1<<s||null==o)&&(o=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return o<0&&(o+=l),o=u>0?i(0,o,l):i(-1,o,l-1),o}function yr(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function br(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function xr(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{u(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(u(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function wr(e,t,n,r,s,a,i,o,u){let l=t.slice(),c=n.slice(),h=r;null==r&&(h=new Array(l.length));const p=cr(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-l.length,f=cr(o),m=e.slice();f.forEach((e=>{l[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=dr(m,p,d,l,c,h,s,a,i);l=g,c=y,h=b;const x=cr(u);x.forEach((e=>{c[e]=l[e]+1,h[e]=1}));const w=function(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}(l,c,h),v=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:l,$end:c,$strides:h,size:w,newShape:m,outShape:v}}class vr{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class kr{constructor(){this.classNameMap={}}static getMap(){return null==kr.instance&&(kr.instance=new kr),kr.instance}static register(e){kr.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ir(e){u(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),u("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),u(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),kr.register(e)}function Nr(e){V().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Sr(){return tt}function Er(){return tt.memory()}function Tr(e,t){return tt.tidy(e,t)}function Cr(e){Ye(e).forEach((e=>e.dispose()))}function $r(e){return tt.keep(e)}function Ar(e,t,n=1){return tt.registerBackend(e,t,n)}function Rr(e){return tt.customGrad(e)}_e=Nr;const _r=an({abs_:function(e){const t=rn(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return tt.runKernel("ComplexAbs",e)}{const e={x:t};return tt.runKernel("Abs",e)}}});const Dr=an({acos_:function(e){const t={x:rn(e,"x","acos")};return tt.runKernel("Acos",t)}});const Fr=an({acosh_:function(e){const t={x:rn(e,"x","acosh")};return tt.runKernel("Acosh",t)}});const Mr=an({add_:function(e,t){let n=rn(e,"a","add"),r=rn(t,"b","add");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("Add",s)}});const Or=an({addN_:function(e){u(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),u(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>rn(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!d(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return tt.runKernel("AddN",r)}});const Lr=an({all_:function(e,t=null,n=!1){const r={x:rn(e,"x","all","bool")},s={axis:t,keepDims:n};return tt.runKernel("All",r,s)}});const zr=an({any_:function(e,t=null,n=!1){const r={x:rn(e,"x","any","bool")},s={axis:t,keepDims:n};return tt.runKernel("Any",r,s)}});const Pr=an({argMax_:function(e,t=0){const n={x:rn(e,"x","argMax")},r={axis:t};return tt.runKernel("ArgMax",n,r)}});const Br=an({argMin_:function(e,t=0){const n={x:rn(e,"x","argMin")},r={axis:t};return tt.runKernel("ArgMin",n,r)}});const Wr=an({asin_:function(e){const t={x:rn(e,"x","asin")};return tt.runKernel("Asin",t)}});const Vr=an({asinh_:function(e){const t={x:rn(e,"x","asinh")};return tt.runKernel("Asinh",t)}});const Ur=an({atan_:function(e){const t={x:rn(e,"x","atan")};return tt.runKernel("Atan",t)}});const Gr=an({atan2_:function(e,t){let n=rn(e,"a","atan2"),r=rn(t,"b","atan2");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("Atan2",s)}});const Hr=an({atanh_:function(e){const t={x:rn(e,"x","atanh")};return tt.runKernel("Atanh",t)}});function jr(e,t,n,r,s="NHWC",a){return Xr(e,[...t,e[3]],n,a,r,null,null,ss(s))}function qr(e,t,n,r,s,a,i="channelsLast"){const[o,u]=Jr(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,e[1],e[1]]}return Xr(e,l,n,r,s,a,!1,i)}function Kr(e,t,n,r,s,a,i="NDHWC"){const[o,u,l]=Qr(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return Yr(e,c,n,r,s,!1,h,a)}function Xr(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c]=e}const[p,d,,f]=t,[m,g]=Jr(n),[y,b]=Jr(r),x=es(p,y),w=es(d,b),{padInfo:v,outHeight:k,outWidth:I}=function(e,t,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Zr(e,t,n));const a=e[0],i=e[1],o=ts((a-t+2*r)/n+1,s),u=ts((i-t+2*r)/n+1,s);return[o,u]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(e/2),p=e-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=ts((t-a+p+d)/r+1,o),h=ts((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[u,N,k,I]:"channelsLast"===o&&(S=[u,k,I,N]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:k,outWidth:I,outChannels:N,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Yr(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Qr(n),[w,v,k]=Qr(r),I=es(d,w),N=es(f,v),S=es(m,k),{padInfo:E,outDepth:T,outHeight:C,outWidth:$}=function(e,t,n,r,s,a,i,o,u,l,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Zr(e,t,r));const i=e[0],o=e[1],u=e[2],l=ts((i-t+2*s)/r+1,a),c=ts((o-t+2*s)/r+1,a),h=ts((u-t+2*s)/r+1,a);return[l,c,h,n]}([t,n,r,1],o,1,s,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const e=(p-1)*s+o-t,c=(d-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,l,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[u,A,T,C,$]:"channelsLast"===i&&(R=[u,T,C,$,A]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:C,outWidth:$,outChannels:A,padInfo:E,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function Zr(e,t,n,r=1){const s=es(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Jr(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Qr(e){return"number"==typeof e?[e,e,e]:e}function es(e,t){return t<=1?e:e+(e-1)*(t-1)}function ts(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function ns(e){const[t,n,r]=Jr(e);return 1===t&&1===n&&1===r}function rs(e,t){return ns(e)||ns(t)}function ss(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const as=an({reshape_:function(e,t){const n={x:rn(e,"x","reshape",null)},r={shape:t};return tt.runKernel("Reshape",n,r)}});const is=an({avgPool_:function(e,t,n,r,s){const a=rn(e,"x","avgPool","float32");u(rs(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=as(a,[1,a.shape[0],a.shape[1],a.shape[2]])),u(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=s&&u(f(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let h=tt.runKernel("AvgPool",l,c);return h=Hn(h,a.dtype),o?as(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const os=an({avgPool3d_:function(e,t,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Nr("dilations is deprecated, this field will be gone in v3.0.0.");const o=rn(e,"x","avgPool3d","float32");let l=o,c=!1;4===o.rank&&(c=!0,l=as(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),u(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),u("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),u(rs(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&u(f(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const h={x:l},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let d=tt.runKernel("AvgPool3D",h,p);return d=Hn(d,l.dtype),c?as(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const us=an({batchToSpaceND_:function(e,t,n){const r=rn(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));u(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),u(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),u(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},i={blockShape:t,crops:n};return tt.runKernel("BatchToSpaceND",a,i)}});const ls=an({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=rn(e,"x","batchNorm"),o=rn(t,"mean","batchNorm"),l=rn(n,"variance","batchNorm");let c,h;null!=s&&(c=rn(s,"scale","batchNorm")),null!=r&&(h=rn(r,"offset","batchNorm")),u(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),u(null==h||o.rank===h.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),u(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?as(e,[1,1,1,e.size]):2===e.rank?as(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?as(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:c,offset:h,mean:o,variance:l},d={varianceEpsilon:a},f=tt.runKernel("FusedBatchNorm",p,d);return as(f,i.shape)}});const cs=an({batchNorm2d_:function(e,t,n,r,s,a){const i=rn(e,"x","batchNorm"),o=rn(t,"mean","batchNorm"),l=rn(n,"variance","batchNorm");let c,h;return null!=s&&(c=rn(s,"scale","batchNorm")),null!=r&&(h=rn(r,"offset","batchNorm")),u(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),u(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),u(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&u(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=h&&u(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`)),ls(i,o,l,h,c,a)}});const hs=an({batchNorm3d_:function(e,t,n,r,s,a){const i=rn(e,"x","batchNorm"),o=rn(t,"mean","batchNorm"),l=rn(n,"variance","batchNorm");let c,h;return null!=s&&(c=rn(s,"scale","batchNorm")),null!=r&&(h=rn(r,"offset","batchNorm")),u(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),u(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),u(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&u(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=h&&u(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`)),ls(i,o,l,h,c,a)}});const ps=an({batchNorm4d_:function(e,t,n,r,s,a){const i=rn(e,"x","batchNorm"),o=rn(t,"mean","batchNorm"),l=rn(n,"variance","batchNorm");let c,h;return null!=s&&(c=rn(s,"scale","batchNorm")),null!=r&&(h=rn(r,"offset","batchNorm")),u(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),u(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),u(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&u(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=h&&u(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`)),ls(i,o,l,h,c,a)}});const ds=an({bincount_:function(e,t,n){const r=rn(e,"x","bincount"),s=rn(t,"weights","bincount");u("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),u(n>=0,(()=>`size must be non-negative, but got ${n}.`)),u(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},i={size:n};return tt.runKernel("Bincount",a,i)}});const fs=an({broadcastTo_:function(e,t){let n=rn(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=as(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return jn(n);const i={x:n},o={reps:a};return tt.runKernel("Tile",i,o)}});const ms=an({ceil_:function(e){const t={x:rn(e,"x","ceil")};return tt.runKernel("Ceil",t)}});const gs=an({clipByValue_:function(e,t,n){const r=rn(e,"x","clipByValue");u(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:t,clipValueMax:n};return tt.runKernel("ClipByValue",s,a)}});const ys=an({concat_:function(e,t=0){u(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=sn(e,"tensors","concat");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return jn(n[0]);const r=n,s={axis:t};return tt.runKernel("Concat",r,s)}});const bs=an({concat1d_:function(e){return ys(e,0)}});const xs=an({concat2d_:function(e,t){return ys(e,t)}});const ws=an({concat3d_:function(e,t){return ys(e,t)}});const vs=an({concat4d_:function(e,t){return ys(e,t)}});const ks=an({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=rn(e,"x","conv2d"),l=rn(t,"filter","conv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=as(o,[1,o.shape[0],o.shape[1],o.shape[2]])),u(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),u(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=i&&u(f(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p="NHWC"===s?c.shape[3]:c.shape[1];u(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),u(rs(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const d={x:c,filter:l},m={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},g=tt.runKernel("Conv2D",d,m);return h?as(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Is=an({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=rn(e,"x","conv1d"),l=rn(t,"filter","conv1d");let c=o,h=!1;2===o.rank&&(h=!0,c=as(o,[1,o.shape[0],o.shape[1]])),u(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),u(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=i&&u(f(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),u(c.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),u(rs(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),u("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=as(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=as(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=ks(d,p,[1,n],r,"NHWC",[1,a],i);return as(m,h?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}});const Ns=an({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){u(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,c=!1;3===t.rank&&(c=!0,l=as(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),u(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),u(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),u(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===a?o[3]:o[1],p="NHWC"===a?l.shape[3]:l.shape[1];u(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),u(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&u(f(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const d={dy:l,filter:n},m={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},g=tt.runKernel("Conv2DBackpropInput",d,m);return c?as(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Ss=an({conv2dTranspose_:function(e,t,n,r,s,a){const i=rn(e,"x","conv2dTranspose"),o=rn(t,"filter","conv2dTranspose");return Ns(n,i,o,r,s,"NHWC",a)}});const Es=an({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=rn(e,"x","conv3d"),o=rn(t,"filter","conv3d");let l=i,c=!1;4===i.rank&&(c=!0,l=as(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),u(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),u(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),u(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),u(rs(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),u("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const h={x:l,filter:o},p={strides:n,pad:r,dataFormat:s,dilations:a},d=tt.runKernel("Conv3D",h,p);return c?as(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Ts=an({cos_:function(e){const t={x:rn(e,"x","cos")};return tt.runKernel("Cos",t)}});const Cs=an({cosh_:function(e){const t={x:rn(e,"x","cosh")};return tt.runKernel("Cosh",t)}});const $s=an({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:rn(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return tt.runKernel("Cumsum",s,a)}});const As=an({denseBincount_:function(e,t,n,r=!1){const s=rn(e,"x","denseBincount"),a=rn(t,"weights","denseBincount");u("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),u(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),u(n>=0,(()=>`size must be non-negative, but got ${n}.`)),u(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const i={x:s,weights:a},o={size:n,binaryOutput:r};return tt.runKernel("DenseBincount",i,o)}});const Rs=an({depthToSpace_:function(e,t,n="NHWC"){const r=rn(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];u(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),u(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),u(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},l={blockSize:t,dataFormat:n};return tt.runKernel("DepthToSpace",o,l)}});const _s=an({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=rn(e,"x","depthwiseConv2d"),l=rn(t,"filter","depthwiseConv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=as(o,[1,o.shape[0],o.shape[1],o.shape[2]])),u(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),u(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),u(c.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&u(f(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={x:c,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},m=tt.runKernel("DepthwiseConv2dNative",p,d);return h?as(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ds=an({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=rn(e,"x","dilation2d"),o=rn(t,"filter","dilation2d");u(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),u(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),u("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,c=!1;3===i.rank&&(l=as(i,[1,i.shape[0],i.shape[1],i.shape[2]]),c=!0);const h={x:l,filter:o},p={strides:n,pad:r,dilations:s},d=tt.runKernel("Dilation2D",h,p);return c?as(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Fs=an({floorDiv_:function(e,t){let n=rn(e,"a","floorDiv"),r=rn(t,"b","floorDiv");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("FloorDiv",s)}});const Ms=an({div_:function(e,t){let n=rn(e,"a","div"),r=rn(t,"b","div");if([n,r]=Ke(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Fs(n,r);const s={a:n,b:r};return tt.runKernel("RealDiv",s,{})}});function Os(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function Ls(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function zs(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const Ps=an({equal_:function(e,t){let n=rn(e,"a","equal"),r=rn(t,"b","equal");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("Equal",s)}});const Bs=an({where_:function(e,t,n){const r=rn(t,"a","where"),s=rn(n,"b","where"),a=rn(e,"condition","where","bool"),i=zs(r.shape,s.shape),o=fs(r,i),c=fs(s,i);1===a.rank&&u(a.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&l(a.shape,c.shape,"Error in where: ");const h={condition:a,t:o,e:c};return tt.runKernel("Select",h)}});const Ws=an({zerosLike_:function(e){const t={x:rn(e,"x","zerosLike")};return tt.runKernel("ZerosLike",t)}});const Vs=an({divNoNan_:function(e,t){let n=rn(e,"a","div"),r=rn(t,"b","div");[n,r]=Ke(n,r);const s=Ms(n,r),a=Ws(s),i=Ps(r,a);return Bs(i,a,s)}});const Us=an({elu_:function(e){const t={x:rn(e,"x","elu")};return tt.runKernel("Elu",t)}});const Gs=an({erf_:function(e){let t=rn(e,"x","erf");u("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Hn(t,"float32"));const n={x:t};return tt.runKernel("Erf",n)}});const Hs=an({exp_:function(e){const t={x:rn(e,"x","exp")};return tt.runKernel("Exp",t)}});const js=an({expandDims_:function(e,t=0){const n=rn(e,"x","expandDims",null);u(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return tt.runKernel("ExpandDims",r,s)}});const qs=an({expm1_:function(e){const t={x:rn(e,"x","expm1")};return tt.runKernel("Expm1",t)}});const Ks=an({tile_:function(e,t){const n=rn(e,"x","tile",null);u(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return tt.runKernel("Tile",r,s)}});const Xs=an({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=Gn([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const i=as(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Ks(js(i,0),[n[0],1,1]);if(2===n.length)return Ks(js(js(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ks(js(js(js(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Ys(e,t,n){const r={shape:e,value:t,dtype:n};return tt.runKernel("Fill",{},r)}const Zs=an({floor_:function(e){const t={x:rn(e,"x","floor")};return tt.runKernel("Floor",t)}});const Js=an({gather_:function(e,t,n=0,r=0){const s={x:rn(e,"x","gather"),indices:rn(t,"indices","gather","int32")},a={axis:n,batchDims:r};return tt.runKernel("GatherV2",s,a)}});const Qs=an({greater_:function(e,t){let n=rn(e,"a","greater"),r=rn(t,"b","greater");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("Greater",s)}});const ea=an({greaterEqual_:function(e,t){let n=rn(e,"a","greaterEqual"),r=rn(t,"b","greaterEqual");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("GreaterEqual",s)}});const ta=an({imag_:function(e){const t={input:rn(e,"input","imag")};return tt.runKernel("Imag",t)}});const na=an({isFinite_:function(e){const t={x:rn(e,"x","isFinite")};return tt.runKernel("IsFinite",t)}});const ra=an({isInf_:function(e){const t={x:rn(e,"x","isInf")};return tt.runKernel("IsInf",t)}});const sa=an({isNaN_:function(e){const t={x:rn(e,"x","isNaN")};return tt.runKernel("IsNan",t)}});const aa=an({leakyRelu_:function(e,t=.2){const n={x:rn(e,"x","leakyRelu")},r={alpha:t};return tt.runKernel("LeakyRelu",n,r)}});const ia=an({less_:function(e,t){let n=rn(e,"a","less"),r=rn(t,"b","less");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("Less",s)}});const oa=an({lessEqual_:function(e,t){let n=rn(e,"a","lessEqual"),r=rn(t,"b","lessEqual");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("LessEqual",s)}});function ua(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return tt.runKernel("LinSpace",{},r)}const la=an({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=rn(e,"x","localResponseNormalization");u(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),u(f(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=as(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},c={depthRadius:t,bias:n,alpha:r,beta:s},h=tt.runKernel("LRN",l,c);return o?as(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const ca=an({log_:function(e){const t={x:rn(e,"x","log")};return tt.runKernel("Log",t)}});const ha=an({log1p_:function(e){const t={x:rn(e,"x","log1p")};return tt.runKernel("Log1p",t)}});const pa=an({mul_:function(e,t){let n=rn(e,"a","mul"),r=rn(t,"b","mul");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("Multiply",s)}});const da=an({neg_:function(e){const t={x:rn(e,"x","neg")};return tt.runKernel("Neg",t)}});const fa=an({sigmoid_:function(e){const t={x:rn(e,"x","sigmoid")};return tt.runKernel("Sigmoid",t)}});const ma=an({softplus_:function(e){const t={x:rn(e,"x","softplus")};return tt.runKernel("Softplus",t)}});const ga=an({logSigmoid_:function(e){const t=rn(e,"x","logSigmoid");return Rr((e=>({value:da(ma(da(e))),gradFunc:t=>pa(t,fa(da(e)))})))(t)}});const ya=an({max_:function(e,t=null,n=!1){const r={x:rn(e,"x","max")},s={reductionIndices:t,keepDims:n};return tt.runKernel("Max",r,s)}});const ba=an({sub_:function(e,t){let n=rn(e,"a","sub"),r=rn(t,"b","sub");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("Sub",s)}});const xa=an({sum_:function(e,t=null,n=!1){let r=rn(e,"x","sum");"bool"===r.dtype&&(r=Hn(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return tt.runKernel("Sum",s,a)}});const wa=an({logSoftmax_:function(e,t=-1){const n=rn(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Rr(((e,n)=>{const r=ya(e,t,!0),s=ba(e,r),a=ba(Hn(s,"float32"),ca(xa(Hs(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=Hs(r);return ba(e,pa(xa(e,t,!0),s))}}}))(n)}});const va=an({logicalAnd_:function(e,t){const n=rn(e,"a","logicalAnd","bool"),r=rn(t,"b","logicalAnd","bool");zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("LogicalAnd",s)}});const ka=an({logicalNot_:function(e){const t={x:rn(e,"x","logicalNot","bool")};return tt.runKernel("LogicalNot",t)}});const Ia=an({logicalOr_:function(e,t){const n=rn(e,"a","logicalOr","bool"),r=rn(t,"b","logicalOr","bool");zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("LogicalOr",s)}});const Na=an({maxPool_:function(e,t,n,r,s){const a=rn(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=as(a,[1,a.shape[0],a.shape[1],a.shape[2]])),u(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),u(rs(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&u(f(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:i},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s},h=tt.runKernel("MaxPool",l,c);return o?as(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Sa=an({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Nr("dilations is deprecated, this field will be gone in v3.0.0.");const o=rn(e,"x","maxPool3d");let l=o,c=!1;4===o.rank&&(c=!0,l=as(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),u(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),u("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),u(rs(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&u(f(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const h={x:l},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},d=tt.runKernel("MaxPool3D",h,p);return c?as(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Ea=an({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:rn(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},o=tt.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});const Ta=an({maximum_:function(e,t){let n=rn(e,"a","maximum"),r=rn(t,"b","maximum");[n,r]=Ke(n,r),"bool"===n.dtype&&(n=Hn(n,"int32"),r=Hn(r,"int32")),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("Maximum",s)}});const Ca=an({mean_:function(e,t=null,n=!1){const r={x:rn(e,"x","mean")},s={axis:t,keepDims:n};return tt.runKernel("Mean",r,s)}});const $a=an({min_:function(e,t=null,n=!1){const r={x:rn(e,"x","min")},s={axis:t,keepDims:n};return tt.runKernel("Min",r,s)}});const Aa=an({minimum_:function(e,t){let n=rn(e,"a","minimum"),r=rn(t,"b","minimum");[n,r]=Ke(n,r),"bool"===n.dtype&&(n=Hn(n,"int32"),r=Hn(r,"int32")),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("Minimum",s)}});const Ra=an({mirrorPad_:function(e,t,n){u("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=rn(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");u(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)u(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),u(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},i={x:r};return tt.runKernel("MirrorPad",i,a)}});const _a=an({mod_:function(e,t){let n=rn(e,"a","mod"),r=rn(t,"b","mod");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("Mod",s)}});function Da(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Fa(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function Ma(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}(e,t.map((e=>1)),t)}function Oa(e,t,n){u(Da(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function La(e,t){if(Da(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function za(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Pa(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Ba=an({square_:function(e){const t=rn(e,"x","square");return tt.runKernel("Square",{x:t},{})}});const Wa=an({moments_:function(e,t=null,n=!1){const r=x(t,(e=rn(e,"x","moments")).shape),s=Ca(e,r,n);let a=s.shape;n||(a=Ma(s.shape,r));const i=Ba(ba(Hn(e,"float32"),as(s,a)));return{mean:s,variance:Ca(i,r,n)}}});const Va=an({multinomial_:function(e,t,n,r=!1){const s=rn(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?as(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=tt.runKernel("Multinomial",o,u);return 1===i?as(l,[l.size]):l}});const Ua=an({notEqual_:function(e,t){let n=rn(e,"a","notEqual"),r=rn(t,"b","notEqual");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("NotEqual",s)}});function Ga(e,t="float32"){if("complex64"===t){const t=Ga(e,"float32"),n=Ga(e,"float32");return on(t,n)}const n=M(p(e),t);return tt.makeTensor(n,e,t)}function Ha(e,t="float32"){if("complex64"===t){const t=Ha(e,"float32"),n=Ga(e,"float32");return on(t,n)}const n=F(p(e),t);return tt.makeTensor(n,e,t)}const ja=an({onesLike_:function(e){const t={x:rn(e,"x","onesLike")};return tt.runKernel("OnesLike",t)}});const qa=an({pad_:function(e,t,n=0){const r=rn(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return tt.runKernel("PadV2",a,s)}});const Ka=an({pow_:function(e,t){let n=rn(e,"base","pow"),r=rn(t,"exp","pow");[n,r]=Ke(n,r);const s={a:n,b:r};return tt.runKernel("Pow",s)}});const Xa=an({prelu_:function(e,t){const n={x:rn(e,"x","prelu"),alpha:rn(t,"alpha","prelu")};return tt.runKernel("Prelu",n)}});const Ya=an({prod_:function(e,t=null,n=!1){let r=rn(e,"x","prod");"bool"===r.dtype&&(r=Hn(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return tt.runKernel("Prod",s,a)}});var Za={},Ja=function(){var e={exports:this};return function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function s(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new r(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,"object"==typeof e&&e,!1),e.exports}.call({}),Qa=function(){var e={exports:this};return function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new r(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,"object"==typeof e&&e,!1),e.exports}.call({}),ei=function(){var e={exports:this};return function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function s(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,"object"==typeof e&&e,!1),e.exports}.call({}),ti=function(){var e={exports:this};return function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function s(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,"object"==typeof e&&e,!1),e.exports}.call({}),ni=function(){var e={exports:this};return function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function s(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new r(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,"object"==typeof e&&e,!1),e.exports}.call({}),ri=function(){var e={exports:this};return function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function s(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new r(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,"object"==typeof e&&e,!1),e.exports}.call({}),si={};!function(e,t){var n,r=this,s=256,a=t.pow(s,6),i=t.pow(2,52),o=2*i,u=255;function l(u,l,m){var g=[],y=d(p((l=1==l?{entropy:!0}:l||{}).entropy?[u,f(e)]:null==u?function(){try{var t;return n&&(t=n.randomBytes)?t=t(s):(t=new Uint8Array(s),(r.crypto||r.msCrypto).getRandomValues(t)),f(t)}catch(t){var a=r.navigator,i=a&&a.plugins;return[+new Date,r,i,r.screen,f(e)]}}():u,3),g),b=new c(g),x=function(){for(var e=b.g(6),t=a,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=o;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,d(f(b.S),e),(l.pass||m||function(e,n,r,s){return s&&(s.S&&h(s,b),e.state=function(){return h(b,{})}),r?(t.random=e,n):e})(x,y,"global"in l?l.global:this==t,l.state)}function c(e){var t,n=e.length,r=this,a=0,i=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<s;)o[a]=a++;for(a=0;a<s;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(r.g=function(e){for(var t,n=0,a=r.i,i=r.j,o=r.S;e--;)t=o[a=u&a+1],n=n*s+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return r.i=a,r.j=i,n})(s)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(p(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function d(e,t){for(var n,r=e+"",s=0;s<r.length;)t[u&s]=u&(n^=19*t[u&s])+r.charCodeAt(s++);return f(t)}function f(e){return String.fromCharCode.apply(0,e)}if(t.seedrandom=l,d(t.random(),e),si){si=l;try{n=Bn()}catch(e){}}else 0}([],Math),si.alea=Ja,si.xor128=Qa,si.xorwow=ei,si.xorshift7=ti,si.xor4096=ni,si.tychei=ri,Za=si;class ai{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Za.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class ii{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Za.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const oi=an({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new ai(t,n,r,!1,s),i=Gn(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const ui=an({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=Gn(e,r),i=new ii(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function li(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return tt.runKernel("Range",{},s)}const ci=an({real_:function(e){const t={input:rn(e,"input","real")};return tt.runKernel("Real",t)}});const hi=an({reciprocal_:function(e){const t={x:rn(e,"x","reciprocal")};return tt.runKernel("Reciprocal",t)}});const pi=an({relu_:function(e){const t={x:rn(e,"x","relu")};return tt.runKernel("Relu",t)}});const di=an({relu6_:function(e){const t={x:rn(e,"x","relu6")};return tt.runKernel("Relu6",t)}});const fi=an({reverse_:function(e,t){const n={x:rn(e,"x","reverse")},r={dims:t};return tt.runKernel("Reverse",n,r)}});const mi=an({round_:function(e){const t={x:rn(e,"x","round")};return tt.runKernel("Round",t)}});const gi=an({rsqrt_:function(e){const t={x:rn(e,"x","rsqrt")};return tt.runKernel("Rsqrt",t)}});function yi(e,t){if((N(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&N(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return un(e,[],[],t)}const bi=an({selu_:function(e){const t={x:rn(e,"x","selu")};return tt.runKernel("Selu",t)}});const xi=an({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=rn(e,"x","separableConv2d"),l=rn(t,"depthwiseFilter","separableConv2d"),c=rn(n,"pointwiseFilter","separableConv2d");let h=o,p=!1;if(3===o.rank&&(p=!0,h=as(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");u(4===h.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`)),u(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),u(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),u(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),u(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const d=l.shape[2],f=l.shape[3];u(c.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${c.shape[2]}.`));const m=_s(h,l,r,s,i,a),g=ks(m,c,1,"valid",i);return p?as(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const wi=async function(e,t){const n=rn(e,"x","setdiff1d"),r=rn(t,"y","setdiff1d");u(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),u(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),u(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let e=0;e<s.length;e++)i.has(s[e])||o++;const l=new $e([o],n.dtype),c=new $e([o],"int32");for(let e=0,t=0;e<s.length;e++)i.has(s[e])||(l.values[t]=s[e],c.values[t]=e,t++);return[l.toTensor(),c.toTensor()]};const vi=an({sign_:function(e){const t={x:rn(e,"x","sign")};return tt.runKernel("Sign",t)}});const ki=an({sin_:function(e){const t={x:rn(e,"x","sin")};return tt.runKernel("Sin",t)}});const Ii=an({sinh_:function(e){const t={x:rn(e,"x","sinh")};return tt.runKernel("Sinh",t)}});const Ni=an({slice_:function(e,t,n){const r=rn(e,"x","slice",null);if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return tt.runKernel("Slice",s,a)}});const Si=an({slice1d_:function(e,t,n){const r=rn(e,"x","slice1d");return u(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Ni(r,[t],[n])}});const Ei=an({slice2d_:function(e,t,n){const r=rn(e,"x","slice2d");return u(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Ni(r,t,n)}});const Ti=an({slice3d_:function(e,t,n){const r=rn(e,"x","slice3d");return u(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Ni(r,t,n)}});const Ci=an({slice4d_:function(e,t,n){const r=rn(e,"x","slice4d");return u(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Ni(r,t,n)}});const $i=an({softmax_:function(e,t=-1){const n=rn(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return tt.runKernel("Softmax",r,s)}});const Ai=an({spaceToBatchND_:function(e,t,n){const r=rn(e,"x","spaceToBatchND");u(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),u(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),u(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return tt.runKernel("SpaceToBatchND",s,a)}});const Ri=an({fft_:function(e){u("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return tt.runKernel("FFT",t)}});const _i=an({ifft_:function(e){u("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return tt.runKernel("IFFT",t)}});const Di=an({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=as(e,[n,t]);r=_i(s)}else{const s=[n,2*(t-1)],a=as(ci(e),[n,t]),i=as(ta(e),[n,t]),o=fi(Ni(a,[0,1],[n,t-2]),1),u=pa(fi(Ni(i,[0,1],[n,t-2]),1),yi(-1)),l=ys([a,o],1),c=ys([i,u],1),h=as(on(l,c),[s[0],s[1]]);r=_i(h)}if(r=ci(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=as(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const Fi=an({split_:function(e,t,n=0){const r={x:rn(e,"x","split")},s={numOrSizeSplits:t,axis:n};return tt.runKernel("SplitV",r,s)}});const Mi=an({rfft_:function(e,t){u("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=Ni(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=ys([e,Ga(r)],e.shape.length-1),n=t}else s=e;const a=Ws(s),i=as(on(s,a),[r,n]),o=Ri(i),l=Math.floor(n/2)+1,c=ci(o),h=ta(o),p=Fi(c,[l,n-l],c.shape.length-1),d=Fi(h,[l,n-l],h.shape.length-1),f=s.shape.slice();return f[s.shape.length-1]=l,as(on(p[0],d[0]),f)}});const Oi=an({sqrt_:function(e){const t={x:rn(e,"x","sqrt")};return tt.runKernel("Sqrt",t)}});const Li=an({squaredDifference_:function(e,t){let n=rn(e,"a","squaredDifference"),r=rn(t,"b","squaredDifference");[n,r]=Ke(n,r),zs(n.shape,r.shape);const s={a:n,b:r};return tt.runKernel("SquaredDifference",s,{})}});const zi=an({squeeze_:function(e,t){const n=rn(e,"x","squeeze");return as(n,w(n.shape,t).newShape)}});const Pi=an({stack_:function(e,t=0){const n=sn(e,"tensors","stack");u(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&u(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return tt.runKernel("Pack",r,s)}});const Bi=an({step_:function(e,t=0){const n={x:rn(e,"x","step")},r={alpha:t};return tt.runKernel("Step",n,r)}});const Wi=an({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,u=0){const l={x:rn(e,"x","stridedSlice")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return tt.runKernel("StridedSlice",l,c)}});const Vi=an({tan_:function(e){const t={x:rn(e,"x","tan")};return tt.runKernel("Tan",t)}});const Ui=an({tanh_:function(e){const t={x:rn(e,"x","tanh")};return tt.runKernel("Tanh",t)}});function Gi(e,t){c(e);const n=en(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return un(e,null,n,t)}function Hi(e,t,n){if(c(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=en(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return un(e,t,r,n)}const ji=an({topk_:function(e,t=1,n=!0){const r=rn(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},i={k:t,sorted:n},[o,u]=tt.runKernel("TopK",a,i);return{values:o,indices:u}}});const qi=an({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new ai(t,n,r,!0,s),i=Gn(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Ki=an({unique_:function(e,t=0){const n=rn(e,"x","unique",null);u(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,i]=tt.runKernel("Unique",r,s);return{values:a,indices:i}}});const Xi=an({unstack_:function(e,t=0){const n=rn(e,"x","unstack");u(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return tt.runKernel("Unpack",r,s)}});function Yi(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=Gn(e,"int32"),s=Gn([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),i=t*e.length;s.values.set(a,i)}return s.toTensor()}const Zi=async function(e){const t=rn(e,"condition","whereAsync","bool"),n=await t.data(),r=Yi(t.shape,n);return e!==t&&t.dispose(),r};const Ji=an({equalStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","equalStrict"),r=rn(t,"b","equalStrict");return l(n.shape,r.shape,"Error in equalStrict: "),Ps(n,r)}}),Qi=an({greaterEqualStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","greaterEqualStrict"),r=rn(t,"b","greaterEqualStrict");return l(n.shape,r.shape,"Error in greaterEqualStrict: "),ea(n,r)}}),eo=an({greaterStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","greaterStrict"),r=rn(t,"b","greaterStrict");return l(n.shape,r.shape,"Error in greaterStrict: "),Qs(n,r)}}),to=an({lessEqualStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","lessEqualStrict"),r=rn(t,"b","lessEqualStrict");return l(n.shape,r.shape,"Error in lessEqualStrict: "),oa(n,r)}}),no=an({lessStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","lessStrict"),r=rn(t,"b","lessStrict");return l(n.shape,r.shape,"Error in lessStrict: "),ia(n,r)}}),ro=an({notEqualStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","notEqualStrict"),r=rn(t,"b","notEqualStrict");return l(n.shape,r.shape,"Error in notEqualStrict: "),Ua(n,r)}});const so=an({addStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","addStrict"),r=rn(t,"b","addStrict");return l(n.shape,r.shape,"Error in addStrict: "),Mr(n,r)}}),ao=an({divStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","div"),r=rn(t,"b","div");return l(n.shape,r.shape,"Error in divideStrict: "),Ms(n,r)}}),io=an({maximumStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","maximumStrict"),r=rn(t,"b","maximumStrict");return l(n.shape,r.shape,"Error in maximumStrict: "),Ta(n,r)}}),oo=an({minimumStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","minimumStrict"),r=rn(t,"b","minimumStrict");return l(n.shape,r.shape,"Error in minimumStrict: "),Aa(n,r)}}),uo=an({modStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","modStrict"),r=rn(t,"b","modStrict");return l(n.shape,r.shape,"Error in modStrict: "),_a(n,r)}}),lo=an({mulStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","mul"),r=rn(t,"b","mul");return l(n.shape,r.shape,"Error in multiplyStrict: "),pa(n,r)}}),co=an({powStrict_:function(e,t){return Nr("strict variants of ops have been deprecated and will be removed in future"),l(e.shape,t.shape,"Error in powStrict: "),Ka(e,t)}}),ho=an({squaredDifferenceStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","squaredDifferenceStrict"),r=rn(t,"b","squaredDifferenceStrict");return l(n.shape,r.shape,"Error in squaredDifferenceStrict: "),Li(n,r)}}),po=an({subStrict_:function(e,t){Nr("strict variants of ops have been deprecated and will be removed in future");const n=rn(e,"a","subStrict"),r=rn(t,"b","subStrict");return l(n.shape,r.shape,"Error in subStrict: "),ba(n,r)}});function fo(e,t,n=null){if(0===e.rank)return _r(e);if(1!==e.rank&&null===n)return fo(as(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return xa(_r(e),n);if(t===1/0)return ya(_r(e),n);if(t===-1/0)return $a(_r(e),n);if("euclidean"===t||2===t)return Oi(xa(Ka(_r(e),yi(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ya(xa(_r(e),n[0]),n[1]-1);if(t===1/0)return ya(xa(_r(e),n[1]),n[0]);if(t===-1/0)return $a(xa(_r(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Oi(xa(Ba(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const mo=an({norm_:function(e,t="euclidean",n=null,r=!1){const s=fo(e=rn(e,"x","norm"),t,n);let a=s.shape;if(r){const t=x(n,e.shape);a=Ma(s.shape,t)}return as(s,a)}});const go=an({scatterND_:function(e,t,n){const r=rn(e,"indices","scatterND","int32"),s=rn(t,"updates","scatterND");or(s,r,n);const a={indices:r,updates:s},i={shape:n};return tt.runKernel("ScatterNd",a,i)}});const yo=an({sparseToDense_:function(e,t,n,r=0){const s=rn(e,"sparseIndices","sparseToDense","int32"),a=rn(t,"sparseValues","sparseToDense"),i=rn(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:n};return tt.runKernel("SparseToDense",o,u)}});const bo=an({gatherND_:function(e,t){const n=rn(t,"indices","gatherND","int32"),r={params:rn(e,"x","gatherND"),indices:n};return tt.runKernel("GatherNd",r)}});const xo=an({dropout_:function(e,t,n,r){const s=rn(e,"x","dropout");if(u("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),u(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof De?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(d(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),i=1-t,o=Ms(Zs(Mr(ui(a,0,1,"float32",r),i)),i);return pa(s,o)}});const wo=an({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=as(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=as(t,[1,t.shape[0],t.shape[1],t.shape[2]])),u(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),u(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),u(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===a?o.shape[3]:o.shape[1],h="NHWC"===a?l.shape[3]:l.shape[1];u(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),u(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),null!=i&&u(f(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={x:o,dy:l},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n};return tt.runKernel("Conv2DBackpropFilter",p,d)}});function vo(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return pa(e,Bi(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ko(e,t){let n=t;const r=Ls(e.shape,t.shape);return r.length>0&&(n=xa(n,r)),as(n,e.shape)}function Io(e,t,n,r){if("linear"===t)return e;if("relu"===t)return pi(e);if("elu"===t)return Us(e);if("relu6"===t)return di(e);if("prelu"===t)return Xa(e,n);if("leakyrelu"===t)return aa(e,r);throw new Error(`Unknown fused activation ${t}.`)}const No=(e,t)=>!(e>0)||"linear"===t;const So=an({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(l=l||"linear",!1===No(tt.state.gradientDepth,l)){let u=ks(e,t,n,r,s,a,i);return null!=o&&(u=Mr(u,o)),Io(u,l,c,h)}const p=rn(e,"x","conv2d"),d=rn(t,"filter","conv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=as(p,[1,p.shape[0],p.shape[1],p.shape[2]])),u(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),u(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),null!=i&&u(f(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),u(m.shape[3]===d.shape[2],(()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${d.shape[2]}.`)),u(rs(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),u("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const y=Xr(m.shape,d.shape,n,a,r,i);let b,x;null!=o&&(b=rn(o,"bias","fused conv2d"),[b]=Ke(b,p),zs(y.outShape,b.shape)),null!=c&&(x=rn(c,"prelu weights","fused conv2d"));const w=(e,t)=>{const[s,i,o,c]=t,h=vo(e,o,l);u(ns(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[Ns(i.shape,h,s,n,r),wo(i,h,s.shape,n,r)];if(null!=c){const e=ko(c,h);p.push(e)}return p},v={x:m,filter:d,bias:b,preluActivationWeights:x},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:h};if(null==o){return Rr(((e,t,n)=>{let r=tt.runKernel("FusedConv2D",v,k);return n([t,e,r]),g&&(r=as(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(m,d)}return Rr(((e,t,n,r)=>{let s=tt.runKernel("FusedConv2D",v,k);return r([t,e,s,n]),g&&(s=as(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(m,d,b)}});const Eo=an({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=as(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=as(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:o,dy:u},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n};return tt.runKernel("DepthwiseConv2dNativeBackpropFilter",l,c)}});const To=an({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=as(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e},h=tt.runKernel("DepthwiseConv2dNativeBackpropInput",l,c);return u?as(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Co=an({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:h}){if(!1===No(tt.state.gradientDepth,l)){let u=_s(e,t,n,r,s,a,i);return null!=o&&(u=Mr(u,o)),Io(u,l,c,h)}const p=rn(e,"x","depthwiseConv2d"),d=rn(t,"filter","depthwiseConv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=as(p,[1,p.shape[0],p.shape[1],p.shape[2]])),u(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),u(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),u(m.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==a&&(a=[1,1]),u(rs(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&u(f(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`));const y=Xr(m.shape,d.shape,n,a,r,i,!0);let b,x;null!=o&&(b=rn(o,"bias","fused conv2d"),[b]=Ke(b,p),zs(y.outShape,b.shape)),null!=c&&(x=rn(c,"prelu weights","fused depthwiseConv2d"));const w=(e,t)=>{u(ns(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,o,c,h]=t,p=vo(e,c,l),d=To(o.shape,p,s,n,r,a,i),f=Eo(o,p,s.shape,n,r,a,i);if(null!=h){return[d,f,ko(b,p)]}return[d,f]},v={x:m,filter:d,bias:b,preluActivationWeights:x},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:h};if(null==o){return Rr(((e,t,n)=>{let r=tt.runKernel("FusedDepthwiseConv2D",v,k);return n([t,e,r]),g&&(r=as(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(m,d)}return Rr(((e,t,n,r)=>{let s=tt.runKernel("FusedDepthwiseConv2D",v,k);return r([t,e,s,n]),g&&(s=as(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(m,d,b)}});const $o=an({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===No(tt.state.gradientDepth,a)){let u=tr(e,t,n,r);return null!=s&&(u=Mr(u,s)),Io(u,a,i,o)}let l=rn(e,"a","fused matMul"),c=rn(t,"b","fused matMul");[l,c]=Ke(l,c);const h=n?l.shape[l.rank-2]:l.shape[l.rank-1],f=r?c.shape[c.rank-1]:c.shape[c.rank-2],m=n?l.shape[l.rank-1]:l.shape[l.rank-2],g=r?c.shape[c.rank-2]:c.shape[c.rank-1],y=l.shape.slice(0,-2),b=c.shape.slice(0,-2),x=p(y),w=p(b);u(l.rank>=2&&c.rank>=2&&l.rank===c.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${c.rank}.`)),u(d(y,b),(()=>`Error in fused matMul: outer dimensions (${y}) and (${b}) of Tensors with shapes ${l.shape} and ${c.shape} must match.`)),u(h===f,(()=>`Error in fused matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${n} and transposeB=${r} must match.`));const v=l.shape.slice(0,-2).concat([m,g]),k=as(l,n?[x,h,m]:[x,m,h]),I=as(c,r?[w,g,f]:[w,f,g]);let N,S;null!=s&&(N=rn(s,"bias","fused matMul"),[N]=Ke(N,l),zs(v,N.shape)),null!=i&&(S=rn(i,"prelu weights","fused matMul"));const E=(e,t)=>{const[i,o,u,l]=t,c=vo(as(e,u.shape),u,a);let h,p;if(n||r?!n&&r?(h=tr(c,o,!1,!1),p=tr(c,i,!0,!1)):n&&!r?(h=tr(o,c,!1,!0),p=tr(i,c,!1,!1)):(h=tr(o,c,!0,!0),p=tr(c,i,!0,!0)):(h=tr(c,o,!1,!0),p=tr(i,c,!0,!1)),null!=s){return[h,p,ko(l,c)]}return[h,p]},T={a:k,b:I,bias:N,preluActivationWeights:S},C={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};if(null==s){return Rr(((e,t,n)=>{const r=tt.runKernel("_FusedMatMul",T,C);return n([e,t,r]),{value:as(r,v),gradFunc:E}}))(k,I)}return Rr(((e,t,n,r)=>{const s=tt.runKernel("_FusedMatMul",T,C);return r([e,t,s,n]),{value:as(s,v),gradFunc:E}}))(k,I,N)}});function Ao(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return Gi(s,"float32")}an({hammingWindow_:function(e){return Ao(e,.54,.46)}});const Ro=an({hannWindow_:function(e){return Ao(e,.5,.5)}});const _o=an({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Ni(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=ys([Ni(e,a,t-r),Ys([r],s)]);i.push(o),a+=n}return 0===i.length?Hi([],[0,t]):as(ys(i),[i.length,t])}});an({stft_:function(e,t,n,r,s=Ro){var a;null==r&&(a=t,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=_o(e,t,n),o=pa(i,s(t)),u=[];for(let e=0;e<i.shape[0];e++)u.push(Mi(Ni(o,[e,0],[1,t]),r));return ys(u)}});const Do=an({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=rn(e,"image","cropAndResize"),o=rn(t,"boxes","cropAndResize","float32"),l=rn(n,"boxInd","cropAndResize","int32"),c=o.shape[0];u(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),u(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${o.shape}.`)),u(1===l.rank&&l.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${o.shape}.`)),u(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),u(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),u("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const h={image:i,boxes:o,boxInd:l},p={method:s,extrapolationValue:a,cropSize:r};return tt.runKernel("CropAndResize",h,p)}});const Fo=an({flipLeftRight_:function(e){const t=rn(e,"image","flipLeftRight","float32");u(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return tt.runKernel("FlipLeftRight",n,{})}});const Mo=an({rotateWithOffset_:function(e,t,n=0,r=.5){const s=rn(e,"image","rotateWithOffset","float32");u(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:t,fillValue:n,center:r};return tt.runKernel("RotateWithOffset",a,i)}});function Oo(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),u(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),u(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),u(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),u(1===t.rank,(()=>"scores must be a 1D tensor")),u(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),u(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Lo=an({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=rn(e,"boxes","nonMaxSuppression"),i=rn(t,"scores","nonMaxSuppression"),o=Oo(a,i,n,r,s),u={maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold};return tt.runKernel("NonMaxSuppressionV3",{boxes:a,scores:i},u)}});function zo(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||Po)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function Po(e,t){return e>t?1:e<t?-1:0}function Bo(e,t,n,r,s){return Uo(e,t,n,r,s,0)}function Wo(e,t,n,r,s,a){return Uo(e,t,n,r,s,0,!1,a,!0)}function Vo(e,t,n,r,s,a){return Uo(e,t,n,r,s,a,!0)}function Uo(e,t,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(jo);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Go(e,a,h[n]);if(i>=r){o=!0;break}if(t.score=t.score*Ho(r,c,i),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>s&&zo(l,t,jo))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),u&&(m.validOutputs=d),m}function Go(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Ho(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function jo(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const qo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=rn(e,"boxes","nonMaxSuppressionAsync"),i=rn(t,"scores","nonMaxSuppressionAsync"),o=Oo(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=Bo(l,c,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),Gi(h,"int32")};const Ko=an({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=rn(e,"boxes","nonMaxSuppression"),o=rn(t,"scores","nonMaxSuppression"),u=Oo(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=tt.runKernel("NonMaxSuppressionV5",l,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Xo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=rn(e,"boxes","nonMaxSuppressionAsync"),o=rn(t,"scores","nonMaxSuppressionAsync"),u=Oo(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:p,selectedScores:d}=Vo(c,h,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Gi(p,"int32"),selectedScores:Gi(d)}};const Yo=an({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=rn(e,"boxes","nonMaxSuppression"),o=rn(t,"scores","nonMaxSuppression"),u=Oo(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=tt.runKernel("NonMaxSuppressionV4",l,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Zo=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=rn(e,"boxes","nonMaxSuppressionAsync"),o=rn(t,"scores","nonMaxSuppressionAsync"),u=Oo(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Wo(p,d,l,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Gi(f,"int32"),validOutputs:yi(m,"int32")}};const Jo=an({resizeBilinear_:function(e,t,n=!1,r=!1){const s=rn(e,"images","resizeBilinear");u(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),u(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),u(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,i=!1;3===s.rank&&(i=!0,a=as(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},c=tt.runKernel("ResizeBilinear",o,l);return i?as(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qo=an({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=rn(e,"images","resizeNearestNeighbor");u(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),u(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),u("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),u(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,i=!1;3===s.rank&&(i=!0,a=as(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:r,size:t},c=tt.runKernel("ResizeNearestNeighbor",o,l);return i?as(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const eu=an({bandPart_:function(e,t,n){u(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),u(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=rn(e,"a","bandPart");u(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=as(li(0,a,1,"int32"),[-1,1]),l=li(0,i,1,"int32"),c=ba(o,l),h=va(oa(c,yi(+t,"int32")),ea(c,yi(-n,"int32"))),p=Ga([a,i],r.dtype);return as(Pi(Xi(as(r,[-1,a,i])).map((e=>Bs(h,e,p)))),s)}});const tu=an({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,u(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)u(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Fi(e,e.shape[0],0).map((e=>zi(e,[0])));u(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(tt.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=pa(xa(pa(n[r],e)),n[r]);e=ba(e,t)}return Ms(e,mo(e,"euclidean"))})));return t?Pi(n,0):n}});function nu(e,t=!1){return tt.tidy((()=>{u(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=Xs(n),a=jn(e);const i=Hi([[1]],[1,1]);let o=jn(i);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=a,u=o,l=s;[o,a,s]=tt.tidy((()=>{const t=Ni(a,[e,e],[n-e,1]),u=mo(t),l=Ni(a,[e,e],[1,1]),c=Bs(Qs(l,0),Hi([[-1]]),Hi([[1]])),h=ba(l,pa(c,u)),p=Ms(t,h);o=1===p.shape[0]?jn(i):ys([i,Ni(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=da(Ms(tr(c,h),u)),f=Ni(a,[e,0],[n-e,r]),m=pa(d,o),g=rr(o);if(0===e)a=ba(f,tr(m,tr(g,f)));else{const t=ba(f,tr(m,tr(g,f)));a=ys([Ni(a,[0,0],[e,r]),t],0)}const y=rr(m),b=Ni(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=ba(b,tr(tr(b,o),y));else{const t=ba(b,tr(tr(b,o),y));s=ys([Ni(s,[0,0],[n,e]),t],1)}return[o,a,s]})),Cr([t,u,l])}return!t&&n>r&&(s=Ni(s,[0,0],[n,r]),a=Ni(a,[0,0],[r,r])),[s,a]}))}const ru=an({qr_:function(e,t=!1){if(u(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return nu(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=Xi(as(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=nu(e,t);s.push(n),a.push(r)}));return[as(Pi(s,0),e.shape),as(Pi(a,0),e.shape)]}}});var su,au;(au=su||(su={}))[au.NONE=0]="NONE",au[au.MEAN=1]="MEAN",au[au.SUM=2]="SUM",au[au.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const iu=an({computeWeightedLoss_:function(e,t,n=su.SUM_BY_NONZERO_WEIGHTS){const r=rn(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=rn(t,"weights","computeWeightedLoss"));const a=null==s?r:pa(r,s);if(n===su.NONE)return a;if(n===su.SUM)return xa(a);if(n===su.MEAN){if(null==s)return Ca(a);{const e=r.size/s.size,t=Ms(xa(a),xa(s));return e>1?Ms(t,yi(e)):t}}if(n===su.SUM_BY_NONZERO_WEIGHTS){if(null==s)return Ms(xa(a),yi(r.size));{const e=pa(s,Ha(r.shape)),t=Hn(xa(Ua(e,yi(0))),"float32");return Ms(xa(a),t)}}throw Error(`Unknown reduction: ${n}`)}});an({absoluteDifference_:function(e,t,n,r=su.SUM_BY_NONZERO_WEIGHTS){const s=rn(e,"labels","absoluteDifference"),a=rn(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=rn(n,"weights","absoluteDifference")),l(s.shape,a.shape,"Error in absoluteDifference: ");const o=_r(ba(s,a));return iu(o,i,r)}});an({cosineDistance_:function(e,t,n,r,s=su.SUM_BY_NONZERO_WEIGHTS){const a=rn(e,"labels","cosineDistance"),i=rn(t,"predictions","cosineDistance");let o=null;null!=r&&(o=rn(r,"weights","cosineDistance")),l(a.shape,i.shape,"Error in cosineDistance: ");const u=yi(1),c=ba(u,xa(pa(a,i),n,!0));return iu(c,o,s)}});an({hingeLoss_:function(e,t,n,r=su.SUM_BY_NONZERO_WEIGHTS){let s=rn(e,"labels","hingeLoss");const a=rn(t,"predictions","hingeLoss");let i=null;null!=n&&(i=rn(n,"weights","hingeLoss")),l(s.shape,a.shape,"Error in hingeLoss: ");const o=yi(1);s=ba(pa(yi(2),s),o);const u=pi(ba(o,pa(s,a)));return iu(u,i,r)}});an({huberLoss_:function(e,t,n,r=1,s=su.SUM_BY_NONZERO_WEIGHTS){const a=rn(e,"labels","huberLoss"),i=rn(t,"predictions","huberLoss");let o=null;null!=n&&(o=rn(n,"weights","huberLoss")),l(a.shape,i.shape,"Error in huberLoss: ");const u=yi(r),c=_r(ba(i,a)),h=Aa(c,u),p=ba(c,h),d=Mr(pa(yi(.5),Ba(h)),pa(u,p));return iu(d,o,s)}});an({logLoss_:function(e,t,n,r=1e-7,s=su.SUM_BY_NONZERO_WEIGHTS){const a=rn(e,"labels","logLoss"),i=rn(t,"predictions","logLoss");let o=null;null!=n&&(o=rn(n,"weights","logLoss")),l(a.shape,i.shape,"Error in logLoss: ");const u=yi(1),c=yi(r),h=da(pa(a,ca(Mr(i,c)))),p=pa(ba(u,a),ca(Mr(ba(u,i),c))),d=ba(h,p);return iu(d,o,s)}});an({meanSquaredError_:function(e,t,n,r=su.SUM_BY_NONZERO_WEIGHTS){const s=rn(e,"labels","meanSquaredError"),a=rn(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=rn(n,"weights","meanSquaredError")),l(s.shape,a.shape,"Error in meanSquaredError: ");const o=Li(s,a);return iu(o,i,r)}});an({sigmoidCrossEntropy_:function(e,t,n,r=0,s=su.SUM_BY_NONZERO_WEIGHTS){let a=rn(e,"multiClassLabels","sigmoidCrossEntropy");const i=rn(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=rn(n,"weights","sigmoidCrossEntropy")),l(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=yi(r),t=yi(1),n=yi(.5);a=Mr(pa(a,ba(t,e)),pa(n,e))}const u=function(e,t){const n=rn(e,"labels","sigmoidCrossEntropyWithLogits"),r=rn(t,"logits","sigmoidCrossEntropyWithLogits");l(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=pi(r),a=pa(r,n),i=ha(Hs(da(_r(r))));return Mr(ba(s,a),i)}(a,i);return iu(u,o,s)}});const ou=an({logSumExp_:function(e,t=null,n=!1){const r=rn(e,"x","logSumExp"),s=x(t,r.shape),a=ya(r,s,!0),i=ba(r,a),o=Hs(i),u=xa(o,s),l=ca(u),c=Mr(as(a,l.shape),l);if(n){const e=Ma(c.shape,s);return as(c,e)}return c}});an({softmaxCrossEntropy_:function(e,t,n,r=0,s=su.SUM_BY_NONZERO_WEIGHTS){let a=rn(e,"onehotLabels","softmaxCrossEntropy");const i=rn(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=rn(n,"weights","softmaxCrossEntropy")),l(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=yi(r),t=yi(1),n=yi(a.shape[1]);a=Mr(pa(a,ba(t,e)),Ms(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Rr(((e,t,r)=>{const s=ou(t,[n],!0),a=ba(Hn(t,"float32"),s);r([e,a]);const i=da(pa(a,e));return{value:xa(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Ma(e.shape,[n]);return[pa(as(e,a),ba(Hn(r,"float32"),Hs(s))),pa(as(e,a),ba(Hs(s),Hn(r,"float32")))]}}}))(e,t)}(a,i);return iu(u,o,s)}});const uu={flipLeftRight:Fo,resizeNearestNeighbor:Qo,resizeBilinear:Jo,rotateWithOffset:Mo,cropAndResize:Do,nonMaxSuppression:Lo,nonMaxSuppressionAsync:qo,nonMaxSuppressionWithScore:Ko,nonMaxSuppressionWithScoreAsync:Xo,nonMaxSuppressionPadded:Yo,nonMaxSuppressionPaddedAsync:Zo},lu={bandPart:eu,gramSchmidt:tu,qr:ru};class cu extends vr{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return Cr(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){u($(e),(()=>"The f passed in variableGrads(f) must be a function")),u(null==t||Array.isArray(t)&&t.every((e=>e instanceof Fe)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in tt.registeredVariables)t.push(tt.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;u((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=tt.gradients(e,t,null,!0);u(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),u(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=r&&r.forEach((e=>o[e.name]=null)),{value:a,grads:o}}(e,t)}dispose(){null!=this.iterations_&&Cr(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:yi(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(cu,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class hu extends cu{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=tt.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=tt.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Tr((()=>Ws(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Tr((()=>Ws(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Tr((()=>{const e=Mr(pa(a,this.rho),pa(Ba(s),1-this.rho)),t=pa(Ms(Oi(Mr(i,this.epsilon)),Oi(Mr(a,this.epsilon))),s),n=Mr(pa(i,this.rho),pa(Ba(t),1-this.rho));a.assign(e),i.assign(n);const o=Mr(pa(t,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Cr(this.accumulatedGrads.map((e=>e.variable))),Cr(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}hu.className="Adadelta",Ir(hu);class pu extends cu{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=tt.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Tr((()=>Ys(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Tr((()=>{const e=Mr(a,Ba(s));a.assign(e);const t=Mr(pa(Ms(s,Oi(Mr(e,tt.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Cr(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}pu.className="Adagrad",Ir(pu);class du extends cu{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Tr((()=>{this.accBeta1=yi(t).variable(),this.accBeta2=yi(n).variable()})),null==r&&(this.epsilon=tt.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Tr((()=>{const n=ba(1,this.accBeta1),r=ba(1,this.accBeta2);t.forEach(((t,s)=>{const a=tt.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Tr((()=>Ws(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Tr((()=>Ws(a).variable(false)))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=Mr(pa(o,this.beta1),pa(i,1-this.beta1)),c=Mr(pa(u,this.beta2),pa(Ba(i),1-this.beta2)),h=Ms(l,n),p=Ms(c,r);o.assign(l),u.assign(c);const d=Mr(pa(Ms(h,Mr(Oi(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(pa(this.accBeta1,this.beta1)),this.accBeta2.assign(pa(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Cr(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Cr(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Tr((()=>{this.accBeta1.assign(Ka(this.beta1,this.iterations_+1)),this.accBeta2.assign(Ka(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}du.className="Adam",Ir(du);class fu extends cu{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Tr((()=>{this.iteration=yi(0).variable(),this.accBeta1=yi(t).variable()})),null==r&&(this.epsilon=tt.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Tr((()=>{const n=ba(1,this.accBeta1),r=Ms(-this.learningRate,Mr(pa(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=tt.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Ws(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:Ws(a).variable(false)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=Mr(pa(o,this.beta1),pa(i,1-this.beta1)),c=pa(u,this.beta2),h=_r(i),p=Ta(c,h);o.assign(l),u.assign(p);const d=Mr(pa(Ms(r,n),Ms(l,Mr(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(Mr(this.iteration,1)),this.accBeta1.assign(pa(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Cr(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Cr(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}fu.className="Adamax",Ir(fu);class mu extends cu{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=tt.registeredVariables[t];Tr((()=>{const e=Mr(pa(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=$r(yi(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}mu.className="SGD",Ir(mu);class gu extends mu{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=yi(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=tt.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Tr((()=>Ws(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Tr((()=>{let e;const t=Mr(pa(this.m,s),a);e=this.useNesterov?Mr(pa(this.c,Mr(a,pa(t,this.m))),r):Mr(pa(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Cr(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}gu.className="Momentum",Ir(gu);class yu extends cu{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=tt.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=tt.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Tr((()=>Ws(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Tr((()=>Ws(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Tr((()=>Ws(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Tr((()=>{const e=Mr(pa(i,this.decay),pa(Ba(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=Mr(pa(t,this.decay),pa(a,1-this.decay)),u=Ms(pa(a,this.learningRate),Oi(ba(e,Mr(Ba(s),this.epsilon)))),l=Mr(pa(o,this.momentum),u);i.assign(e),t.assign(s),o.assign(l);const c=ba(r,l);r.assign(c)}else{const e=Mr(pa(i,this.decay),pa(Ba(a),1-this.decay)),t=Mr(pa(o,this.momentum),Ms(pa(a,this.learningRate),Oi(Mr(e,this.epsilon))));i.assign(e),o.assign(t);const n=ba(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Cr(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Cr(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Cr(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}yu.className="RMSProp",Ir(yu);class bu{static sgd(e){return new mu(e)}static momentum(e,t,n=!1){return new gu(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new yu(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new du(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new hu(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new fu(e,t,n,r,s)}static adagrad(e,t=.1){return new pu(e,t)}}const xu={sgd:bu.sgd,momentum:bu.momentum,adadelta:bu.adadelta,adagrad:bu.adagrad,rmsprop:bu.rmsprop,adamax:bu.adamax,adam:bu.adam},wu="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function vu(){return new Promise((e=>wu((()=>e()))))}function ku(e,t){const n=e[0].length;e.forEach(((e,t)=>{u(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),u(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)u(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function Iu(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}function Nu(e){return e<=30?e:A(e,Math.floor(Math.sqrt(e)))}function Su(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Eu(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Tu(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function Cu(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function $u(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Au(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}function Ru(...e){V().getBool("IS_TEST")||console.warn(...e)}function _u(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Du(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Fu(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Mu(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}function Ou(e,t,n=0){let r=[];if("number"==typeof t)u(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{u(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}u(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function Lu(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)o.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)o.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}const zu={kernelName:"Abs",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,Bi(Hn(n,"float32"),-1))}}},Pu={kernelName:"Acos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ba(Hn(n,"float32")),r=Oi(ba(yi(1),t));return da(Ms(e,r))}}}},Bu={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Oi(ba(Ba(Hn(n,"float32")),1));return Ms(e,t)}}}},Wu={kernelName:"Add",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{let t=e;const r=Ls(n.shape,s);return r.length>0&&(t=xa(t,r)),as(t,n.shape)},b:()=>{let t=e;const n=Ls(r.shape,s);return n.length>0&&(t=xa(t,n)),as(t,r.shape)}}}},Vu={kernelName:"AddN",saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},Uu={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ws(n)}}},Gu={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ws(n)}}},Hu={kernelName:"Asin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,Oi(ba(yi(1),Ba(Hn(n,"float32")))))}}},ju={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Oi(Mr(yi(1),Ba(Hn(n,"float32"))));return Ms(e,t)}}}},qu={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{const t=Mr(Ba(n),Ba(r));let a=pa(e,Ms(r,t));const i=Ls(n.shape,s);return i.length>0&&(a=xa(a,i)),as(a,n.shape)},b:()=>{const t=Mr(Ba(n),Ba(r));let a=da(pa(e,Ms(n,t)));const i=Ls(r.shape,s);return i.length>0&&(a=xa(a,i)),as(a,r.shape)}}}},Ku={kernelName:"Atan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,Mr(Ba(Hn(n,"float32")),1))}}},Xu={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,ba(yi(1),Ba(Hn(n,"float32"))))}}};const Yu=an({avgPool3dGrad_:function(e,t,n,r,s=[1,1,1],a,i){const o=rn(e,"dy","avgPool3dGrad"),l=rn(t,"input","avgPool3dGrad");let c=o,h=l,p=!1;4===l.rank&&(p=!0,c=as(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=as(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),u(5===c.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),u(5===h.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),u(rs(r,s),(()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=i&&u(f(a),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const d={dy:c,input:h},m={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},g=tt.runKernel("AvgPool3DGrad",d,m);return p?as(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),Zu={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,l=null==i?[1,1,1]:i;return{x:()=>Yu(e,r,s,a,l,o,u)}}};const Ju=an({avgPoolGrad_:function(e,t,n,r,s){const a=rn(e,"dy","avgPoolGrad"),i=rn(t,"input","avgPoolGrad");u(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,c=!1;3===i.rank&&(c=!0,o=as(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=as(a,[1,a.shape[0],a.shape[1],a.shape[2]])),u(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),u(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const h={dy:l,input:o},p={filterSize:n,strides:r,pad:s},d=tt.runKernel("AvgPoolGrad",h,p);return c?as(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Qu={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Ju(e,r,s,a,i)}}},el={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>tr(e,s,!1,!1),b:()=>tr(e,r,!0,!1)}:a&&!i?{a:()=>tr(s,e,!1,!0),b:()=>tr(r,e,!1,!1)}:{a:()=>tr(s,e,!0,!0),b:()=>tr(e,r,!0,!0)}:{a:()=>tr(e,s,!1,!0),b:()=>tr(r,e,!0,!1)}}},tl={kernelName:"BatchToSpaceND",gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Ai(e,r,s)}}},nl={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])i[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>xa(e,o,!0)}}},rl={kernelName:"Cast",gradFunc:e=>({x:()=>e.clone()})},sl={kernelName:"Ceil",gradFunc:e=>({x:()=>Ws(e)})},al={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Bs(va(ea(r,s),oa(r,a)),e,Ws(e))}}},il={kernelName:"ComplexAbs",inputsToSave:["x"],gradFunc:zu.gradFunc},ol={kernelName:"Concat",saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=x(s,t[0].shape)[0],i=r.map((e=>e[a]));return Fi(e,i,a).map((e=>()=>e))}},ul={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return u(ns(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Ns(r.shape,e,s,i,o,l),filter:()=>wo(r,e,s.shape,i,o,l)}}},ll={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>ks(e,s,a,i,o,1,u),filter:()=>wo(e,r,s.shape,a,i,o,u)}}};const cl=an({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=as(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=as(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),u(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),u(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),u(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),u(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),u(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:r,pad:s,filterShape:n};return tt.runKernel("Conv3DBackpropFilterV2",o,l)}});const hl=an({conv3DBackpropInput_:function(e,t,n,r,s){u(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=as(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],c=i.shape[4];u(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),u(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),u(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),u(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),u(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const h={dy:i,filter:n},p={pad:s,strides:r,inputShape:a},d=tt.runKernel("Conv3DBackpropInputV2",h,p);return o?as(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),pl={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;u(ns(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=t;return{x:()=>hl(i.shape,e,o,s,a),filter:()=>cl(i,e,o.shape,s,a)}}},dl={kernelName:"Cos",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(da(ki(Hn(n,"float32"))),e)}}},fl={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(Ii(Hn(n,"float32")),e)}}},ml={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=La([s],r.rank);let n=$s(e,s,a,!i);return null!=t&&(n=rr(n,t)),n}}}},gl={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;u(ns(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,c]=t;return u(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),u(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),u(l.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),u(rs(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=i&&u(f(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>To(l.shape,e,c,s,a,r,i),filter:()=>Eo(l,e,c.shape,s,a,r,i)}}},yl={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>tt.runKernel("Dilation2DBackpropInput",a,n),filter:()=>tt.runKernel("Dilation2DBackpropFilter",i,n)}}},bl={kernelName:"Elu",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>tt.runKernel("EluGrad",r)}}},xl={kernelName:"Erf",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=pa(Hs(da(Ba(n))),2/Math.sqrt(Math.PI));return{x:()=>pa(e,r)}}},wl={kernelName:"Exp",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,n)}}},vl={kernelName:"ExpandDims",inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>as(e,n.shape)}}},kl={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,Hs(n))}}},Il={kernelName:"Floor",gradFunc:e=>({x:()=>Ws(e)})},Nl={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{const t=Ms(e,Hn(r,"float32")),a=Ls(n.shape,s);return a.length>0?as(xa(t,a),n.shape):t},b:()=>{let t=pa(e,Hn(n,"float32"));const a=Ls(r.shape,s);a.length>0&&(t=as(xa(t,a),r.shape));const i=Ba(r);return da(Ms(t,Hn(i,"float32")))}}}},Sl={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,u=null==o?yi(1):o,l=Ls(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=ba(s,a),p=pa(e,u),d=gi(Mr(i,yi(r))),f=pa(pa(pa(d,d),d),yi(-.5));return{x:()=>1===a.rank?as(pa(pa(e,Ks(as(d,[1,1,1,a.shape[0]]),c)),u),s.shape):as(pa(pa(e,d),u),s.shape),mean:()=>{let e=pa(pa(d,yi(-1)),p);return 1===a.rank&&(e=xa(e,l)),as(e,a.shape)},variance:()=>{let e=pa(pa(f,h),p);return 1===a.rank&&(e=xa(e,l)),as(e,a.shape)},scale:()=>{const t=pa(h,d);let n=pa(e,t);return 1===a.rank&&(n=xa(n,l)),as(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=xa(t,l)),as(t,a.shape)}}}};const El=an({unsortedSegmentSum_:function(e,t,n){const r=rn(e,"x","unsortedSegmentSum"),s=rn(t,"segmentIds","unsortedSegmentSum","int32");u(f(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return tt.runKernel("UnsortedSegmentSum",a,i)}}),Tl={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,i=x(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,o=t.slice(0,i),u=o.length,l=t.slice(a,t.length).slice(1),c=l.length,h=Cl(0,u),p=Cl(u+1,u+1+c),d=$l([o,[n],l]),f=as(e,d),m=as(s,[n]),g=$l([[u],h,p]),y=rr(f,g);let b=El(y,m,r.shape[i]);const x=za(g);return b=rr(b,x),b},indices:()=>s}}};function Cl(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function $l(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const Al={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>Ws(n),b:()=>Ws(r)}}},Rl={kernelName:"Identity",gradFunc:e=>({x:()=>Hn(e,"float32")})},_l={kernelName:"IsFinite",gradFunc:e=>({x:()=>Ws(e)})},Dl={kernelName:"IsInf",gradFunc:e=>({x:()=>Ws(e)})},Fl={kernelName:"IsNan",gradFunc:e=>({x:()=>Ws(e)})},Ml={kernelName:"LeakyRelu",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=Qs(r,0);return{x:()=>Bs(a,e,pa(e,s))}}},Ol={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,Mr(n,1))}}},Ll={kernelName:"Log",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,Hn(n,"float32"))}}},zl={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=Hs(r);return ba(e,pa(xa(e,s,!0),t))}}}};const Pl=an({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){const o={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return tt.runKernel("LRNGrad",o,u)}}),Bl={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>Pl(r,s,e,a,i,o,u)}}};function Wl(e,t,n,r){return t.rank<n.rank&&(t=as(t,Ma(t.shape,r))),e.rank<n.rank&&(e=as(e,Ma(e.shape,r))),{x:()=>pa(e,Hn(Ps(n,t),e.dtype))}}const Vl={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=Wl(e,t[1],a,x(s,a.shape));return{x:()=>i.x()}}},Ul={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>pa(e,Hn(ea(n,r),"float32")),b:()=>pa(e,Hn(ia(n,r),"float32"))}}};const Gl=an({maxPool3dGrad_:function(e,t,n,r,s,a=[1,1,1],i,o){const l=rn(e,"dy","maxPool3dGrad"),c=rn(t,"input","maxPool3dGrad"),h=rn(n,"output","maxPool3dGrad");let p=l,d=c,m=h,g=!1;4===c.rank&&(g=!0,p=as(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=as(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),m=as(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),u(5===p.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${p.rank}.`)),u(5===d.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`)),u(5===m.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${m.rank}.`)),u(rs(s,a),(()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`)),null!=o&&u(f(i),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const y={dy:p,input:d,output:m},b={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},x=tt.runKernel("MaxPool3DGrad",y,b);return g?as(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),Hl={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:l}=n,c=null==o?[1,1,1]:o;return{x:()=>Gl(e,r,s,a,i,c,u,l)}}};const jl=an({maxPoolGrad_:function(e,t,n,r,s,a,i){const o=rn(e,"dy","maxPoolGrad"),l=rn(t,"input","maxPoolGrad"),c=rn(n,"output","maxPoolGrad");u(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),u(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),u(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=i&&u(f(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const h={dy:o,input:l,output:c},p={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return tt.runKernel("MaxPoolGrad",h,p)}}),ql={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Ni(e,a,r.shape)}}},Kl={kernelName:"SpaceToBatchND",gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>us(e,r,s)}}},Xl={kernelName:"SplitV",gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>ys(e,r)}}};const Yl=[zu,Pu,Bu,Wu,Vu,Uu,Gu,Hu,ju,qu,Ku,Xu,Zu,Qu,el,tl,nl,rl,sl,al,il,ol,ll,ul,pl,dl,fl,ml,gl,yl,{kernelName:"RealDiv",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{const t=Ms(e,Hn(r,"float32")),a=Ls(n.shape,s);return a.length>0?as(xa(t,a),n.shape):t},b:()=>{let t=pa(e,Hn(n,"float32"));const a=Ls(r.shape,s);a.length>0&&(t=as(xa(t,a),r.shape));const i=Ba(r);return da(Ms(t,Hn(i,"float32")))}}}},bl,xl,wl,vl,kl,Nl,Il,Sl,Tl,Al,Rl,_l,Dl,Fl,Ml,Ol,Ll,zl,Bl,Vl,Vl,Ul,Hl,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>jl(e,r,s,a,i,o)}}},{kernelName:"Mean",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=x(s,r.shape),i=p(Fa(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=as(e,t);return Ms(pa(n,Ha(r.shape,"float32")),i)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=Wl(e,i,a,x(s,a.shape));return{x:()=>o.x()}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>pa(e,Hn(oa(n,r),"float32")),b:()=>pa(e,Hn(Qs(n,r),"float32"))}}},{kernelName:"MirrorPad",inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>Ni(e,a,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{const t=Ls(n.shape,s);return t.length>0?as(xa(e,t),n.shape):e},b:()=>{const t=pa(e,da(Zs(Ms(n,r)))),a=Ls(r.shape,s);return a.length>0?as(xa(t,a),r.shape):t}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{const t=pa(e,Hn(r,"float32")),a=Ls(n.shape,s);return a.length>0?as(xa(t,a),n.shape):t},b:()=>{const t=pa(e,Hn(n,"float32")),a=Ls(r.shape,s);return a.length>0?as(xa(t,a),r.shape):t}}}},{kernelName:"Neg",gradFunc:e=>({x:()=>da(e)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Ga(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:e=>({x:()=>Ws(e)})},{kernelName:"Pack",saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return Xi(e,r).map((e=>()=>e))}},ql,ql,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=zs(a.shape,i.shape);return{a:()=>{const t=Hn(i,"float32");let n=pa(e,pa(t,Ka(a,ba(t,yi(1)))));const r=Ls(a.shape,o);return r.length>0&&(n=xa(n,r)),as(n,a.shape)},b:()=>{const t=Qs(a,0),n=Bs(t,ca(a),Ws(a));let r=pa(e,pa(s,n));const u=Ls(i.shape,o);return u.length>0&&(r=xa(r,u)),as(r,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=Qs(n,0);return{x:()=>Bs(s,e,pa(e,r)),alpha:()=>{let t=Bs(s,Ws(e),pa(e,n));const a=Ls(r.shape,e.shape);return a.length>0&&(t=xa(t,a)),as(t,r.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,da(Ba(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=pa(oa(n,6),Bi(n));return{x:()=>pa(e,Hn(r,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,Hn(Bi(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>as(e,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>tt.runKernel("ResizeBilinearGrad",s,n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>tt.runKernel("ResizeNearestNeighborGrad",s,n)}}},{kernelName:"Reverse",gradFunc:(e,t,n)=>{const{dims:r}=n,s=x(r,e.shape);return{x:()=>fi(e,s)}}},{kernelName:"Round",gradFunc:e=>({x:()=>Ws(e)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>da(Ms(e,pa(Ka(n,1.5),2)))}}},{kernelName:"Select",inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Hn(Ws(n),"float32"),t:()=>pa(e,Hn(n,e.dtype)),e:()=>pa(e,Hn(ka(n),e.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Qs(n,yi(0)),r=yi(1.7580993408473768),s=yi(1.0507009873554805),a=pa(e,s),i=pa(pa(e,r),Hs(Hn(n,"float32")));return Bs(t,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,pa(n,ba(yi(1),n)))}}},{kernelName:"Sign",gradFunc:e=>({x:()=>Ws(e)})},{kernelName:"Sin",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(Ts(Hn(n,"float32")),e)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(Cs(Hn(n,"float32")),e)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,u]=xr(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([o[t],i[t]-o[t]-u[t]]);return{x:()=>qa(e,l)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=pa(e,r);return{logits:()=>ba(a,pa(xa(a,[s],true),r))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,fa(n))}}},Kl,Kl,Xl,Xl,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,pa(Oi(Hn(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=yi(2);return{a:()=>pa(e,pa(s,ba(n,r))),b:()=>pa(e,pa(s,ba(r,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(e,pa(Hn(n,"float32"),2))}}},{kernelName:"Step",gradFunc:e=>({x:()=>Ws(e)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=zs(n.shape,r.shape);return{a:()=>{let t=e;const r=Ls(n.shape,s);return r.length>0&&(t=xa(t,r)),as(t,n.shape)},b:()=>{let t=e;const n=Ls(r.shape,s);return n.length>0&&(t=xa(t,n)),as(da(t),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;x(a,r.shape).forEach((e=>{s[e]=1}));const i=as(e,s),o=pa(i,Ha(r.shape,"float32"));return{x:()=>o}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ms(e,Ba(Ts(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pa(ba(yi(1),Ba(n)),e)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=Ws(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=Mr(t,Ni(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=Mr(t,Ni(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=Mr(t,Ni(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=Mr(t,Ni(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:"Transpose",gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=za(s);return{x:()=>rr(e,a)}}},{kernelName:"Unpack",gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>Pi(e,s)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Ta(t,Ws(t)),r=Js(e,n);let s=ea(t,yi(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=js(s,e+1);s=va(s,Ha(r.shape,"bool"));const i=Ws(r);return Bs(s,r,i)}(e,n)}}},{kernelName:"ZerosLike",gradFunc:e=>({x:()=>Ws(e)})}];for(const e of Yl)fe(e);De.prototype.abs=function(){return this.throwIfDisposed(),_r(this)},De.prototype.acos=function(){return this.throwIfDisposed(),Dr(this)},De.prototype.acosh=function(){return this.throwIfDisposed(),Fr(this)},De.prototype.addStrict=function(e){return this.throwIfDisposed(),so(this,e)},De.prototype.add=function(e){return this.throwIfDisposed(),Mr(this,e)},De.prototype.all=function(e,t){return this.throwIfDisposed(),Lr(this,e,t)},De.prototype.any=function(e,t){return this.throwIfDisposed(),zr(this,e,t)},De.prototype.argMax=function(e){return this.throwIfDisposed(),Pr(this,e)},De.prototype.argMin=function(e){return this.throwIfDisposed(),Br(this,e)},De.prototype.asScalar=function(){return this.throwIfDisposed(),u(1===this.size,(()=>"The array must have only 1 element.")),as(this,[])},De.prototype.asType=function(e){return this.throwIfDisposed(),Hn(this,e)},De.prototype.as1D=function(){return this.throwIfDisposed(),as(this,[this.size])},De.prototype.as2D=function(e,t){return this.throwIfDisposed(),as(this,[e,t])},De.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),as(this,[e,t,n])},De.prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),as(this,[e,t,n,r])},De.prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),as(this,[e,t,n,r,s])},De.prototype.asin=function(){return this.throwIfDisposed(),Wr(this)},De.prototype.asinh=function(){return this.throwIfDisposed(),Vr(this)},De.prototype.atan=function(){return this.throwIfDisposed(),Ur(this)},De.prototype.atan2=function(e){return this.throwIfDisposed(),Gr(this,e)},De.prototype.atanh=function(){return this.throwIfDisposed(),Hr(this)},De.prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),is(this,e,t,n,r)},De.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),us(this,e,t)},De.prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),ls(this,e,t,n,r,s)},De.prototype.broadcastTo=function(e){return this.throwIfDisposed(),fs(this,e)},De.prototype.cast=function(e){return this.throwIfDisposed(),Hn(this,e)},De.prototype.ceil=function(){return this.throwIfDisposed(),ms(this)},De.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),gs(this,e,t)},De.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof De&&(e=[e]),ys([this,...e],t)},De.prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Is(this,e,t,n,r,s,a)},De.prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),Ss(this,e,t,n,r,s)},De.prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),ks(this,e,t,n,r,s,a)},De.prototype.cos=function(){return this.throwIfDisposed(),Ts(this)},De.prototype.cosh=function(){return this.throwIfDisposed(),Cs(this)},De.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),$s(this,e,t,n)},De.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Rs(this,e,t)},De.prototype.depthwiseConv2D=function(e,t,n,r,s,a){return Nr("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),_s(this,e,t,n,r,s,a)},De.prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),_s(this,e,t,n,r,s,a)},De.prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Ds(this,e,t,n,r,s)},De.prototype.divNoNan=function(e){return this.throwIfDisposed(),Vs(this,e)},De.prototype.divStrict=function(e){return this.throwIfDisposed(),ao(this,e)},De.prototype.div=function(e){return this.throwIfDisposed(),Ms(this,e)};const Zl=an({dot_:function(e,t){const n=rn(e,"t1","dot"),r=rn(t,"t2","dot");u(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(u(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=as(n,[1,-1]),t=as(r,[-1,1]),s=tr(e,t);return as(s,[])}if(1===n.rank&&2===r.rank){const e=as(n,[1,-1]),t=as(r,[r.shape[0],r.shape[1]]),s=tr(e,t);return as(s,[s.size])}if(2===n.rank&&1===r.rank){const e=as(r,[-1,1]),t=tr(n,e);return as(t,[t.size])}{const e=as(r,[r.shape[0],r.shape[1]]);return tr(n,e)}}});De.prototype.dot=function(e){return this.throwIfDisposed(),Zl(this,e)},De.prototype.elu=function(){return this.throwIfDisposed(),Us(this)},De.prototype.equalStrict=function(e){return this.throwIfDisposed(),Ji(this,e)},De.prototype.equal=function(e){return this.throwIfDisposed(),Ps(this,e)},De.prototype.erf=function(){return this.throwIfDisposed(),Gs(this)},De.prototype.exp=function(){return this.throwIfDisposed(),Hs(this)},De.prototype.expandDims=function(e){return this.throwIfDisposed(),js(this,e)},De.prototype.expm1=function(){return this.throwIfDisposed(),qs(this)},De.prototype.fft=function(){return this.throwIfDisposed(),Ri(this)},De.prototype.flatten=function(){return this.throwIfDisposed(),as(this,[this.size])},De.prototype.floor=function(){return this.throwIfDisposed(),Zs(this)},De.prototype.floorDiv=function(e){return this.throwIfDisposed(),Fs(this,e)},De.prototype.gather=function(e,t){return this.throwIfDisposed(),Js(this,e,t)},De.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),Qi(this,e)},De.prototype.greaterEqual=function(e){return this.throwIfDisposed(),ea(this,e)},De.prototype.greaterStrict=function(e){return this.throwIfDisposed(),eo(this,e)},De.prototype.greater=function(e){return this.throwIfDisposed(),Qs(this,e)},De.prototype.ifft=function(){return this.throwIfDisposed(),_i(this)},De.prototype.irfft=function(){return this.throwIfDisposed(),Di(this)},De.prototype.isFinite=function(){return this.throwIfDisposed(),na(this)},De.prototype.isInf=function(){return this.throwIfDisposed(),ra(this)},De.prototype.isNaN=function(){return this.throwIfDisposed(),sa(this)},De.prototype.leakyRelu=function(e){return this.throwIfDisposed(),aa(this,e)},De.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),to(this,e)},De.prototype.lessEqual=function(e){return this.throwIfDisposed(),oa(this,e)},De.prototype.lessStrict=function(e){return this.throwIfDisposed(),no(this,e)},De.prototype.less=function(e){return this.throwIfDisposed(),ia(this,e)},De.prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),la(this,e,t,n,r)},De.prototype.logSigmoid=function(){return this.throwIfDisposed(),ga(this)},De.prototype.logSoftmax=function(e){return this.throwIfDisposed(),wa(this,e)},De.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),ou(this,e,t)},De.prototype.log=function(){return this.throwIfDisposed(),ca(this)},De.prototype.log1p=function(){return this.throwIfDisposed(),ha(this)},De.prototype.logicalAnd=function(e){return this.throwIfDisposed(),va(this,e)},De.prototype.logicalNot=function(){return this.throwIfDisposed(),ka(this)},De.prototype.logicalOr=function(e){return this.throwIfDisposed(),Ia(this,e)};const Jl=an({logicalXor_:function(e,t){const n=rn(e,"a","logicalXor","bool"),r=rn(t,"b","logicalXor","bool");return zs(n.shape,r.shape),va(Ia(e,t),ka(va(e,t)))}});De.prototype.logicalXor=function(e){return this.throwIfDisposed(),Jl(this,e)},De.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),tr(this,e,t,n)},De.prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),Na(this,e,t,n,r)},De.prototype.max=function(e,t){return this.throwIfDisposed(),ya(this,e,t)},De.prototype.maximumStrict=function(e){return this.throwIfDisposed(),io(this,e)},De.prototype.maximum=function(e){return this.throwIfDisposed(),Ta(this,e)},De.prototype.mean=function(e,t){return this.throwIfDisposed(),Ca(this,e,t)},De.prototype.min=function(e,t){return this.throwIfDisposed(),$a(this,e,t)},De.prototype.minimumStrict=function(e){return this.throwIfDisposed(),oo(this,e)},De.prototype.minimum=function(e){return this.throwIfDisposed(),Aa(this,e)},De.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Ra(this,e,t)},De.prototype.modStrict=function(e){return this.throwIfDisposed(),uo(this,e)},De.prototype.mod=function(e){return this.throwIfDisposed(),_a(this,e)},De.prototype.mulStrict=function(e){return this.throwIfDisposed(),lo(this,e)},De.prototype.mul=function(e){return this.throwIfDisposed(),pa(this,e)},De.prototype.neg=function(){return this.throwIfDisposed(),da(this)},De.prototype.norm=function(e,t,n){return this.throwIfDisposed(),mo(this,e,t,n)},De.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),ro(this,e)},De.prototype.notEqual=function(e){return this.throwIfDisposed(),Ua(this,e)},De.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),nr(this,e,t,n)},De.prototype.onesLike=function(){return this.throwIfDisposed(),ja(this)},De.prototype.pad=function(e,t){return this.throwIfDisposed(),qa(this,e,t)};const Ql=an({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=rn(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=as(i,[1,i.shape[0],i.shape[1],i.shape[2]])),u(rs(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=qr(o.shape,t,a,s,r),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=s.map(((e,t)=>e+i[t])),u=t.map(((e,t)=>[r[t],o[t]])),l=t.map(((e,t)=>[0,i[t]]));return[u,l]}([c.inHeight,c.inWidth],h,p),g=d?r:"valid",y=d?o:Ai(o,h,f),b=("avg"===n?()=>is(y,t,a,g):()=>Na(y,t,a,g))(),x=d?b:us(b,h,m);return l?as(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});var ec,tc,nc;De.prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),Ql(this,e,t,n,r,s)},De.prototype.powStrict=function(e){return this.throwIfDisposed(),co(this,e)},De.prototype.pow=function(e){return this.throwIfDisposed(),Ka(this,e)},De.prototype.prelu=function(e){return this.throwIfDisposed(),Xa(this,e)},De.prototype.prod=function(e,t){return this.throwIfDisposed(),Ya(this,e,t)},De.prototype.reciprocal=function(){return this.throwIfDisposed(),hi(this)},De.prototype.relu=function(){return this.throwIfDisposed(),pi(this)},De.prototype.relu6=function(){return this.throwIfDisposed(),di(this)},De.prototype.reshapeAs=function(e){return this.throwIfDisposed(),as(this,e.shape)},De.prototype.reshape=function(e){return this.throwIfDisposed(),as(this,e)},De.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Jo(this,e,t,n)},De.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Qo(this,e,t,n)},De.prototype.reverse=function(e){return this.throwIfDisposed(),fi(this,e)},De.prototype.rfft=function(){return this.throwIfDisposed(),Mi(this)},De.prototype.round=function(){return this.throwIfDisposed(),mi(this)},De.prototype.rsqrt=function(){return this.throwIfDisposed(),gi(this)},De.prototype.selu=function(){return this.throwIfDisposed(),bi(this)},De.prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),xi(this,e,t,n,r,s,a)},De.prototype.sigmoid=function(){return this.throwIfDisposed(),fa(this)},De.prototype.sign=function(){return this.throwIfDisposed(),vi(this)},De.prototype.sin=function(){return this.throwIfDisposed(),ki(this)},De.prototype.sinh=function(){return this.throwIfDisposed(),Ii(this)},De.prototype.slice=function(e,t){return this.throwIfDisposed(),Ni(this,e,t)},De.prototype.softmax=function(e){return this.throwIfDisposed(),$i(this,e)},De.prototype.softplus=function(){return this.throwIfDisposed(),ma(this)},De.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Ai(this,e,t)},De.prototype.split=function(e,t){return this.throwIfDisposed(),Fi(this,e,t)},De.prototype.sqrt=function(){return this.throwIfDisposed(),Oi(this)},De.prototype.square=function(){return this.throwIfDisposed(),Ba(this)},De.prototype.squaredDifference=function(e){return this.throwIfDisposed(),Li(this,e)},De.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),ho(this,e)},De.prototype.squeeze=function(e){return this.throwIfDisposed(),zi(this,e)},De.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof De?[this,e]:[this,...e];return Pi(n,t)},De.prototype.step=function(e){return this.throwIfDisposed(),Bi(this,e)},De.prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),Wi(this,e,t,n,r,s,a,i,o)},De.prototype.subStrict=function(e){return this.throwIfDisposed(),po(this,e)},De.prototype.sub=function(e){return this.throwIfDisposed(),ba(this,e)},De.prototype.sum=function(e,t){return this.throwIfDisposed(),xa(this,e,t)},De.prototype.tan=function(){return this.throwIfDisposed(),Vi(this)},De.prototype.tanh=function(){return this.throwIfDisposed(),Ui(this)},De.prototype.tile=function(e){return this.throwIfDisposed(),Ks(this,e)},De.prototype.toBool=function(){return this.throwIfDisposed(),Hn(this,"bool")},De.prototype.toFloat=function(){return this.throwIfDisposed(),Hn(this,"float32")},De.prototype.toInt=function(){return this.throwIfDisposed(),Hn(this,"int32")},De.prototype.topk=function(e,t){return this.throwIfDisposed(),ji(this,e,t)},De.prototype.transpose=function(e){return this.throwIfDisposed(),rr(this,e)},De.prototype.unique=function(e){return this.throwIfDisposed(),Ki(this,e)},De.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),El(this,e,t)},De.prototype.unstack=function(e){return this.throwIfDisposed(),Xi(this,e)},De.prototype.where=function(e,t){return this.throwIfDisposed(),Bs(e,this,t)},De.prototype.zerosLike=function(){return this.throwIfDisposed(),Ws(this)},(tc=ec||(ec={}))[tc.DT_INVALID=0]="DT_INVALID",tc[tc.DT_FLOAT=1]="DT_FLOAT",tc[tc.DT_DOUBLE=2]="DT_DOUBLE",tc[tc.DT_INT32=3]="DT_INT32",tc[tc.DT_UINT8=4]="DT_UINT8",tc[tc.DT_INT16=5]="DT_INT16",tc[tc.DT_INT8=6]="DT_INT8",tc[tc.DT_STRING=7]="DT_STRING",tc[tc.DT_COMPLEX64=8]="DT_COMPLEX64",tc[tc.DT_INT64=9]="DT_INT64",tc[tc.DT_BOOL=10]="DT_BOOL",tc[tc.DT_QINT8=11]="DT_QINT8",tc[tc.DT_QUINT8=12]="DT_QUINT8",tc[tc.DT_QINT32=13]="DT_QINT32",tc[tc.DT_BFLOAT16=14]="DT_BFLOAT16",tc[tc.DT_FLOAT_REF=101]="DT_FLOAT_REF",tc[tc.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",tc[tc.DT_INT32_REF=103]="DT_INT32_REF",tc[tc.DT_UINT8_REF=104]="DT_UINT8_REF",tc[tc.DT_INT16_REF=105]="DT_INT16_REF",tc[tc.DT_INT8_REF=106]="DT_INT8_REF",tc[tc.DT_STRING_REF=107]="DT_STRING_REF",tc[tc.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",tc[tc.DT_INT64_REF=109]="DT_INT64_REF",tc[tc.DT_BOOL_REF=110]="DT_BOOL_REF",tc[tc.DT_QINT8_REF=111]="DT_QINT8_REF",tc[tc.DT_QUINT8_REF=112]="DT_QUINT8_REF",tc[tc.DT_QINT32_REF=113]="DT_QINT32_REF",tc[tc.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(nc||(nc={}));const rc={};function sc(e){return rc[e]}function ac(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return ic(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>ic(e,n,r,s)))}const o=ic(t.inputNames.slice(e)[0],n,r,s),u=o.dataSync();return"number"===a.type?u[0]:D(o.shape,u)}const i=t.attrParams[e];return i&&i.value}function ic(e,t,n,r){const[s,a]=lc(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[uc(s,e)]));return void 0!==i?t[uc(s,i)][a]:void 0}function oc(e,t){const[n,r]=lc(e);return[uc(n,t&&t.currentContextId),r]}function uc(e,t){return t?`${e}-${t}`:e}function lc(e){const t=e.split(":");if(1===t.length)return[e,0];return[t[0],Number(t[t.length-1])]}function cc(e,t,n){let r=ac("pad",e,t,n);if("explicit"===r){r=ac("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function hc(e){return e.kept?e:jn(e)}var pc={};const dc=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];e(pc,"json",(function(){return dc}));var fc={};const mc=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];e(fc,"json",(function(){return mc}));var gc={};const yc=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];e(gc,"json",(function(){return yc}));var bc={};const xc=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];e(bc,"json",(function(){return xc}));var wc={};const vc=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];e(wc,"json",(function(){return vc}));var kc={};const Ic=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];e(kc,"json",(function(){return Ic}));var Nc={};const Sc=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];e(Nc,"json",(function(){return Sc}));var Ec={};const Tc=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];e(Ec,"json",(function(){return Tc}));var Cc={};const $c=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}];e(Cc,"json",(function(){return $c}));var Ac={};const Rc=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];e(Ac,"json",(function(){return Rc}));var _c={};const Dc=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];e(_c,"json",(function(){return Dc}));var Fc={};const Mc=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];e(Fc,"json",(function(){return Mc}));var Oc={};const Lc=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];e(Oc,"json",(function(){return Lc}));var zc={};const Pc=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];e(zc,"json",(function(){return Pc}));var Bc={};const Wc=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];e(Bc,"json",(function(){return Wc}));var Vc={};const Uc=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];e(Vc,"json",(function(){return Uc}));var Gc={};const Hc=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];e(Gc,"json",(function(){return Hc}));var jc=yt;class qc{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[pc,fc,gc,bc,wc,kc,Nc,_c,Ac,Ec,Fc,Oc,zc,Bc,Vc,Gc,Cc].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=oc(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=oc(e),n=i[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=oc(e),n=i[t];n&&(n.signatureKey=l[e],o.push(n))})):o=r;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:u,weights:s,placeholders:r,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=sc(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=Xc(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Xc(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=ah(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ah(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Zc(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Zc(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=sh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=sh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Yc(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Yc(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=oh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=oh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=rh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=rh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=ih(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ih(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=eh(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=eh(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=th(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=th(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Qc(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Qc(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=oc(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Jc(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach((e=>{const[n]=oc(e);t.inputs.push(r[n]),r[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=oc(i[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const o=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Kc(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=V().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==jc)return new jc(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Xc(e,t,n,r=!1){const s=e[t];return null!=s?Kc(s.s,r):n}function Yc(e,t,n){const r=e[t];return r?r.b:n}function Zc(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function Jc(e){switch("string"==typeof e&&(e=ec[e]),e){case ec.DT_FLOAT:return"float32";case ec.DT_INT32:case ec.DT_INT64:case ec.DT_INT8:case ec.DT_UINT8:return"int32";case ec.DT_BOOL:return"bool";case ec.DT_DOUBLE:return"float32";case ec.DT_STRING:return"string";default:return null}}function Qc(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function eh(e,t,n){const r=e[t];return r&&r.type?Jc(r.type):n}function th(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Jc(e))):n}function nh(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function rh(e,t,n){const r=e[t];return r&&r.shape?nh(r.shape):n}function sh(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function ah(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Kc(e,r))):n}function ih(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>nh(e))):n}function oh(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class uh{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return ic(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return ic(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Zc(this.node.rawAttrs,e,t);if(null!=n.s)return Xc(this.node.rawAttrs,e,t);if(null!=n.b)return Yc(this.node.rawAttrs,e,t);if(null!=n.shape)return rh(this.node.rawAttrs,e,t);if(null!=n.type)return eh(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return sh(this.node.rawAttrs,e,t);if(null!=n.list.s)return ah(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ih(this.node.rawAttrs,e,t);if(null!=n.list.b)return oh(this.node.rawAttrs,e,t);if(null!=n.list.type)return th(this.node.rawAttrs,e,t)}return t}}function lh(e,t,n=""){u(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class ch{constructor(e,t,n,r,s,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=yi(0),$r(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),lh(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,$r(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ln([],[0].concat(this.elementShape));const n=this.readMany(e);return lh(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Pi(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ln([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return lh(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ys(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Xi(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];Tr((()=>{t=as(t,[1,n,s]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,e[n],s];a[n]=as(Ni(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class hh{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);lh(t,e.shape,"TensorList shape mismatch: "),$r(e)})),this.idTensor=yi(0),this.maxNumElements=r,$r(this.idTensor)}get id(){return this.idTensor.id}copy(){return new hh([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return lh(e,this.elementShape,"TensorList shape mismatch: "),Tr((()=>{const t=this.tensors.map((t=>as(t,e)));return Pi(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return lh(n.shape,e,"TensorList shape mismatch: "),as(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(lh(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");$r(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return lh(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);lh(this.elementShape,t.shape,"TensorList shape mismatch: "),$r(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return lh(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?ln([],[0].concat(this.elementShape)):Tr((()=>{const t=e.map((e=>as(this.tensors[e],n)));return Pi(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return lh(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?ln([],[0].concat(this.elementShape)):Tr((()=>{const e=this.tensors.map((e=>as(e,t)));return ys(e,0)}))}}const ph=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=ac("thenBranch",e,t,n),s=ac("elseBranch",e,t,n),a=ac("cond",e,t,n),i=ac("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=ac("body",e,t,n),s=ac("cond",e,t,n),a=ac("args",e,t,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let u=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[hc(ac("pred",e,t,n))];case"Switch":{const r=ac("pred",e,t,n);let s=ac("data",e,t,n);return s.kept||(s=hc(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==ic(e,t,n)));if(r){return[hc(ic(r,t,n))]}return}case"Enter":{const r=ac("frameName",e,t,n),s=ac("tensor",e,t,n);return n.enterFrame(r),[hc(s)]}case"Exit":{const r=ac("tensor",e,t,n);return n.exitFrame(),[hc(r)]}case"NextIteration":{const r=ac("tensor",e,t,n);return n.nextIteration(),[hc(r)]}case"TensorArrayV3":{const r=ac("size",e,t,n),s=ac("dtype",e,t,n),a=ac("elementShape",e,t,n),i=ac("dynamicSize",e,t,n),o=ac("clearAfterRead",e,t,n),u=ac("identicalElementShapes",e,t,n),l=ac("name",e,t,n),c=new ch(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,yi(1)]}case"TensorArrayWriteV3":{const r=ac("tensorArrayId",e,t,n),s=ac("index",e,t,n),a=ac("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=ac("tensorArrayId",e,t,n),s=ac("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=ac("tensorArrayId",e,t,n),s=ac("indices",e,t,n),a=ac("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=ac("tensorArrayId",e,t,n),s=ac("indices",e,t,n),a=ac("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=ac("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=ac("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=ac("tensorArrayId",e,t,n),s=ac("tensor",e,t,n),a=ac("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=ac("tensorArrayId",e,t,n);return[yi(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=ac("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=ac("tensorListId",e,t,n),s=ac("index",e,t,n),a=ac("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=ac("tensorListId",e,t,n),s=ac("index",e,t,n),a=ac("elementShape",e,t,n),i=ac("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=ac("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new hh([],n,e.dtype,r),i=Xi(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(ac("tensor",e,t,n),r,ac("elementShape",e,t,n),ac("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=ac("elementShape",e,t,n),s=ac("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new hh([],e,t,n)}(r,s,ac(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=ac("tensorListId",e,t,n),s=ac("indices",e,t,n),a=ac("elementShape",e,t,n),i=ac("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=ac("tensorListId",e,t,n),s=ac("elementShape",e,t,n),a=ac("elementDType",e,t,n),i=ac("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);lh(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Xi(e);return new hh(s,t,r)}(ac("tensor",e,t,n),ac("elementShape",e,t,n),ac("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=ac("tensorListId",e,t,n),s=n.getTensorList(r.id),a=ac("dtype",e,t,n),i=ac("elementShape",e,t,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=ac("tensorListId",e,t,n),s=ac("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=ac("tensorListId",e,t,n),s=ac("elementShape",e,t,n),a=ac("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=ac("tensor",e,t,n),s=ac("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=0===r?0:e.size/r,i=Tr((()=>{const i=[];e=as(e,[1,r,a]);for(let r=0;r<t.length;++r){const o=[0,0===r?0:s[r-1],0],u=[1,t[r],a];i[r]=as(Ni(e,o,u),n)}return e.dispose(),i})),o=new hh([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)o.setItem(e,i[e]);return o}(r,ac("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function dh(e,t,n){const[r,s]=ac("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,u=ac("numArgs",e,t,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const l=ac("strides",e,t,n),c=cc(e,t,n),h=ac("dataFormat",e,t,n).toUpperCase(),p=ac("dilations",e,t,n),[d,f]=ac("args",e,t,n);return{stride:l,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:s,leakyreluAlpha:ac("leakyreluAlpha",e,t,n)}}function fh(e,t,n){return{boxes:ac("boxes",e,t,n),scores:ac("scores",e,t,n),maxOutputSize:ac("maxOutputSize",e,t,n),iouThreshold:ac("iouThreshold",e,t,n),scoreThreshold:ac("scoreThreshold",e,t,n),softNmsSigma:ac("softNmsSigma",e,t,n)}}class mh{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=yi(0),this.tensorMap=new Map,$r(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Tr((()=>{const e=Xi(t),r=n.length,s=e.length;u(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];$r(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Tr((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return Pi(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function gh(e,t,n,r){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return Tr((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[Mr(ac("a",e,t,n),ac("b",e,t,n))];case"AddN":return[Or(ac("tensors",e,t,n))];case"FloorMod":case"Mod":return[_a(ac("a",e,t,n),ac("b",e,t,n))];case"Mul":return[pa(ac("a",e,t,n),ac("b",e,t,n))];case"RealDiv":case"Div":return[Ms(ac("a",e,t,n),ac("b",e,t,n))];case"DivNoNan":return[Vs(ac("a",e,t,n),ac("b",e,t,n))];case"FloorDiv":return[Fs(ac("a",e,t,n),ac("b",e,t,n))];case"Sub":return[ba(ac("a",e,t,n),ac("b",e,t,n))];case"Minimum":return[Aa(ac("a",e,t,n),ac("b",e,t,n))];case"Maximum":return[Ta(ac("a",e,t,n),ac("b",e,t,n))];case"Pow":return[Ka(ac("a",e,t,n),ac("b",e,t,n))];case"SquaredDifference":return[Li(ac("a",e,t,n),ac("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return Tr((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[_r(ac("x",e,t,n))];case"Acos":return[Dr(ac("x",e,t,n))];case"Acosh":return[Fr(ac("x",e,t,n))];case"Asin":return[Wr(ac("x",e,t,n))];case"Asinh":return[Vr(ac("x",e,t,n))];case"Atan":return[Ur(ac("x",e,t,n))];case"Atan2":return[Gr(ac("x",e,t,n),ac("y",e,t,n))];case"Atanh":return[Hr(ac("x",e,t,n))];case"Ceil":return[ms(ac("x",e,t,n))];case"Complex":return[on(ac("real",e,t,n),ac("imag",e,t,n))];case"Cos":return[Ts(ac("x",e,t,n))];case"Cosh":return[Cs(ac("x",e,t,n))];case"Elu":return[Us(ac("x",e,t,n))];case"Erf":return[Gs(ac("x",e,t,n))];case"Exp":return[Hs(ac("x",e,t,n))];case"Expm1":return[qs(ac("x",e,t,n))];case"Floor":return[Zs(ac("x",e,t,n))];case"Log":return[ca(ac("x",e,t,n))];case"Log1p":return[ha(ac("x",e,t,n))];case"Imag":return[ta(ac("x",e,t,n))];case"Neg":return[da(ac("x",e,t,n))];case"Reciprocal":return[hi(ac("x",e,t,n))];case"Real":return[ci(ac("x",e,t,n))];case"Relu":return[pi(ac("x",e,t,n))];case"Round":return[mi(ac("x",e,t,n))];case"Selu":return[bi(ac("x",e,t,n))];case"Sigmoid":return[fa(ac("x",e,t,n))];case"Sin":return[ki(ac("x",e,t,n))];case"Sign":return[vi(ac("x",e,t,n))];case"Sinh":return[Ii(ac("x",e,t,n))];case"Softplus":return[ma(ac("x",e,t,n))];case"Sqrt":return[Oi(ac("x",e,t,n))];case"Square":return[Ba(ac("x",e,t,n))];case"Tanh":return[Ui(ac("x",e,t,n))];case"Tan":return[Vi(ac("x",e,t,n))];case"ClipByValue":return[gs(ac("x",e,t,n),ac("clipValueMin",e,t,n),ac("clipValueMax",e,t,n))];case"Relu6":return[di(ac("x",e,t,n))];case"Rsqrt":return[gi(ic(e.inputNames[0],t,n))];case"Prod":return[Ya(ac("x",e,t,n),ac("axes",e,t,n))];case"LeakyRelu":return[aa(ac("x",e,t,n),ac("alpha",e,t,n))];case"Prelu":return[Xa(ac("x",e,t,n),ac("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return ph(e,t,n);case"convolution":return Tr((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=ac("stride",e,t,n),s=ac("pad",e,t,n),a=ac("dataFormat",e,t,n).toUpperCase(),i=ac("dilation",e,t,n);return[Is(ac("x",e,t,n),ac("filter",e,t,n),r,s,a,i)]}case"Conv2D":{const r=ac("strides",e,t,n),s=cc(e,t,n),a=ac("dataFormat",e,t,n).toUpperCase(),i=ac("dilations",e,t,n);return[ks(ac("x",e,t,n),ac("filter",e,t,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l,leakyreluAlpha:c}=dh(e,t,n);return[So({x:ac("x",e,t,n),filter:ac("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l,leakyreluAlpha:c}=dh(e,t,n);return[Co({x:ac("x",e,t,n),filter:ac("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=ac("outputShape",e,t,n),s=ac("strides",e,t,n),a=cc(e,t,n);return[Ss(ac("x",e,t,n),ac("filter",e,t,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=ac("strides",e,t,n),s=cc(e,t,n),a=ac("dilations",e,t,n),i=ac("dataFormat",e,t,n).toUpperCase();return[_s(ac("input",e,t,n),ac("filter",e,t,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("dataFormat",e,t,n).toUpperCase(),i=ac("dilations",e,t,n);return[Es(ac("x",e,t,n),ac("filter",e,t,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("kernelSize",e,t,n);return[is(ac("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("kernelSize",e,t,n);return[Na(ac("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("kernelSize",e,t,n),i=ac("includeBatchInIndex",e,t,n),{result:o,indexes:u}=Ea(ac("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("kernelSize",e,t,n);return[os(ac("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("kernelSize",e,t,n);return[Sa(ac("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=ac("strides",e,t,n),s=ac("pad",e,t,n),a=ac("dilations",e,t,n),i=r[1],o=r[2],u=a[1],l=a[2];return[Ds(ac("x",e,t,n),ac("filter",e,t,n),[i,o],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return Tr((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=ac("shape",e,t,n),s=ac("dtype",e,t,n);return[Ys(r,ac("value",e,t,n),s)]}case"LinSpace":return[ua(ac("start",e,t,n),ac("stop",e,t,n),ac("num",e,t,n))];case"Multinomial":{const r=ac("logits",e,t,n),s=ac("numSamples",e,t,n),a=ac("seed",e,t,n);return[Va(r,s,a)]}case"OneHot":{const r=ac("indices",e,t,n),s=ac("depth",e,t,n),a=ac("onValue",e,t,n),i=ac("offValue",e,t,n);return[nr(r,s,a,i)]}case"Ones":return[Ha(ac("shape",e,t,n),ac("dtype",e,t,n))];case"OnesLike":return[ja(ac("x",e,t,n))];case"RandomUniform":return[ui(ac("shape",e,t,n),ac("minval",e,t,n),ac("maxval",e,t,n),ac("dtype",e,t,n))];case"Range":return[li(ac("start",e,t,n),ac("stop",e,t,n),ac("step",e,t,n),ac("dtype",e,t,n))];case"TruncatedNormal":{const r=ac("shape",e,t,n),s=ac("mean",e,t,n),a=ac("stdDev",e,t,n),i=ac("seed",e,t,n);return[qi(r,s,a,ac("dtype",e,t,n),i)]}case"Zeros":return[Ga(ac("shape",e,t,n),ac("dtype",e,t,n))];case"ZerosLike":return[Ws(ac("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=fh(e,t,n),l=await uu.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=fh(e,t,n),u=ac("padToMaxOutputSize",e,t,n),l=await uu.nonMaxSuppressionPaddedAsync(r,s,a,i,o,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=fh(e,t,n);return[await uu.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=Hn(ac("condition",e,t,n),"bool"),s=[await Zi(r)];return r.dispose(),s}case"ListDiff":return wi(ac("x",e,t,n),ac("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return Tr((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=ac("x",e,t,n),s=ac("k",e,t,n),a=ac("sorted",e,t,n),i=ji(r,s,a);return[i.values,i.indices]}case"Unique":{const r=ac("x",e,t,n),s=Ki(r);return[s.values,s.indices]}case"UniqueV2":{const r=ac("x",e,t,n),s=ac("axis",e,t,n),a=Ki(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return Tr((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=ac("images",e,t,n),s=ac("size",e,t,n),a=ac("alignCorners",e,t,n),i=ac("halfPixelCenters",e,t,n);return[uu.resizeBilinear(r,[s[0],s[1]],a,i)]}case"ResizeNearestNeighbor":{const r=ac("images",e,t,n),s=ac("size",e,t,n),a=ac("alignCorners",e,t,n),i=ac("halfPixelCenters",e,t,n);return[uu.resizeNearestNeighbor(r,[s[0],s[1]],a,i)]}case"CropAndResize":{const r=ac("image",e,t,n),s=ac("boxes",e,t,n),a=ac("boxInd",e,t,n),i=ac("cropSize",e,t,n),o=ac("method",e,t,n),u=ac("extrapolationValue",e,t,n);return[uu.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return Tr((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=ac("default",e,t,n);return[ic(e.name,t,n)||r];case"Placeholder":return[ic(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[hc(ac("x",e,t,n))];case"IdentityN":return ac("x",e,t,n).map((e=>hc(e)));case"Snapshot":return[hc(ac("x",e,t,n))];case"Shape":return[Gi(ac("x",e,t,n).shape,"int32")];case"ShapeN":return ac("x",e,t,n).map((e=>Gi(e.shape)));case"Size":return[yi(ac("x",e,t,n).size,"int32")];case"Rank":return[yi(ac("x",e,t,n).rank,"int32")];case"NoOp":return[yi(1)];case"Print":const s=ac("x",e,t,n),a=ac("data",e,t,n),i=ac("message",e,t,n),o=ac("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return Tr((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Ps(ac("a",e,t,n),ac("b",e,t,n))];case"NotEqual":return[Ua(ac("a",e,t,n),ac("b",e,t,n))];case"Greater":return[Qs(ac("a",e,t,n),ac("b",e,t,n))];case"GreaterEqual":return[ea(ac("a",e,t,n),ac("b",e,t,n))];case"Less":return[ia(ac("a",e,t,n),ac("b",e,t,n))];case"LessEqual":return[oa(ac("a",e,t,n),ac("b",e,t,n))];case"LogicalAnd":return[va(ac("a",e,t,n),ac("b",e,t,n))];case"LogicalNot":return[ka(ac("a",e,t,n))];case"LogicalOr":return[Ia(ac("a",e,t,n),ac("b",e,t,n))];case"Select":case"SelectV2":return[Bs(ac("condition",e,t,n),ac("a",e,t,n),ac("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return Tr((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[tr(ac("a",e,t,n),ac("b",e,t,n),ac("transposeA",e,t,n),ac("transposeB",e,t,n))];case"Transpose":return[rr(ac("x",e,t,n),ac("perm",e,t,n))];case"_FusedMatMul":const[r,s]=ac("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o=ac("numArgs",e,t,n),u=ac("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=ac("args",e,t,n);return[$o({a:ac("a",e,t,n),b:ac("b",e,t,n),transposeA:ac("transposeA",e,t,n),transposeB:ac("transposeB",e,t,n),bias:l,activation:s,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return Tr((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[ls(ac("x",e,t,n),ac("mean",e,t,n),ac("variance",e,t,n),ac("offset",e,t,n),ac("scale",e,t,n),ac("epsilon",e,t,n))];case"LRN":return[la(ac("x",e,t,n),ac("radius",e,t,n),ac("bias",e,t,n),ac("alpha",e,t,n),ac("beta",e,t,n))];case"Softmax":return[$i(ac("x",e,t,n))];case"LogSoftmax":return[wa(ac("x",e,t,n))];case"SparseToDense":return[yo(ac("sparseIndices",e,t,n),ac("outputShape",e,t,n),ac("sparseValues",e,t,n),ac("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return Tr((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[ya(ac("x",e,t,n),r,s)]}case"Mean":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[Ca(ac("x",e,t,n),r,s)]}case"Min":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[$a(ac("x",e,t,n),r,s)]}case"Sum":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[xa(ac("x",e,t,n),r,s)]}case"All":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[Lr(ac("x",e,t,n),r,s)]}case"Any":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[zr(ac("x",e,t,n),r,s)]}case"ArgMax":{const r=ac("axis",e,t,n);return[Pr(ac("x",e,t,n),r)]}case"ArgMin":{const r=ac("axis",e,t,n);return[Br(ac("x",e,t,n),r)]}case"Prod":{const r=ac("axis",e,t,n),s=ac("keepDims",e,t,n);return[Ya(ac("x",e,t,n),r,s)]}case"Cumsum":{const r=ac("axis",e,t,n),s=ac("exclusive",e,t,n),a=ac("reverse",e,t,n);return[$s(ac("x",e,t,n),r,s,a)]}case"Bincount":const r=ac("x",e,t,n),s=ac("weights",e,t,n),a=ac("size",e,t,n);return[ds(r,s,a)];case"DenseBincount":{const r=ac("x",e,t,n),s=ac("weights",e,t,n),a=ac("size",e,t,n),i=ac("binaryOutput",e,t,n);return[As(r,s,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return Tr((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=ac("n",e,t,n),s=ac("axis",e,t,n);let a=ac("tensors",e,t,n);return a=a.slice(0,r),[ys(a,s)]}case"Gather":{const r=ac("x",e,t,n),s=ac("indices",e,t,n);return[Js(r,Hn(s,"int32"),0)]}case"GatherV2":{const r=ac("axis",e,t,n),s=ac("batchDims",e,t,n),a=ac("x",e,t,n),i=ac("indices",e,t,n);return[Js(a,Hn(i,"int32"),r,s)]}case"Reverse":{const r=ac("dims",e,t,n),s=[];for(let e=0;e<r.length;e++)r[e]&&s.push(e);const a=ac("x",e,t,n);return[fi(a,s)]}case"ReverseV2":{const r=ac("axis",e,t,n),s=ac("x",e,t,n);return[fi(s,r)]}case"Slice":{const r=ac("begin",e,t,n),s=ac("size",e,t,n);return[Ni(ac("x",e,t,n),r,s)]}case"StridedSlice":{const r=ac("begin",e,t,n),s=ac("end",e,t,n),a=ac("strides",e,t,n),i=ac("beginMask",e,t,n),o=ac("endMask",e,t,n),u=ac("ellipsisMask",e,t,n),l=ac("newAxisMask",e,t,n),c=ac("shrinkAxisMask",e,t,n),h=ac("x",e,t,n);return[Wi(h,r,s,a,i,o,u,l,c)]}case"Pack":return Tr((()=>{const r=ac("axis",e,t,n),s=ac("tensors",e,t,n),a=s[0].shape,i=zi(s[0]).shape,o=s.map((e=>{const t=d(e.shape,a);if(!t&&!d(zi(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:as(e,a)}));return[Pi(o,r)]}));case"Unpack":{const r=ac("axis",e,t,n),s=ac("tensor",e,t,n);return Xi(s,r)}case"Tile":{const r=ac("reps",e,t,n);return[Ks(ac("x",e,t,n),r)]}case"Split":case"SplitV":{const r=ac("axis",e,t,n),s=ac("numOrSizeSplits",e,t,n),a=ac("x",e,t,n);return Fi(a,s,r)}case"ScatterNd":{const r=ac("indices",e,t,n),s=ac("values",e,t,n),a=ac("shape",e,t,n);return[go(r,s,a)]}case"GatherNd":{const r=ac("x",e,t,n),s=ac("indices",e,t,n);return[bo(r,s)]}case"SparseToDense":{const r=ac("sparseIndices",e,t,n),s=ac("outputShape",e,t,n),a=ac("sparseValues",e,t,n),i=ac("defaultValue",e,t,n);return[yo(r,a,s,a.dtype===i.dtype?i:Hn(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return Tr((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Ri(ac("x",e,t,n))];case"IFFT":return[_i(ac("x",e,t,n))];case"RFFT":return[Mi(ac("x",e,t,n))];case"IRFFT":return[Di(ac("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return Tr((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Hn(ac("x",e,t,n),ac("dtype",e,t,n))];case"ExpandDims":{const r=ac("axis",e,t,n);return[js(ac("x",e,t,n),r)]}case"Squeeze":{const r=ac("axis",e,t,n);return[zi(ac("x",e,t,n),r)]}case"Reshape":return[as(ac("x",e,t,n),ac("shape",e,t,n))];case"MirrorPad":return[Ra(ac("x",e,t,n),ac("padding",e,t,n),ac("mode",e,t,n))];case"PadV2":case"Pad":return[qa(ac("x",e,t,n),ac("padding",e,t,n),ac("constantValue",e,t,n))];case"SpaceToBatchND":{const r=ac("blockShape",e,t,n),s=ac("paddings",e,t,n);return[Ai(ac("x",e,t,n),r,s)]}case"BatchToSpaceND":{const r=ac("blockShape",e,t,n),s=ac("crops",e,t,n);return[us(ac("x",e,t,n),r,s)]}case"DepthToSpace":{const r=ac("blockSize",e,t,n),s=ac("dataFormat",e,t,n).toUpperCase();return[Rs(ac("x",e,t,n),r,s)]}case"BroadcastTo":return[fs(ac("x",e,t,n),ac("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=ac("keyDType",e,t,n),a=ac("valueDType",e,t,n),i=new mh(s,a);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=ac("tableHandle",e,t,n,r),a=ac("keys",e,t,n),i=ac("values",e,t,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=ac("tableHandle",e,t,n,r),a=ac("keys",e,t,n),i=ac("defaultValue",e,t,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=sc(e.op);if(s&&s.customExecutor)return s.customExecutor(new uh(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return B(s)?s.then((e=>[].concat(e))):[].concat(s)}class yh{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function bh(e,t,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,l=Object.keys(e).map((e=>lc(e)[0]));let c=[];null!=r&&(c=r.map((e=>lc(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(kh(e)||Ih(e)||Nh(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}const xh=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],wh=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],vh=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function kh(e){return xh.indexOf(e.op)>=0}function Ih(e){return wh.indexOf(e.op)>=0}function Nh(e){return vh.indexOf(e.op)>=0}class Sh{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Sh(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=bh(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],i=Object.keys(s).map((e=>lc(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{r.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[lc(e)[0]])),s=t.map((e=>lc(e)[0]));let a=s.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(r,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const u={},l={};return Tr((()=>{const n=new yh(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=lc(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!r[t.name]){const e=gh(t,r,n,this._resourceManager);if(B(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,i)}}return null==this.parent&&n.dispose(a),t.map((e=>ic(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[uc(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!s.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new yh(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>ic(e,i,a))),u=o.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[lc(e)[0]])),i=n.map((e=>lc(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=bh(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=lc(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!kh(e)&&!ic(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,r,s,a,i,o,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&ac("isConstant",e.node,r,n)&&([c]=oc(e.node.name,n)),null==r[e.node.name]){const h=gh(e.node,r,n,this._resourceManager);c||([c]=oc(e.node.name,n));const p=n.currentContext;B(h)?l.push(h.then((l=>(r[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[c]=h,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[i]=oc(e.name,n);!s[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!ic(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!ic(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=lc(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;u(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&u(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=lc(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=lc(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Eh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Th{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new Eh}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=er(e,this.loadOptions);else{const r=(t=e,n=this.loadOptions,xn.getLoadHandlers(t,n));if(0===r.length)r.push(er(e,this.loadOptions));else if(r.length>1)throw new Error(`Found more than one (${r.length}) load handlers for URL '${[e]}'`);this.handler=r[0]}var t,n}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;this.isOldVersion(e.convertedBy)?null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature):n=this.artifacts.signature,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=function(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,u=p(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=cn[n.dtype],c=e.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=bn()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*o}else if("string"===i){const t=p(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=cn[i],a=e.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=ln(e,o,"float32"),i=ln(r,o,"float32");n[t]=on(s,i),s.dispose(),i.dispose()}}s+=u*r}"complex64"!==i&&(n[t]=ln(l,o,i))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Sh(qc.Instance.transformGraph(t,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=qc.Instance.transformGraph(e.modelInitializer);this.initializer=new Sh(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}isOldVersion(e){if(e){let t=e.split("TensorFlow.js Converter v");t=t[0].split(".");const n=parseInt(t[0],10),r=parseInt(t[1],10);return n<=1||2===n&&r<=7}return!0}async save(e,t){if("string"==typeof e){const t=wn(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof De||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Ch(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new Th(e,t);return await n.load(),n}var $h=function(){return($h=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)};function Ah(e,t,n,r){return new(n||(n=Promise))((function(s,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function o(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}u((r=r.apply(e,t||[])).next())}))}function Rh(e,t){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}const _h=e=>({startEndTensor:e,startPoint:Ni(e,[0,0],[-1,2]),endPoint:Ni(e,[0,2],[-1,2])}),Dh={strides:[8,16],anchors:[2,6]};function Fh(e,t){let n,r,s;if(e.topLeft instanceof De&&e.bottomRight instanceof De){const[a,i]=Tr((()=>[ys([ba(t-1,e.topLeft.slice(0,1)),e.topLeft.slice(1,1)]),ys([ba(t-1,e.bottomRight.slice(0,1)),e.bottomRight.slice(1,1)])]));n=a,r=i,null!=e.landmarks&&(s=Tr((()=>{const n=ba(Gi([t-1,0]),e.landmarks),r=Gi([1,-1]);return pa(n,r)})))}else{const[a,i]=e.topLeft,[o,u]=e.bottomRight;n=[t-1-a,i],r=[t-1-o,u],null!=e.landmarks&&(s=e.landmarks.map((e=>[t-1-e[0],e[1]])))}const a={topLeft:n,bottomRight:r};return null!=s&&(a.landmarks=s),null!=e.probability&&(a.probability=e.probability instanceof De?e.probability.clone():e.probability),a}function Mh(e,t){return Tr((()=>{let n;return n=e.hasOwnProperty("box")?e.box:e,((e,t)=>{const n=pa(e.startPoint,t),r=pa(e.endPoint,t),s=xs([n,r],1);return _h(s)})(n,t).startEndTensor.squeeze()}))}class Oh{constructor(e,t,n,r,s,a){this.blazeFaceModel=e,this.width=t,this.height=n,this.maxFaces=r,this.anchorsData=function(e,t,n){const r=[];for(let s=0;s<n.strides.length;s++){const a=n.strides[s],i=Math.floor((t+a-1)/a),o=Math.floor((e+a-1)/a),u=n.anchors[s];for(let e=0;e<i;e++){const t=a*(e+.5);for(let e=0;e<o;e++){const n=a*(e+.5);for(let e=0;e<u;e++)r.push([n,t])}}}return r}(t,n,Dh),this.anchors=Hi(this.anchorsData),this.inputSizeData=[t,n],this.inputSize=Gi([t,n]),this.iouThreshold=s,this.scoreThreshold=a}async getBoundingBoxes(e,t,n=!0){const[r,s,a]=Tr((()=>{const t=e.resizeBilinear([this.width,this.height]),n=pa(ba(t.div(255),.5),2),r=this.blazeFaceModel.predict(n).squeeze(),s=function(e,t,n){const r=Ni(e,[0,1],[-1,2]),s=Mr(r,t),a=Ni(e,[0,3],[-1,2]),i=Ms(a,n),o=Ms(s,n),u=Ms(i,2),l=ba(o,u),c=Mr(o,u),h=pa(l,n),p=pa(c,n);return xs([h,p],1)}(r,this.anchors,this.inputSize),a=Ni(r,[0,0],[-1,1]);return[r,s,fa(a).squeeze()]})),i=console.warn;console.warn=()=>{};const o=uu.nonMaxSuppression(s,a,this.maxFaces,this.iouThreshold,this.scoreThreshold);console.warn=i;const u=await o.array();o.dispose();let l=u.map((e=>Ni(s,[e,0],[1,-1])));t||(l=await Promise.all(l.map((async e=>{const t=await e.array();return e.dispose(),t}))));const c=e.shape[1],h=e.shape[2];let p;p=t?Ms([h,c],this.inputSize):[h/this.inputSizeData[0],c/this.inputSizeData[1]];const d=[];for(let e=0;e<l.length;e++){const s=l[e],i=Tr((()=>{const i=_h(s instanceof De?s:Hi(s));if(!n)return i;const o=u[e];let l;return l=t?this.anchors.slice([o,0],[1,2]):this.anchorsData[o],{box:i,landmarks:Ni(r,[o,5],[1,-1]).squeeze().reshape([6,-1]),probability:Ni(a,[o],[1]),anchor:l}}));d.push(i)}return s.dispose(),a.dispose(),r.dispose(),{boxes:d,scaleFactor:p}}async estimateFaces(e,t=!1,n=!1,r=!0){const[,s]=function(e){return e instanceof De?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),a=Tr((()=>(e instanceof De||(e=ar(e)),e.toFloat().expandDims(0)))),{boxes:i,scaleFactor:o}=await this.getBoundingBoxes(a,t,r);return a.dispose(),t?i.map((e=>{const t=Mh(e,o);let a={topLeft:t.slice([0],[2]),bottomRight:t.slice([2],[2])};if(r){const{landmarks:t,probability:n,anchor:r}=e,s=t.add(r).mul(o);a.landmarks=s,a.probability=n}return n&&(a=Fh(a,s)),a})):Promise.all(i.map((async e=>{const t=Mh(e,o);let a;if(r){const[n,r,s]=await Promise.all([e.landmarks,t,e.probability].map((async e=>e.array()))),i=e.anchor,[u,l]=o,c=n.map((e=>[(e[0]+i[0])*u,(e[1]+i[1])*l]));a={topLeft:r.slice(0,2),bottomRight:r.slice(2),landmarks:c,probability:s},(e=>{e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose()})(e.box),e.landmarks.dispose(),e.probability.dispose()}else{const e=await t.array();a={topLeft:e.slice(0,2),bottomRight:e.slice(2)}}return t.dispose(),n&&(a=Fh(a,s)),a})))}}async function Lh({maxFaces:e=10,inputWidth:t=128,inputHeight:n=128,iouThreshold:r=.3,scoreThreshold:s=.75}={}){const a=await Ch("https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1",{fromTFHub:!0});return new Oh(a,t,n,e,r,s)}var zh={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function Ph(e){return[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])]}function Bh(e){return[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2]}function Wh(e,t){void 0===t&&(t=1.5);var n=Bh(e),r=Ph(e),s=[t*r[0]/2,t*r[1]/2];return{startPoint:[n[0]-s[0],n[1]-s[1]],endPoint:[n[0]+s[0],n[1]+s[1]],landmarks:e.landmarks}}var Vh=[[1,0,0],[0,1,0],[0,0,1]];function Uh(e,t){return[[1,0,e],[0,1,t],[0,0,1]]}function Gh(e,t){for(var n=0,r=0;r<e.length;r++)n+=e[r]*t[r];return n}function Hh(e,t){for(var n=[],r=0;r<e.length;r++)n.push(e[r][t]);return n}function jh(e,t){for(var n=[],r=e.length,s=0;s<r;s++){n.push([]);for(var a=0;a<r;a++)n[s].push(Gh(e[s],Hh(t,a)))}return n}function qh(e,t){var n=Math.cos(e),r=Math.sin(e),s=[[n,-r,0],[r,n,0],[0,0,1]],a=jh(Uh(t[0],t[1]),s);return jh(a,Uh(-t[0],-t[1]))}var Kh=[13,zh.midwayBetweenEyes[0]],Xh=[3,2],Yh=zh.leftEyeLower0,Zh=[Yh[0],Yh[Yh.length-1]],Jh=zh.rightEyeLower0,Qh=[Jh[0],Jh[Jh.length-1]],ep=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}];function tp(e,t,n,r){for(var s=0;s<ep.length;s++){var a=ep[s],i=a.key,o=a.indices,u=zh[""+n+i];if(null==r||r.includes(i))for(var l=0;l<o.length;l++){var c=o[l];e[u[l]]=[t[c][0],t[c][1],(t[c][2]+e[u[l]][2])/2]}}}var np=function(){function e(e,t,n,r,s,a,i){this.regionsOfInterest=[],this.runsWithoutFaceDetector=0,this.boundingBoxDetector=e,this.meshDetector=t,this.irisModel=i,this.meshWidth=n,this.meshHeight=r,this.maxContinuousChecks=s,this.maxFaces=a}return e.prototype.transformRawCoords=function(e,t,n,r){var s,a,i,o,u=this,l=Ph({startPoint:t.startPoint,endPoint:t.endPoint}),c=[l[0]/this.meshWidth,l[1]/this.meshHeight],h=e.map((function(e){return[c[0]*(e[0]-u.meshWidth/2),c[1]*(e[1]-u.meshHeight/2),e[2]]})),p=qh(n,[0,0]),d=h.map((function(e){return function(e,t){return[Gh(e,t[0]),Gh(e,t[1])]}(e,p).concat([e[2]])})),f=(a=[[(s=r)[0][0],s[1][0]],[s[0][1],s[1][1]]],i=[s[0][2],s[1][2]],o=[-Gh(a[0],i),-Gh(a[1],i)],[a[0].concat(o[0]),a[1].concat(o[1]),[0,0,1]]),m=Bh({startPoint:t.startPoint,endPoint:t.endPoint}).concat([1]),g=[Gh(m,f[0]),Gh(m,f[1])];return d.map((function(e){return[e[0]+g[0],e[1]+g[1],e[2]]}))},e.prototype.getLeftToRightEyeDepthDifference=function(e){return e[Zh[0]][2]-e[Qh[0]][2]},e.prototype.getEyeBox=function(e,t,n,r,s){void 0===s&&(s=!1);var a=function(e){var t=Bh(e),n=Ph(e),r=Math.max.apply(Math,n)/2;return{startPoint:[t[0]-r,t[1]-r],endPoint:[t[0]+r,t[1]+r],landmarks:e.landmarks}}(Wh(this.calculateLandmarksBoundingBox([e[n],e[r]]),2.3)),i=Ph(a),o=uu.cropAndResize(t,[[a.startPoint[1]/this.meshHeight,a.startPoint[0]/this.meshWidth,a.endPoint[1]/this.meshHeight,a.endPoint[0]/this.meshWidth]],[0],[64,64]);return s&&(o=uu.flipLeftRight(o)),{box:a,boxSize:i,crop:o}},e.prototype.getEyeCoords=function(e,t,n,r){void 0===r&&(r=!1);for(var s=[],a=0;a<76;a++){var i=e[3*a],o=e[3*a+1],u=e[3*a+2];s.push([(r?1-i/64:i/64)*n[0]+t.startPoint[0],o/64*n[1]+t.startPoint[1],u])}return{rawCoords:s,iris:s.slice(71)}},e.prototype.getAdjustedIrisCoords=function(e,t,n){var r=e[zh[n+"EyeUpper0"][3]][2],s=e[zh[n+"EyeLower0"][4]][2],a=(r+s)/2;return t.map((function(e,t){var n=a;return 2===t?n=r:4===t&&(n=s),[e[0],e[1],n]}))},e.prototype.predict=function(e,t){return Ah(this,void 0,void 0,(function(){var n,r,s,a,i=this;return Rh(this,(function(o){switch(o.label){case 0:return this.shouldUpdateRegionsOfInterest()?[4,this.boundingBoxDetector.getBoundingBoxes(e,!1,!0)]:[3,2];case 1:return n=o.sent(),r=n.boxes,s=n.scaleFactor,0===r.length?(this.regionsOfInterest=[],[2,null]):(a=r.map((function(e){var t,n,r={startPoint:e.box.startPoint.squeeze().arraySync(),endPoint:e.box.endPoint.squeeze().arraySync()},a=Wh((n=s,{startPoint:[(t=r).startPoint[0]*n[0],t.startPoint[1]*n[1]],endPoint:[t.endPoint[0]*n[0],t.endPoint[1]*n[1]]}));return $h({},a,{landmarks:e.landmarks.arraySync()})})),r.forEach((function(e){null!=e&&null!=e.startPoint&&(e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose())})),this.updateRegionsOfInterest(a),this.runsWithoutFaceDetector=0,[3,3]);case 2:this.runsWithoutFaceDetector++,o.label=3;case 3:return[2,Tr((function(){return i.regionsOfInterest.map((function(n,r){var s,a=n.landmarks.length>=468,o=Kh[0],u=Kh[1];!1===a&&(o=Xh[0],u=Xh[1]),s=function(e,t){var n;return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}(n.landmarks[o],n.landmarks[u]);var l=Bh({startPoint:n.startPoint,endPoint:n.endPoint}),c=[l[0]/e.shape[2],l[1]/e.shape[1]],h=e,p=Vh;0!==s&&(h=uu.rotateWithOffset(e,s,0,c),p=qh(-s,l));var d=function(e,t,n){var r=t.shape[1],s=t.shape[2],a=[[e.startPoint[1]/r,e.startPoint[0]/s,e.endPoint[1]/r,e.endPoint[0]/s]];return uu.cropAndResize(t,a,[0],n)}({startPoint:n.startPoint,endPoint:n.endPoint},h,[i.meshHeight,i.meshWidth]).div(255),f=i.meshDetector.predict(d),m=f[1],g=f[2],y=as(g,[-1,3]).arraySync();if(t){var b=i.getEyeBox(y,d,Zh[0],Zh[1],!0),x=b.box,w=b.boxSize,v=b.crop,k=i.getEyeBox(y,d,Qh[0],Qh[1]),I=k.box,N=k.boxSize,S=k.crop,E=i.irisModel.predict(ys([v,S])).dataSync(),T=E.slice(0,228),C=i.getEyeCoords(T,x,w,!0),$=C.rawCoords,A=C.iris,R=E.slice(228),_=i.getEyeCoords(R,I,N),D=_.rawCoords,F=_.iris,M=i.getLeftToRightEyeDepthDifference(y);Math.abs(M)<30?(tp(y,$,"left"),tp(y,D,"right")):M<1?tp(y,$,"left",["EyeUpper0","EyeLower0"]):tp(y,D,"right",["EyeUpper0","EyeLower0"]);var O=i.getAdjustedIrisCoords(y,A,"left"),L=i.getAdjustedIrisCoords(y,F,"right");y=y.concat(O).concat(L)}var z=i.transformRawCoords(y,n,s,p),P=Hi(z),B=Wh(i.calculateLandmarksBoundingBox(z));return i.regionsOfInterest[r]=$h({},B,{landmarks:P.arraySync()}),{coords:Hi(y,[y.length,3]),scaledCoords:P,box:B,flag:m.squeeze()}}))}))]}}))}))},e.prototype.updateRegionsOfInterest=function(e){for(var t=0;t<e.length;t++){var n=e[t],r=this.regionsOfInterest[t],s=0;if(r&&r.startPoint){var a=n.startPoint,i=a[0],o=a[1],u=n.endPoint,l=u[0],c=u[1],h=r.startPoint,p=h[0],d=h[1],f=r.endPoint,m=f[0],g=f[1],y=Math.max(i,p),b=Math.max(o,d),x=(Math.min(l,m)-y)*(Math.min(c,g)-b);s=x/((l-i)*(c-o)+(m-p)*(g-o)-x)}s<.25&&(this.regionsOfInterest[t]=n)}this.regionsOfInterest=this.regionsOfInterest.slice(0,e.length)},e.prototype.clearRegionOfInterest=function(e){null!=this.regionsOfInterest[e]&&(this.regionsOfInterest=this.regionsOfInterest.slice(0,e).concat(this.regionsOfInterest.slice(e+1)))},e.prototype.shouldUpdateRegionsOfInterest=function(){var e=this.regionsOfInterest.length,t=0===e;return 1===this.maxFaces||t?t:e!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks},e.prototype.calculateLandmarksBoundingBox=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{startPoint:[Math.min.apply(Math,t),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,t),Math.max.apply(Math,n)]}},e}(),rp=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]];function sp(e){return Ah(this,void 0,void 0,(function(){var t,n,r,s,a,i,o,u,l,c,h,p,d,f,m;return Rh(this,(function(g){switch(g.label){case 0:return t=e.maxContinuousChecks,n=void 0===t?5:t,r=e.detectionConfidence,s=void 0===r?.9:r,a=e.maxFaces,i=void 0===a?10:a,o=e.iouThreshold,u=void 0===o?.3:o,l=e.scoreThreshold,c=void 0===l?.75:l,h=e.shouldLoadIrisModel,p=void 0===h||h,d=e.modelUrl,f=e.irisModelUrl,p?[4,Promise.all([ap(i,u,c),ip(d),op(f)])]:[3,2];case 1:return m=g.sent(),[3,4];case 2:return[4,Promise.all([ap(i,u,c),ip(d)])];case 3:m=g.sent(),g.label=4;case 4:return[2,new cp(m[0],m[1],n,s,i,p?m[2]:null)]}}))}))}function ap(e,t,n){return Ah(this,void 0,void 0,(function(){return Rh(this,(function(r){return[2,Lh({maxFaces:e,iouThreshold:t,scoreThreshold:n})]}))}))}function ip(e){return Ah(this,void 0,void 0,(function(){return Rh(this,(function(t){return null!=e?[2,Ch(e)]:[2,Ch("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1",{fromTFHub:!0})]}))}))}function op(e){return Ah(this,void 0,void 0,(function(){return Rh(this,(function(t){return null!=e?[2,Ch(e)]:[2,Ch("https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2",{fromTFHub:!0})]}))}))}function up(e,t){if(e.mesh instanceof De){var n=Tr((function(){var n=Gi([t-1,0,0]),r=Gi([1,-1,1]);return Tr((function(){return[ys([ba(t-1,e.boundingBox.topLeft.slice(0,1)),e.boundingBox.topLeft.slice(1,1)]),ys([ba(t-1,e.boundingBox.bottomRight.slice(0,1)),e.boundingBox.bottomRight.slice(1,1)]),ba(n,e.mesh).mul(r),ba(n,e.scaledMesh).mul(r)]}))})),r=n[0],s=n[1],a=n[2],i=n[3];return Object.assign({},e,{boundingBox:{topLeft:r,bottomRight:s},mesh:a,scaledMesh:i})}return Object.assign({},e,{boundingBox:{topLeft:[t-1-e.boundingBox.topLeft[0],e.boundingBox.topLeft[1]],bottomRight:[t-1-e.boundingBox.bottomRight[0],e.boundingBox.bottomRight[1]]},mesh:e.mesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n})),scaledMesh:e.scaledMesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n}))})}var lp,cp=function(){function e(e,t,n,r,s,a){this.kind="MediaPipeFaceMesh",this.pipeline=new np(e,t,192,192,n,s,a),this.detectionConfidence=r}return e.getAnnotations=function(){return zh},e.getUVCoords=function(){return rp},e.prototype.estimateFaces=function(e){return Ah(this,void 0,void 0,(function(){var t,n,r,s,a,i,o,u,l,c,h,p,d=this;return Rh(this,(function(f){switch(f.label){case 0:if(t=e.returnTensors,n=void 0!==t&&t,r=e.flipHorizontal,s=void 0!==r&&r,a=e.predictIrises,i=void 0===a||a,o=e.input,i&&null==this.pipeline.irisModel)throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).");return u=function(e){return e instanceof De?[e.shape[0],e.shape[1]]:[e.height,e.width]}(o),l=u[1],c=Tr((function(){return o instanceof De||(o=ar(o)),o.toFloat().expandDims(0)})),"webgl"!==tt.backendName?[3,2]:(p=V().get("WEBGL_PACK_DEPTHWISECONV"),V().set("WEBGL_PACK_DEPTHWISECONV",!0),[4,this.pipeline.predict(c,i)]);case 1:return h=f.sent(),V().set("WEBGL_PACK_DEPTHWISECONV",p),[3,4];case 2:return[4,this.pipeline.predict(c,i)];case 3:h=f.sent(),f.label=4;case 4:return c.dispose(),null!=h&&h.length>0?[2,Promise.all(h.map((function(e,t){return Ah(d,void 0,void 0,(function(){var r,a,o,u,c,h,p,d,f,m,g,y,b,x,w=this;return Rh(this,(function(v){switch(v.label){case 0:return r=e.coords,a=e.scaledCoords,o=e.box,u=e.flag,c=[u],n||(c=c.concat([r,a])),[4,Promise.all(c.map((function(e){return Ah(w,void 0,void 0,(function(){return Rh(this,(function(t){return[2,e.array()]}))}))})))];case 1:if(h=v.sent(),p=h[0],u.dispose(),p<this.detectionConfidence&&this.pipeline.clearRegionOfInterest(t),n)return d={kind:"MediaPipePredictionTensors",faceInViewConfidence:p,mesh:r,scaledMesh:a,boundingBox:{topLeft:Gi(o.startPoint),bottomRight:Gi(o.endPoint)}},s?[2,up(d,l)]:[2,d];for(x in f=h.slice(1),m=f[0],g=f[1],a.dispose(),r.dispose(),y={kind:"MediaPipePredictionValues",faceInViewConfidence:p,boundingBox:{topLeft:o.startPoint,bottomRight:o.endPoint},mesh:m,scaledMesh:g},s&&(y=up(y,l)),b={},zh)(i||!1===x.includes("Iris"))&&(b[x]=zh[x].map((function(e){return y.scaledMesh[e]})));return y.annotations=b,[2,y]}}))}))})))]:[2,[]]}}))}))},e}();let hp;function pp(){return null==hp&&(hp=tt.backend.epsilon()),hp}(lp||(lp={})).mediapipeFacemesh="mediapipe-facemesh";class dp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,dp.prototype)}}class fp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fp.prototype)}}class mp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,mp.prototype)}}class gp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,gp.prototype)}}class yp extends Error{constructor(e){super(e),Object.setPrototypeOf(this,yp.prototype)}}Error;function bp(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function xp(e,t){if(!e)throw new yp(t)}function wp(e,t){let n=0;for(const r of e)r===t&&n++;return n}function vp(e){return 1===e.length?e[0]:e}function kp(e){return Array.isArray(e)?e:[e]}function Ip(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Np(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let Sp={};function Ep(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Tp(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Tp(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Tp(t):e[n]=t.value)}}}function Cp(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in Sp)a=Sp[s];else if(a=t[s],null==a)throw new mp(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new mp(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Sp?[o,u]=Sp.className:i in t&&([o,u]=t[i]),null==o)throw new mp(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(Sp))e[t]=Sp[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Sp);for(const e of Object.keys(n))Sp[e]=n[e];Tp(a.config);const r=u(o,a.config,n,s);return Sp=Object.assign({},t),r}{const e=Object.assign({},Sp);for(const e of Object.keys(n))Sp[e]=n[e];const t=new o(a.config);return Sp=Object.assign({},e),t}}}function $p(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Ap(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Rp(e){if(null==e)throw new mp(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function _p(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new mp(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Dp(e,t,n=0,r=1/0){return xp(n>=0),xp(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function Fp(e,t){Array.isArray(e)?(u(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Fp(e,`element ${n+1} of ${t}`)))):u(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Mp(e)}.`))}function Mp(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Mp(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Op(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Lp(e,t){return Tr((()=>Oi(xa(pa(e,e),t,!0))))}class zp extends vr{getConfig(){return{}}}class Pp extends zp{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Tr((()=>{const t=Lp(e,this.axis),n=gs(t,0,this.maxValue);return pa(e,Ms(n,Mr(pp(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Pp.className="MaxNorm",Ir(Pp);class Bp extends zp{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Tr((()=>Ms(e,Mr(pp(),Lp(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Bp.className="UnitNorm",Ir(Bp);class Wp extends zp{apply(e){return pi(e)}}Wp.className="NonNeg",Ir(Wp);class Vp extends zp{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Tr((()=>{const t=Lp(e,this.axis),n=Mr(pa(this.rate,gs(t,this.minValue,this.maxValue)),pa(1-this.rate,t));return pa(e,Ms(n,Mr(pp(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Vp.className="MinMaxNorm",Ir(Vp);const Up={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Gp(e){return Ep(e)}function Hp(e,t={}){return Cp(e,kr.getMap().classNameMap,t,"constraint")}function jp(e){if(null==e)return null;if("string"==typeof e){return Hp({className:e in Up?Up[e]:e,config:{}})}return e instanceof zp?e:Hp(e)}const qp=["channelsFirst","channelsLast"],Kp=["nearest","bilinear"],Xp=["valid","same","causal"],Yp=["max","avg"],Zp=["sum","mul","concat","ave"],Jp=new Map;function Qp(e){_p(qp,"DataFormat",e)}function ed(e){_p(Xp,"PaddingMode",e)}function td(e){_p(Yp,"PoolMode",e)}const nd=[];function rd(e,t){nd.push(e);try{const e=t();return nd.pop(),e}catch(e){throw nd.pop(),e}}function sd(e){if(!od(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===nd.length?"":nd.join("/")+"/")+e}function ad(e){if(!od(e))throw new Error("Not a valid tensor name: '"+e+"'");Jp.has(e)||Jp.set(e,0);const t=Jp.get(e);if(Jp.set(e,Jp.get(e)+1),t>0){const n=`${e}_${t}`;return Jp.set(n,1),n}return e}const id=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function od(e){return!!e.match(id)}function ud(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function ld(e){return Gi(e=Array.isArray(e)?new Float32Array(e):e)}function cd(e){return $a(ld(e)).dataSync()[0]}function hd(e){return ya(ld(e)).dataSync()[0]}function pd(e,t){if(t<e)throw new mp(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function dd(e,t){return e.asType(t)}function fd(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function md(e,t,n){return Tr((()=>{switch(e.rank){case 1:return Si(e,t,n);case 2:return Ei(e,[t,0],[n,e.shape[1]]);case 3:return Ti(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Ci(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Ni(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Ni(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new mp(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function gd(e,t,n){return Tr((()=>{switch(e.rank){case 1:return Si(e,t,n);case 2:return Ei(e,[0,t],[e.shape[0],n]);case 3:return Ti(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Ci(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new mp(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function yd(e,t,n,r){return Tr((()=>{switch(e.rank){case 1:return Si(e,t,n);case 2:switch(r){case 1:return md(e,t,n);case 2:return gd(e,t,n);default:throw new mp(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return md(e,t,n);case 2:return Ti(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return gd(e,t,n);default:throw new mp(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return md(e,t,n);case 2:return Ci(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Ci(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return gd(e,t,n);default:throw new mp(`The axis is not within the rank of the tensor ${r}`)}default:throw new mp(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function bd(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ys(e,t)}function xd(e,t){switch(e.rank){case 1:return bs([e,t]);case 2:return xs([e,t],0);case 3:return ws([e,t],0);case 4:return vs([e,t],0);default:throw new mp(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function wd(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new mp(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Ks(e,t)}function vd(e,t=0,n=1,r,s){return oi(e,t,n,r,s)}function kd(e,t,n,r){if(e.rank<2||t.rank<2)throw new gp(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new gp(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return $o({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?Sd(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([u,-1]);const h=[...s,...l];return $o({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?Sd(e.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function Id(e,t,n){return Tr((()=>(t=Array.isArray(t)?Gi(t,"int32"):t.toInt(),Js(e,t,n))))}function Nd(e){return pa(e,e)}function Sd(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new mp(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1,1,1]):t.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,1,1,r[0]]):t.reshape([1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1,1]):t.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,1,r[0]]):t.reshape([1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1]):t.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,r[0]]):t.reshape([1].concat(r))}else if(e<3)return t;throw new mp(`Unsupported input rank by biasAdd: ${t.rank}`)}function Ed(e,t,n){return Tr((()=>(null==n&&(n="channelsLast"),Qp(n),e.add(Sd(e.rank,t,n)))))}function Td(e,t,n,r){return Tr((()=>xo(e,t,n,r)))}function Cd(e,t,n=!1){return n?e():t()}const $d=["fanIn","fanOut","fanAvg"],Ad=["normal","uniform","truncatedNormal"];class Rd extends vr{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class _d extends Rd{apply(e,t){return Ga(e,t)}}_d.className="Zeros",Ir(_d);class Dd extends Rd{apply(e,t){return Ha(e,t)}}Dd.className="Ones",Ir(Dd);class Fd extends Rd{constructor(e){if(super(),"object"!=typeof e)throw new mp(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new mp(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Tr((()=>pa(yi(this.value),Ha(e,t))))}getConfig(){return{value:this.value}}}Fd.className="Constant",Ir(Fd);class Md extends Rd{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return ui(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Md.className="RandomUniform",Ir(Md);class Od extends Rd{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new gp(`randomNormal does not support dType ${t}.`);return vd(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Od.className="RandomNormal",Ir(Od);class Ld extends Rd{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new gp(`truncatedNormal does not support dType ${t}.`);return qi(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ld.className="TruncatedNormal",Ir(Ld);class zd extends Rd{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Tr((()=>{if(2!==e.length||e[0]!==e[1])throw new mp("Identity matrix initializer can only be used for 2D square matrices.");return pa(this.gain,Xs(e[0]))}))}getConfig(){return{gain:this.gain}}}zd.className="Identity",Ir(zd);class Pd extends Rd{constructor(e){if(super(),e.scale<0)throw new mp(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,_p($d,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){_p(Ad,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(Qp(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=ud(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=ud(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=ud(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new gp(`${this.getClassName()} does not support dType ${t}.`);return qi(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return ui(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Pd.className="VarianceScaling",Ir(Pd);class Bd extends Pd{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pd.className}}Bd.className="GlorotUniform",Ir(Bd);class Wd extends Pd{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pd.className}}Wd.className="GlorotNormal",Ir(Wd);class Vd extends Pd{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pd.className}}Vd.className="HeNormal",Ir(Vd);class Ud extends Pd{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pd.className}}Ud.className="HeUniform",Ir(Ud);class Gd extends Pd{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Pd.className}}Gd.className="LeCunNormal",Ir(Gd);class Hd extends Pd{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Pd.className}}Hd.className="LeCunNormal",Ir(Hd);class jd extends Rd{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new gp("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Tr((()=>{if(e.length<2)throw new gp("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=vd(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=lu.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),pa(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}jd.className="Orthogonal",Ir(jd);const qd={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Kd(e,t={}){return Cp(e,kr.getMap().classNameMap,t,"initializer")}function Xd(e){return Ep(e)}function Yd(e){if("string"==typeof e){const t=e in qd?qd[e]:e;if("GlorotNormal"===t)return new Wd;if("GlorotUniform"===t)return new Bd;if("HeNormal"===t)return new Vd;if("HeUniform"===t)return new Ud;if("LeCunNormal"===t)return new Gd;if("LeCunUniform"===t)return new Hd;{const e={};return e.className=t,e.config={},Kd(e)}}return e instanceof Rd?e:Kd(e)}let Zd=0;function Jd(){return Zd++}const Qd={};function ef(e=""){return e in Qd||(Qd[e]=0),Qd[e]+=1,e+Qd[e].toString()}function tf(e){return Array.isArray(e)&&Array.isArray(e[0])}function nf(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function rf(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new mp(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function sf(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new mp(`Expected exactly 1 Shape; got ${e.length}`)}return e}function af(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class of{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Jd(),n=null==n?"Variable":n,this.originalName=sd(n),this.name=ad(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(e,t=!0,n,r){return tt.makeVariable(e,t,n,r)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function uf(e){return e.map((e=>e.read()))}function lf(e){e.forEach((e=>{e[0].write(e[1])}))}class cf{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class hf{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=Jd(),null!=a&&(this.originalName=sd(a),this.name=ad(this.originalName)),this.rank=t.length}}let pf=0;class df{constructor(e,t){this.callArgs=t,this.id=pf++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let ff=0;class mf extends vr{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=ff++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Ip(e)+"_"+ef(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new fp(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new mp(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return vp(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return vp(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new dp(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new dp(`Layer ${this.name} is not connected, no input to return.`);return vp(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new dp(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new dp(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return vp(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=kp(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=kp(this.inputSpec);if(e.length!==t.length)throw new mp(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new mp(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new mp(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new mp(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new mp(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new mp(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new mp(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=kp(e);let r=!0;for(const e of n)if(!(e instanceof hf)){r=!1;break}let s=!0;for(const e of n)if(e instanceof hf){s=!1;break}if(r===s)throw new mp("Arguments to apply() must be all SymbolicTensors or all Tensors");return rd(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of kp(e))t.push(n.shape);this.build(vp(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=kp(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=vp(a),null!=this.activityRegularizer)throw new gp("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=kp(e);const t=[];for(const n of e)t.push(n.shape);return vp(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new hf(a,n,this,kp(e),t,this.name,r))):new hf(a,r,this,kp(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new gp("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new dp(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new dp(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new fp(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return af(this.weights)}build(e){this.built=!0}getWeights(e=!1){return uf(e?this.trainableWeights:this.weights)}setWeights(e){Tr((()=>{const t=this.weights;if(t.length!==e.length)throw new mp(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=uf(t);for(let s=0;s<r.length;++s){const a=r[s],i=t[s],o=e[s];if(!d(a.shape,o.shape))throw new mp(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}lf(n)}))}addWeight(e,t,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new mp(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=Yd("zeros"));const o=r.apply(t,n),u=new of(o,n,e,a,i);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=kp(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,i=null){const o=kp(e);t=kp(t),n=kp(n),r=kp(r),s=nf(s),a=nf(a);const u=[],l=[],c=[];for(const e of o)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new df({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function gf(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=gf(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class yf extends mf{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:ef("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new mp("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new mp("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new mp("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new hf(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new df({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new mp(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function bf(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Cr(r)}}function xf(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var wf,vf;yf.className="InputLayer",Ir(yf),(vf=wf||(wf={}))[vf.SILENT=0]="SILENT",vf[vf.VERBOSE=1]="VERBOSE";class kf{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class If{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Nf extends kf{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Tr((()=>Mr(this.totals[e],pa(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Tr((()=>{const n=pa(Ms(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),$r(t[e])})))}}class Sf extends kf{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class Ef extends kf{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");T(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,r=be();return(...s)=>{const a=be();return a-r<t||(r=a,n=e(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await bf(n),r.push(this.yield(e,t,n))),r.push(vu()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await bf(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await bf(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(vu()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await bf(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await bf(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(vu()):T(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await bf(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await bf(e),await this.trainEnd(e))}}function Tf(e,t){if(null==e&&(e={}),e instanceof kf)return[e];if(Array.isArray(e)&&e[0]instanceof kf)return e;return kp(e).map((e=>new Ef(e,t)))}class Cf{constructor(){}static registerCallbackConstructor(e,t){u(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),Cf.checkForDuplicate(t),null==Cf.constructors[e]&&(Cf.constructors[e]=[]),Cf.constructors[e].push(t)}static checkForDuplicate(e){for(const t in Cf.constructors){Cf.constructors[+t].forEach((t=>{if(t===e)throw new mp("Duplicate callback constructor.")}))}}static clear(){Cf.constructors={}}static createCallbacks(e){const t=[];for(const n in Cf.constructors){const r=+n;e>=r&&t.push(...Cf.constructors[r])}return t.map((e=>new e))}}function $f(e,t,n,r,s,a,i,o,u){const l=new Sf,c=[new Nf,...Cf.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new If(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function Af(e,t={},n=!1){return Cp(e,kr.getMap().classNameMap,t,"layer",n)}function Rf(e,t){return Tr((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=xa(Nd(e),t,!0),r=Ys(n.shape,pp()),s=Oi(Ta(n,r));return Ms(e,s)}))}function _f(e,t){return Tr((()=>Ca(Nd(ba(t,e)),-1)))}function Df(e,t){return Tr((()=>Ca(_r(ba(t,e)),-1)))}function Ff(e,t){return Tr((()=>{const n=ba(e,t),r=gs(_r(e),pp(),Number.MAX_VALUE),s=_r(Ms(n,r));return pa(100,Ca(s,-1))}))}function Mf(e,t,n=!1){return Tr((()=>{if(n)t=$i(t);else{const e=xa(t,t.shape.length-1,!0);t=Ms(t,e)}return t=gs(t,pp(),1-pp()),da(xa(pa(e.toFloat(),ca(t)),t.shape.length-1))}))}function Of(e,t,n=!1){return Tr((()=>{const r=Zs(function(e){const t=[ud(e.shape)];return e.reshape(t)}(e)).toInt(),s=(t=gs(t,pp(),1-pp())).shape;return Mf(nr(r,s[s.length-1]).reshape(s),t,n)}))}function Lf(e,t){return Tr((()=>{let n;return n=gs(t,pp(),1-pp()),n=ca(Ms(n,ba(1,n))),Ca(function(e,t){if(!d(e.shape,t.shape))throw new mp(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Tr((()=>{const n=t.relu(),r=t.abs().neg();return n.sub(t.mul(e)).add(r.exp().log1p())}))}(e,n),-1)}))}function zf(e,t){return Tr((()=>{const n=Rf(e,-1),r=Rf(t,-1),s=pa(n,r);return da(xa(s,-1))}))}Cf.constructors={};const Pf={meanSquaredError:_f,meanAbsoluteError:Df,meanAbsolutePercentageError:Ff,meanSquaredLogarithmicError:function(e,t){return Tr((()=>{const n=gs(t,pp(),Number.MAX_VALUE),r=ca(Mr(1,n)),s=gs(e,pp(),Number.MAX_VALUE),a=ca(Mr(1,s));return Ca(Nd(ba(r,a)),-1)}))},squaredHinge:function(e,t){return Tr((()=>{const n=Ta(0,ba(1,pa(e,t)));return Ca(Nd(n),-1)}))},hinge:function(e,t){return Tr((()=>{const n=Ta(0,ba(1,pa(e,t)));return Ca(n,-1)}))},categoricalHinge:function(e,t){return Tr((()=>{const n=xa(pa(e,t),-1),r=ya(pa(ba(1,e),t),-1);return Ta(0,Mr(1,ba(r,n)))}))},logcosh:function(e,t){return Tr((()=>{const n=Math.log(2),r=ba(t,e),s=ba(Mr(r,ma(pa(-2,r))),n);return Ca(s,-1)}))},categoricalCrossentropy:Mf,sparseCategoricalCrossentropy:Of,binaryCrossentropy:Lf,kullbackLeiblerDivergence:function(e,t){return Tr((()=>{const n=gs(e,pp(),1),r=gs(t,pp(),1);return xa(pa(e,ca(Ms(n,r))),-1)}))},poisson:function(e,t){return Tr((()=>{const n=ca(Mr(pp(),t));return Ca(ba(t,pa(e,n)),-1)}))},cosineProximity:zf};function Bf(e){if("string"==typeof e){if(e in Pf)return Pf[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new mp(t)}return e}function Wf(e,t){return Tr((()=>{const n=pa(.5,ja(t)),r=dd(Qs(t,n),e.dtype);return Ca(Ps(e,r),-1)}))}function Vf(e,t){return Tr((()=>dd(Ps(Pr(e,-1),Pr(t,-1)),"float32")))}function Uf(e,t){return Lf(e,t)}function Gf(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),Ps(e,t).asType("float32")}const Hf=Mf,jf=Of,qf={binaryAccuracy:Wf,categoricalAccuracy:Vf,precision:function(e,t){return Tr((()=>{const n=function(e,t){return Tr((()=>va(e.equal(1),t.equal(1)).sum().cast("float32")))}(e,t),r=function(e,t){return Tr((()=>va(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),s=n.add(r);return Bs(Qs(s,0),n.div(s),0).cast("float32")}))},categoricalCrossentropy:Hf,sparseCategoricalCrossentropy:jf,mse:_f,MSE:_f,mae:Df,MAE:Df,mape:Ff,MAPE:Ff,cosine:zf};function Kf(e){if("string"==typeof e&&e in qf)return qf[e];if("string"!=typeof e&&null!=e)return e;throw new mp(`Unknown metric ${e}`)}function Xf(e){if(xp(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Pf))if(Pf[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(qf))if(qf[n]===e){t=n;break}return void 0!==t?t:e.name}}function Yf(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Zf(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Zf(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Zf(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Zf(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Jf(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(s?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),Qf(a,n,r),r("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)s?em(o[e],n,r):tm(o[e],n,i,r),r((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;t=null!=e.collectedTrainableWeights?af(e.collectedTrainableWeights):af(e.trainableWeights);return t}(e),l=af(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}function Qf(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function em(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}Qf([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function tm(e,t,n,r){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];a.push(`${n}[${r}][${s}]`)}const i=e.name,o=e.getClassName(),u=0===a.length?"":a[0];Qf([`${i} (${o})`,s,e.countParams().toString(),u],t,r);for(let e=1;e<a.length;++e)Qf(["","","",a[e]],t,r)}function nm(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function rm(e,t){if(null===e)return null;if("string"==typeof e)return Np(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];nm(t,s,r)?n.push(r):n.push(rm(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=Np(n);t[e]=rm(r,e)}}return t}}function sm(e,t){if(null==e)return null;if("string"==typeof e)return Ip(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];nm(t,s,r)?n.push(r):n.push(sm(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=Ip(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?sm(r,n):r}return t}}class am{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof am)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new mp(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Hn(t,e.dtype)}catch(n){throw new mp(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof hf){if(null==this.id2Value[e.id])throw new mp(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new mp(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof hf){if(null==this.id2Value[e.id])throw new mp(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new mp(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Cr(this.id2Mask)}}const im={},om={};function um(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],c=t.names();for(const e of o)-1!==c.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const h=o.join(",")+"|"+t.names().join(",");let p,d;if(null==im[h]){const e=function(e,t){u(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=cm(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:i}=cm(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in i)null==r[e]&&(r[e]=new Set),i[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:lm(r)}}(i,t);p=e.sorted,d=e.recipientCounts,im[h]=p,om[h]=d}p=im[h],d={},s||Object.assign(d,om[h]);const f=new am(t);for(let e=0;e<p.length;++e){if(null!=r){const e=Er().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=p[e],i=a.sourceLayer;if(i instanceof yf)continue;const u=[],c=[],h=[];let m=!1;for(const e of a.inputs){const n=f.getValue(e),r=f.getMask(e);u.push(n),c.push(r),null!=r&&(m=!0),s||(d[e.name]--,0!==d[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||h.push(n))}m&&((n=n||{}).mask=c[0]);const g=kp(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=hm(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){f.hasKey(x[e])||f.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}s||Cr(h)}return f.disposeMasks(),a?l:l[0]}function lm(e){const t={};for(const n in e)t[n]=e[n].size;return t}function cm(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function hm(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class pm extends mf{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=ef(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Ap(this.inputs).length!==this.inputs.length)throw new mp(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Ap(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;xp(0===n,"input layer has >1 nodes"),xp(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof yf))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new fp(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(pm.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const r=l.inputTensors[e],s=l.inboundLayers[e],a=l.nodeIndices[e],i=l.tensorIndices[e];o(r,t,n,s,a,i)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const e of this.outputs)o(e,u,l);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,i),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],i=e.nodeIndices[r],o=s.inboundNodes[i],u=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const e in t){const r=t[e];r in h||(h[r]=[]),h[r].push(n[e])}const p={};for(const e in r){const t=r[e];t in p||(p[t]=[]),p[t].push(s[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort($p);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof pm&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort($p);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new fp(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new fp(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new df({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new mp("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new mp(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new mp(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new mp(`${e.length} of ${r} weights are not set: ${e}`)}lf(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 2.8.1",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=sm(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Tr((()=>{e=kp(e);const n=new am;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return um(this.outputs,n,t)}))}computeMask(e,t){return Tr((()=>{let n;return e=kp(e),n=null==t?bp(null,e.length):kp(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=nf(e);if(t.length!==this.inputLayers.length)throw new mp(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort($p);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=nf(t.computeOutputShape(vp(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];xp(t in n),s.push(n[t])}return vp(s)}runInternalGraph(e,t){null==t&&(t=bp(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],i=t[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort($p);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),o=kp(t.call(e,l)),u=kp(t.computeMask(e,n)),r=[e],i=[n]}else r=a.map((e=>e[0])),i=a.map((e=>e[1])),null==l.mask&&(l.mask=i),o=kp(t.call(r,l)),u=kp(t.computeMask(r,i));if(t.activityRegularizer)throw new gp("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=o[e],a=u[e];n[t.id]=[r,a]}}}}const s=[],a=[],i=[];for(const e of this.outputs){xp(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];i.push(t.shape),s.push(t),a.push(r)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof pm?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=pm.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new mp(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new mp("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new mp(`No such layer: ${e}`)}calculateLosses(){return Tr((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=pm.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=pm.nodeKey(e,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=t[pm.nodeKey(s,a)];null==u&&(u=0),e.push([s.name,u,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=pm.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];r.push([n.name,i,o])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=pm.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];s.push([n.name,i,o])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=u)return void i(e,t);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&e.apply(vp(n),r)}function u(e){const n=e.name,a=Af(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new mp(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!Rp(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];xp(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];xp(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}return new e({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new mp("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Tr((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function dm(e,t){return function(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function fm(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Tr((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Cr(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),Gi(s,"float32")}return null}function mm(e,t){return pa(e,t)}function gm(e,t){let n,r;const s=t;n=s.xs,r=s.ys,u(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=ym("input",e.inputNames,n),i=ym("output",e.outputNames,r),o=a[0].shape[0];u(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),u(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)u(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)u(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function ym(e,t,n){if(n instanceof De)return[n];if(Array.isArray(n))return u(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new mp(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function bm(e,t,n){const r=null!=n.batchesPerEpoch;if(u(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),u(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),u(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),u(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),u(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(xm(n.validationData))u(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new gp("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let c;c=s?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const h=Tf(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=$f(h,p,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,c);d.setModel(e),e.history=f,await d.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){const u={};await d.onEpochBegin(m);let c=0,h=0;for(r||(g=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await g.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=gm(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=dm(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await fm(s[e],null,t[e]))}const u=r.concat(s).concat(i),p=o(u);Cr(u);for(let e=0;e<l.length;++e){const t=l[e],n=p[e];a[t]=n,$r(n)}await d.onBatchEnd(h,a),xf(a),h++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=xm(n.validationData)?kp(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):kp(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(m,u),m++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function xm(e){return"function"==typeof e.iterator}function wm(e){u(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function vm(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>md(e,t,n-t))):md(e,t,n-t)}function km(e,t){return Tr((()=>null==e?null:Array.isArray(e)?e.map((e=>km(e,t))):Id(e,"int32"===t.dtype?t:t.toInt())))}function Im(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function Nm(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,i,o,u,l,c,h;e.isTraining=!0;try{const p=null==r.batchSize?32:r.batchSize;wm(p);const d=!1,f=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,d,p);s=f[0],i=f[1],h=f[2];let m,g=!1;if(null!=r.validationData&&r.validationData.length>0){if(g=!0,2!==r.validationData.length)throw 3===r.validationData.length?new gp("validationData including sample weights is not supported yet."):new mp(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);o=r.validationData[0],u=r.validationData[1];const t=!0,n=await e.standardizeUserData(o,u,null,null,t,p);l=n[0],c=n[1],m=l.concat(c)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){g=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];l=vm(s,e,t),s=vm(s,0,e),c=vm(i,e,t),i=vm(i,0,e),m=l.concat(c)}else null!=r.validationSteps&&(g=!0);const y=s.concat(i).concat(h);e.checkTrainableWeightsConsistency();const b=e.makeTrainFunction(),x=e.getDedupedMetricsNames();let w,v;g?(e.makeTestFunction(),w=e.testFunction,v=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],v=x.slice());const k=Tf(r.callbacks,r.yieldEvery);return await async function(e,t,n,r,s,i,o,u,l,c,h,p,d,f,m){null==s&&(s=32),null==i&&(i=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=l&&null!=c&&(g=!0),null!=m&&(g=!0,null==f))throw new mp("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=e.checkNumSamples(n,s,f,"steps_per_epoch");let b;null!=y&&(b=pd(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=$f(u,o,i,d,y,f,s,g,p);x.setModel(e),e.history=w,await x.onTrainBegin(),e.stopTraining_=!1;for(let o=d;o<i;++o){await x.onEpochBegin(o);const i={};if(null!=f)throw new gp("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new gp("batch shuffling is not implemneted yet");h&&a(b);const o=Gi(b),u=Im(y,s);for(let a=0;a<u.length;++a){const h={};if(await x.onBatchBegin(a,h),Tr((()=>{const p=u[a][0],d=u[a][1],f=md(o,p,d-p);h.batch=a,h.size=d-p;const m=km(n,f),y=t(m);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];h[t]=n,$r(n)}if(a===u.length-1&&g){const t=e.testLoop(l,c,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];$r(s),i["val_"+n]=s}}})),await x.onBatchEnd(a,h),xf(h),e.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,i),e.stopTraining_)break}return await x.onTrainEnd(),await e.history.syncData(),e.history}(e,b,y,x,p,r.epochs,r.verbose,k,w,m,r.shuffle,v,r.initialEpoch,null,null)}finally{e.isTraining=!1,Em(s,t),Em(i,n),Em(l,o),Em(c,u),null!=h&&Cr(h)}}function Sm(e){const t=[];e instanceof De&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(fd(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function Em(e,t){if(null==e)return;const n=[];if(t instanceof De)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof De)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function Tm(e){return Array.isArray(e)}function Cm(e){return!function(e){return e instanceof De}(e)&&!Tm(e)}function $m(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(Tm(e)&&e.length>0)t=!0;else if(Cm(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new mp(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(Cm(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new mp(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(Tm(e)){if((e=e).length!==t.length)throw new mp(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new mp(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Sm(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new mp(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[e][a];if(null!=u&&u>=0&&o!==u)throw new mp(`Error when checking ${s}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function Am(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new mp(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new mp(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new mp(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[e][a];if(null!=u&&u!==o)throw new mp(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Rm extends pm{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new mp("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Jf(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>xu.adagrad(.01),Adadelta:()=>xu.adadelta(1,.95,pp()),Adam:()=>xu.adam(.001,.9,.999,pp()),Adamax:()=>xu.adamax(.002,.9,.999,pp(),0),RMSProp:()=>xu.rmsprop(.001,.9,0,pp()),SGD:()=>xu.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new mp(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof cu))throw new mp("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new mp(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Bf(e)))}else{const n=Bf(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new mp(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Bf(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],rd("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};rd("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===Lf?-1!==["accuracy","acc"].indexOf(i)?r=Wf:-1!==["crossentropy","ce"].indexOf(i)&&(r=Uf):this.lossFunctions[e]===Of?-1!==["accuracy","acc"].indexOf(i)?r=Gf:-1!==["crossentropy","ce"].indexOf(i)&&(r=jf):-1!==["accuracy","acc"].indexOf(i)?r=Vf:-1!==["crossentropy","ce"].indexOf(i)&&(r=Hf),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=Kf(i);a=e,n=""+Xf(i)}let t;rd(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;wm(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return vp(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Em(s[0],e),Em(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new gp("Verbose mode is not implemented yet.");u(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!r||l<n.batches;){const t=await i.next();if(a=Tr((()=>{if(t.value){const{xs:n,ys:r}=gm(e,t.value),i=n.concat(r),u=Tr((()=>s(i)));if(Cr(i),0===l)for(let e=0;e<u.length;++e)a.push(yi(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Tr((()=>Mr(a[e],pa(c,t)))),l>0&&Cr(n)}Cr(u),o+=c,++l}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=Ms(a[e],o),Cr(t)}return vp(a)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new mp(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new mp(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new mp("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new am;if(e instanceof De&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new mp(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new mp(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=um(s,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=bp(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new mp(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Tr((()=>{const r=this.checkNumSamples(e);if(n)throw new gp("Verbose predictLoop() is not implemented yet.");const s=Im(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){Tr((()=>{const n=s[t][0],r=s[t][1],a=vm(e,n,r),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new am(i);return um(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return vp(a.map((e=>ys(e,0))))}))}predict(e,t={}){const n=Sm(e);Am(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return wm(r),this.predictLoop(n,r)}finally{Em(n,e)}}predictOnBatch(e){Am(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new fp("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Of?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=Ap(e.map((e=>e.shape[0])));r.sort();const s=Ap(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new mp(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new mp(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!d(r,s))throw new mp(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=$m(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=$m(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[_f,Lf,Mf];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===Mf&&1===a.shape[a.shape.length-1])throw new mp(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new mp(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new mp(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=dm(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await fm(o[t],null,e[t]))}return[i,o,u]}testLoop(e,t,n,r=0,s){return Tr((()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new gp("Verbose mode is not implemented yet.");if(null!=s)throw new gp("steps mode in testLoop() is not implemented yet");{const r=Im(a,n),s=Gi(pd(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=md(s,a,o-a),l=km(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)i.push(yi(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Mr(i[e],pa(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=Ms(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(wp(e,r)>1){s+=`_${wp(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new am(e),o=um(this.outputs,i,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],o[e]);null!=s[e]&&(n=mm(n,s[e]));const a=Ca(n);t.push(a),u=0===e?n:Mr(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=Ca(t(r[s],o[s]))}$r(n),a.push(n)}return u=Ca(u),this.calculateLosses().forEach((e=>{u=Mr(u,e)})),u}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Tr((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new am(a),o=um(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=Ca(r(s[e],o[e]));n=0===e?a:Mr(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=Ca(n(s[r],o[r]));t.push(a)}return t}))}async fit(e,t,n={}){return Nm(this,e,t,n)}async fitDataset(e,t){return bm(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Cr(a),vp(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Er().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Er().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Ip(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Ip(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Ip(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Ip(Xf(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Ip(Xf(e))));{const e={};for(const t in this.metrics)e[t]=Ip(Xf(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=Af(rm(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=Np(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Np(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Np(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>Np(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=Np(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=wn(e);if(0===t.length)throw new mp(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new mp(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new mp("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await pn(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.8.1",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await pn(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=gn([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Yf(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){Yf(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Rm.className="Model",Ir(Rm);class _m extends Rm{}_m.className="Functional",Ir(_m);class Dm extends Rm{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:ef("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new mp(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Dm||e instanceof Rm;let n;if(t){if(n=e,1!==n.outputs.length)throw new mp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new mp("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new mp("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new mp("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new yf({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new mp(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new mp("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=gf(this.outputs[0])}this.inboundNodes=[],new df({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:bp(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(sf(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Rm({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new fp("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new fp("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new fp("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new fp("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new mp("Legacy serialization format not supported yet.");s=t}else u(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Dm))throw new gp(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of s){const t=Af(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new mp("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new mp("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Dm.className="Sequential",Ir(Dm);class Fm extends vr{getConfig(){return{}}}class Mm extends Fm{apply(e,t=1){return function(e,t=1){if(1!==t)throw new gp(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Us(e)}(e,t)}}Mm.className="elu",Ir(Mm);class Om extends Fm{apply(e){return bi(e)}}Om.className="selu",Ir(Om);class Lm extends Fm{apply(e){return pi(e)}}Lm.className="relu",Ir(Lm);class zm extends Fm{apply(e){return Tr((()=>Aa(6,pi(e))))}}zm.className="relu6",Ir(zm);class Pm extends Fm{apply(e){return e}}Pm.className="linear",Ir(Pm);class Bm extends Fm{apply(e){return fa(e)}}Bm.className="sigmoid",Ir(Bm);class Wm extends Fm{apply(e){return function(e){return Tr((()=>{const t=Mr(.5,pa(.2,e));return gs(t,0,1)}))}(e)}}Wm.className="hardSigmoid",Ir(Wm);class Vm extends Fm{apply(e){return ma(e)}}Vm.className="softplus",Ir(Vm);class Um extends Fm{apply(e){return function(e){return Tr((()=>Ms(e,_r(e).add(1))))}(e)}}Um.className="softsign",Ir(Um);class Gm extends Fm{apply(e){return Ui(e)}}Gm.className="tanh",Ir(Gm);class Hm extends Fm{apply(e,t=-1){return $i(e,t)}}Hm.className="softmax",Ir(Hm);class jm extends Fm{apply(e,t=-1){return wa(e,t)}}jm.className="logSoftmax",Ir(jm);class qm extends Fm{apply(e,t=1){return Tr((()=>fa(e.mul(t)).mul(e)))}}function Km(e){return e.getClassName()}function Xm(e,t={}){return Cp(e,kr.getMap().classNameMap,t,"activation")}function Ym(e){if(null==e){const e={className:"linear",config:{}};return Xm(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},Xm(t)}return e instanceof Fm?e:Xm(e)}qm.className="swish",Ir(qm);class Zm extends vr{}class Jm extends Zm{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Tr((()=>{let t=Ga([1]);return this.hasL1&&(t=Mr(t,xa(pa(this.l1,_r(e))))),this.hasL2&&(t=Mr(t,xa(pa(this.l2,Nd(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Jm.className="L1L2",Ir(Jm);const Qm={l1l2:"L1L2"};function eg(e){return Ep(e)}function tg(e,t={}){return Cp(e,kr.getMap().classNameMap,t,"regularizer")}function ng(e){if(null==e)return null;if("string"==typeof e){return tg({className:e in Qm?Qm[e]:e,config:{}})}return e instanceof Zm?e:tg(e)}class rg extends mf{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=rf(e);let n=pi(e);return null!=this.maxValue&&(n=gs(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}rg.className="ReLU",Ir(rg);class sg extends mf{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=rf(e);return aa(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}sg.className="LeakyReLU",Ir(sg);class ag extends mf{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Yd(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=ng(e.alphaRegularizer),this.alphaConstraint=jp(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new mp(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=sf(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new cf({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=rf(e),Xa(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Xd(this.alphaInitializer),alphaRegularizer:eg(this.alphaRegularizer),alphaConstraint:Gp(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}ag.className="PReLU",Ir(ag);class ig extends mf{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new gp(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=rf(e);return Us(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}ig.className="ELU",Ir(ig);class og extends mf{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=rf(e);return n.mul(dd(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}og.className="ThresholdedReLU",Ir(og);class ug extends mf{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Hm).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=rf(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function lg(e,t,n){if("number"==typeof e)return bp(e,t);if(e.length!==t)throw new mp(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new mp(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function cg(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function hg(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+hd([n-t,0]);else{if("same"!==r)throw new mp(`Unsupport padding mode: ${r}.`);e*=t}return e}function pg(e,t){return Tr((()=>(Qp(t),"channelsFirst"===t?rr(e,[0,2,3,1]):e)))}function dg(e,t){return Tr((()=>(Qp(t),"channelsFirst"===t?rr(e,[0,2,3,4,1]):e)))}function fg(e,t,n,r=[1,1],s="valid",a,i,o=null){return Tr((()=>{if(null==a&&(a="channelsLast"),Qp(a),3!==e.rank&&4!==e.rank)throw new mp(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new mp(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=pg(e,a);if("causal"===s)throw new gp("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=So({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=rr(u,[0,3,1,2])),u}))}ug.className="Softmax",Ir(ug);class mg extends mf{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",mg.verifyArgs(t),this.rank=e,Fp(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new gp(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=lg(t.kernelSize,e,"kernelSize"),this.strides=lg(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,ed(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Qp(this.dataFormat),this.activation=Ym(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Yd(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=jp(t.biasConstraint),this.biasRegularizer=ng(t.biasRegularizer),this.activityRegularizer=ng(t.activityRegularizer),this.dilationRate=lg(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new mp(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new mp(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new mp(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(xp("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Dp(e.kernelSize,"number",1,3))throw new mp(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Km(this.activation),useBias:this.useBias,biasInitializer:Xd(this.biasInitializer),biasRegularizer:eg(this.biasRegularizer),activityRegularizer:eg(this.activityRegularizer),biasConstraint:Gp(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class gg extends mg{constructor(e,t){super(e,t),this.kernel=null,gg.verifyArgs(t),this.filters=t.filters,Fp(this.filters,"filters"),this.kernelInitializer=Yd(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=jp(t.kernelConstraint),this.kernelRegularizer=ng(t.kernelRegularizer)}build(e){e=sf(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new mp(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Tr((()=>{let t;e=rf(e);const n=null==this.bias?null:this.bias.read(),r=Op(this.activation.getClassName());if(null!=r&&2===this.rank)t=fg(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,s="valid",a,i=1){return Tr((()=>{if(null==a&&(a="channelsLast"),Qp(a),3!==e.shape.length)throw new mp(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new mp(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new mp(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=rr(e,[0,2,1])),"causal"===s)throw new gp("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Is(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Ed(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=fg(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new gp("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,r=[1,1,1],s="valid",a,i){return Tr((()=>{if(null==a&&(a="channelsLast"),Qp(a),4!==e.rank&&5!==e.rank)throw new mp(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new mp(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=dg(e,a);if("causal"===s)throw new gp("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Es(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Ed(o,n)),"channelsFirst"===a&&(o=rr(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=sf(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=cg(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:Xd(this.kernelInitializer),kernelRegularizer:eg(this.kernelRegularizer),kernelConstraint:Gp(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new mp(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class yg extends gg{constructor(e){super(2,e),yg.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Dp(e.kernelSize,"number",1,2))throw new mp(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}yg.className="Conv2D",Ir(yg);class bg extends gg{constructor(e){super(3,e),bg.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new mp(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}bg.className="Conv3D",Ir(bg);class xg extends yg{constructor(e){if(super(e),this.inputSpec=[new cf({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new mp(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=sf(e)).length)throw new mp("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new mp("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new cf({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Tr((()=>{let t=rf(e);if(4!==t.shape.length)throw new mp(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,hg(i,c,u,this.padding),hg(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=rr(t,[0,2,3,1]));let d=Ss(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=rr(d,[0,3,1,2])),null!=this.bias&&(d=Ed(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=sf(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=hg(t[r],o,a,this.padding),t[s]=hg(t[s],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}xg.className="Conv2DTranspose",Ir(xg);class wg extends gg{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new mp("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new mp("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new mp(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Yd(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=ng(t.depthwiseRegularizer),this.depthwiseConstraint=jp(t.depthwiseConstraint),this.pointwiseInitializer=Yd(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=ng(t.pointwiseRegularizer),this.pointwiseConstraint=jp(t.pointwiseConstraint)}build(e){if((e=sf(e)).length<this.rank+2)throw new mp(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new mp(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new cf({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Tr((()=>{let t;if(e=rf(e),1===this.rank)throw new gp("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=rr(e,[0,2,3,1])),t=xi(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Ed(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=rr(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Xd(this.depthwiseInitializer),e.pointwiseInitializer=Xd(this.pointwiseInitializer),e.depthwiseRegularizer=eg(this.depthwiseRegularizer),e.pointwiseRegularizer=eg(this.pointwiseRegularizer),e.depthwiseConstraint=Gp(this.depthwiseConstraint),e.pointwiseConstraint=Gp(this.pointwiseConstraint),e}}wg.className="SeparableConv";class vg extends wg{constructor(e){super(2,e)}}vg.className="SeparableConv2D",Ir(vg);class kg extends gg{constructor(e){super(1,e),kg.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Dp(e.kernelSize,"number",1,1))throw new mp(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}kg.className="Conv1D",Ir(kg);class Ig extends mf{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Tr((()=>{if(e=rf(e),"channelsLast"===this.dataFormat){const t=yd(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return yd(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=yd(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return yd(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ig.className="Cropping2D",Ir(Ig);class Ng extends mf{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qp(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,_p(Kp,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Tr((()=>{let t=rf(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=rr(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?t.resizeNearestNeighbor([e,r]):t.resizeBilinear([e,r]);return rr(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,r]):t.resizeBilinear([e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ng.className="UpSampling2D",Ir(Ng);class Sg extends mg{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Yd(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=jp(e.depthwiseConstraint),this.depthwiseRegularizer=ng(e.depthwiseRegularizer)}build(e){if((e=sf(e)).length<4)throw new mp(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new mp(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Tr((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Tr((()=>{null==s&&(s="channelsLast"),Qp(s);let i=pg(e,s);if(4!==e.rank)throw new mp(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new mp(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=_s(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=rr(i,[0,3,1,2])),i}))}(e=rf(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Ed(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=sf(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=cg(t,this.kernelSize[0],this.padding,this.strides[0]),a=cg(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Xd(this.depthwiseInitializer),e.depthwiseRegularizer=eg(this.depthwiseRegularizer),e.depthwiseConstraint=Gp(this.depthwiseRegularizer),e}}function Eg(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new mp("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function Tg(e,t,n,r=!1,s,a,i=!1,o=!1){return Tr((()=>{const u=t.shape.length;if(u<3)throw new mp(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(pd(2,u));if(t=rr(t,l),null!=a)throw new gp("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=js(s,-1)),s=rr(s,l)),r&&(t=fi(t,0),null!=s&&(s=fi(s,0)));const c=[];let h,p=n;const d=t.shape[0],f=Xi(t);let m,g;null!=s&&(m=Xi(s));for(let t=0;t<d;++t){const n=f[t],r=Tr((()=>e(n,p)));if(null==s)h=r[0],p=r[1];else{const e=Tr((()=>{const e=m[t],n=ja(e).sub(e);return{output:r[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,s)=>r[1][s].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=Pi(c,1)}return[h,g,p]}))}Sg.className="DepthwiseConv2D",Ir(Sg);class Cg extends mf{constructor(e){let t;if(super(e),null==e.cell)throw new mp("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Og({cells:e.cell}):e.cell,null==t.stateSize)throw new mp("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new cf({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return pd(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){tf(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Tr((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new gp("Constants support is not implemented in RNN yet.");tf(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new cf({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!d(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new mp(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new cf({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Tr((()=>{if(!this.stateful)throw new dp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new mp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Ga([n,e]))):this.states_=[Ga([n,this.cell.stateSize])];else if(null==e)Cr(this.states_),null!=this.keptStates&&(Cr(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Ga([n,e]))):this.states_[0]=Ga([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new mp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Cr(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!d(r.shape,a))throw new mp(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>$r(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Eg(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new cf({shape:e.shape}));i=i.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof hf){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Tr((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=rf(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new mp(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Tg(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Tr((()=>{let t=Ga(e.shape);return t=xa(t,[1,2]),t=fd(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?wd(t,[1,e]):t)):this.cell.stateSize>1?[wd(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Cg.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=Af(t.cell,n);return new e(Object.assign(t,{cell:r}))}}Cg.className="RNN",Ir(Cg);class $g extends mf{}class Ag extends $g{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Fp(this.units,"units"),this.activation=Ym(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Yd(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Yd(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Yd(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ng(e.kernelRegularizer),this.recurrentRegularizer=ng(e.recurrentRegularizer),this.biasRegularizer=ng(e.biasRegularizer),this.kernelConstraint=jp(e.kernelConstraint),this.recurrentConstraint=jp(e.recurrentConstraint),this.biasConstraint=jp(e.biasConstraint),this.dropout=cd([1,hd([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=cd([1,hd([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=sf(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Tr((()=>{if(2!==(e=e).length)throw new mp(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lg({ones:()=>ja(e),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lg({ones:()=>ja(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=kd(null!=a?pa(e,a):e,this.kernel.read()),null!=this.bias&&(s=Ed(s,this.bias.read())),null!=i&&(n=pa(n,i));let o=Mr(s,kd(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Km(this.activation),useBias:this.useBias,kernelInitializer:Xd(this.kernelInitializer),recurrentInitializer:Xd(this.recurrentInitializer),biasInitializer:Xd(this.biasInitializer),kernelRegularizer:eg(this.kernelRegularizer),recurrentRegularizer:eg(this.recurrentRegularizer),biasRegularizer:eg(this.biasRegularizer),activityRegularizer:eg(this.activityRegularizer),kernelConstraint:Gp(this.kernelConstraint),recurrentConstraint:Gp(this.recurrentConstraint),biasConstraint:Gp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Ag.className="SimpleRNNCell",Ir(Ag);class Rg extends Cg{constructor(e){e.cell=new Ag(e),super(e)}call(e,t){return Tr((()=>{null!=this.cell.dropoutMask&&(Cr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}Rg.className="SimpleRNN",Ir(Rg);class _g extends $g{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new mp("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Fp(this.units,"units"),this.activation=Ym(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ym(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Yd(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Yd(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Yd(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=ng(e.kernelRegularizer),this.recurrentRegularizer=ng(e.recurrentRegularizer),this.biasRegularizer=ng(e.biasRegularizer),this.kernelConstraint=jp(e.kernelConstraint),this.recurrentConstraint=jp(e.recurrentConstraint),this.biasConstraint=jp(e.biasConstraint),this.dropout=cd([1,hd([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=cd([1,hd([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=sf(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Tr((()=>{if(2!==(e=e).length)throw new mp(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lg({ones:()=>ja(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lg({ones:()=>ja(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(e=pa(e,s[0]));let l=kd(e,this.kernel.read());this.useBias&&(l=Ed(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=pa(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=Fi(c,[2*this.units,this.units],c.rank-1),d=kd(r,h),[f,m,g]=Fi(l,3,l.rank-1),[y,b]=Fi(d,2,d.rank-1);i=this.recurrentActivation.apply(Mr(f,y)),o=this.recurrentActivation.apply(Mr(m,b));const x=kd(pa(o,r),p);u=this.activation.apply(Mr(g,x));const w=Mr(pa(i,r),pa(Mr(1,da(i)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Km(this.activation),recurrentActivation:Km(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xd(this.kernelInitializer),recurrentInitializer:Xd(this.recurrentInitializer),biasInitializer:Xd(this.biasInitializer),kernelRegularizer:eg(this.kernelRegularizer),recurrentRegularizer:eg(this.recurrentRegularizer),biasRegularizer:eg(this.biasRegularizer),activityRegularizer:eg(this.activityRegularizer),kernelConstraint:Gp(this.kernelConstraint),recurrentConstraint:Gp(this.recurrentConstraint),biasConstraint:Gp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}_g.className="GRUCell",Ir(_g);class Dg extends Cg{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new _g(e),super(e)}call(e,t){return Tr((()=>{null!=this.cell.dropoutMask&&(Cr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Dg.className="GRU",Ir(Dg);class Fg extends $g{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Fp(this.units,"units"),this.activation=Ym(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Ym(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Yd(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Yd(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Yd(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=ng(e.kernelRegularizer),this.recurrentRegularizer=ng(e.recurrentRegularizer),this.biasRegularizer=ng(e.biasRegularizer),this.kernelConstraint=jp(e.kernelConstraint),this.recurrentConstraint=jp(e.recurrentConstraint),this.biasConstraint=jp(e.biasConstraint),this.dropout=cd([1,hd([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=cd([1,hd([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=sf(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends Rd{apply(t,r){const s=e.apply([n]),a=(new Dd).apply([n]),i=e.apply([2*n]);return xd(xd(s,a),i)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Tr((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new mp(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lg({ones:()=>ja(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lg({ones:()=>ja(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(e=pa(e,a[0]));let h=kd(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=pa(r,i[0])),h=Mr(h,kd(r,this.recurrentKernel.read())),this.useBias&&(h=Ed(h,this.bias.read()));const[p,d,f,m]=Fi(h,4,h.rank-1);o=this.recurrentActivation.apply(p),u=this.recurrentActivation.apply(d),l=Mr(pa(u,s),pa(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=pa(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Km(this.activation),recurrentActivation:Km(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Xd(this.kernelInitializer),recurrentInitializer:Xd(this.recurrentInitializer),biasInitializer:Xd(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:eg(this.kernelRegularizer),recurrentRegularizer:eg(this.recurrentRegularizer),biasRegularizer:eg(this.biasRegularizer),activityRegularizer:eg(this.activityRegularizer),kernelConstraint:Gp(this.kernelConstraint),recurrentConstraint:Gp(this.recurrentConstraint),biasConstraint:Gp(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Fg.className="LSTMCell",Ir(Fg);class Mg extends Cg{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Fg(e),super(e)}call(e,t){return Tr((()=>{null!=this.cell.dropoutMask&&(Cr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Mg.className="LSTM",Ir(Mg);class Og extends $g{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Tr((()=>{let n=(e=e).slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;tf(e)&&(e=e[0]),e=e,this.cells.forEach(((n,r)=>{rd(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(Af(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return uf(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}lf(t)}}function Lg(e){const{ones:t,rate:n,training:r=!1,count:s=1}=e,a=()=>Td(t(),n),i=()=>Cd(a,t,r);if(!s||s<=1)return $r(i().clone());return Array(s).fill(void 0).map(i).map((e=>$r(e.clone())))}Og.className="StackedRNNCells",Ir(Og);var zg=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class Pg extends Cg{constructor(e){if(e.unroll)throw new gp("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new gp("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new cf({ndim:5})]}call(e,t){return Tr((()=>{if(null!=this.cell.dropoutMask&&(Cr(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cr(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new mp("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Tr((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=Ga([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Tr((()=>{if(!this.stateful)throw new dp("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new mp("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Ga(s))):this.states_=[Ga(s)];else if(null==e)Cr(this.states_),null!=this.keptStates&&(Cr(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Ga(s))):this.states_[0]=Ga(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new mp(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Cr(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!d(n.shape,r))throw new mp(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>$r(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?3:2],l=e[o?4:3],c=cg(u,r[0],s,a[0],i[0]),h=cg(l,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Pg.className="ConvRNN2D";class Bg extends Fg{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Fp(this.filters,"filters"),this.kernelSize=lg(n,2,"kernelSize"),this.kernelSize.forEach((e=>Fp(e,"kernelSize"))),this.strides=lg(r||1,2,"strides"),this.strides.forEach((e=>Fp(e,"strides"))),this.padding=s||"valid",ed(this.padding),this.dataFormat=a||"channelsLast",Qp(this.dataFormat),this.dilationRate=lg(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Fp(e,"dilationRate")))}build(e){var t;e=sf(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new mp(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends Rd{apply(e,t){return bd([n.apply([r]),Ha([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Tr((()=>{if(3!==e.length)throw new mp(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Lg({ones:()=>ja(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?pa(t[n],e):e;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Lg({ones:()=>ja(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=Fi(this.kernel.read(),4,3),[v,k,I,N]=this.useBias?Fi(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,v,this.padding),l=this.inputConv(l,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,E,T,C]=Fi(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,E),m=this.recurrentConv(m,T),g=this.recurrentConv(g,C);const $=this.recurrentActivation.apply(Mr(u,d)),A=this.recurrentActivation.apply(Mr(l,f)),R=Mr(pa(A,a),pa($,this.activation.apply(Mr(c,m)))),_=pa(this.recurrentActivation.apply(Mr(h,g)),this.activation.apply(R));return[_,_,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=zg(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,n,r){const s=ks(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Ed(s,n,this.dataFormat):s}recurrentConv(e,t){return ks(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Bg.className="ConvLSTM2DCell",Ir(Bg);class Wg extends Pg{constructor(e){const t=new Bg(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Wg.className="ConvLSTM2D",Ir(Wg);class Vg extends mf{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Cd((()=>Td(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Vg.className="Dropout",Ir(Vg);class Ug extends Vg{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Ug.className="SpatialDropout1D",Ir(Ug);class Gg extends mf{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Fp(this.units,"units"),this.activation=Ym(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Yd(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Yd(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=jp(e.kernelConstraint),this.biasConstraint=jp(e.biasConstraint),this.kernelRegularizer=ng(e.kernelRegularizer),this.biasRegularizer=ng(e.biasRegularizer),this.activityRegularizer=ng(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=sf(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=sf(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e),r=Op(this.activation.getClassName());let s;return null!=r?s=kd(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=kd(n,this.kernel.read()),null!=this.bias&&(s=Ed(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:Km(this.activation),useBias:this.useBias,kernelInitializer:Xd(this.kernelInitializer),biasInitializer:Xd(this.biasInitializer),kernelRegularizer:eg(this.kernelRegularizer),biasRegularizer:eg(this.biasRegularizer),activityRegularizer:eg(this.activityRegularizer),kernelConstraint:Gp(this.kernelConstraint),biasConstraint:Gp(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Gg.className="Dense",Ir(Gg);class Hg extends mf{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=sf(e);for(const t of e.slice(1))if(null==t)throw new mp(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],ud(e,1)]}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);let n=rf(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new mp(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],ud(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Hg.className="Flatten",Ir(Hg);class jg extends mf{constructor(e){super(e),this.supportsMasking=!0,this.activation=Ym(e.activation)}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Km(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}jg.className="Activation",Ir(jg);class qg extends mf{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Tr((()=>{return e=rf(e),t=e,n=this.n,Tr((()=>{if(2!==t.shape.length)throw new mp(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return wd(fd(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}qg.className="RepeatVector",Ir(qg);class Kg extends mf{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new mp("Can only specifiy one unknown dimension.");a=e}else s*=t}const i=ud(e);if(null!==a){if(0===s||i%s!=0)throw new mp(n);r[a]=i/s}else if(i!==s)throw new mp(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Kg.className="Reshape",Ir(Kg);class Xg extends mf{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=pd(1,e.dims.length+1);if(!d(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new cf({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=sf(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return rr(rf(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Xg.className="Permute",Ir(Xg);class Yg extends mf{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=rf(e);return zr(Ua(n,this.maskValue),-1)}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e),r=zr(Ua(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))}))}}Yg.className="Masking",Ir(Yg);class Zg extends mf{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(kp(e.inputLength))}this.inputDim=e.inputDim,Fp(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Fp(this.outputDim,"outputDim"),this.embeddingsInitializer=Yd(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=ng(e.embeddingsRegularizer),this.activityRegularizer=ng(e.activityRegularizer),this.embeddingsConstraint=jp(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Tr((()=>this.maskZero?(e=rf(e),Ua(e,Ws(e))):null))}computeOutputShape(e){if(e=sf(e),null==this.inputLength)return[...e,this.outputDim];const t=kp(this.inputLength);if(t.length!==e.length-1)throw new mp(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new mp(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);let n=rf(e);"int32"!==n.dtype&&(n=dd(n,"int32"));return Id(this.embeddings.read(),n.as1D()).reshape(sf(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Xd(this.embeddingsInitializer),embeddingsRegularizer:eg(this.embeddingsRegularizer),activityRegularizer:eg(this.activityRegularizer),embeddingsConstraint:Gp(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Zg.className="Embedding",Ir(Zg);class Jg extends mf{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new gp}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new mp("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[sf(e)]),(e=e).length<2)throw new mp(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Ap(t),t.length>1)throw new mp(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Ap(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Tr((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=hd(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=fd(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let i=r.reshape([s].concat(ud(e.slice(1))));i=rr(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const s=pd(1,e).concat([0]);t.push(rr(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=rr(r.reshape([-1,t]),[1,0]).reshape(n)}else if(s>1){const e=[s-1].concat(pd(0,s-1));r=rr(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Ap(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Tr((()=>{if(null==t)return null;if(!Array.isArray(t))throw new mp("`mask` should be an Array");if(!Array.isArray(e))throw new mp("`inputs` should be an Array");if(t.length!==e.length)throw new mp(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:js(e,0))))[0];for(let e=1;e<t.length-1;++e)n=va(n,t[e]);return n}))}}class Qg extends Jg{constructor(e){super(e)}mergeFunction(e){return Tr((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Mr(t,e[n]);return t}))}}Qg.className="Add",Ir(Qg);class ey extends Jg{constructor(e){super(e)}mergeFunction(e){return Tr((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=pa(t,e[n]);return t}))}}ey.className="Multiply",Ir(ey);class ty extends Jg{constructor(e){super(e)}mergeFunction(e){return Tr((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Mr(t,e[n]);return pa(1/e.length,t)}))}}ty.className="Average",Ir(ty);class ny extends Jg{constructor(e){super(e)}mergeFunction(e){return Tr((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Ta(t,e[n]);return t}))}}ny.className="Maximum",Ir(ny);class ry extends Jg{constructor(e){super(e)}mergeFunction(e){return Tr((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Aa(t,e[n]);return t}))}}ry.className="Minimum",Ir(ry);class sy extends Jg{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new mp("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(d(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new mp("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Tr((()=>bd(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new mp("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new mp("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new mp("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new mp(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Tr((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(ja(e[n]).asType("bool")):t[n].rank<e[n].rank?r.push(js(t[n],-1)):r.push(t[n]);const s=ys(r,this.axis);return Lr(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function ay(e,t){for(;e<0;)e+=t;return e}sy.className="Concatenate",Ir(sy);class iy extends Jg{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){u(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new gp("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new mp(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new mp(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>ay(t,e[n].shape.length))):[ay(this.axes,n.shape.length),ay(this.axes,r.shape.length)],this.normalize&&(n=Rf(n,t[0]),r=Rf(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new gp("batchDot is not implemented for tensors of 4D or higher rank yet");if(u(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),u(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new gp("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Tr((()=>{let n,i;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;i=e.matMul(t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[ay(this.axes,e.length),ay(this.axes,t.length)],n}computeOutputShape(e){u(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new gp("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}iy.className="Dot",Ir(iy);class oy extends mf{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e);return Cd((()=>vd(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}oy.className="GaussianNoise",Ir(oy);class uy extends mf{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Tr((()=>{this.invokeCallHook(e,t);const n=rf(e);if(this.rate>0&&this.rate<1){return Cd((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(vd(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}uy.className="GaussianDropout",Ir(uy);class ly extends mf{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||rf(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Tr((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Cd((()=>{const t=rf(e),r=-1.7580993408473766;let s=ea(ui(n),this.rate);s=dd(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return t.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)}),(()=>rf(e)),t.training||!1)}return e}))}}function cy(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=cs(e,t,n,r,s,a);else if(3===e.rank)i=hs(e,t,n,r,s,a);else{if(4!==e.rank)throw new gp(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=ps(e,t,n,r,s,a)}return i}function hy(e,t,n,r,s=.001){return d(r.slice().sort(),pd(0,e.rank-1))?function(e,t,n,r,s=.001){return Tr((()=>{const a=Wa(e,r),i=a.mean,o=a.variance;return[cy(e,i,o,n,t,s),i,o]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Tr((()=>{const a=Wa(e,r),i=a.mean,o=a.variance,u=[];for(const t of pd(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=i.reshape(u),c=o.reshape(u),h=null==t?null:t.reshape(u),p=null==n?null:n.reshape(u);return[cy(e,l,c,p,h,s),i,o]}))}(e,t,n,r,s)}ly.className="AlphaDropout",Ir(ly);class py extends mf{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Yd(e.betaInitializer||"zeros"),this.gammaInitializer=Yd(e.gammaInitializer||"ones"),this.movingMeanInitializer=Yd(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Yd(e.movingVarianceInitializer||"ones"),this.betaConstraint=jp(e.betaConstraint),this.gammaConstraint=jp(e.gammaConstraint),this.betaRegularizer=ng(e.betaRegularizer),this.gammaRegularizer=ng(e.gammaRegularizer)}build(e){e=sf(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new mp(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new cf({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Tr((()=>{const n=null!=t.training&&t.training,r=rf(e),s=r.shape,a=s.length,i=pd(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=bp(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!d(l,pd(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(u),t=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return cy(r,e,t,n,s,this.epsilon)}return cy(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,f]=hy(r,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(e,t,n)=>{Tr((()=>{const r=1-n,s=e.read(),a=s.sub(t).mul(r);e.write(s.sub(a))}))};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,f,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xd(this.betaInitializer),gammaInitializer:Xd(this.gammaInitializer),movingMeanInitializer:Xd(this.movingMeanInitializer),movingVarianceInitializer:Xd(this.movingVarianceInitializer),betaRegularizer:eg(this.betaRegularizer),gammaRegularizer:eg(this.gammaRegularizer),betaConstraint:Gp(this.betaConstraint),gammaConstraint:Gp(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}py.className="BatchNormalization",Ir(py);class dy extends mf{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Yd(e.betaInitializer||"zeros"),this.gammaInitializer=Yd(e.gammaInitializer||"ones"),this.betaRegularizer=ng(e.betaRegularizer),this.gammaRegularizer=ng(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=sf(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Ap(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=rf(e),r=n.shape,s=r.length;return Tr((()=>{let{mean:e,variance:t}=Wa(n,this.axis,!0);const a=bp(1,s);for(const e of this.axis)a[e]=r[e];const i=e=>null!=e&&e.shape.length!==s&&this.axis!==[s-1]?e.reshape(a):e;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(l.push(r[e]),c.push(1)):(l.push(1),c.push(r[e]));return e=e.tile(l),t=t.tile(l),o=o.tile(c),u=u.tile(c),cy(n,e,t,u,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Xd(this.betaInitializer),gammaInitializer:Xd(this.gammaInitializer),betaRegularizer:eg(this.betaRegularizer),gammaRegularizer:eg(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}dy.className="LayerNormalization",Ir(dy);class fy extends mf{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new mp(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new mp(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new mp(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new cf({ndim:4})]}computeOutputShape(e){let t,n;return e=sf(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Tr((()=>{return t=rf(e),n=this.padding,r=this.dataFormat,Tr((()=>{if(4!==t.rank)throw new mp(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new mp("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new mp(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],qa(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function my(e,t,n,r,s,a){return Tr((()=>{let i;Qp(s),td(a),ed(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=pg(e,s);const o="same"===r?"same":"valid";return i="max"===a?Na(e,t,n,o):is(e,t,n,o),"channelsFirst"===s&&(i=rr(i,[0,3,1,2])),i}))}function gy(e,t,n,r,s,a){return Tr((()=>{let i;Qp(s),td(a),ed(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=dg(e,s);const o="same"===r?"same":"valid";return i="max"===a?Sa(e,t,n,o):os(e,t,n,o),"channelsFirst"===s&&(i=rr(i,[0,4,1,2,3])),i}))}fy.className="ZeroPadding2D",Ir(fy);class yy extends mf{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new mp(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Fp(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new mp(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Fp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,ed(this.padding),this.inputSpec=[new cf({ndim:3})]}computeOutputShape(e){const t=cg((e=sf(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Tr((()=>{this.invokeCallHook(e,t),e=fd(rf(e),2);const n=this.poolingFunction(rf(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return zi(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class by extends yy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qp(s),ed(r),my(e,t,n,r,s,"max")}}by.className="MaxPooling1D",Ir(by);class xy extends yy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qp(s),ed(r),my(e,t,n,r,s,"avg")}}xy.className="AveragePooling1D",Ir(xy);class wy extends mf{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new mp(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Fp(this.poolSize,"poolSize"),Fp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qp(this.dataFormat),ed(this.padding),this.inputSpec=[new cf({ndim:4})]}computeOutputShape(e){e=sf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=cg(t,this.poolSize[0],this.padding,this.strides[0]),n=cg(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Tr((()=>(this.invokeCallHook(e,t),this.poolingFunction(rf(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class vy extends wy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qp(s),ed(r),my(e,t,n,r,s,"max")}}vy.className="MaxPooling2D",Ir(vy);class ky extends wy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qp(s),ed(r),my(e,t,n,r,s,"avg")}}ky.className="AveragePooling2D",Ir(ky);class Iy extends mf{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new mp(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Fp(this.poolSize,"poolSize"),Fp(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qp(this.dataFormat),ed(this.padding),this.inputSpec=[new cf({ndim:5})]}computeOutputShape(e){e=sf(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=cg(t,this.poolSize[0],this.padding,this.strides[0]),n=cg(n,this.poolSize[1],this.padding,this.strides[1]),r=cg(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Tr((()=>(this.invokeCallHook(e,t),this.poolingFunction(rf(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ny extends Iy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qp(s),ed(r),gy(e,t,n,r,s,"max")}}Ny.className="MaxPooling3D",Ir(Ny);class Sy extends Iy{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Qp(s),ed(r),gy(e,t,n,r,s,"avg")}}Sy.className="AveragePooling3D",Ir(Sy);class Ey extends mf{constructor(e){super(e),this.inputSpec=[new cf({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new gp}}class Ty extends Ey{constructor(e){super(e||{})}call(e,t){return Tr((()=>{const t=rf(e);return Ca(t,1)}))}}Ty.className="GlobalAveragePooling1D",Ir(Ty);class Cy extends Ey{constructor(e){super(e||{})}call(e,t){return Tr((()=>{const t=rf(e);return ya(t,1)}))}}Cy.className="GlobalMaxPooling1D",Ir(Cy);class $y extends mf{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Qp(this.dataFormat),this.inputSpec=[new cf({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new gp}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Ay extends $y{call(e,t){return Tr((()=>{const t=rf(e);return"channelsLast"===this.dataFormat?Ca(t,[1,2]):Ca(t,[2,3])}))}}Ay.className="GlobalAveragePooling2D",Ir(Ay);class Ry extends $y{call(e,t){return Tr((()=>{const t=rf(e);return"channelsLast"===this.dataFormat?ya(t,[1,2]):ya(t,[2,3])}))}}Ry.className="GlobalMaxPooling2D",Ir(Ry);class _y extends mf{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=Af(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class Dy extends _y{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=sf(e)).length<3)throw new mp(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=sf(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Tr((()=>Tg(((e,n)=>[rf(this.layer.call(e,t)),[]]),e=rf(e),[],!1,null,null,!1,!0)[1]))}}Dy.className="TimeDistributed",Ir(Dy);class Fy extends _y{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=Af(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=Af(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,_p(Zp,"BidirectionalMergeMode",s),e.weights)throw new gp("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),t=s[0]):t=s[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):vp(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Eg(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new mp("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new cf({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new gp("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof hf;for(const e of a)if(e instanceof hf!==o)throw new mp("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Tr((()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=fi(s,1)),"concat"===this.mergeMode?i=bd([r,s]):"sum"===this.mergeMode?i=Mr(r,s):"ave"===this.mergeMode?i=pa(.5,Mr(r,s)):"mul"===this.mergeMode?i=pa(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){rd(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),rd(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=Af(t.layer);if(delete t.layer,null!=t.numConstants)throw new gp("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}function My(e,t){return Oy(e,t)}function Oy(e,t,n=new Map,r=new Set){if(null==e)return null;if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(By(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=Oy(e[a],t,n,r);s[a]=i}return r.delete(e),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function Ly(e,t=Py){return zy(e,t)}function zy(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(By(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=zy(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function Py(e){return null===e?null:By(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function By(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof De))}function Wy(e){return e instanceof De?{value:e.clone(),recurse:!1}:By(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}Fy.className="Bidirectional",Ir(Fy);class Vy{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Uy extends Vy{constructor(){super(Uy.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Uy.INITIAL_CAPACITY=32;class Gy{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Qy(this,e)}filter(e){return new Zy(this,e)}map(e){return new Jy(this,e)}mapAsync(e){return new eb(this,e)}serialMapAsync(e){return new eb(this,e).serial()}flatmap(e){return new nb(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Yy(this,e,t)}columnMajorBatch(e,t=!0,n=Py){return this.rowMajorBatch(e,t).map((e=>Ly(e,n)))}concatenate(e,t){return new rb(new Hy([this,e]),t)}take(e){return e<0||null==e?this:new Xy(this,e)}skip(e){return e<0||null==e?this:new Ky(this,e)}prefetch(e){return new ib(this,e)}shuffle(e,t){return new ob(this,e,t)}serial(){return new qy(this)}}class Hy extends Gy{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,My(t,Wy)),done:!1};var t}}class jy extends Gy{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class qy extends Gy{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Ky extends Gy{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Cr(e.value)}return this.upstream.next()}}class Xy extends Gy{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Yy extends Gy{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Zy extends Gy{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Cr(e.value)}}}class Jy extends Gy{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ye(e.value),n=this.transform(e.value),r=Ye(n);for(const e of t)Xe(e,r)||e.dispose();return{value:n,done:!1}}}class Qy extends Gy{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class eb extends Gy{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ye(e.value),n=await this.transform(e.value),r=Ye(n);for(const e of t)Xe(e,r)||e.dispose();return{value:n,done:!1}}}class tb extends Gy{constructor(){super(),this.outputQueue=new Uy,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class nb extends tb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ye(e.value),n=this.transform(e.value),r=Ye(n);this.outputQueue.pushAll(n);for(const e of t)Xe(e,r)||e.dispose();return!0}}class rb extends Gy{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var sb,ab;(ab=sb||(sb={}))[ab.FAIL=0]="FAIL",ab[ab.SHORTEST=1]="SHORTEST",ab[ab.LONGEST=2]="LONGEST";class ib extends Gy{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new Vy(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class ob extends ib{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Za.alea(n||be().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class ub{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return u(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),lb((async()=>(await n.iterator()).columnMajorBatch(e,t,cb)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,lb((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,lb((async()=>(await t.iterator()).filter((t=>Tr((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return lb((async()=>(await t.iterator()).map((t=>Tr((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return lb((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return lb((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,lb((async()=>{const n=new jy((async()=>({value:await t.iterator(),done:!1})));var r,s;return r=n.take(e),new rb(r,s)}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,lb((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=Za.alea(t||be().toString());return lb((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,lb((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function lb(e,t=null){return new class extends ub{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function cb(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof De||N(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof De?Pi(e):ln(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}ub.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function hb(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&u("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const pb=Yi;class db extends r{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new n(this,Sr())}write(e,t,n){this.firstUse&&(this.firstUse=!1,V().get("IS_NODE")&&Ru("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const s=n.map((e=>xe(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r){this.data.set(e,{values:t,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return _u(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>we(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Gn(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return Sr().makeTensorFromDataId(r,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=be();e();return{kernelMs:be()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){hb([e],"where");const t=this.readSync(e.dataId);return pb(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function fb(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const mb={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;hb(t,"abs");let r=new Float32Array(p(t.shape));return r=fb(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,"float32")}};function gb(e){return(t,n,r,s,a)=>{const i=zs(t,n),o=i.length,u=R(i),l=v(a,p(i)),c=t.length,h=n.length,d=R(t),f=R(n),m=Os(t,i),g=Os(n,i);if(m.length+g.length===0)for(let t=0;t<l.length;++t)l[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<l.length;++t){const n=P(t,o,u),a=n.slice(-c);m.forEach((e=>a[e]=0));const i=z(a,c,d),p=n.slice(-h);g.forEach((e=>p[e]=0));const y=z(p,h,f);l[t]=e(r[i],s[y])}return[l,i]}}function yb(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const bb={kernelName:"Complex",backendName:"cpu",kernelFunc:yb};function xb(e,t,n="float32"){if("complex64"===n){return yb({inputs:{real:xb(e,t,"float32"),imag:xb(e,t,"float32")},backend:e})}const r=M(p(t),n);return e.makeTensorInfo(t,n,r)}function wb(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const vb={kernelName:"Identity",backendName:"cpu",kernelFunc:wb};function kb(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Ib={kernelName:"Real",backendName:"cpu",kernelFunc:kb};function Nb(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return wb({inputs:{x:s},backend:n});const e=xb(n,s.shape,s.dtype),t=Nb({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=yb({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=kb({inputs:{input:s},backend:n}),t=Nb({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!I(s.dtype,a)){const e=wb({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(s.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(s.shape,"int32",t)}if("bool"===a){const e=n.data.get(s.dataId).values,t=ye([0],s.dtype),[r,a]=gb(((e,t)=>e!==t?1:0))(s.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const Sb={kernelName:"Cast",backendName:"cpu",kernelFunc:Nb};function Eb(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:i}=n,o=s;hb([a,i],e);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c=r||a.dtype,[h,p]=t(a.shape,i.shape,u,l,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:s})=>{const{a:a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=Nb({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=o.data.get(r.dataId).values,l=o.data.get(s.dataId).values,c=Nb({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=yb({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(l,s,u)}}}function Tb(e){return(t,n,r,s,a,i)=>{const o=zs(t,n),u=p(o),l=o.length,c=R(o),h=v("float32",u),d=v("float32",u),f=Os(t,o),m=Os(n,o),g=_u(r,s),y=_u(a,i),b=t.length,x=R(t),w=n.length,k=R(n);if(f.length+m.length===0)for(let t=0;t<h.length;t++){const n=t%g.length,r=t%y.length,s=e(g[2*n],g[2*n+1],y[2*r],y[2*r+1]);h[t]=s.real,d[t]=s.imag}else for(let t=0;t<h.length;t++){const n=P(t,l,c),r=n.slice(-b);f.forEach((e=>r[e]=0));const s=z(r,b,x),a=n.slice(-w);m.forEach((e=>a[e]=0));const i=z(a,w,k),o=e(g[2*s],g[2*s+1],y[2*i],y[2*i+1]);h[t]=o.real,d[t]=o.imag}return[h,d,o]}}const Cb=gb(((e,t)=>e+t)),$b=Eb("Add",Cb,Tb(((e,t,n,r)=>({real:e+n,imag:t+r})))),Ab={kernelName:"Add",backendName:"cpu",kernelFunc:$b};function Rb(e,t,n,r,s){const a=p(r),i=M(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(i[r]+=a>0?t[n]:1)}return i}function _b(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=Gn([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,s),o,a):i.set(i.get(o,a)+1,o,a))}return i}function Db(e){return(t,n,r)=>{const s=v(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}function Fb(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(hb(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=p(i.shape),c=n||i.dtype,h=k(c,l);for(let e=0;e<l;++e)h[e]=t(u[e],s);return o.makeTensorInfo(i.shape,c,h)}}function Mb(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(hb(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=t(u,l,s);return o.makeTensorInfo(i.shape,l,c)}}const Ob=Db((e=>Math.ceil(e))),Lb={kernelName:"Ceil",backendName:"cpu",kernelFunc:Mb("Ceil",Ob)},zb=Db((e=>Math.exp(e))),Pb=Mb("Exp",zb),Bb={kernelName:"Exp",backendName:"cpu",kernelFunc:Pb},Wb=Db((e=>Math.expm1(e))),Vb={kernelName:"Expm1",backendName:"cpu",kernelFunc:Mb("Expm1",Wb)},Ub=Db((e=>Math.floor(e))),Gb={kernelName:"Floor",backendName:"cpu",kernelFunc:Mb("Floor",Ub)};function Hb(e,t,n){const r=Gn(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],i=s[2],o=t.locToIndex([a,i]);s[2]=t.values[o];const u=e.locToIndex(s);r.values[n]=e.values[u]}return r}const jb=gb(((e,t)=>e>t?1:0)),qb={kernelName:"Greater",backendName:"cpu",kernelFunc:Eb("Greater",jb,null,"bool")},Kb=gb(((e,t)=>e<t?1:0)),Xb={kernelName:"Less",backendName:"cpu",kernelFunc:Eb("Less",Kb,null,"bool")};function Yb(e,t,n){const r=(t-e)/(n-1),s=M(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const Zb=Db((e=>Math.log(e))),Jb={kernelName:"Log",backendName:"cpu",kernelFunc:Mb("Log",Zb)};function Qb(e,t,n,r){const s=v(r,p(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];t>a&&(a=t)}s[n]=a}return s}const ex=gb(((e,t)=>Math.max(e,t))),tx={kernelName:"Maximum",backendName:"cpu",kernelFunc:Eb("Maximum",ex)},nx=gb(((e,t)=>Math.min(e,t))),rx={kernelName:"Minimum",backendName:"cpu",kernelFunc:Eb("Minimum",nx)},sx=gb(((e,t)=>e*t)),ax=Tb(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),ix=Eb("Multiply",sx,ax),ox={kernelName:"Multiply",backendName:"cpu",kernelFunc:ix};function ux(e,t,n){const r=ge(-1,n);return sx([],t,r,e,n)}const lx={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;hb(r,"neg");const s=n.data.get(r.dataId).values,[a,i]=ux(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,a)}},cx={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Eb("NotEqual",gb(((e,t)=>e!==t?1:0)),null,"bool")};function hx(e,t,n,r,s){const a=t.length,i=p(t),o=R(t),u=R(s),l=v(n,p(s));for(let t=0;t<i;++t){const n=P(t,a,o),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[z(s,a,u)]=e[t]}return l}function px(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;hb(s,"transpose");const i=s.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=s.shape[a[e]];const u=hx(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(u,o,s.dtype),shape:o,dtype:s.dtype}}const dx={kernelName:"Transpose",backendName:"cpu",kernelFunc:px};function fx(e,t,n,r){const[s,a]=Fa(e,r),i=je(t,"int32"),o=M(p(s),i),u=p(a);for(let e=0;e<o.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];o[e]=r}return{outVals:o,outShape:s,outDtype:i}}const mx={kernelName:"Prod",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;hb(s,"prod");const o=s.shape.length,u=x(a,s.shape),l=La(u,o);let c=u,h=s;const p=[];null!=l&&(h=px({inputs:{x:s},backend:n,attrs:{perm:l}}),p.push(h),c=Pa(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=fx(h.shape,h.dtype,d,c);let y=m;return i&&(y=Ma(m,u)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function gx(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return M(0,r);const s=M(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const yx=Db((e=>1/Math.sqrt(e))),bx={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:Mb("Rsqrt",yx)};function xx(e,t,n,r,s){const a=yr(r,t,n),i=p(n),o=R(r);if(a){const n=br(t,o);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const u=Gn(r,s,"string"===s?function(e){try{return e.map((e=>we(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}(e):e),l=Gn(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?l.values.map((e=>xe(e))):l.values}function wx(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;hb(s,"slice");const[o,u]=xr(s,a,i);lr(s,o,u);const l=xx(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const vx={kernelName:"Slice",backendName:"cpu",kernelFunc:wx},kx={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Eb("SquaredDifference",gb(((e,t)=>{const n=e-t;return n*n})))};function Ix(e,t,n,r){const s=Gn(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+r[e];s.set(t.get(...i),...a)}return s}const Nx=gb(((e,t)=>e-t)),Sx=Eb("Sub",Nx,Tb(((e,t,n,r)=>({real:e-n,imag:t-r})))),Ex={kernelName:"Sub",backendName:"cpu",kernelFunc:Sx};function Tx(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=Gn(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}function Cx(e,t,n,r,s){const a=t[t.length-1],[i,o]=[e.length/a,a],u=v(n,i*r),l=v("int32",i*r);for(let t=0;t<i;t++){const n=t*o,s=e.subarray(n,n+o),a=[];for(let e=0;e<s.length;e++)a.push({value:s[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*r,c=u.subarray(i,i+r),h=l.subarray(i,i+r);for(let e=0;e<r;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=r,[Gn(c,n,u),Gn(c,"int32",l)]}function $x(e,t,n,r){const s=x(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[s]),u=new $e(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,l.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new $e(h,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(u.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=h[1],{outputValues:p.values,outputShape:d,indices:o}}Ar("cpu",(()=>new db),1);const Ax=Fb("Elu",(e=>e>=0?e:Math.exp(e)-1)),Rx={kernelName:"Elu",backendName:"cpu",kernelFunc:Ax};function _x(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;hb([s],"leakyRelu");const i=p(s.shape),o=n.data.get(s.dataId).values,u=v("float32",i);for(let e=0;e<o.length;e++)u[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(s.shape,"float32",u)}const Dx={kernelName:"LeakyRelu",backendName:"cpu",kernelFunc:_x},Fx=gb(((e,t)=>e<0?t*e:e));function Mx(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;hb([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=Fx(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(u,r.dtype,o)}const Ox={kernelName:"Prelu",backendName:"cpu",kernelFunc:Mx},Lx=Fb("Relu",(e=>Math.max(0,e))),zx={kernelName:"Relu",backendName:"cpu",kernelFunc:Lx},Px=Fb("Relu6",(e=>Math.min(Math.max(0,e),6))),Bx={kernelName:"Relu6",backendName:"cpu",kernelFunc:Px};function Wx(e,t,n,r,s){if("linear"===n)return wb({inputs:{x:t},backend:e});if("relu"===n)return Lx({inputs:{x:t},backend:e});if("elu"===n)return Ax({inputs:{x:t},backend:e});if("relu6"===n)return Px({inputs:{x:t},backend:e});if("prelu"===n)return Mx({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return _x({inputs:{x:t},backend:e,attrs:{alpha:s}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Vx(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=p(s.shape),o=b(a,i),l=p(o);u(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const c=n.data.get(s.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const Ux={kernelName:"Reshape",backendName:"cpu",kernelFunc:Vx};function Gx(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;hb([s,a],"matMul");const l=s.shape.length,c=a.shape.length,h=i?s.shape[l-2]:s.shape[l-1],d=o?a.shape[c-1]:a.shape[c-2],f=i?s.shape[l-1]:s.shape[l-2],m=o?a.shape[c-2]:a.shape[c-1],g=s.shape.slice(0,-2),y=a.shape.slice(0,-2),b=p(g),x=p(y);u(l>=2&&c>=2&&(b===x||1===b||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const w=(b>x?s.shape.slice(0,-2):a.shape.slice(0,-2)).concat([f,m]);u(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const v=o?[x,m,d]:[x,d,m],k=Vx({inputs:{x:s},backend:n,attrs:{shape:i?[b,h,f]:[b,f,h]}}),I=Vx({inputs:{x:a},backend:n,attrs:{shape:v}}),N=i?k.shape[1]:k.shape[2],S=i?k.shape[2]:k.shape[1],E=o?I.shape[1]:I.shape[2],T=Math.max(b,x),C=n.data.get(k.dataId).values,$=n.data.get(I.dataId).values,A=R(k.shape),_=R(I.shape),[D,F,M]=i?[A[0],1,A[1]]:[A[0],A[1],1],[O,L,z]=o?[1,_[1],_[0]]:[_[1],1,_[0]],P=S*E,B=Gn([T,S,E],k.dtype),W=B.values,V=n.blockSize;for(let e=0;e<T;e++)for(let t=0;t<S;t+=V)for(let n=0;n<E;n+=V)for(let r=0;r<N;r+=V){const s=Math.min(t+V,S),a=Math.min(n+V,E),i=Math.min(r+V,N);for(let o=t;o<s;o++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<i;s++){const r=Math.min(e,b-1)*D,a=Math.min(e,x-1)*z;n+=C[r+o*F+s*M]*$[s*O+t*L+a]}W[e*P+(o*E+t)]+=n}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(w,B.dtype,B.values)}const Hx={kernelName:"BatchMatMul",backendName:"cpu",kernelFunc:Gx};const jx={kernelName:"_FusedMatMul",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;let p,d,f;const m=[];p=Gx({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(d=$b({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=Wx(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}},qx={kernelName:"Acos",backendName:"cpu",kernelFunc:Fb("Acos",(e=>Math.acos(e)))},Kx={kernelName:"Acosh",backendName:"cpu",kernelFunc:Fb("Acosh",(e=>Math.acosh(e)))};const Xx={kernelName:"AddN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;hb(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=Gn(r[0].shape,r[0].dtype),i=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};const Yx={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;hb(s,"all");const o=x(a,s.shape);let u=o;const l=La(u,s.shape.length);let c=s;null!=l&&(c=px({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Pa(u.length,s.shape.length)),Oa("all",u,c.shape.length);const[h,d]=Fa(c.shape,u),f=p(d),m=M(p(h),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const r=g[t+e];n=n&&r}m[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,m);if(i){const e=Vx({inputs:{x:y},backend:n,attrs:{shape:Ma(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Zx={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;hb(s,"any");const o=x(a,s.shape);let u=o;const l=La(u,s.shape.length);let c=s;null!=l&&(c=px({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Pa(u.length,s.shape.length)),Oa("any",u,c.shape.length);const[h,d]=Fa(c.shape,u),f=p(d),m=M(p(h),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const r=g[t+e];n=n||r}m[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,m);if(i){const e=Vx({inputs:{x:y},backend:n,attrs:{shape:Ma(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const Jx={kernelName:"ArgMax",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;hb(s,"argMax");let i=x(a,s.shape);const o=La(i,s.shape.length);let u=s;const l=[];null!=o&&(u=px({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Pa(i.length,u.shape.length)),i=[i[0]],Oa("argMax",i,u.shape.length);const[c,h]=Fa(u.shape,i),d=M(p(c),"int32"),f=p(h),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s>n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const Qx={kernelName:"ArgMin",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;hb(s,"argMin");let i=x(a,s.shape);const o=La(i,s.shape.length);let u=s;const l=[];null!=o&&(u=px({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Pa(i.length,u.shape.length)),i=[i[0]],Oa("argMin",i,u.shape.length);const[c,h]=Fa(u.shape,i),d=M(p(c),"int32"),f=p(h),m=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],r=0;for(let e=0;e<f;++e){const s=m[t+e];s<n&&(n=s,r=e)}d[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},ew={kernelName:"Asin",backendName:"cpu",kernelFunc:Fb("Asin",(e=>Math.asin(e)))},tw={kernelName:"Asinh",backendName:"cpu",kernelFunc:Fb("Asinh",(e=>Math.asinh(e)))},nw={kernelName:"Atan",backendName:"cpu",kernelFunc:Fb("Atan",(e=>Math.atan(e)))},rw={kernelName:"Atan2",backendName:"cpu",kernelFunc:Eb("Atan2",gb(((e,t)=>Math.atan2(e,t))))},sw={kernelName:"Atanh",backendName:"cpu",kernelFunc:Fb("Atanh",(e=>Math.atanh(e)))};function aw(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Gn(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),I=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=u){const s=m+n*r[1];for(let n=c;n<p;n+=l){const i=e[s+n*r[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function iw(e,t,n,r,s=!1,a=!1){const i=Gn(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=Gn(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=l){const i=n-g;for(let o=d;o<x;o+=c){const u=o-h,l=m.get(e,n,o,t);l>w&&(w=l,v=s?a?((e*r.inHeight+n)*r.inWidth+o)*r.inChannels+t:(n*r.inWidth+o)*r.inChannels+t:i*p+u)}}i.set(v,e,n,o,t)}}return i}function ow(e,t,n,r,s,a){const i=s.strideDepth,o=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,p=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Gn(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[3]*s.outShape[4],N=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*v,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let v=0;v<s.outDepth;++v){const S=v*i-m;let E=S;for(;E<0;)E+=l;const T=Math.min(s.inDepth,p+S),C=n+v*k;for(let n=0;n<s.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(s.inHeight,d+i),v=C+n*I;for(let n=0;n<s.outWidth;++n){const i=n*u-y;let o=i;for(;o<0;)o+=h;const d=Math.min(s.inWidth,f+i),g=v+n*N;let k=b,I=0,S=0;for(let n=E;n<T;n+=l){const s=x+n*r[1];for(let n=p;n<m;n+=c){const i=s+n*r[2];for(let n=o;n<d;n+=h){const s=e[i+n*r[3]+t];if("max"===a&&s>k?k=s:"avg"===a&&(I+=s,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+t]="avg"===a?I/S:k}}}}return x}const uw={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;hb(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;u(rs(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=qr(s.shape,a,i,1,o,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))h=wb({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=R(s.shape),r=aw(e,s.shape,s.dtype,t,c,"avg");h=n.makeTensorInfo(c.outShape,s.dtype,r.values)}return h}};const lw={kernelName:"AvgPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l,dilations:c}=r;hb(s,"avgPool3d");let h=c;null==h&&(h=[1,1,1]);const p=Kr(s.shape,a,i,h,o,u,l),d=ow(n.data.get(s.dataId).values,s.shape,s.dtype,R(s.shape),p,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}};const cw={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dilations:l,dimRoundingMode:c}=r;hb([s,a],"avgPool3DGrad");const h=Kr(a.shape,i,o,l,u,c),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=h.dilationDepth,x=h.dilationHeight,w=h.dilationWidth,v=h.effectiveFilterDepth,k=h.effectiveFilterHeight,I=h.effectiveFilterWidth,N=v-1-h.padInfo.front,S=I-1-h.padInfo.left,E=k-1-h.padInfo.top,T=Gn(a.shape,"float32"),C=1/(m*g*y),$=n.bufferSync(s);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let s=0;s<h.inWidth;++s){const a=n-N,i=r-E,o=s-S;let u=0;for(let n=0;n<v;n+=b){const r=(a+n)/p;if(!(r<0||r>=h.outDepth||Math.floor(r)!==r))for(let n=0;n<k;n+=x){const s=(i+n)/d;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let n=0;n<I;n+=w){const a=(o+n)/f;if(a<0||a>=h.outWidth||Math.floor(a)!==a)continue;u+=$.get(e,r,s,a,t)}}}T.set(u*C,e,n,r,s,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const hw={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;hb([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=qr(i.shape,o,u,1,l),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Gn(i.shape,"float32"),k=1/(d*f),I=n.data.get(s.dataId).values,N=Gn(s.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let i=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/p;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;i+=N.get(e,r,s,t)}}v.set(i*k,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const pw={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:i,mean:o,variance:l}=t;u(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),u(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),u(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),hb([s,o,l,a,i],"batchNorm");let{varianceEpsilon:c}=r;null==c&&(c=.001);const h=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,d=n.data.get(l.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let v=0,k=0,I=0,N=0;for(let e=0;e<h.length;++e)g[e]=m[v++]+(h[e]-p[k++])*f[I++]/Math.sqrt(d[N++]+c),v>=y&&(v=0),k>=w&&(k=0),I>=b&&(I=0),N>=x&&(N=0);return n.makeTensorInfo(s.shape,s.dtype,g)}};const dw={kernelName:"BatchToSpaceND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;hb([s],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),u=Eu(s.shape,a,o),l=Tu(u.length,a.length),c=Cu(s.shape,a,o),h=$u(i,a.length),p=Au(c,i,a.length),d=Vx({inputs:{x:s},backend:n,attrs:{shape:u}}),f=px({inputs:{x:d},backend:n,attrs:{perm:l}}),m=Vx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=wx({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const fw={kernelName:"Bincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=Rb(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},mw={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:Fb("ClipByValue",((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}))},gw={kernelName:"ComplexAbs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(p(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function yw(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const bw={kernelName:"Imag",backendName:"cpu",kernelFunc:yw};function xw(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=x(s,t[0].shape)[0];let i=Iu(t.map((e=>e.shape)),a);if(0===p(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>p(e.shape)>0));if(1===o.length)return wb({inputs:{x:o[0]},backend:n});if(ku(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>kb({inputs:{input:e},backend:n}))),t=o.map((e=>yw({inputs:{input:e},backend:n}))),r=xw({inputs:e,backend:n,attrs:{axis:a}}),s=xw({inputs:t,backend:n,attrs:{axis:a}}),i=yb({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}const u=o.map((e=>{const t=p(e.shape.slice(a));return Vx({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}));i=Iu(u.map((e=>e.shape)),1);const l=v(o[0].dtype,p(i));if(1===u[0].shape[0]){let e=0;u.forEach((t=>{const r=n.data.get(t.dataId).values,s=p(t.shape);l.set(r,e),e+=s}))}else{let e=0;u.forEach((t=>{const r=n.data.get(t.dataId).values;let s=0;for(let n=0;n<t.shape[0];++n){const a=n*i[1]+e;for(let e=0;e<t.shape[1];++e)l[a+e]=r[s++]}e+=t.shape[1]}))}const c=Iu(o.map((e=>e.shape)),a),h=n.makeTensorInfo(c,t[0].dtype,l);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}const ww={kernelName:"Concat",backendName:"cpu",kernelFunc:xw};function vw(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r;hb([s,a],"conv2d");const h=ss(u),p=Xr(s.shape,a.shape,i,l,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new $e(p.outShape,s.dtype),v=R(s.shape),k=R(a.shape),I=v[0],N=x?v[1]:v[2],S=x?v[2]:1,E=x?1:v[1],T=w.strides[0],C=x?w.strides[1]:w.strides[2],$=x?w.strides[2]:1,A=x?1:w.strides[1],_=n.data.get(s.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*T;for(let e=0;e<p.outHeight;++e){const r=n+e*C,s=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=p.inHeight)continue;const a=e*k[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=r+e*$,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=p.inWidth)continue;const s=i+r*S;let o=a+e*k[1];for(let e=0;e<p.inChannels;++e){const n=_[s+e*E];for(let e=0;e<p.outChannels;++e)F[t+e*A]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const kw={kernelName:"Conv2D",backendName:"cpu",kernelFunc:vw};const Iw={kernelName:"Conv2DBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;hb([s,a],"conv2dBackpropFilter");const h=ss(u),p=Xr(s.shape,c,i,1,o,l,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new $e(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,I=new $e(s.shape,s.dtype,v),N=new $e(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(p.outWidth,(p.inWidth+x-r)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;u+=y?I.get(l,t,n,i)*N.get(l,c,e,o):I.get(l,i,t,n)*N.get(l,o,c,e)}}b.set(u,e,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Nw={kernelName:"Conv2DBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r;hb([s,a],"conv2dBackpropInput");const h=R(a.shape),p=R(s.shape);let d=ss(l);const f=Xr(i,a.shape,o,1,u,c,!1,d),m=new $e(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:N,inChannels:S,inHeight:E,inWidth:T,outChannels:C,outHeight:$,outWidth:A,strideHeight:_,strideWidth:D}=f;d=f.dataFormat;const F=I-1-f.padInfo.top,M=N-1-f.padInfo.left,O="channelsLast"===d,L=m.strides[0],z=O?m.strides[1]:m.strides[2],P=O?m.strides[2]:1,B=O?1:m.strides[1],W=p[0],V=O?p[1]:p[2],U=O?p[2]:1,G=O?1:p[1];for(let e=0;e<k;++e)for(let t=0;t<S;++t)for(let n=0;n<E;++n){const r=n-F,s=Math.max(0,Math.ceil(r/_)),a=Math.min($,(I+r)/_);for(let i=0;i<T;++i){const o=i-M,u=Math.max(0,Math.ceil(o/D)),l=Math.min(A,(N+o)/D);let c=0;for(let n=s;n<a;++n){const s=n*_-r;for(let r=u;r<l;++r){const a=W*e+V*n+U*r,i=x*(I-1-s)+w*(N-1-(r*D-o))+v*t;for(let e=0;e<C;++e){c+=y[a+G*e]*b[i+e]}}}g[L*e+z*n+P*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const Sw={kernelName:"Conv3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r;hb([s,a],"conv3d");const l=Yr(s.shape,a.shape,i,u,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new $e(l.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,I=w.values,N=R(s.shape),S=R(a.shape);for(let e=0;e<l.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],s=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=l.inDepth)continue;const a=e*S[0],i=t+n*N[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<h;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const s=a+e*S[1],o=i+r*N[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-b;for(let e=0;e<p;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const a=s+e*S[2],i=o+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=v[i+e];for(let e=0;e<l.outChannels;++e)I[n+e]+=t*k[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Ew={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r;hb([s,a],"conv3dBackpropFilterV2");const l=R(s.shape),c=R(a.shape),h=Yr(s.shape,u,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new $e(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,N=n.data.get(a.dataId).values,[S,E,T,C]=c,$=n.data.get(s.dataId).values,[A,_,D,F]=l,M=h.padInfo.front,O=h.padInfo.left,L=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((M-e)/p)),n=Math.min(h.outDepth,(h.inDepth+M-e)/p),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((L-s)/d)),i=Math.min(h.outHeight,(h.inHeight+L-s)/d),o=s*v+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((O-r)/f)),l=Math.min(h.outWidth,(h.inWidth+O-r)/f),c=r*k+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*S;for(let m=t;m<n;++m){const t=(e+m*p-M)*_+h,n=m*E+y;for(let e=a;e<i;++e){const a=(s+e*d-L)*D+t,i=e*T+n;for(let e=u;e<l;++e){const t=e*C+i;g+=$[(r+e*f-O)*F+a+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Tw={kernelName:"Conv3DBackpropInputV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r;hb([s],"conv3dBackpropInputV2");const l=R(s.shape),c=R(a.shape),h=Yr(u,a.shape,o,1,i),p=new $e(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=l,I=n.data.get(a.dataId).values,[N,S,E,T]=c,{batchSize:C,filterDepth:$,filterHeight:A,filterWidth:_,inChannels:D,inDepth:F,inHeight:M,inWidth:O,outChannels:L,outDepth:z,outHeight:P,outWidth:B,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=$-1-h.padInfo.front,H=A-1-h.padInfo.top,j=_-1-h.padInfo.left;for(let e=0;e<C;++e)for(let t=0;t<D;++t)for(let n=0;n<F;++n){const r=n-G,s=Math.max(0,Math.ceil(r/W)),a=Math.min(z,($+r)/W);for(let i=0;i<M;++i){const o=i-H,u=Math.max(0,Math.ceil(o/V)),l=Math.min(P,(A+o)/V);for(let c=0;c<O;++c){const h=c-j,p=Math.max(0,Math.ceil(h/U)),C=Math.min(B,(_+h)/U);let R=0;for(let n=s;n<a;++n){const s=n*W-r;for(let r=u;r<l;++r){const a=r*V-o;for(let i=p;i<C;++i){const o=x*e+w*n+v*r+k*i,u=N*($-1-s)+S*(A-1-a)+E*(_-1-(i*U-h))+T*t;for(let e=0;e<L;++e){R+=b[o+e]*I[u+e]}}}}d[f*e+m*n+g*i+y*c+t]=R}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Cw={kernelName:"Cos",backendName:"cpu",kernelFunc:Fb("Cos",(e=>Math.cos(e)))},$w={kernelName:"Cosh",backendName:"cpu",kernelFunc:Fb("Cosh",(e=>Math.cosh(e)))};const Aw={kernelName:"CropAndResize",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,[c,h,p,d]=s.shape,f=a.shape[0],[m,g]=o,y=Gn([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(s.dataId).values,v=R(s.shape),k=R(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(s-n)*(h-1)/(m-1):0,f=g>1?(a-r)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+s)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*k[2]+t*k[1]+e*k[0];y.values[s]=l}else if("bilinear"===u){const n=Math.floor(c),s=Math.ceil(c),o=c-n;for(let u=0;u<g;u++){const c=g>1?r*(p-1)+u*f:.5*(r+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const r=n+u*k[2]+t*k[1]+e*k[0];y.values[r]=l}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let r=0;r<d;r++){let a=r+h*v[2]+n*v[1]+i*v[0];const l=w[a];a=r+m*v[2]+n*v[1]+i*v[0];const c=w[a];a=r+h*v[2]+s*v[1]+i*v[0];const p=w[a];a=r+m*v[2]+s*v[1]+i*v[0];const d=l+(c-l)*b,f=p+(w[a]-p)*b;a=r+u*k[2]+t*k[1]+e*k[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const s=g>1?r*(p-1)+n*f:.5*(r+a)*(p-1);if(s<0||s>p-1){for(let r=0;r<d;r++){const s=r+n*k[2]+t*k[1]+e*k[0];y.values[s]=l}continue}const o=Math.round(s),u=Math.round(c);for(let r=0;r<d;r++){const s=r+o*v[2]+u*v[1]+i*v[0],a=r+n*k[2]+t*k[1]+e*k[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Rw={kernelName:"Cumsum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;hb(s,"cumsum");const u=La([a],s.shape.length);let l=s;null!=u&&(l=px({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Pa(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const h=je(l.dtype,"int32"),d=M(p(l.shape),h),f=n.data.get(l.dataId).values,m=l.shape[l.shape.length-1],g=o?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)d[n]=i?0:f[n];else{const r=g(e,t-1);d[n]=i?f[r]+d[r]:f[n]+d[r]}}const y=n.makeTensorInfo(l.shape,h,d);if(null!=u){const e=px({inputs:{x:y},backend:n,attrs:{perm:za(u)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(l),e}return y}};const _w={kernelName:"DenseBincount",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=Rb(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=_b(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const Dw={kernelName:"DepthToSpace",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r;u("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),u(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=s.shape[0],l=s.shape[1],c=s.shape[2],h=s.shape[3],p=l*a,d=c*a,f=h/(a*a),m=n.data.get(s.dataId).values,g=new Float32Array(o*p*d*f);let y=0;for(let e=0;e<o;++e)for(let t=0;t<p;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<d;++t){const s=Math.floor(t/a),i=(r*a+t%a)*f;for(let t=0;t<f;++t){const r=t+i+h*(s+c*(n+l*e));g[y++]=m[r]}}}return n.makeTensorInfo([o,p,d,f],s.dtype,g)}};function Fw(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:c}=r;hb([s,a],"depthwiseConv2DNative");const h=R(s.shape),p=R(a.shape);let d=l;null==d&&(d=[1,1]),u(rs(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const f=Xr(s.shape,a.shape,i,d,o,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,w=x.left,v=x.top,k=f.outChannels/f.inChannels,I=new $e(f.outShape,s.dtype),N=n.data.get(s.dataId).values,S=n.data.get(a.dataId).values,E=I.values;for(let e=0;e<f.batchSize;++e){const t=e*h[0],n=e*I.strides[0];for(let e=0;e<f.outHeight;++e){const r=n+e*I.strides[1],s=e*f.strideHeight-w;for(let e=0;e<m;++e){const n=s+e*y;if(n<0||n>=f.inHeight)continue;const a=e*p[0],i=t+n*h[1];for(let e=0;e<f.outWidth;++e){const t=r+e*I.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const r=n+e*b;if(r<0||r>=f.inWidth)continue;const s=a+e*p[1],o=i+r*f.inChannels;let u=t,l=s;for(let e=0;e<f.inChannels;++e){const t=N[o+e];for(let e=0;e<k;++e)E[u+e]+=t*S[l+e];u+=k,l+=k}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const Mw={kernelName:"DepthwiseConv2dNative",backendName:"cpu",kernelFunc:Fw};const Ow={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;hb([s,a],"depthwiseConv2dNativeBackpropFilter");const h=Xr(s.shape,c,i,o,u,l,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new $e(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new $e(s.shape,s.dtype,w),k=n.data.get(a.dataId).values,I=new $e(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(h.outWidth,(h.inWidth+y-r)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),u=i%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=s;e<a;++e){const n=r+e*d-y;l+=v.get(u,t,n,o)*I.get(u,c,e,i)}}g.set(l,e,r,o,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const Lw={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r;hb([s,a],"depthwiseConv2DNativeBackpropInput");const h=R(s.shape),p=R(a.shape),d=Xr(c,a.shape,i,o,u,l,!0),f=new $e(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,I=n.data.get(a.dataId).values,[N,S,E]=p,{batchSize:T,filterHeight:C,filterWidth:$,inChannels:A,inHeight:_,inWidth:D,outChannels:F,outHeight:M,outWidth:O,strideHeight:L,strideWidth:z}=d,P=C-1-d.padInfo.top,B=$-1-d.padInfo.left,W=F/A;for(let e=0;e<T;++e)for(let t=0;t<A;++t)for(let n=0;n<_;++n){const r=n-P,s=Math.max(0,Math.ceil(r/L)),a=Math.min(M,(C+r)/L);for(let i=0;i<D;++i){const o=i-B,u=Math.max(0,Math.ceil(o/z)),l=Math.min(O,($+o)/z);let c=0;for(let n=s;n<a;++n){const s=n*L-r;for(let r=u;r<l;++r){const a=w*e+v*n+k*r,i=N*(C-1-s)+S*($-1-(r*z-o))+E*t;for(let e=0;e<W;++e){c+=x[a+(t*W+e)]*I[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const zw={kernelName:"Diag",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=p(r.shape),a=n.data.get(r.dataId).values,i=Gn([s,s],r.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*s+e]=a[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,i.dtype,i.values)}},Pw={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:i,dilations:o}=n,u=t,l=u.data.get(r.dataId).values,c=r.shape.length,h=u.data.get(s.dataId).values,d=s.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:I,filterHeight:N,filterWidth:S,dilationHeight:E,dilationWidth:T,outShape:C}=jr(r.shape,s.shape,a,i,"NHWC",o),$=p(C),A=C.length,_=k(r.dtype,$);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*v-w.top;for(let a=0;a<x;++a){const i=a*I-w.left;for(let o=0;o<y;++o){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<N;++t){const a=n+t*E;if(a>=0&&a<m)for(let n=0;n<S;++n){const p=i+n*T;if(p>=0&&p<g){const i=z([e,a,p,o],c,R(r.shape)),f=z([t,n,o],d,R(s.shape)),m=l[i]+h[f];m>u&&(u=m)}}}_[z([e,t,a,o],A,R(C))]=u}}}return{dataId:u.write(ye(_,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},Bw={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:l}=n,c=t,h=D(r.shape,c.data.get(r.dataId).values),p=D(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:E}=jr(r.shape,s.shape,i,o,"NHWC",l);u(a.rank===E.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${E.length}, but got ${a.rank}`));const T=D(E,c.data.get(a.dataId).values),C=O(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let r=0;r<b;++r){const s=r*v-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<f)for(let n=0;n<I;++n){const l=s+n*S;if(l>=0&&l<m){const s=h[e][r][l][a]+p[t][n][a];s>i&&(i=s,o=t,u=n)}}}C[o][u][a]+=T[e][t][r][a]}}}return{dataId:c.write(ye(C,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Ww={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:l}=n,c=t,h=D(r.shape,c.data.get(r.dataId).values),p=D(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:E}=jr(r.shape,s.shape,i,o,"NHWC",l);u(a.rank===E.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${E.length}, but got ${a.rank}`));const T=D(E,c.data.get(a.dataId).values),C=O(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let r=0;r<b;++r){const s=r*v-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let t=0;t<k;++t){const r=n+t*N;if(r>=0&&r<f)for(let n=0;n<I;++n){const l=s+n*S;if(l>=0&&l<m){const s=h[e][r][l][a]+p[t][n][a];s>i&&(i=s,o=r,u=l)}}}C[e][o][u][a]+=T[e][t][r][a]}}}return{dataId:c.write(ye(C,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const Vw={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;hb([r,s],"eluGrad");const a=new Float32Array(p(s.shape)),i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},Uw=Eb("Equal",gb(((e,t)=>e===t?1:0)),null,"bool"),Gw={kernelName:"Equal",backendName:"cpu",kernelFunc:Uw},Hw={kernelName:"Erf",backendName:"cpu",kernelFunc:Fb("Erf",(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+.3275911*n);return t*(1-((((1.061405429*r-1.453152027)*r+1.421413741)*r-.284496736)*r+.254829592)*r*Math.exp(-n*n))}))};function jw(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,i=s.shape.length,o=s.shape.slice();let l=a;return a<0&&(u(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),Vx({inputs:{x:s},backend:n,attrs:{shape:o}})}const qw={kernelName:"ExpandDims",backendName:"cpu",kernelFunc:jw},Kw=Eb("RealDiv",gb(((e,t)=>e/t))),Xw={kernelName:"RealDiv",backendName:"cpu",kernelFunc:Kw};function Yw(e,t,n){const r=e.shape,s=r[0],a=r[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,l=[s,a],c=p(l),h=v("float32",c),d=v("float32",c);for(let e=0;e<s;e++){const r=wx({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=wx({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=yb({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=Zw(i,t,n),p=_u(l,c);for(let t=0;t<a;t++){const n=Du(p,t);h[e*a+t]=n.real,d[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(l,"float32",h),m=n.makeTensorInfo(l,"float32",d),g=yb({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Zw(e,t,n){const r=p(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((o=r)&o-1)){const s=Jw(a,i,r,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",s.real),t=n.makeTensorInfo(o,"float32",s.imag),a=n.makeTensorInfo([],"float32",ge(r,"float32")),i=wb({inputs:{x:a},backend:n}),u=Xw.kernelFunc({inputs:{a:e,b:a},backend:n}),l=Xw.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(u.dataId).values,h=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:h}}return s}return function(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}(function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=Mu(s*r,t,n),u=Du(e,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=t,i/=t),Fu(r,a,i,s)}return r}(_u(a,i),r,t));var o}function Jw(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=_u(e,t),i=n/2,o=function(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}(a),u=o.real,l=o.imag,c=[u.length],h=s.makeTensorInfo(c,"float32",u),p=s.makeTensorInfo(c,"float32",l),d=yb({inputs:{real:h,imag:p},backend:s}),f=function(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=yb({inputs:{real:b,imag:x},backend:s}),v=Jw(u,l,i,r,s),k=v.real,I=v.imag,N=[k.length],S=s.makeTensorInfo(N,"float32",k),E=s.makeTensorInfo(N,"float32",I),T=yb({inputs:{real:S,imag:E},backend:s}),C=Jw(m,g,i,r,s),$=C.real,A=C.imag,R=[$.length],_=s.makeTensorInfo(R,"float32",$),D=s.makeTensorInfo(R,"float32",A),F=yb({inputs:{real:_,imag:D},backend:s}),M=function(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}(n,r),O=[M.real.length],L=s.makeTensorInfo(O,"float32",M.real),z=s.makeTensorInfo(O,"float32",M.imag),P=yb({inputs:{real:L,imag:z},backend:s}),B=ix({inputs:{a:P,b:F},backend:s}),W=$b({inputs:{a:T,b:B},backend:s}),V=Sx({inputs:{a:T,b:B},backend:s}),U=kb({inputs:{input:W},backend:s}),G=kb({inputs:{input:V},backend:s}),H=yw({inputs:{input:W},backend:s}),j=yw({inputs:{input:V},backend:s}),q=xw({inputs:[U,G],backend:s,attrs:{axis:0}}),K=xw({inputs:[H,j],backend:s,attrs:{axis:0}}),X=s.data.get(q.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const Qw={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=p(r.shape),a=r.shape[r.shape.length-1],i=Vx({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=Yw(i,!1,n),u=Vx({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}};function ev(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,i=a||C(s),o=k(i,p(r));return function(e,t,n){e.fill(t)}(o,s),t.makeTensorInfo(r,i,o)}const tv={kernelName:"Fill",backendName:"cpu",kernelFunc:ev};const nv={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=v(r.dtype,p(r.shape)),[i,o,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<i;e++){const t=e*u*o*l;for(let e=0;e<o;e++){const n=e*(u*l);for(let r=0;r<u;r++){const s=r*l;for(let o=0;o<l;o++){const h=[i,e,r,o][2],p=Math.round(u-h),d=t+n+s+o;let f=c[d];if(p>=0&&p<u){f=c[t+n+p*l+o]}a[d]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},rv={kernelName:"FloorDiv",backendName:"cpu",kernelFunc:Eb("FloorDiv",gb(((e,t)=>Math.floor(e/t))),null,"int32")};const sv={kernelName:"FusedConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=vw({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=$b({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Wx(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const av={kernelName:"FusedDepthwiseConv2D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=Fw({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=$b({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Wx(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const iv={kernelName:"GatherNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=p(r.shape),i=s.shape,o=i[i.length-1],[u,l,c,h]=ir(r,s);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const d=Gn([l,c],r.dtype),f=n.data.get(s.dataId).values,m=n.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=[];let n=0;for(let r=0;r<o;r++){const s=f[e*o+r];n+=s*h[r],t.push(s)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${r.shape}`);for(let t=0;t<c;t++)d.values[e*c+t]=m[n*c+t]}return n.makeTensorInfo(u,d.dtype,d.values)}};const ov={kernelName:"GatherV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r;hb([s,a],"gatherV2");let u=o;null==o&&(u=0);const l=p(a.shape),c=Lu(s,a,x(i,s.shape)[0],u),h=Vx({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),d=Vx({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,l/c.batchSize]}}),f=[c.batchSize,c.outerSize,l/c.batchSize,c.sliceSize],m=n.bufferSync(d),g=Hb(n.bufferSync(h),m,f);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.makeTensorInfo(c.outputShape,g.dtype,g.values)}},uv={kernelName:"GreaterEqual",backendName:"cpu",kernelFunc:Eb("GreaterEqual",gb(((e,t)=>e>=t?1:0)),null,"bool")};const lv={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=p(r.shape),a=r.shape[r.shape.length-1],i=Vx({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=Yw(i,!0,n),u=Vx({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},cv={kernelName:"IsFinite",backendName:"cpu",kernelFunc:Fb("IsFinite",(e=>Number.isFinite(e)?1:0),"bool")},hv={kernelName:"IsInf",backendName:"cpu",kernelFunc:Fb("IsInf",(e=>Math.abs(e)===1/0?1:0),"bool")},pv={kernelName:"IsNan",backendName:"cpu",kernelFunc:Fb("IsNan",(e=>Number.isNaN(e)?1:0),"bool")},dv={kernelName:"LessEqual",backendName:"cpu",kernelFunc:Eb("LessEqual",gb(((e,t)=>e<=t?1:0)),null,"bool")};const fv={kernelName:"LinSpace",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=Yb(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},mv={kernelName:"Log1p",backendName:"cpu",kernelFunc:Fb("Log1p",(e=>Math.log1p(e)))},gv={kernelName:"LogicalAnd",backendName:"cpu",kernelFunc:Eb("LogicalAnd",gb(((e,t)=>e&&t)),null,"bool")},yv={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:Fb("LogicalNot",(e=>e?0:1),"bool")},bv={kernelName:"LogicalOr",backendName:"cpu",kernelFunc:Eb("LogicalOr",gb(((e,t)=>e||t)),null,"bool")};const xv={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r;hb(s,"LRN");const l=s.shape[3],c=l-1,h=n.data.get(s.dataId).values,d=p(s.shape),f=new Float32Array(d);function m(e){const t=e%l;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=h[n];s+=e*e}return s}for(let e=0;e<d;e++){const t=m(e),n=h[e]*Math.pow(i+o*t,-u);f[e]=n}return n.makeTensorInfo(s.shape,s.dtype,f)}};const wv={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r;hb(i,"LRNGrad");const h=p(i.shape),d=i.shape[3],f=n.data.get(i.dataId).values,m=n.data.get(s.dataId).values,g=n.data.get(a.dataId).values,y=new Float32Array(h),b=h;for(let e=0;e<b;e++){const t=e%d,n=e-t+Math.max(0,t-o),r=e-t+Math.min(d,t+o+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(m[e],2);s=l*s+u;for(let t=n;t<r;t++){let n=-2*l*c*m[t]*g[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(i.shape,s.dtype,y)}};function vv(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r,o=n;let u=s.shape;const l=u.length,c=x(a,u);let h=c;const d=La(h,l);let f=o.data.get(s.dataId).values;if(null!=d){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[d[t]];f=hx(f,u,s.dtype,d,e),h=Pa(h.length,l),u=e}hb(s,"max"),Oa("max",h,l);const[m,g]=Fa(u,h),y=Qb(f,p(g),m,s.dtype),b=o.write(y,m,s.dtype);let w=m;if(i){w=Ma(m,c)}return{dataId:b,shape:w,dtype:s.dtype}}const kv={kernelName:"Max",backendName:"cpu",kernelFunc:vv};const Iv={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;hb(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;u(rs(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=qr(s.shape,a,i,1,o,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))h=wb({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=R(s.shape),r=aw(e,s.shape,s.dtype,t,c,"max");h=n.makeTensorInfo(c.outShape,s.dtype,r.values)}return h}};const Nv={kernelName:"MaxPool3D",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l,dilations:c}=r;hb(s,"maxPool3d");let h=c;null==h&&(h=[1,1,1]);const p=Kr(s.shape,a,i,h,o,u,l),d=ow(n.data.get(s.dataId).values,s.shape,s.dtype,R(s.shape),p,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}};const Sv={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dilations:l,dimRoundingMode:c}=r;hb([s,a],"maxPool3DGrad");const h=Kr(a.shape,i,o,l,u,c),p=function(e,t){const n=Gn(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=u;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let r=p;r<v;r+=o){const s=r-l;for(let a=k;a<I;a+=u){const i=a-d,o=e.get(m,t,r,a,g);o>=N&&(N=o,S=n*c*h+s*c+i)}}}n.set(S,m,y,r,s,g)}}}return n}(n.bufferSync(a),h),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.dilationDepth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterDepth,w=h.effectiveFilterHeight,v=h.effectiveFilterWidth,k=x-1-h.padInfo.front,I=v-1-h.padInfo.left,N=w-1-h.padInfo.top,S=Gn(a.shape,"float32"),E=n.bufferSync(s);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let s=0;s<h.inWidth;++s){const a=n-k,i=r-N,o=s-I;let u=0;for(let n=0;n<x;n+=g){const r=(a+n)/d;if(!(r<0||r>=h.outDepth||Math.floor(r)!==r))for(let s=0;s<w;s+=y){const a=(i+s)/f;if(!(a<0||a>=h.outHeight||Math.floor(a)!==a))for(let i=0;i<v;i+=b){const l=(o+i)/m;if(l<0||l>=h.outWidth||Math.floor(l)!==l)continue;const c=x*w*v-1-p.get(e,r,a,l,t)===n*w*v+s*v+i?1:0;if(0===c)continue;u+=E.get(e,r,a,l,t)*c}}}S.set(u,e,n,r,s,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Ev={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;hb([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=qr(o.shape,u,l,1,c,h),d=n.data.get(o.dataId).values,f=Gn(p.outShape,o.dtype,iw(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,I=Gn(o.shape,"float32"),N=n.data.get(s.dataId).values,S=Gn(s.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const s=n-k,a=r-v;let i=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const o=(a+s)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const u=x*w-1-f.get(e,r,o,t)===n*w+s?1:0;if(0===u)continue;i+=S.get(e,r,o,t)*u}}I.set(i,e,n,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const Tv={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;hb(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=qr(r.shape,s,a,[1,1],i),[h,p]=function(e,t,n,r,s){const a=aw(e,0,n,R(t),s,"max"),i=iw(e,t,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),d=u.write(h,c.outShape,r.dtype),f=u.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function Cv(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;let o;hb(s,"sum"),o="bool"===s.dtype?Nb({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):wb({inputs:{x:s},backend:n});const u=o.shape.length,l=x(a,o.shape),c=La(l,u);let h=l,d=o;null!=c&&(d=px({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Pa(h.length,u)),Oa("sum",h,d.shape.length);const[f,m]=Fa(d.shape,h);let g=xb(n,f,je(d.dtype,"int32"));const y=p(m),b=n.data.get(g.dataId).values,w=n.data.get(d.dataId).values;for(let e=0;e<b.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=w[t+e];b[e]=n}if(i){const e=g;g=Vx({inputs:{x:g},backend:n,attrs:{shape:Ma(g.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),g}const $v={kernelName:"Sum",backendName:"cpu",kernelFunc:Cv};const Av={kernelName:"Mean",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=x(a,s.shape),u=p(Fa(s.shape,o)[1]),l=[],c=n.makeTensorInfo([],"float32",new Float32Array([u]));l.push(c);const h=Nb({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});l.push(h);const d=Kw({inputs:{a:h,b:c},backend:n});l.push(d);const f=Cv({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Rv={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;hb(s,"min");const o=x(a,s.shape);let u=o;const l=La(u,s.shape.length);let c=s;null!=l&&(c=px({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Pa(u.length,s.shape.length)),Oa("min",u,c.shape.length);const[h,d]=Fa(c.shape,u),f=p(d),m=M(p(h),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const r=g[t+e];r<n&&(n=r)}m[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(h,c.dtype,m);if(i){const e=Vx({inputs:{x:y},backend:n,attrs:{shape:Ma(h,o)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const _v={kernelName:"MirrorPad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:i}=r;hb(s,"mirrorPad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===i?0:1,h=n.data.get(s.dataId).values,d=s.shape.length,f=R(s.shape),m=p(o),g=o.length,y=R(o),b=v(s.dtype,m);for(let e=0;e<m;e++){let t=P(e,g,y);for(let e=0;e<g;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=z(t,d,f);b[e]=h[n]}return{dataId:n.write(b,o,s.dtype),shape:o,dtype:s.dtype}}},Dv={kernelName:"Mod",backendName:"cpu",kernelFunc:Eb("Mod",gb(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};function Fv(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=s.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const u=x([o],s.shape),l=vv({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=Ma(l.shape,u),h=Vx({inputs:{x:l},backend:n,attrs:{shape:c}}),p=Sx({inputs:{a:s,b:h},backend:n}),d=Pb({inputs:{x:p},backend:n}),f=Cv({inputs:{x:d},backend:n,attrs:{axis:u,keepDims:!1}}),m=Vx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Kw({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Mv={kernelName:"Softmax",backendName:"cpu",kernelFunc:Fv};const Ov={kernelName:"Multinomial",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r;hb(s,"multinomial");const u=o?s:Fv({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],h=n.data.get(u.dataId).values,d=[l,a],f=M(p(d),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const r=Za.alea(i.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();f[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){f[s+e]=r;break}}}return o||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",f)}},Lv=Bo;const zv={kernelName:"NonMaxSuppressionV3",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r;hb(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=Lv(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},Pv=Wo;const Bv={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r;hb(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=Pv(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},Wv=Vo;const Vv={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r;hb(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=Wv(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const Uv={kernelName:"OneHot",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:a,onValue:i,offValue:o}=r;hb(s,"oneHot");const u=p(s.shape),l=new Float32Array(u*a);l.fill(o);const c=n.data.get(s.dataId).values;for(let e=0;e<u;++e)c[e]>=0&&c[e]<a&&(l[e*a+c[e]]=i);return n.makeTensorInfo([...s.shape,a],"int32",l)}};function Gv(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=kb({inputs:{input:r},backend:n}),t=Gv({inputs:{x:e},backend:n}),s=yw({inputs:{input:r},backend:n}),a=Gv({inputs:{x:s},backend:n}),i=yb({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return ev({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const Hv={kernelName:"ZerosLike",backendName:"cpu",kernelFunc:Gv};const jv={kernelName:"OnesLike",backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=kb({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=yw({inputs:{input:s},backend:r}),i=Gv({inputs:{x:a},backend:r}),o=yb({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return ev({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function qv(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return jw({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{l(a,e.shape,"All tensors passed to stack must have matching shapes"),u(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],c=xw({inputs:t.map((e=>{const t=jw({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t})),backend:n,attrs:{axis:s}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const Kv={kernelName:"Pack",backendName:"cpu",kernelFunc:qv};const Xv={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r;hb(s,"pad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=n.data.get(s.dataId).values,c=p(s.shape),h=s.shape.length,d=R(s.shape),f=p(o),m=o.length,g=R(o),y=v(s.dtype,f);0!==i&&y.fill(i);for(let e=0;e<c;e++){y[z(P(e,h,d).map(((e,t)=>e+u[t])),m,g)]=l[e]}return{dataId:n.write(y,o,s.dtype),shape:o,dtype:s.dtype}}},Yv={kernelName:"Pow",backendName:"cpu",kernelFunc:Eb("Pow",gb(((e,t)=>Math.pow(e,t))))};const Zv={kernelName:"Range",backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=gx(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},Jv={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:Fb("Reciprocal",(e=>1/e))};const Qv={kernelName:"ResizeBilinear",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r;hb(s,"resizeBilinear");const u=R(s.shape),[l,c]=o,[h,d,f,m]=s.shape,g=n.data.get(s.dataId).values,y=new Float32Array(p([h,l,c,m])),b=[a&&l>1?d-1:d,a&&c>1?f-1:f],x=[a&&l>1?l-1:l,a&&c>1?c-1:c];let w=0;const v=b[0]/x[0],k=b[1]/x[1];for(let e=0;e<h;e++)for(let t=0;t<l;t++){let n;n=i?v*(t+.5)-.5:v*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(d-1,Math.ceil(n)),o=e*u[0]+r*u[1],l=e*u[0]+a*u[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(f-1,Math.ceil(t)),c=o+n*u[2],h=l+n*u[2],p=o+a*u[2],d=l+a*u[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[h+e],a=t+(g[p+e]-t)*r,i=a+(n+(g[d+e]-n)*r-a)*s;y[w++]=i}}}return n.makeTensorInfo([h,l,c,m],"float32",y)}};const ek={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r;hb([a,s],"resizeBilinearGrad");const o=R(s.shape),[u,l,c,h]=s.shape,[,p,d]=a.shape,f=new Float32Array(u*l*c*h),m=[i&&p>1?l-1:l,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=t+r*o[1],i=t+s*o[1],u=n-r,p=1-u;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,l=1-s,d=a+n*o[2],m=a+r*o[2],g=i+n*o[2],y=i+r*o[2],v=p*l,k=p*s,I=u*l,N=u*s;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([u,c,l,h],"float32",f)}};const tk={kernelName:"ResizeNearestNeighbor",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r;hb(s,"resizeNearestNeighbor");const u=R(s.shape),[l,c]=o,[h,p,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(h*l*c*f),y=[a&&l>1?p-1:p,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let e=0;e<h;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=i?x*(e+.5):x*e;let r=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(r=Math.max(0,r));const s=t+r*u[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[v++]=t}}}}return n.makeTensorInfo([h,l,c,f],s.dtype,g)}};const nk={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r;hb([a,s],"resizeNearestNeighborGrad");const o=R(s.shape),u=R(a.shape),[l,c,h,p]=s.shape,[,d,f]=a.shape,m=new Float32Array(l*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,N=2*Math.ceil(k)+2;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],r=Math.floor(e*v),s=Math.floor(r-I/2);for(let r=0;r<h;r++){const a=n+r*o[2],l=Math.floor(r*k),y=Math.floor(l-N/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const l=a+s;if(l<0||l>=d)continue;const p=t+l*u[1],m=l*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const s=p+t*u[2],a=t*w;r===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[s+n])}}m[a+n]=o}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const rk={kernelName:"Reverse",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;hb(s,"reverse");const i=s.shape.length,o=x(a,s.shape);if(0===i)return wb({inputs:{x:s},backend:n});const u=new $e(s.shape,s.dtype),l=n.bufferSync(s);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=s.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},sk={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=v(r.dtype,p(r.shape)),[l,c,h,d]=r.shape,[f,m]=Su(i,c,h),g=Math.sin(s),y=Math.cos(s),b=o.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*h*c*d;for(let e=0;e<c;e++){const n=e*(h*d);for(let r=0;r<h;r++){const s=r*d;for(let i=0;i<d;i++){const o=[l,e,r,i],p=o[2],x=o[1];let w=(p-f)*y-(x-m)*g,v=(p-f)*g+(x-m)*y;w=Math.round(w+f),v=Math.round(v+m);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=b[t+v*(h*d)+w*d+i]}u[t+n+s+i]=k}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},ak={kernelName:"Round",backendName:"cpu",kernelFunc:Fb("Round",(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}))};function ik(e,t,n,r,s,a,i,o,u,l){const c=[r/s,s],h=e.values,p=t.values;if(0===r)return Gn(n,t.dtype);const d=Gn(c,t.dtype);d.values.fill(u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),u+=n*o[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=p[e*s+n]:d.values[u*s+n]=0===t.rank?p[0]:p[e*s+n]}return d}const ok={kernelName:"ScatterNd",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=ur(0,s,i),p=ik(n.bufferSync(s),n.bufferSync(a),i,h,l,u,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const uk={kernelName:"Select",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;hb([r,s,a],"select");const i=r.shape.length,o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=je(s.dtype,a.dtype),h=M(p(s.shape),c);let d=0;const f=0===i||i>1||1===s.shape.length?1:p(s.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<f;t++)1===o[e]?h[d++]=u[e]:h[d++]=l[e];return n.makeTensorInfo(s.shape,c,h)}},lk={kernelName:"Selu",backendName:"cpu",kernelFunc:Fb("Selu",(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1)))},ck={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:Fb("Sigmoid",(e=>1/(1+Math.exp(-e))))},hk={kernelName:"Sign",backendName:"cpu",kernelFunc:Fb("Sign",(e=>e<0?-1:e>0?1:0))},pk={kernelName:"Sin",backendName:"cpu",kernelFunc:Fb("Sin",(e=>Math.sin(e)))},dk={kernelName:"Sinh",backendName:"cpu",kernelFunc:Fb("Sinh",(e=>Math.sinh(e)))},fk=Math.log(1.1920928955078125e-7)+2,mk={kernelName:"Softplus",backendName:"cpu",kernelFunc:Fb("Softplus",(e=>{const t=e>-fk,n=e<fk,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s}))};const gk={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;hb([s],"spaceToBatchND");const o=p(a),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=Xv.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=Eu(l.shape,a,o,!1),h=Tu(c.length,a.length,!1),d=Cu(l.shape,a,o,!1),f=Vx({inputs:{x:l},backend:n,attrs:{shape:c}}),m=px({inputs:{x:f},backend:n,attrs:{perm:h}}),g=Vx({inputs:{x:m},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const yk={kernelName:"SparseToDense",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=ur(0,s,o),d=ik(n.bufferSync(s),n.bufferSync(a),o,p,c,l,u,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const bk={kernelName:"SplitV",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=x(i,s.shape)[0],u=Ou(s,a,o),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map((e=>{const t=[...c];t[o]=e;const r=wx({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[o]+=e,r}))}},xk={kernelName:"Sqrt",backendName:"cpu",kernelFunc:Fb("Sqrt",(e=>Math.sqrt(e)))},wk={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;hb(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},vk={kernelName:"Step",backendName:"cpu",kernelFunc:Fb("Step",((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}))};const kk={kernelName:"StridedSlice",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=r;hb(s,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=wr(s.shape,a,i,o,u,l,c,h,p),x=Vx({inputs:{x:s},backend:n,attrs:{shape:y}});let w;if(d){const e=wx({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=Vx({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,s.dtype,[]);else{const e=Ix(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const v=Vx({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),v}},Ik={kernelName:"Tan",backendName:"cpu",kernelFunc:Fb("Tan",(e=>Math.tan(e)))},Nk=Fb("Tanh",(e=>Math.tanh(e)));const Sk=[jx,mb,qx,Kx,Ab,Xx,Yx,Zx,Jx,Qx,ew,tw,nw,rw,sw,uw,lw,cw,hw,Hx,pw,dw,fw,Sb,Lb,mw,bb,gw,ww,Iw,Nw,kw,Ew,Tw,Sw,Cw,$w,Aw,Rw,_w,Dw,Mw,Ow,Lw,zw,Pw,Ww,Bw,Xw,Rx,Vw,Gw,Hw,Bb,qw,Vb,Qw,tv,nv,Gb,rv,sv,av,iv,ov,qb,uv,vb,lv,bw,cv,hv,pv,Dx,Xb,dv,fv,Jb,mv,gv,yv,bv,xv,wv,tx,Iv,Nv,Sv,Ev,Tv,kv,Av,Rv,rx,_v,Dv,Ov,ox,lx,zv,Bv,Vv,cx,Uv,jv,Kv,Xv,Yv,Ox,mx,Zv,Ib,Jv,zx,Bx,Ux,Qv,ek,tk,nk,rk,sk,ak,bx,ok,uk,lk,ck,hk,pk,dk,vx,Mv,mk,gk,yk,bk,xk,wk,kx,vk,kk,Ex,$v,Ik,{kernelName:"Tanh",backendName:"cpu",kernelFunc:Nk},{kernelName:"Tile",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;hb(s,"tile");const i=Tx(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:"TopK",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r;hb(s,"topk");const o=n.data.get(s.dataId).values,[u,l]=Cx(o,s.shape,s.dtype,a);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},dx,{kernelName:"Unique",backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;hb(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=$x(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:"Unpack",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],u=new Array(i-1);let l=0;for(let e=0;e<i;e++)e!==a&&(u[l++]=s.shape[e]);const c=new Array(i).fill(0),h=s.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=wx({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});p[e]=Vx({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:"UnsortedSegmentSum",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r;hb(s,"unsortedSegmentSum");const o=[],u=[],l=s.shape.length-a.shape.length;let c=a;for(let e=0;e<l;++e){const t=jw({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<i;++e){const t=ge(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=Uw({inputs:{a:r,b:c},backend:n}),i=Nb({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),l=ix({inputs:{a:i,b:s},backend:n}),h=Cv({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),u.push(r),u.push(a),u.push(i),u.push(l),u.push(h)}const h=qv({inputs:o,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Hv];for(const e of Sk)de(e);const Ek={},Tk={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ck(e){if(!(e in Ek)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete Ek[e]}),!1),1===e)return t.getContext("webgl",Tk)||t.getContext("experimental-webgl",Tk);return t.getContext("webgl2",Tk)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;Ek[e]=t}const t=Ek[e];return t.isContextLost()?(delete Ek[e],Ck(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),Ek[e])}var $k,Ak,Rk,_k,Dk,Fk;function Mk(e,t){return[t,e]}function Ok(e){const t=p(e);return m(Math.ceil(t/4))}function Lk(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function zk(e,t){const n=e;let r,s,a,i,o,u,l,c,h,p;return 2===V().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,l=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),u=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function Pk(e,t){const n=t();return V().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}(Ak=$k||($k={}))[Ak.DENSE=0]="DENSE",Ak[Ak.SHARED_BATCH=1]="SHARED_BATCH",(_k=Rk||(Rk={}))[_k.RENDER=0]="RENDER",_k[_k.UPLOAD=1]="UPLOAD",_k[_k.PIXELS=2]="PIXELS",_k[_k.DOWNLOAD=3]="DOWNLOAD",(Fk=Dk||(Dk={}))[Fk.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",Fk[Fk.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",Fk[Fk.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",Fk[Fk.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",Fk[Fk.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function Bk(e){return!!(V().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Wk(e,t){return Yk(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function Vk(e,t){const n=Yk(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(Pk(e,(()=>e.shaderSource(n,t))),Pk(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=Uk.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,i=s.map(((e,t)=>g((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${g(l[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Uk=/ERROR: [0-9]+:([0-9]+):/g;function Gk(e,t){if(Pk(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Hk(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(Pk(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),Pk(e,(()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i))),Pk(e,(()=>e.enableVertexAttribArray(o))),!0)}function jk(e,t,n){!function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(e,n),Pk(e,(()=>e.activeTexture(e.TEXTURE0+n))),Pk(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function qk(e,t,n){Pk(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),Pk(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Kk(e,t){Pk(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),Pk(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function Xk(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Yk(e,t,n){const r=Pk(e,(()=>t()));if(null==r)throw new Error(n);return r}function Zk(e,t=2){return p(e.slice(0,e.length-t))}function Jk(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Qk(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Zk(e),...Jk(e)]),t}function eI(e){return e%2==0}function tI(e,t){if(d(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(eI(n)&&eI(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&eI(e[0])&&eI(t[0])}let nI,rI;function sI(e,t){return null!=e.getExtension(t)}function aI(e){try{if(null!=Ck(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function iI(e){if(0===e)return!1;const t=Ck(e);if(1!==e){if(sI(t,"EXT_color_buffer_float"))return oI(t);const e="EXT_color_buffer_half_float";if(sI(t,e)){const n=t.getExtension(e);return function(e,t){const n=zk(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!sI(t,"OES_texture_float"))return!1;if(!sI(t,"WEBGL_color_buffer_float"))return!1;return oI(t)}function oI(e){const t=zk(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function uI(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&u("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const lI=V();function cI(){let e,t,n,r,s,a,i,o,u,l;return 2===V().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function hI(e,t,n="index"){const r=R(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function pI(e){const t=R(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}lI.registerFlag("HAS_WEBGL",(()=>lI.getNumber("WEBGL_VERSION")>0)),lI.registerFlag("WEBGL_VERSION",(()=>aI(2)?2:aI(1)?1:0)),lI.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),lI.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===lI.get("WEBGL_VERSION"))),lI.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),lI.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),lI.registerFlag("WEBGL_PACK",(()=>lI.getBool("HAS_WEBGL"))),lI.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_PACK_CLIP",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),lI.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_PACK_REDUCE",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_LAZILY_UNPACK",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_CONV_IM2COL",(()=>lI.getBool("WEBGL_PACK"))),lI.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==nI){const t=Ck(e);nI=t.getParameter(t.MAX_TEXTURE_SIZE)}return nI}(lI.getNumber("WEBGL_VERSION")))),lI.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==rI){const t=Ck(e);rI=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,rI)}(lI.getNumber("WEBGL_VERSION")))),lI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=lI.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=Ck(e);return t=sI(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:sI(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),lI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>lI.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!rt())),lI.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=Ck(e);if(1===e){if(!sI(t,"OES_texture_float"))return!1}else if(!sI(t,"EXT_color_buffer_float"))return!1;return oI(t)}(lI.getNumber("WEBGL_VERSION")))),lI.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!lI.getBool("WEBGL_FORCE_F16_TEXTURES")&&lI.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),lI.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>iI(lI.getNumber("WEBGL_VERSION")))),lI.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=lI.getNumber("WEBGL_VERSION"))&&null!=Ck(e).fenceSync;var e})),lI.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>lI.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),lI.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}));const dI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class fI{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=$k.DENSE;const t=Ok(e),n=cI();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${hI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class mI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=$k.DENSE;const t=Ok(e),n=cI();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${hI(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class gI{constructor(e){this.variableNames=["A"],this.outTexUsage=Rk.DOWNLOAD;const t=cI();this.outputShape=e,this.userCode=`\n      ${dI}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class yI{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Rk.DOWNLOAD;const t=cI();this.outputShape=e,this.userCode=`\n      ${dI}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class bI{constructor(e,t,n=!1){this.variableNames=["A"];const r=cI(),[s,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${pI(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class xI{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=cI(),[s,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${pI(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}function wI(e){const t=cI();return function(e,t){const n=Yk(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(Pk(e,(()=>e.shaderSource(n,t))),Pk(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function vI(e){return function(e,t){const n=Yk(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Pk(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Pk(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function kI(e){return function(e,t){const n=Yk(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return Pk(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),Pk(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function II(e,t,n,r,s,a){!function(e,t){const n=V().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return Yk(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return Pk(e,(()=>e.bindTexture(o,i))),Pk(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),Pk(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),Pk(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),Pk(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),Pk(e,(()=>e.texImage2D(o,0,r,t,n,0,s,a,null))),Pk(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function NI(e){return e.internalFormatFloat}function SI(e){return e.internalFormatHalfFloat}function EI(e){return e.downloadTextureFormat}function TI(e){return e.internalFormatPackedFloat}function CI(e){return e.internalFormatPackedHalfFloat}function $I(e,t,n,r,s,a,i,o){const u=e,l=new Float32Array(function(e,t){const[n,r]=Lk(e,t);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class AI{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=V().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){Ek[e]=t}(t,e)):this.gl=Ck(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===V().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Wk(this.gl,e),sI(this.gl,t))this.textureHalfFloatExtension=Wk(this.gl,t);else if(V().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),sI(this.gl,r))this.colorBufferHalfFloatExtension=Wk(this.gl,r);else if(V().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",sI(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!sI(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=vI(this.gl),this.indexBuffer=kI(this.gl),this.framebuffer=function(e){return Yk(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=zk(this.gl,this.textureHalfFloatExtension)}get debug(){return V().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;Pk(e,(()=>e.finish())),Pk(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),Pk(e,(()=>e.deleteFramebuffer(this.framebuffer))),Pk(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),Pk(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),Pk(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Mk(t,n);return II(e,s,a,NI(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Mk(t,n);return II(e,s,a,SI(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Mk(t,n);return II(e,s,a,EI(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){Pk(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?Pk(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):Pk(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),Pk(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,u;Pk(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,u=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,u=a.internalFormatPackedFloat),i.set(s),Pk(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,o,i))),Pk(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Lk(t,n);return II(e,s,a,CI(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=Lk(t,n);return II(e,s,a,TI(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Kk(this.gl,this.framebuffer),this.outputTexture=null),Pk(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=Mk(t,n),i=new Uint8Array(t*n*4);return Pk(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return $I(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();Pk(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return Pk(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),Pk(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),Pk(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(V().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return Pk(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=Vk(t,e),r=wI(t),s=function(e){return Yk(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return Pk(t,(()=>t.attachShader(s,r))),Pk(t,(()=>t.attachShader(s,n))),function(e,t){if(Pk(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,s),this.debug&&Gk(t,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(e,t,n){return Pk(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Hk(e,t,"clipSpacePos",n,3,20,0)&&Hk(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),s}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&Pk(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Gk(this.gl,this.program),Pk(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Yk(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),Pk(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(e,t,n,r){Pk(e,(()=>jk(e,t,r))),Pk(e,(()=>e.uniform1i(n,r)))}(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=Lk(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Gk(this.gl,this.program),Xk(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),Pk(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Pk(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Wk(this.gl,2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await y((()=>this.disposed||this.isQueryAvailable(e,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||y((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),qk(this.gl,e,this.framebuffer),this.debug&&Xk(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(qk(this.gl,this.outputTexture,this.framebuffer),this.debug&&Xk(this.gl)):Kk(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;qk(r,e,this.framebuffer),this.debug&&Xk(r),this.outputTexture=e,Pk(r,(()=>r.viewport(0,0,t,n))),Pk(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),Pk(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function RI(e,t,n,r){const s=[];e.forEach((e=>{const t=p(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`))}));const a=s.join("\n"),i=e.map((e=>function(e,t,n=!1){let r="";r+=n?DI(e):_I(e);const s=e.shapeInfo.logicalShape,a=t.logicalShape;s.length<=a.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=Os(e.shapeInfo.logicalShape,t.logicalShape),u=WI(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+l]} = 0;`)).join("\n");let d="";d=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+l]}`)).join(", ");let f="return outputValue;";const m=1===p(e.shapeInfo.logicalShape),g=1===p(t.logicalShape);if(1!==a||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?f="return vec4(outputValue.x);":o.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${d});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===u&&null==e.shapeInfo.flatOffset&&d(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=WI(u),c=Os(e.shapeInfo.logicalShape,t.logicalShape),h=u-o;let p;const f=["x","y","z","w","u","v"];p=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+h]} = 0;`)).join("\n");let m="";m=u<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+h]}`)).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      return get${r}(${m});\n    }\n  `}(e,t));return r}(e,t,r))).join("\n"),o=t.texShape,u=cI(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,f=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${FI}\n    ${MI}\n    ${OI}\n  `}(u);t.isPacked?(c=function(e,t){switch(e.length){case 0:return zI();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(d(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),s=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),s=r*Math.ceil(e[e.length-2]/2);let a=s,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t){switch(e.length){case 0:return zI();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(d(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=hI(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=hI(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=hI(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=hI(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(f+=LI);return[f,l,h,a,c,i,n].join("\n")}function _I(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,s]=e.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape,o=PI(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${BI(e)}\n      }\n    `;const r=e.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=PI(t);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape;if(null!=s&&d(t,s)){const e=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=w(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${_I(VI(e,o))}\n      float ${r}(int row, int col) {\n        return ${r}(${UI(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${BI(e)}\n      }\n    `;const u=s[0],l=s[1],c=PI(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=w(t),u=i;if(u.length<t.length){const t=["row","col","depth"];return`\n        ${_I(VI(e,u))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${UI(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${BI(e)}\n      }\n    `;const l=e.shapeInfo.texShape,c=l[0],h=l[1],p=e.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=PI(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[3],a=t[2]*s,i=t[1]*a,{newShape:o,keptDims:u}=w(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${_I(VI(e,o))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${UI(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${BI(e)}\n      }\n    `;const l=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=PI(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,i=t[2]*a,o=t[1]*i,{newShape:u,keptDims:l}=w(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${_I(VI(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${UI(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${BI(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=PI(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=w(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${_I(VI(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${UI(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,u=t[3]*o,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${BI(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=PI(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function DI(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=cI();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=cI();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=s[0],i=s[1],o=cI();if(null!=s&&d(t,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],l=Math.ceil(t[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===t[0]){const n=[1,2],s=["b","row","col"];return`\n        ${DI(VI(e,t.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${UI(s,n)});\n        }\n      `}const i=a[0],o=a[1],u=Math.ceil(t[2]/2),l=u*Math.ceil(t[1]/2),c=cI();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;const d=cI();return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(e)}}const FI="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",MI="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",OI="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",LI="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function zI(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function PI(e){return`offset${e}`}function BI(e){const t=e.name,n=p(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function WI(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function VI(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function UI(e,t){return t.map((t=>e[t])).join(", ")}function GI(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!d(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const i=e.texShape,o=s.isUniform?null:s.texData.texShape;if(!d(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function HI(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function jI(e,t){return 1===t?[e]:HI(e,t)}class qI{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=jI("rc",t),r=WI(t),s=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let r="";for(let s=e-2;s<e;s++)r+=`${n[s]} >= ${t[s]}`,s<e-1&&(r+="||");return r}(t,e,n),a=function(e,t,n,r){if(1===e)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class KI{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${hI(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${pI(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class XI{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=ZI(t,n),s=JI(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=YI(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let i;return r===Dk.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===Dk.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===Dk.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===Dk.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===Dk.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=ZI(n,r),a=JI(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=YI(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=V().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function YI(e,t,n,r,s){const a=function(e,t){switch(e){case Dk.PACKED_2X2_FLOAT32:return TI(t);case Dk.PACKED_2X2_FLOAT16:return CI(t);case Dk.UNPACKED_FLOAT32:return NI(t);case Dk.UNPACKED_FLOAT16:return SI(t);case Dk.PACKED_4X1_UNSIGNED_BYTE:return EI(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let i;if(s){const[t,n]=Lk(e[0],e[1]);i=t*n}else{const[t,n]=Mk(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function ZI(e,t){if(e===Rk.UPLOAD)return Dk.PACKED_2X2_FLOAT32;if(e===Rk.RENDER||null==e)return function(e){return V().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?Dk.PACKED_2X2_FLOAT32:Dk.UNPACKED_FLOAT32:e?Dk.PACKED_2X2_FLOAT16:Dk.UNPACKED_FLOAT16}(t);if(e===Rk.DOWNLOAD||e===Rk.PIXELS)return Dk.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function JI(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class QI{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class eN{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class tN{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=jI("rc",t),r=WI(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const nN=Yi,rN={};class sN extends r{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!V().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=Ck(V().getNumber("WEBGL_VERSION"));this.binaryCache=((t=V().getNumber("WEBGL_VERSION"))in rN||(rN[t]={}),rN[t]),this.gpgpu=new AI(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new XI(this.gpgpu),this.numMBBeforeWarning=null==V().global.screen?1024:V().global.screen.height*V().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new n(this,Sr())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((V().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||V().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:Rk.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r){if(V().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:Rk.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new eN(i,"return x;"):new QI(i,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=be()),"complex64"===r){c=_u(this.readSync(s.real.dataId),this.readSync(s.imag.dataId))}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=be()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=s){let t;t=o?new eN(r,"return x;"):new QI(r,"return x;");const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(!V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===V().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&V().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...Ok(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);l=_u(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=p(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=u&&this.disposeIntermediateTensorInfo(u);const h=this.convertAndCacheOnCPU(e,l),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>we(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Gn(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!Bk(n)){if(V().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=p(t);if(V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...Ok(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=V().getBool("WEBGL_PACK")&&!0===r,i=a?Qk(t):t,o=a?new yI(i):new gI(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=h(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=h(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:be(),endMs:null}}endTimer(e){return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=be(),e)}async getQueryTime(e){if(V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return V().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Sr().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return V().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&p(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Ru("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return nN(e.shape,t)}packedUnaryOp(e,t,n){const r=new eN(e.shape,t);return this.compileAndRun(r,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=fb(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(V().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,"return abs(x);",e.dtype);const t=new QI(e.shape,"return abs(x);");return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const s=n.map((e=>xe(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return Sr().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new tN(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new qI(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Zk(e.shape),...Jk(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[Zk(t),...Jk(t)],a=new KI(s,n),i=this.runWebGLProgram(a,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:s}=t,a=Qk(r);let i;i=n?new mI(a):new fI(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:e}],s,null,!0).dataId}}runWebGLProgram(e,t,n,r,s=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===$k.DENSE){const t=Ok(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===p(a.shape))return i.values=v(a.dtype,0),a;const o=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&p(t.shape)<=V().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!tI(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),o.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const l={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let r="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s,a}(e,u,l),h=this.getAndSaveBinary(c,(()=>function(e,t,n,r){const s=t.userCode,a=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=RI(a,o,s,t.packedInputs),l=e.createProgram(u);let c=null;const h=e.getUniformLocation(l,"NAN",!1);1===V().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(l,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n],s=!1;p[r]=e.getUniformLocation(l,r,s),p[`offset${r}`]=e.getUniformLocation(l,`offset${r}`,s)}return{program:t,source:u,webGLProgram:l,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,u,l))),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(e,t,n,r,s){GI(t.inShapeInfos,n),GI([t.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===V().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],i=t.uniformLocations[`offset${s}`];if(null!=a)if(n.isUniform)if(p(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,r)})),null!=s&&s(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,u,l,r),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)})),!V().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;const a=this.runWebGLProgram(e,t,n,r,s);return Sr().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!V().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Tr((()=>{if(!V().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=V().getBool("DEBUG");V().set("DEBUG",!1);const t=this.abs(yi(1e-8)).dataSync()[0];if(V().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:u}=t;if(null!=a)return;const l=null!=this.activeTimers;let c;l&&(c=be());let h=t.texShape;if(null==h&&(h=function(e,t=!1){let n=V().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?o(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=w(e);e=t.newShape}let r=p(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Zk(e);let n=2,s=2;return e.length&&([n,s]=Jk(e)),r=t*(n/2)*(s/2),m(r).map((e=>2*e))}return m(r)}(n,u),t.texShape=h),null!=s){const e=Qk(n);let a,i=h[1],o=h[0];const p=s instanceof Uint8Array;u?([i,o]=Lk(h[0],h[1]),a=new xI(e,[o,i],p)):a=new bI(e,[o,i],p);const d=this.makeTensorInfo([o,i],r);this.texData.get(d.dataId).usage=p?Rk.PIXELS:Rk.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,s);const f=!0,m=this.runWebGLProgram(a,[d],r,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=be()-c)}else{const e=this.acquireTexture(h,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*S(t)}}st()&&Ar("webgl",(()=>new sN),2);class aN{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=zs(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class iN{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=zs(t,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===p(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${WI(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=jI("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function oN(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const uN={kernelName:"Identity",backendName:"webgl",kernelFunc:oN};function lN(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=oN({inputs:{x:r},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const u=oN({inputs:{x:s},backend:n});return n.texData.get(u.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:u},a}const cN={kernelName:"Complex",backendName:"webgl",kernelFunc:lN};const hN={kernelName:"LeakyRelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,i=n.makeTensorInfo([],"float32",ge(a,"float32")),o=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new iN("\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",s.shape,i.shape):new aN("return (a < 0.) ? b * a : a;",s.shape,i.shape),u=n.runWebGLProgram(o,[s,i],s.dtype);return n.disposeIntermediateTensorInfo(i),u}};const pN={kernelName:"Prelu",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new iN("\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",r.shape,s.shape):new aN("return (a < 0.) ? b * a : a;",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}};function dN({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,o=a,u=r||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,u);return o.makeTensorInfo(i.shape,u,t)}let l;return l=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new eN(i.shape,t):new QI(i.shape,e),o.runWebGLProgram(l,[i],u)}}function fN({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new aN(e,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],je(n.dtype,r.dtype))})),a=lN({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||je(u.dtype,l.dtype);if(c.shouldExecuteOnCPU([u,l])&&null!=s){const e=c.texData.get(u.dataId),t=c.texData.get(l.dataId),[n,r]=s(u.shape,l.shape,e.values,t.values,h),a=c.makeTensorInfo(r,h);return c.texData.get(a.dataId).values=n,a}let p;return p=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new iN(t,u.shape,l.shape,n):new aN(e,u.shape,l.shape),c.runWebGLProgram(p,[u,l],h)}}function mN(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?"\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n":"return (a < 0.) ? b * a : a;";if("leakyrelu"===e)return t?"\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n":"return (a < 0.) ? b * a : a;";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class gN{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=r?e[1]:e[2],c=Math.ceil(l/2),h=r?"i * 2, rc.y":"rc.y, i * 2",p=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const yN="return areal * breal - aimag * bimag;",bN="return areal * bimag + aimag * breal;";class xN{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=zs(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}function wN(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=je(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new xN(yN,r.shape,s.shape),i=new xN(bN,r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=lN({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=sx(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new iN("return a * b;",r.shape,s.shape):new aN("return a * b;",r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}const vN={kernelName:"Multiply",backendName:"webgl",kernelFunc:wN};function kN(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=n,o=p(s.shape),l=b(a,o),c=p(l);u(o===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const h=i.texData.get(s.dataId);return!h.isPacked||tI(s.shape,l)||null!==h.texture&&tI(h.shape,l)?(i.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):function(e,t,n){const r=[Zk(e.shape),...Jk(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[Zk(t),...Jk(t)],i=new KI(a,r),o=n.runWebGLProgram(i,[s],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(s,l,i)}const IN={kernelName:"Reshape",backendName:"webgl",kernelFunc:kN};class NN{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const i=4*Math.floor(n/4),o=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${f(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class SN{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function EN(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Nu(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new NN({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new NN({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new SN({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class TN{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=WI(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class CN{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=WI(this.rank),s=HI("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function $N(e,t,n){const r=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CN(e.shape,t):new TN(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function AN(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;return function(e,t,n,r){const s=t,a=e.shape.length,i=x(s,e.shape);let o=i;const u=La(o,a),l=null!=u;let c=e;l&&(c=$N(e,u,r),o=Pa(o.length,a)),Oa("sum",o,a);const[h,d]=Fa(c.shape,o);let f=h;n&&(f=Ma(h,i));const m=p(d),g=kN({inputs:{x:c},attrs:{shape:[p(e.shape)/m,m]},backend:r}),y=EN(g,qe(e.dtype),"sum",r),b=kN({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),l&&r.disposeIntermediateTensorInfo(c),b}(s,a,i,n)}const RN={kernelName:"Sum",backendName:"webgl",kernelFunc:AN};function _N(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=s.shape.length,u=new Array(o);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(i.shouldExecuteOnCPU([s])){const e=hx(i.texData.get(s.dataId).values,s.shape,s.dtype,a,u);l=i.makeTensorInfo(u,s.dtype);i.texData.get(l.dataId).values=e}else l=$N(s,a,i);return l}const DN={kernelName:"Transpose",backendName:"webgl",kernelFunc:_N};function FN({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const c=e.shape.length,h=t.shape.length,d=n?e.shape[c-2]:e.shape[c-1],f=r?t.shape[h-1]:t.shape[h-2],m=n?e.shape[c-1]:e.shape[c-2],g=r?t.shape[h-2]:t.shape[h-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=p(y),w=p(b);u(c>=2&&h>=2&&(x===w||1===x||1===w),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${y}) and (${b}).`));const v=(x>w?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([m,g]);u(d===f,(()=>`Error in matMul: inner shapes (${d}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const k=n?[x,d,m]:[x,m,d],I=r?[w,g,f]:[w,f,g],N=kN({inputs:{x:e},backend:s,attrs:{shape:k}}),S=kN({inputs:{x:t},backend:s,attrs:{shape:I}}),E=[N,S],T=Math.max(x,w),C=n?N.shape[1]:N.shape[2],$=null!=a,A=null!=i,R="leakyrelu"===l,_=null!=l?mN(l,!0):null;let D;if((1===m||1===g)&&C>1e3&&!1===($||A||R||null!=_)){let e=N,t=S;n&&(e=_N({inputs:{x:N},backend:s,attrs:{perm:[0,2,1]}}),E.push(e)),r&&(t=_N({inputs:{x:S},backend:s,attrs:{perm:[0,2,1]}}),E.push(t));const a=1===g;let i=e;1!==g&&(i=kN({inputs:{x:e},backend:s,attrs:{shape:[T,C,1]}}),E.push(i));const o=1===g?2:1;let u=t;a&&(u=kN({inputs:{x:t},backend:s,attrs:{shape:[T,1,C]}}),E.push(u));const l=wN({inputs:{a:i,b:u},backend:s});D=AN({inputs:{x:l},backend:s,attrs:{axis:o,keepDims:!0}}),E.push(l)}else{const u=je(e.dtype,t.dtype),l=new gN(k,I,[T,m,g],n,r,$,_,A,R),c=[N,S];if(null!=a&&c.push(a),A&&c.push(i),R){const e=s.makeTensorInfo([],"float32",ge(o,"float32"));c.push(e),E.push(e)}D=s.runWebGLProgram(l,c,u)}const F=kN({inputs:{x:D},backend:s,attrs:{shape:v}});E.push(D);for(const e of E)s.disposeIntermediateTensorInfo(e);return F}const MN={kernelName:"_FusedMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;return FN({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}};const ON={kernelName:"Abs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=fb(n.texData.get(r.dataId).values);return n.makeTensorInfo(r.shape,r.dtype,e)}let s;return s=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new eN(r.shape,"return abs(x);"):new QI(r.shape,"return abs(x);"),n.runWebGLProgram(s,[r],r.dtype)}},LN={kernelName:"Acos",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},zN={kernelName:"Acosh",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},PN={kernelName:"Add",backendName:"webgl",kernelFunc:fN({opSnippet:"return a + b;",packedOpSnippet:"return a + b;",supportsComplex:!0,cpuKernelImpl:Cb})};class BN{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class WN{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const VN={kernelName:"AddN",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return oN({inputs:{x:s[0]},backend:r});if(s.length>V().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>je(e,t))),i=s.map((e=>e.shape)),o=V().getBool("WEBGL_PACK")?new WN(s[0].shape,i):new BN(s[0].shape,i);return r.runWebGLProgram(o,s,a)}};const UN={kernelName:"All",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=x(a,s.shape);let l=u;const c=La(l,o);let h=s;null!=c&&(h=_N({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Pa(l.length,o)),Oa("all",l,o);const[d,f]=Fa(h.shape,l),m=kN({inputs:{x:h},backend:n,attrs:{shape:[-1,p(f)]}}),g=EN(m,m.dtype,"all",n);let y;if(i){y=kN({inputs:{x:g},backend:n,attrs:{shape:Ma(d,u)}})}else y=kN({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}};const GN={kernelName:"Any",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=x(a,s.shape);let l=u;const c=La(l,o);let h=s;null!=c&&(h=_N({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Pa(l.length,o)),Oa("any",l,o);const[d,f]=Fa(h.shape,l),m=kN({inputs:{x:h},backend:n,attrs:{shape:[-1,p(f)]}}),g=EN(m,m.dtype,"any",n);let y;if(i){y=kN({inputs:{x:g},backend:n,attrs:{shape:Ma(d,u)}})}else y=kN({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}};class HN{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class jN{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,u(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=WI(o),c=jI("coords",o);let h,p;if(1===a){p=o+1;const e=WI(p);h=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[o-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[o-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[o-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[o-2]};`}else p=o,h=`\n        ${l} sourceLocR = coords;\n        ++${c[o-1]};\n        ${l} sourceLocG = coords;\n        ++${c[o-2]};\n        ${l} sourceLocA = coords;\n        --${c[o-1]};\n        ${l} sourceLocB = coords;\n        --${c[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((e=>"int "+e)),g=jI("sourceLocR",p-1).concat("inIdx.r"),y=jI("sourceLocG",p-1).concat("inIdx.g"),b=jI("sourceLocB",p-1).concat("inIdx.b"),x=jI("sourceLocA",p-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,I=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${c[o-2]} < ${i[o-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function qN(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const i=Nu(a),o={windowSize:i,inSize:a,batchSize:s,outSize:Math.ceil(a/i)},u=new HN(o,n,null==r),l=[t];null!=r&&l.push(r);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const h=qN(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function KN(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=Nu(s[s.length-1]),i=new jN(s,a,n,null==r),o=null==r?[t]:[t,r],u=e.runWebGLProgram(i,o,"int32");if(u.shape.length===t.shape.length){const r=KN(e,t,n,u);return e.disposeIntermediateTensorInfo(u),r}return u}function XN(e,t,n,r){const s=[n];if(Oa("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!V().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=Fa(t.shape,s),o=p(i),u=kN({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(u);const l=qN(e,u,r);n.push(l);const c=kN({inputs:{x:l},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return KN(e,t,r)}const YN={kernelName:"ArgMax",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=x(a,s.shape);const o=La(i,s.shape.length);let u=s;const l=[];null!=o&&(u=_N({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Pa(i.length,u.shape.length)),Oa("argMax",[i[0]],u.shape.length);const c=XN(n,u,i[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const ZN={kernelName:"ArgMin",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=x(a,s.shape);const o=La(i,s.shape.length);let u=s;const l=[];null!=o&&(u=_N({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Pa(i.length,u.shape.length)),Oa("argMin",[i[0]],u.shape.length);const c=XN(n,u,i[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},JN={kernelName:"Asin",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},QN={kernelName:"Asinh",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"})},eS={kernelName:"Atan",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"})},tS={kernelName:"Atan2",backendName:"webgl",kernelFunc:fN({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})},nS={kernelName:"Atanh",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class rS{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class sS{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const aS={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;uI(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;u(rs(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=qr(s.shape,a,i,1,o,l);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return oN({inputs:{x:s},backend:n});const h=new rS(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};const iS={kernelName:"AvgPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r,c=Kr(s.shape,a,i,[1,1,1],o,u,l),h=new sS(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class oS{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=o-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class uS{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const lS={kernelName:"AvgPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=Kr(i.shape,o,u,[1,1,1],l,c),p=new uS(h);return n.runWebGLProgram(p,[s],i.dtype)}};const cS={kernelName:"AvgPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;uI([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=qr(i.shape,o,u,1,l),h=new oS(c);return n.runWebGLProgram(h,[s],i.dtype)}};const hS={kernelName:"BatchMatMul",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return FN({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class pS{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],zs(e,t),zs(e,n);let i="0.0";null!=r&&(zs(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(zs(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class dS{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],zs(e,t),zs(e,n);let i="vec4(0.0)";null!=r&&(zs(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(zs(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const fS={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:i,scale:o}=e;u(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),u(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),u(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[r,s,a];let h=null;null!=i&&(h=i.shape,c.push(i));let p=null;null!=o&&(p=o.shape,c.push(o));const d=V().getBool("WEBGL_PACK_NORMALIZATION")?new dS(r.shape,s.shape,a.shape,h,p,l):new pS(r.shape,s.shape,a.shape,h,p,l);return t.runWebGLProgram(d,c,c[0].dtype)}};class mS{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=WI(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return gS.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${gS[t]} = start[${t}] + coords.${gS[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const gS=["x","y","z","w","u","v"];class yS{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=WI(this.rank),n=jI("coords",this.rank),r=jI("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function bS(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r,[o,u]=xr(s,a,i);if(lr(s,o,u),0===p(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=xx(n.texData.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,e)}const{isPacked:l}=n.texData.get(s.dataId),c=yr(s.shape,o,u);if(l||!c){const e=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yS(u):new mS(u),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),i=r.texData.get(a.dataId);Object.assign(i,s),i.shape=n,i.dtype=e.dtype;let o=br(t,R(e.shape));s.slice&&(o+=s.slice.flatOffset),i.slice={flatOffset:o,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,u+1),a}(s,o,u,n)}const xS={kernelName:"Slice",backendName:"webgl",kernelFunc:bS},wS={kernelName:"BatchToSpaceND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;u(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=Eu(s.shape,a,o),c=Tu(l.length,a.length),h=Cu(s.shape,a,o),p=$u(i,a.length),d=Au(h,i,a.length),f=[],m=kN({inputs:{x:s},backend:n,attrs:{shape:l}}),g=_N({inputs:{x:m},backend:n,attrs:{perm:c}}),y=kN({inputs:{x:g},backend:n,attrs:{shape:h}}),b=bS({inputs:{x:y},backend:n,attrs:{begin:p,size:d}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const vS={kernelName:"Bincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=Rb(n.texData.get(s.dataId).values,n.texData.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},kS=fN({opSnippet:"return float(a != b);",dtype:"bool"}),IS={kernelName:"NotEqual",backendName:"webgl",kernelFunc:kS};function NS(e){const{inputs:t,backend:n}=e,{input:r}=t;return oN({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const SS={kernelName:"Real",backendName:"webgl",kernelFunc:NS};const ES={kernelName:"Cast",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return oN({inputs:{x:a},backend:r});const t=Ga(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=lN({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=NS({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!I(a.dtype,i)){const e=oN({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new QI(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",v("bool",1)),t=kS({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},TS={kernelName:"Ceil",backendName:"webgl",kernelFunc:dN({opSnippet:"return ceil(x);",packedOpSnippet:"return ceil(x);",cpuKernelImpl:Ob})};class CS{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class $S{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const AS={kernelName:"ClipByValue",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;o=V().getBool("WEBGL_PACK_CLIP")?new $S(s.shape):new CS(s.shape);const u=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[s],s.dtype,u)}};class RS{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function _S(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const DS={kernelName:"ComplexAbs",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new RS(r.shape),i=[_S(r,s.complexTensorInfos.real),_S(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class FS{constructor(e){this.outputShape=[],this.outputShape=Iu(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class MS{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Iu(e,t);const n=this.outputShape,r=n.length,s=WI(r),a=jI("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const u=i[t],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${u} < ${o[e]}  && ${u} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${OS(i,u,t)}),\n            vec2(${OS(l,u,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${OS(i,u,d)}),\n          vec2(${OS(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function OS(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function LS(e){const{inputs:t,backend:n}=e,{input:r}=t;return oN({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const zS={kernelName:"Imag",backendName:"webgl",kernelFunc:LS};function PS(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>NS({inputs:{input:e},backend:n}))),s=e.map((e=>LS({inputs:{input:e},backend:n}))),a=PS(r,t,n),i=PS(s,t,n),o=lN({inputs:{real:a,imag:i},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if(e.length>V().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),s=PS(e.slice(0,r),t,n),a=PS(e.slice(r),t,n),i=PS([s,a],t,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}if(V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new MS(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const s=Iu(e.map((e=>e.shape)),t),a=e.map((e=>kN({inputs:{x:e},attrs:{shape:[-1,p(e.shape.slice(t))]},backend:n}))),i=new FS(a.map((e=>e.shape))),o=n.runWebGLProgram(i,a,r);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=kN({inputs:{x:o},attrs:{shape:s},backend:n});return n.disposeIntermediateTensorInfo(o),u}function BS(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=x(s,t[0].shape)[0],i=Iu(t.map((e=>e.shape)),a);if(0===p(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>p(e.shape)>0));if(1===o.length)return oN({inputs:{x:o[0]},backend:n});return ku(o.map((e=>e.shape)),a),PS(o,a,n)}const WS={kernelName:"Concat",backendName:"webgl",kernelFunc:BS};class VS{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class US{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class GS{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=cI(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function HS({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,c=r.texData.get(e.dataId),h=n.inChannels,p=l[0]*l[1]*l[2],d=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===d)&&h>1e3,b=l[2]%2!=0&&!!c.isPacked;if(!y&&V().getBool("WEBGL_LAZILY_UNPACK")&&V().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const h=f?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),p={dataId:e.dataId,shape:[1,h,n.inChannels],dtype:e.dtype},d=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,u(tI(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=kN({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=FN({a:p,b:y,backend:r,transposeA:false,transposeB:false,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),x=r.texData.get(b.dataId);u(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=d,x.shape=n.outShape,m=oN({inputs:{x:b},backend:r}),m.shape=n.outShape,g.push(b)}else{const u=kN({inputs:{x:e},backend:r,attrs:{shape:[1,f?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=kN({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=FN({a:u,b:c,transposeA:false,transposeB:false,backend:r,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i});m=kN({inputs:{x:h},backend:r,attrs:{shape:n.outShape}}),g.push(u),g.push(c),g.push(h)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}function jS({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:h,outHeight:d,dataFormat:f}=n,m="channelsLast"===f,g=u*l*c,y=d*h,b=[g,y],x=[],w=kN({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),v=kN({inputs:{x:t},backend:r,attrs:{shape:[1,g,p(t.shape)/g]}});x.push(w),x.push(v);const k=new GS(b,w.shape,n),I=r.runWebGLProgram(k,[w],"float32"),N=kN({inputs:{x:I},backend:r,attrs:{shape:[1,b[0],b[1]]}});x.push(I),x.push(N);const S=null!=s,E=null!=a,T="leakyrelu"===o,C=o?mN(o,!0):null,$=new gN(N.shape,v.shape,[1,y,n.outChannels],!0,!1,S,C,E,T),A=[N,v];if(s&&A.push(s),E&&A.push(a),T){const e=r.makeTensorInfo([],"float32",ge(i,"float32"));A.push(e),x.push(e)}const R=r.runWebGLProgram($,A,"float32"),_=kN({inputs:{x:R},backend:r,attrs:{shape:m?[1,d,h,n.outChannels]:[1,n.outChannels,d,h]}});x.push(R);for(const e of x)r.disposeIntermediateTensorInfo(e);return _}const qS={kernelName:"Conv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r,h=ss(u),p=Xr(s.shape,a.shape,i,l,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(V().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])d=jS({x:s,filter:a,convInfo:p,backend:n});else{const e=new VS(p);d=n.runWebGLProgram(e,[s,a],"float32")}else d=HS({x:s,filter:a,convInfo:p,backend:n});const f=kN({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class KS{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class XS{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class YS{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ZS{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const JS={kernelName:"Conv2DBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,h=ss(u),p=Xr(s.shape,c,i,1,o,l,!1,h),d=new KS(p);return n.runWebGLProgram(d,[s,a],"float32")}};const QS={kernelName:"Conv2DBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=ss(l),p=Xr(i,a.shape,o,1,u,c,!1,h),d=new XS(p);return n.runWebGLProgram(d,[s,a],"float32")}};const eE={kernelName:"Conv3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=Yr(s.shape,a.shape,i,u,o),c=new US(l);return n.runWebGLProgram(c,[s,a],"float32")}};const tE={kernelName:"Conv3DBackpropFilterV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r,l=Yr(s.shape,u,i,1,o),c=new YS(l);return n.runWebGLProgram(c,[s,a],"float32")}};const nE={kernelName:"Conv3DBackpropInputV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r,l=Yr(u,a.shape,o,1,i),c=new ZS(l);return n.runWebGLProgram(c,[s,a],"float32")}},rE={kernelName:"Cos",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"})},sE={kernelName:"Cosh",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"})};class aE{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const iE={kernelName:"CropAndResize",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,c=new aE(s.shape,a.shape,o,u,l);return n.runWebGLProgram(c,[s,a,i],"float32")}};class oE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${uE(r,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${WI(r)} coords = getOutputCoords();\n        int end = ${lE(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${lE(r,"coords")} = idx;\n          val += getX(${uE(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function uE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function lE(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const cE={kernelName:"Cumsum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r,u=s.shape.length,l=La([a],u);let c=s;null!=l&&(c=_N({inputs:{x:s},backend:n,attrs:{perm:l}}));const h=Pa(1,u)[0];if(h!==u-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} but got axis=${a}`);const p=s.shape[h];let d=oN({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new oE(c.shape,!1,o),r=t.getCustomSetupFunc(e),s=d;d=n.runWebGLProgram(t,[d],d.dtype,r),n.disposeIntermediateTensorInfo(s)}if(i){const e=new oE(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=l){const e=_N({inputs:{x:d},backend:n,attrs:{perm:za(l)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const hE={kernelName:"DenseBincount",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=Rb(n.texData.get(s.dataId).values,n.texData.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=_b(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class pE{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const dE={kernelName:"DepthToSpace",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r;u(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=s.shape[0],l="NHWC"===i?s.shape[1]:s.shape[2],c="NHWC"===i?s.shape[2]:s.shape[3],h="NHWC"===i?s.shape[3]:s.shape[1],p=l*a,d=c*a,f=h/(a*a),m=new pE("NHWC"===i?[o,p,d,f]:[o,f,p,d],a,i);return n.runWebGLProgram(m,[s],s.dtype)}};class fE{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${o}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class mE{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,u=e.padInfo.top,l=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="int xR; int xC; int xCOffset;";for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<f;e++)for(let t=0;t<g;t++){const n=2*t;if(y+=`\n          xR = xRCorner + ${e*p};\n          xC = xCCorner + ${n*d};\n        `,1===h){if(n<m&&(y+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<m)){const t=l%2==0?o(d):d;d%2==0&&l%2==1||d%2!=0&&l%2!=1?(y+=`\n                  xCOffset = xC + ${l%2} + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,d>1&&(y+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):y+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<m&&(y+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,l%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<m&&(y+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<m&&(y+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),y+="}");n<m&&(y+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<m&&(y+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<f;e++)for(let t=0;t<m;t++)y+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let b="",x="";n&&(b=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${u}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${y}\n\n        vec4 result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}const gE={kernelName:"DepthwiseConv2dNative",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:c}=r;let h=l;null==h&&(h=[1,1]),u(rs(i,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`));const p=Xr(s.shape,a.shape,i,h,o,c,!0);let d;return d=V().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new mE(p):new fE(p),n.runWebGLProgram(d,[s,a],"float32")}};class yE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xE={kernelName:"DepthwiseConv2dNativeBackpropFilter",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r,h=Xr(s.shape,c,i,o,u,l,!0),p=new yE(h);return n.runWebGLProgram(p,[s,a],"float32")}};const wE={kernelName:"DepthwiseConv2dNativeBackpropInput",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r,h=Xr(c,a.shape,i,o,u,l,!0),p=new bE(h);return n.runWebGLProgram(p,[s,a],"float32")}};class vE{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const kE={kernelName:"Diag",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=p(r.shape),i=kN({inputs:{x:r},backend:n,attrs:{shape:[a]}}),o=new vE(a),u=n.runWebGLProgram(o,[i],i.dtype),l=kN({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}};class IE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const NE={kernelName:"Dilation2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=jr(s.shape,a.shape,i,o,"NHWC",u);let c;const h=new IE(l);c=n.runWebGLProgram(h,[s,a],"float32");const p=kN({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),p}},SE={kernelName:"Elu",backendName:"webgl",kernelFunc:dN({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"})},EE={kernelName:"EluGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=V().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new iN("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new aN("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},TE={kernelName:"Equal",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"})},CE={kernelName:"Erf",backendName:"webgl",kernelFunc:dN({opSnippet:'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n'})},$E=dN({opSnippet:"return exp(x);",packedOpSnippet:"return exp(x);",cpuKernelImpl:zb}),AE={kernelName:"Exp",backendName:"webgl",kernelFunc:$E};function RE(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=s;return s<0&&(u(-(i+1)<=s,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+s+1),o.splice(l,0,1),kN({inputs:{x:a},backend:r,attrs:{shape:o}})}const _E={kernelName:"ExpandDims",backendName:"webgl",kernelFunc:RE},DE={kernelName:"Expm1",backendName:"webgl",kernelFunc:dN({opSnippet:"return exp(x) - 1.0;",packedOpSnippet:"return exp(x) - 1.0;",cpuKernelImpl:Wb})};class FE{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function ME(e,t,n){const r=n.texData.get(e.dataId),s=p(e.shape),a=e.shape[e.shape.length-1],i=kN({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}).shape,o=new FE("real",i,t),u=new FE("imag",i,t),l=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],c=n.runWebGLProgram(o,l,"float32"),h=n.runWebGLProgram(u,l,"float32"),d=lN({inputs:{real:c,imag:h},backend:n});n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h);const f=kN({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(f),f}const OE={kernelName:"FFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return ME(r,!1,n)}};class LE{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function zE(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||C(s),"string"===a){const e=k(a,p(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new LE(r,s),n=e.getCustomSetupFunc(s);return t.runWebGLProgram(e,[],a,n)}}const PE={kernelName:"Fill",backendName:"webgl",kernelFunc:zE};class BE{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const WE={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new BE(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},VE={kernelName:"Floor",backendName:"webgl",kernelFunc:dN({opSnippet:"return floor(x);",packedOpSnippet:"return floor(x);",cpuKernelImpl:Ub})},UE={kernelName:"FloorDiv",backendName:"webgl",kernelFunc:fN({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"})};class GE{constructor(e){this.variableNames=["A"];const t=cI(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class HE{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=cI(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const jE={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];(o||i)&&(null==qE&&(qE=document.createElement("canvas").getContext("2d")),qE.canvas.width=u,qE.canvas.height=l,qE.drawImage(s,0,0,u,l),s=qE.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=Rk.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const d=V().getBool("WEBGL_PACK")?new HE(h):new GE(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let qE;const KE={kernelName:"FusedConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r,m=ss(c),g=Xr(s.shape,a.shape,u,h,l,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(V().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])y=jS({x:s,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,r="leakyrelu"===d,u=d?mN(d,!1):null,l=new VS(g,e,u,t,r),c=[s,a];if(i&&c.push(i),o&&c.push(o),r){const e=n.makeTensorInfo([],"float32",ge(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(l,c,"float32")}else y=HS({x:s,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=kN({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const XE={kernelName:"FusedDepthwiseConv2D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r,m=[];let g=h;null==g&&(g=[1,1]),u(rs(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const y=Xr(s.shape,a.shape,l,g,c,p,!0),b=V().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=d?mN(d,b):null,w=[s,a],v=null!=i,k=null!=o,I="leakyrelu"===d;if(v&&w.push(i),k&&w.push(o),I){const e=n.makeTensorInfo([],"float32",ge(f,"float32"));w.push(e),m.push(e)}let N;N=b?new mE(y,v,x,k,I):new fE(y,v,x,k,I);const S=n.runWebGLProgram(N,w,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class YE{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=WI(t.length),s=WI(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const ZE={kernelName:"GatherNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,i=a[a.length-1],[o,u,l,c]=ir(r,s),h=kN({inputs:{x:s},backend:n,attrs:{shape:[u,i]}}),d=kN({inputs:{x:r},backend:n,attrs:{shape:[p(r.shape)/l,l]}}),f=new YE(i,c,[u,l]),m=n.runWebGLProgram(f,[d,h],d.dtype),g=kN({inputs:{x:m},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class JE{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=WI(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("int(getIndices(resRC.x, resRC.z))"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}const QE={kernelName:"GatherV2",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r,u=Lu(s,a,x(i,s.shape)[0],o),l=p(a.shape),c=[],h=kN({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=kN({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,l/u.batchSize]}});c.push(h),c.push(d);const f=[u.batchSize,u.outerSize,l/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(d),t=Hb(n.bufferSync(h),e,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,t.dtype,t.values)}const m=new JE(h.shape,f),g=n.runWebGLProgram(m,[h,d],h.dtype);c.push(g);const y=kN({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},eT={kernelName:"Greater",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:jb,dtype:"bool"})},tT={kernelName:"GreaterEqual",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"})};const nT={kernelName:"IFFT",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return ME(r,!0,n)}},rT={kernelName:"IsFinite",backendName:"webgl",kernelFunc:dN({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},sT={kernelName:"IsInf",backendName:"webgl",kernelFunc:dN({opSnippet:"return float(isinf(x));",dtype:"bool"})},aT={kernelName:"IsNan",backendName:"webgl",kernelFunc:dN({opSnippet:"return float(isnan(x));",dtype:"bool"})},iT={kernelName:"Less",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Kb,dtype:"bool"})},oT={kernelName:"LessEqual",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"})};const uT={kernelName:"LinSpace",backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=Yb(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},lT={kernelName:"Log",backendName:"webgl",kernelFunc:dN({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Zb})},cT={kernelName:"Log1p",backendName:"webgl",kernelFunc:dN({opSnippet:"return log(1.0 + x);"})},hT={kernelName:"LogicalAnd",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"})},pT={kernelName:"LogicalNot",backendName:"webgl",kernelFunc:dN({opSnippet:"return float(!(x >= 1.0));"})},dT={kernelName:"LogicalOr",backendName:"webgl",kernelFunc:fN({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class fT{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class mT{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const gT={kernelName:"LRN",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r,l=V().getBool("WEBGL_PACK_NORMALIZATION")?new mT(s.shape,a,i,o,u):new fT(s.shape,a,i,o,u);return n.runWebGLProgram(l,[s],s.dtype)}};class yT{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const bT={kernelName:"LRNGrad",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r,h=new yT(s.shape,o,u,l,c);return n.runWebGLProgram(h,[s,a,i],s.dtype)}};function xT(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r,o=s.shape.length,u=x(a,s.shape);let l=u;const c=La(l,o),h=null!=c,d=n.shouldExecuteOnCPU([s]);let f=s;if(h){if(d){const e=n.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=hx(e,s.shape,s.dtype,c,t);f=n.makeTensorInfo(t,s.dtype);n.texData.get(f.dataId).values=r}else f=$N(s,c,n);l=Pa(l.length,o)}Oa("max",l,o);const[m,g]=Fa(f.shape,l);let y,b=m;if(i&&(b=Ma(m,u)),d){const e=Qb(n.texData.get(f.dataId).values,p(g),b,s.dtype);y=n.makeTensorInfo(b,s.dtype);n.texData.get(y.dataId).values=e}else y=function(e,t,n,r){const s=p(t),a=kN({inputs:{x:e},attrs:{shape:[p(e.shape)/s,s]},backend:r}),i=EN(a,e.dtype,"max",r),o=kN({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(f,g,b,n);return h&&n.disposeIntermediateTensorInfo(f),y}const wT={kernelName:"Max",backendName:"webgl",kernelFunc:xT},vT={kernelName:"Maximum",backendName:"webgl",kernelFunc:fN({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:ex})};const kT={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;uI(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=r;u(rs(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=qr(s.shape,a,i,1,o,l);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return oN({inputs:{x:s},backend:n});const h=new rS(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};const IT={kernelName:"MaxPool3D",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=Kr(s.shape,a,i,[1,1,1],o,l,u),h=new sS(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class NT{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=s-1-e.padInfo.top,o=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ST{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=u-1-e.padInfo.top,p=l-1-e.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const ET={kernelName:"MaxPool3DGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=Kr(i.shape,o,u,[1,1,1],l,c),p=new sS(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new ST(h),m=n.runWebGLProgram(f,[s,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const TT={kernelName:"MaxPoolGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;uI([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=qr(o.shape,u,l,1,c,h),d=new rS(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new NT(p),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const CT={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;u(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];u(rs(a,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`));const h=qr(r.shape,s,a,c,i),[p,d]=function(e,t,n,r){let s=new rS(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new rS(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,o,h,l);return[p,d]}};const $T={kernelName:"Mean",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,i=n,o=r.shape.length,u=x(a,r.shape);let l=u;const c=La(l,o),h=null!=c,d=i.shouldExecuteOnCPU([r]),f=[];let m=r;if(h){if(d){const e=i.texData.get(m.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=hx(e,r.shape,r.dtype,c,t);m=i.makeTensorInfo(t,r.dtype);i.texData.get(m.dataId).values=n}else m=$N(r,c,i);f.push(m),l=Pa(l.length,o)}Oa("sum",l,o);const[g,y]=Fa(m.shape,l);let b=g;s&&(b=Ma(g,u));const w=function(e,t,n,r){const s=p(t),a=kN({inputs:{x:e},attrs:{shape:[p(e.shape)/s,s]},backend:r}),i=EN(a,"float32","mean",r),o=kN({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(m,y,b,i);for(const e of f)i.disposeIntermediateTensorInfo(e);return w}};const AT={kernelName:"Min",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=x(a,s.shape);let l=u;const c=La(l,o);let h=s;null!=c&&(h=_N({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Pa(l.length,s.shape.length)),Oa("min",l,o);const[d,f]=Fa(h.shape,l),m=kN({inputs:{x:h},backend:n,attrs:{shape:[-1,p(f)]}}),g=EN(m,m.dtype,"min",n);let y;if(i){y=kN({inputs:{x:g},backend:n,attrs:{shape:Ma(d,u)}})}else y=kN({inputs:{x:g},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(h),y}},RT={kernelName:"Minimum",backendName:"webgl",kernelFunc:fN({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:nx})};class _T{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=WI(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class DT{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=WI(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=jI("rc",r),u=jI("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const FT={kernelName:"MirrorPad",backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new DT(r.shape,s,a):new _T(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}},MT={kernelName:"Mod",backendName:"webgl",kernelFunc:fN({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};class OT{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const LT=fN({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),zT={kernelName:"RealDiv",backendName:"webgl",kernelFunc:LT},PT=fN({opSnippet:"return a - b;",packedOpSnippet:"return a - b;",supportsComplex:!0,cpuKernelImpl:Nx}),BT={kernelName:"Sub",backendName:"webgl",kernelFunc:PT};function WT(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=x([a],s.shape),o=xT({inputs:{x:s},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),u=Ma(o.shape,i),l=kN({inputs:{x:o},backend:n,attrs:{shape:u}}),c=PT({inputs:{a:s,b:l},backend:n}),h=$E({inputs:{x:c},backend:n}),p=AN({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=kN({inputs:{x:p},backend:n,attrs:{shape:u}}),f=LT({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const VT={kernelName:"Softmax",backendName:"webgl",kernelFunc:WT};const UT={kernelName:"Multinomial",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:WT({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[0],c=u.shape[1],h=new OT(l,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[u],"int32",p);return o||n.disposeIntermediateTensorInfo(u),d}};const GT={kernelName:"Neg",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=ux(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=V().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new eN(r.shape,"return -x;"):new QI(r.shape,"return -x;"),n.runWebGLProgram(s,[r],r.dtype)}},HT=Bo;const jT={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:function(e){Ru("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=HT(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},qT=Wo;const KT={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:function(e){Ru("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=qT(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},XT=Vo;const YT={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(e){Ru("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=XT(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class ZT{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const JT={kernelName:"OneHot",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:a,onValue:i,offValue:o}=r,u=p(s.shape),l=new ZT(u,a,i,o),c=kN({inputs:{x:s},backend:n,attrs:{shape:[u]}}),h=n.runWebGLProgram(l,[c],s.dtype);n.disposeIntermediateTensorInfo(c);const d=kN({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,a]}});return n.disposeIntermediateTensorInfo(h),d}};function QT(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=NS({inputs:{input:r},backend:n}),t=QT({inputs:{x:e},backend:n}),s=LS({inputs:{input:r},backend:n}),a=QT({inputs:{x:s},backend:n}),i=lN({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return zE({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const eC={kernelName:"ZerosLike",backendName:"webgl",kernelFunc:QT};const tC={kernelName:"OnesLike",backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=NS({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=LS({inputs:{input:s},backend:r}),i=QT({inputs:{x:a},backend:r}),o=lN({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return zE({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const nC={kernelName:"Pack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return RE({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{l(a,e.shape,"All tensors passed to stack must have matching shapes"),u(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],c=BS({inputs:t.map((e=>{const t=RE({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t})),backend:n,attrs:{axis:s}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class rC{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=WI(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class sC{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=WI(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=jI("rc",r),u=jI("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const aC=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r,o=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sC(s.shape,a,i):new rC(s.shape,a,i);return n.runWebGLProgram(o,[s],s.dtype)},iC={kernelName:"PadV2",backendName:"webgl",kernelFunc:aC},oC={kernelName:"Pow",backendName:"webgl",kernelFunc:fN({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"})};const uC={kernelName:"Prod",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=[],l=x(a,s.shape);let c=l;const h=La(c,o);let d,f=s;if(null!=h&&(f=_N({inputs:{x:s},backend:n,attrs:{perm:h}}),c=Pa(c.length,o),u.push(f)),Oa("prod",c,o),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:r,outDtype:s}=fx(f.shape,f.dtype,e,c);d=n.makeTensorInfo(r,s,t)}else{const[e,t]=Fa(f.shape,c),r=p(t),a=kN({inputs:{x:f},backend:n,attrs:{shape:[-1,r]}}),i=EN(a,qe(s.dtype),"prod",n);d=kN({inputs:{x:i},backend:n,attrs:{shape:e}}),u.push(a),u.push(i)}if(i){u.push(d);const e=Ma(d.shape,l);d=kN({inputs:{x:d},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},lC=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=gx(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},cC={kernelName:"Range",backendName:"webgl",kernelFunc:lC},hC={kernelName:"Reciprocal",backendName:"webgl",kernelFunc:dN({opSnippet:"return 1.0 / x;"})},pC={kernelName:"Relu",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})},dC={kernelName:"Relu6",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"})};class fC{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class mC{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const gC={kernelName:"ResizeBilinear",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=V().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new mC(s.shape,u,l,a,i):new fC(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],"float32")}};class yC{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const bC={kernelName:"ResizeBilinearGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new yC(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class xC{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],h=r?"0.5":"0.0";let p;p=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const wC={kernelName:"ResizeNearestNeighbor",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=new xC(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],s.dtype)}};class vC{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const kC={kernelName:"ResizeNearestNeighborGrad",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new vC(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class IC{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=WI(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class NC{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=jI("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=WI(n);function o(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const SC={kernelName:"Reverse",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,i=s.shape.length,o=x(a,s.shape);if(0===i)return oN({inputs:{x:s},backend:n});const u=V().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new NC(s.shape,o):new IC(s.shape,o);return n.runWebGLProgram(u,[s],s.dtype)}};class EC{constructor(e,t,n,r){this.variableNames=["Image"],this.outputShape=[];const s=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[u,l]=Su(r,s,a),c=u.toFixed(3),h=l.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const TC={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=new EC(r.shape,s,a,i);return o.runWebGLProgram(u,[r],r.dtype)}},CC={kernelName:"Round",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"})},$C={kernelName:"Rsqrt",backendName:"webgl",kernelFunc:dN({opSnippet:"return inversesqrt(x);",cpuKernelImpl:yx})};class AC{constructor(e,t,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=WI(s.length),u=WI(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const RC={kernelName:"ScatterNd",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=ur(0,s,i),p=[h/l,l];if(0===h)return n.makeTensorInfo(i,s.dtype);const d=kN({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),f=kN({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new AC(u,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=kN({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class _C{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=WI(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const DC={kernelName:"Select",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new _C(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,a],je(s.dtype,a.dtype))}},FC={kernelName:"Selu",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n"})},MC={kernelName:"Sigmoid",backendName:"webgl",kernelFunc:dN({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"})},OC={kernelName:"Sign",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},LC={kernelName:"Sin",backendName:"webgl",kernelFunc:dN({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"})},zC={kernelName:"Sinh",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"})},PC={kernelName:"Softplus",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"})},BC={kernelName:"SpaceToBatchND",backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;u(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<s.shape.length;++e)l.push([0,0]);const c=[],h=aC({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),p=Eu(h.shape,a,o,!1),d=Tu(p.length,a.length,!1),f=Cu(h.shape,a,o,!1),m=kN({inputs:{x:h},backend:n,attrs:{shape:p}}),g=_N({inputs:{x:m},backend:n,attrs:{perm:d}}),y=kN({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(h),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const WC={kernelName:"SparseToDense",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,strides:c,outputSize:h}=ur(0,s,o),p=new AC(l,u,s.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,s,i],a.dtype),f=kN({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const VC={kernelName:"SplitV",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=x(i,s.shape)[0],u=Ou(s,a,o),l=s.shape.length,c=new Array(l).fill(0),h=s.shape.slice();return u.map((e=>{const t=[...h];t[i]=e;const r=bS({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,r}))}},UC={kernelName:"Sqrt",backendName:"webgl",kernelFunc:dN({opSnippet:"return sqrt(x);"})},GC={kernelName:"Square",backendName:"webgl",kernelFunc:dN({opSnippet:"return x * x;"})},HC={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:fN({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"})};const jC={kernelName:"Step",backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new QI(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class qC{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=WI(n.length),a=WI(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const KC={kernelName:"StridedSlice",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=r,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=wr(s.shape,a,i,o,u,l,c,h,p),x=kN({inputs:{x:s},backend:n,attrs:{shape:y}});let w;if(d){const e=bS({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=kN({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,s.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=Ix(b,Gn(x.shape,x.dtype,e),m,f);w=n.makeTensorInfo(b,x.dtype,t.values)}else{const e=new qC(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}}const v=kN({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),v}},XC={kernelName:"Tan",backendName:"webgl",kernelFunc:dN({opSnippet:"return tan(x);"})},YC={kernelName:"Tanh",backendName:"webgl",kernelFunc:dN({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"})};class ZC{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=WI(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function JC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype){const e=n.texData.get(s.dataId).values.map((e=>we(e))),t=Tx(Gn(s.shape,s.dtype,e),a);return n.makeTensorInfo(t.shape,t.dtype,t.values)}const i=new ZC(s.shape,a);return n.runWebGLProgram(i,[s],s.dtype)}const QC={kernelName:"Tile",backendName:"webgl",kernelFunc:JC};const e$={kernelName:"TopK",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r,o=n.texData.get(s.dataId).values,[u,l]=Cx(o,s.shape,s.dtype,a);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}};const t$={kernelName:"Unique",backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;uI(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=$x(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}};const n$={kernelName:"Unpack",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],l=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(l[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[a]=e;const t=bS({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),r=kN({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class r${constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const s$=[gT,bT,MN,ON,LN,zN,PN,VN,UN,GN,YN,ZN,JN,QN,tS,eS,nS,iS,aS,lS,cS,hS,fS,wS,vS,ES,TS,AS,DS,cN,WS,JS,QS,qS,tE,nE,eE,rE,sE,iE,cE,hE,dE,xE,wE,gE,kE,NE,SE,EE,TE,CE,AE,_E,DE,OE,PE,WE,VE,UE,jE,KE,XE,ZE,QE,eT,tT,uN,nT,zS,rT,sT,aT,hN,iT,oT,uT,cT,lT,hT,pT,dT,wT,IT,kT,ET,TT,CT,vT,$T,AT,RT,FT,MT,UT,vN,GT,jT,KT,YT,IS,JT,tC,nC,iC,oC,pN,uC,cC,SS,zT,hC,dC,pC,IN,gC,bC,wC,kC,SC,TC,CC,$C,RC,DC,FC,MC,OC,LC,zC,xS,VT,PC,BC,WC,VC,UC,GC,HC,jC,KC,BT,RN,XC,YC,QC,e$,DN,t$,n$,{kernelName:"UnsortedSegmentSum",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r,o=s.shape.length,u=[];let l=0;const c=La([l],o);let h=s;null!=c&&(h=_N({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(h),l=Pa(1,o)[0]);const d=function(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}(h.shape,l,i),f=p([h.shape[l]]),m=kN({inputs:{x:h},backend:n,attrs:{shape:[-1,f]}});u.push(m);const g=qe(s.dtype),y=(e,t,r,s,a)=>{const i=e.shape[0],o=e.shape[1],l=function(e,t){let n,r=!1;for(e<=30?(n=e,r=!0):n=A(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=A(e,n+1);return n}(o,a),c=new r$({windowSize:l,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,r],s);if(u.push(h),h.shape[1]===a)return h;const p=lC({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=JC({inputs:{x:p},backend:n,attrs:{reps:[o/l]}});u.push(p),u.push(d);return y(h,t,d,s,a)},b=kN({inputs:{x:y(m,"unsortedSegmentSum",a,g,i)},backend:n,attrs:{shape:d}});let x=b;if(null!=c){u.push(b);const e=za(c);x=_N({inputs:{x:x},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},eC];for(const e of s$)de(e);const a$=async(e,t)=>{await tt.ready();const n=t.maxFaces,r=await function(e,t){return void 0===e&&(e=lp.mediapipeFacemesh),void 0===t&&(t={}),Ah(this,void 0,void 0,(function(){return Rh(this,(function(n){if(e===lp.mediapipeFacemesh)return[2,sp(t)];throw new Error(e+" is not a valid package name.")}))}))}(lp.mediapipeFacemesh,t);console.log("Loaded TF model",r,"for",n,"people");const s=async(t,a)=>{const i=await(async(e,t)=>{const n=await t.estimateFaces({input:e});if(n.length>0)for(let e=0,t=n.length;e<t;e++){const t=n[e],{boundingBox:r,mesh:s,scaledMesh:a,annotations:i}=t,{leftEyeIris:o,rightEyeIris:u}=i,{leftEyeLower0:l,rightEyeLower0:c,midwayBetweenEyes:h}=i,p=o[0],d=u[0],f=h[0],m=p[2]<d[2],g=l[0][0],y=c[0][0],b=l[0][1],x=c[0][1],w=h[0][0],v=-1*(w-g),k=w-y,{rightCheek:I,leftCheek:N,silhouette:S}=i;t.lookingRight=m;const E=-1*(Math.atan2(v,k)-.75),T=.5-Math.asin(f[1])/Math.PI,C=g-y,$=b-x,A=Math.atan2(C,$)-.5*Math.PI;t.pitch=T,t.roll=A,t.yaw=E;const{lipsUpperInner:R,lipsLowerInner:_}=i,D=R[5],F=_[5],M=F[0]-D[0],O=F[1]-D[1],L=Math.sqrt(M*M+O*O);t.mouthRange=L,t.mouthOpen=1,t.happiness=0}return n})(e,r);if(i.length>0){const e=Math.min(n,i.length),t=[];for(let n=0;n<e;++n){const e=i[n];t.push(e)}a&&a(t)}else a&&a(null);t&&requestAnimationFrame((()=>s(t,a)))};return s},i$=2*Math.PI,o$=(e,t,n)=>e>n?n:e<t?t:e;const u$="accordion-mp3\nacoustic_bass-mp3\nacoustic_grand_piano-mp3\nacoustic_guitar_nylon-mp3\nacoustic_guitar_steel-mp3\nagogo-mp3\nalto_sax-mp3\napplause-mp3\nbagpipe-mp3\nbanjo-mp3\nbaritone_sax-mp3\nbassoon-mp3\nbird_tweet-mp3\nblown_bottle-mp3\nbrass_section-mp3\nbreath_noise-mp3\nbright_acoustic_piano-mp3\ncelesta-mp3\ncello-mp3\nchoir_aahs-mp3\nchurch_organ-mp3\nclarinet-mp3\nclavinet-mp3\ncontrabass-mp3\ndistortion_guitar-mp3\ndrawbar_organ-mp3\ndulcimer-mp3\nelectric_bass_finger-mp3\nelectric_bass_pick-mp3\nelectric_grand_piano-mp3\nelectric_guitar_clean-mp3\nelectric_guitar_jazz-mp3\nelectric_guitar_muted-mp3\nelectric_piano_1-mp3\nelectric_piano_2-mp3\nenglish_horn-mp3\nfiddle-mp3\nflute-mp3\nfrench_horn-mp3\nfretless_bass-mp3\nfx_1_rain-mp3\nfx_2_soundtrack-mp3\nfx_3_crystal-mp3\nfx_4_atmosphere-mp3\nfx_5_brightness-mp3\nfx_6_goblins-mp3\nfx_7_echoes-mp3\nfx_8_scifi-mp3\nglockenspiel-mp3\nguitar_fret_noise-mp3\nguitar_harmonics-mp3\ngunshot-mp3\nharmonica-mp3\nharpsichord-mp3\nhelicopter-mp3\nhonkytonk_piano-mp3\nkalimba-mp3\nkoto-mp3\nlead_1_square-mp3\nlead_2_sawtooth-mp3\nlead_3_calliope-mp3\nlead_4_chiff-mp3\nlead_5_charang-mp3\nlead_6_voice-mp3\nlead_7_fifths-mp3\nlead_8_bass__lead-mp3\nmarimba-mp3\nmelodic_tom-mp3\nmusic_box-mp3\nmuted_trumpet-mp3\noboe-mp3\nocarina-mp3\norchestra_hit-mp3\norchestral_harp-mp3\noverdriven_guitar-mp3\npad_1_new_age-mp3\npad_2_warm-mp3\npad_3_polysynth-mp3\npad_4_choir-mp3\npad_5_bowed-mp3\npad_6_metallic-mp3\npad_7_halo-mp3\npad_8_sweep-mp3\npan_flute-mp3\npercussive_organ-mp3\npiccolo-mp3\npizzicato_strings-mp3\nrecorder-mp3\nreed_organ-mp3\nreverse_cymbal-mp3\nrock_organ-mp3\nseashore-mp3\nshakuhachi-mp3\nshamisen-mp3\nshanai-mp3\nsitar-mp3\nslap_bass_1-mp3\nslap_bass_2-mp3\nsoprano_sax-mp3\nsteel_drums-mp3\nstring_ensemble_1-mp3\nstring_ensemble_2-mp3\nsynth_bass_1-mp3\nsynth_bass_2-mp3\nsynth_brass_1-mp3\nsynth_brass_2-mp3\nsynth_choir-mp3\nsynth_drum-mp3\nsynth_strings_1-mp3\nsynth_strings_2-mp3\ntaiko_drum-mp3\ntango_accordion-mp3\ntelephone_ring-mp3\ntenor_sax-mp3\ntimpani-mp3\ntinkle_bell-mp3\ntremolo_strings-mp3\ntrombone-mp3\ntrumpet-mp3\ntuba-mp3\ntubular_bells-mp3\nvibraphone-mp3\nviola-mp3\nviolin-mp3\nvoice_oohs-mp3\nwhistle-mp3\nwoodblock-mp3\nxylophone-mp3".split("\n"),l$=()=>u$[Math.floor(Math.random()*u$.length)];let c$,h$,p$,d$,f$,m$,g$,y$,b$,x$,w$=0,v$=!1,k$=!1;const I$=()=>{const e=requestAnimationFrame(I$);return y$.getByteFrequencyData(p$),e},N$=()=>{const e=f$.gain.value+.1*(w$-f$.gain.value);f$.gain.setValueAtTime(e,c$.currentTime),f$.gain.value===w$||requestAnimationFrame(N$)};const S$=(e="mp3",t=".")=>{const n=["A","Ab","B","Bb","C","D","Db","E","Eb","F","G","Gb"],r=[];for(let s=0;s<n.length;++s){const a=n[s];"A"===a&&r.push(`A0${t}${e}`);for(let n=1;n<8;++n)r.push(`${a}${n}${t}${e}`);"C"===a&&r.push(`C8${t}${e}`)}return r},E$=S$("",""),T$=(e="alto_sax-mp3",t="./FluidR3_GM")=>{const n=`${t}/${e}`;return S$().map((e=>async function(e){const t=await fetch(e),n=await t.arrayBuffer();return await c$.decodeAudioData(n)}(`${n}/${e}`)))},C$=window.AudioContext||window.webkitAudioContext;let $$=new Worker("timing.requestframe.worker.js"),A$=-1,R$=1,_$=null,D$=!1;const F$=()=>_$.currentTime,M$=e=>{R$=e,$$.postMessage({command:"update",interval:R$,time:F$()})};var O$={};!function(e){function t(){if(t.prototype._singleton)throw new Error("WebMidi is a singleton, it cannot be instantiated directly.");(t.prototype._singleton=this)._inputs=[],this._outputs=[],this._userHandlers={},this._stateChangeQueue=[],this._processingStateChange=!1,this._midiInterfaceEvents=["connected","disconnected"],this._nrpnBuffer=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],this._nrpnEventsEnabled=!0,this._nrpnTypes=["entry","increment","decrement"],this._notes=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],this._semitones={C:0,D:2,E:4,F:5,G:7,A:9,B:11},Object.defineProperties(this,{MIDI_SYSTEM_MESSAGES:{value:{sysex:240,timecode:241,songposition:242,songselect:243,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MESSAGES:{value:{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,channelmode:11,nrpn:11,programchange:12,channelaftertouch:13,pitchbend:14},writable:!1,enumerable:!0,configurable:!1},MIDI_REGISTERED_PARAMETER:{value:{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]},writable:!1,enumerable:!0,configurable:!1},MIDI_CONTROL_CHANGE_MESSAGES:{value:{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101},writable:!1,enumerable:!0,configurable:!1},MIDI_NRPN_MESSAGES:{value:{entrymsb:6,entrylsb:38,increment:96,decrement:97,paramlsb:98,parammsb:99,nullactiveparameter:127},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MODE_MESSAGES:{value:{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127},writable:!1,enumerable:!0,configurable:!1},octaveOffset:{value:0,writable:!0,enumerable:!0,configurable:!1}}),Object.defineProperties(this,{supported:{enumerable:!0,get:function(){return"requestMIDIAccess"in navigator}},enabled:{enumerable:!0,get:function(){return void 0!==this.interface}.bind(this)},inputs:{enumerable:!0,get:function(){return this._inputs}.bind(this)},outputs:{enumerable:!0,get:function(){return this._outputs}.bind(this)},sysexEnabled:{enumerable:!0,get:function(){return!(!this.interface||!this.interface.sysexEnabled)}.bind(this)},nrpnEventsEnabled:{enumerable:!0,get:function(){return!!this._nrpnEventsEnabled}.bind(this),set:function(e){return this._nrpnEventsEnabled=e,this._nrpnEventsEnabled}},nrpnTypes:{enumerable:!0,get:function(){return this._nrpnTypes}.bind(this)},time:{enumerable:!0,get:function(){return performance.now()}}})}var n=new t;function r(e){var t=this;this._userHandlers={channel:{},system:{}},this._midiInput=e,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return t._midiInput.connection}},id:{enumerable:!0,get:function(){return t._midiInput.id}},manufacturer:{enumerable:!0,get:function(){return t._midiInput.manufacturer}},name:{enumerable:!0,get:function(){return t._midiInput.name}},state:{enumerable:!0,get:function(){return t._midiInput.state}},type:{enumerable:!0,get:function(){return t._midiInput.type}}}),this._initializeUserHandlers(),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}function s(e){var t=this;this._midiOutput=e,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return t._midiOutput.connection}},id:{enumerable:!0,get:function(){return t._midiOutput.id}},manufacturer:{enumerable:!0,get:function(){return t._midiOutput.manufacturer}},name:{enumerable:!0,get:function(){return t._midiOutput.name}},state:{enumerable:!0,get:function(){return t._midiOutput.state}},type:{enumerable:!0,get:function(){return t._midiOutput.type}}})}t.prototype.enable=function(e,t){this.enabled||(this.supported?navigator.requestMIDIAccess({sysex:t}).then(function(t){var n,r=[],s=[];this.interface=t,this._resetInterfaceUserHandlers(),this.interface.onstatechange=function(e){r.push(e)};for(var a=t.inputs.values(),i=a.next();i&&!i.done;i=a.next())s.push(i.value.open());for(var o=t.outputs.values(),u=o.next();u&&!u.done;u=o.next())s.push(u.value.open());function l(){clearTimeout(n),this._updateInputsAndOutputs(),this.interface.onstatechange=this._onInterfaceStateChange.bind(this),"function"==typeof e&&e.call(this),r.forEach(function(e){this._onInterfaceStateChange(e)}.bind(this))}n=setTimeout(l.bind(this),200),Promise&&Promise.all(s).catch((function(e){})).then(l.bind(this))}.bind(this),function(t){"function"==typeof e&&e.call(this,t)}.bind(this)):"function"==typeof e&&e(new Error("The Web MIDI API is not supported by your browser.")))},t.prototype.disable=function(){if(!this.supported)throw new Error("The Web MIDI API is not supported by your browser.");this.interface&&(this.interface.onstatechange=void 0),this.interface=void 0,this._inputs=[],this._outputs=[],this._nrpnEventsEnabled=!0,this._resetInterfaceUserHandlers()},t.prototype.addListener=function(e,t){if(!this.enabled)throw new Error("WebMidi must be enabled before adding event listeners.");if("function"!=typeof t)throw new TypeError("The 'listener' parameter must be a function.");if(!(0<=this._midiInterfaceEvents.indexOf(e)))throw new TypeError("The specified event type is not supported.");return this._userHandlers[e].push(t),this},t.prototype.hasListener=function(e,t){if(!this.enabled)throw new Error("WebMidi must be enabled before checking event listeners.");if("function"!=typeof t)throw new TypeError("The 'listener' parameter must be a function.");if(!(0<=this._midiInterfaceEvents.indexOf(e)))throw new TypeError("The specified event type is not supported.");for(var n=0;n<this._userHandlers[e].length;n++)if(this._userHandlers[e][n]===t)return!0;return!1},t.prototype.removeListener=function(e,t){if(!this.enabled)throw new Error("WebMidi must be enabled before removing event listeners.");if(void 0!==t&&"function"!=typeof t)throw new TypeError("The 'listener' parameter must be a function.");if(0<=this._midiInterfaceEvents.indexOf(e))if(t)for(var n=0;n<this._userHandlers[e].length;n++)this._userHandlers[e][n]===t&&this._userHandlers[e].splice(n,1);else this._userHandlers[e]=[];else{if(void 0!==e)throw new TypeError("The specified event type is not supported.");this._resetInterfaceUserHandlers()}return this},t.prototype.toMIDIChannels=function(e){var t;if("all"===e||void 0===e)t=["all"];else{if("none"===e)return[];t=Array.isArray(e)?e:[e]}return-1<t.indexOf("all")&&(t=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]),t.map((function(e){return parseInt(e)})).filter((function(e){return 1<=e&&e<=16}))},t.prototype.getInputById=function(e){if(!this.enabled)throw new Error("WebMidi is not enabled.");e=String(e);for(var t=0;t<this.inputs.length;t++)if(this.inputs[t].id===e)return this.inputs[t];return!1},t.prototype.getOutputById=function(e){if(!this.enabled)throw new Error("WebMidi is not enabled.");e=String(e);for(var t=0;t<this.outputs.length;t++)if(this.outputs[t].id===e)return this.outputs[t];return!1},t.prototype.getInputByName=function(e){if(!this.enabled)throw new Error("WebMidi is not enabled.");for(var t=0;t<this.inputs.length;t++)if(~this.inputs[t].name.indexOf(e))return this.inputs[t];return!1},t.prototype.getOctave=function(e){if(null!=e&&0<=e&&e<=127)return Math.floor(Math.floor(e)/12-1)+Math.floor(n.octaveOffset)},t.prototype.getOutputByName=function(e){if(!this.enabled)throw new Error("WebMidi is not enabled.");for(var t=0;t<this.outputs.length;t++)if(~this.outputs[t].name.indexOf(e))return this.outputs[t];return!1},t.prototype.guessNoteNumber=function(e){var t=!1;if(e&&e.toFixed&&0<=e&&e<=127?t=Math.round(e):0<=parseInt(e)&&parseInt(e)<=127?t=parseInt(e):("string"==typeof e||e instanceof String)&&(t=this.noteNameToNumber(e)),!1===t)throw new Error("Invalid input value ("+e+").");return t},t.prototype.noteNameToNumber=function(e){"string"!=typeof e&&(e="");var t=e.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)/i);if(!t)throw new RangeError("Invalid note name.");var r=n._semitones[t[1].toUpperCase()],s=12*(parseInt(t[3])+1-Math.floor(n.octaveOffset))+r;if(-1<t[2].toLowerCase().indexOf("b")?s-=t[2].length:-1<t[2].toLowerCase().indexOf("#")&&(s+=t[2].length),s<0||127<s)throw new RangeError("Invalid note name or note outside valid range.");return s},t.prototype._updateInputsAndOutputs=function(){this._updateInputs(),this._updateOutputs()},t.prototype._updateInputs=function(){for(var e=0;e<this._inputs.length;e++){for(var t=!0,n=this.interface.inputs.values(),s=n.next();s&&!s.done;s=n.next())if(this._inputs[e]._midiInput===s.value){t=!1;break}t&&this._inputs.splice(e,1)}this.interface&&this.interface.inputs.forEach(function(e){for(var t=!0,n=0;n<this._inputs.length;n++)this._inputs[n]._midiInput===e&&(t=!1);t&&this._inputs.push(new r(e))}.bind(this))},t.prototype._updateOutputs=function(){for(var e=0;e<this._outputs.length;e++){for(var t=!0,n=this.interface.outputs.values(),r=n.next();r&&!r.done;r=n.next())if(this._outputs[e]._midiOutput===r.value){t=!1;break}t&&this._outputs.splice(e,1)}this.interface&&this.interface.outputs.forEach(function(e){for(var t=!0,n=0;n<this._outputs.length;n++)this._outputs[n]._midiOutput===e&&(t=!1);t&&this._outputs.push(new s(e))}.bind(this))},t.prototype._onInterfaceStateChange=function(e){this._updateInputsAndOutputs();var t={timestamp:e.timeStamp,type:e.port.state};this.interface&&"connected"===e.port.state?"output"===e.port.type?t.port=this.getOutputById(e.port.id):"input"===e.port.type&&(t.port=this.getInputById(e.port.id)):t.port={connection:"closed",id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this._userHandlers[e.port.state].forEach((function(e){e(t)}))},t.prototype._resetInterfaceUserHandlers=function(){for(var e=0;e<this._midiInterfaceEvents.length;e++)this._userHandlers[this._midiInterfaceEvents[e]]=[]},r.prototype.on=r.prototype.addListener=function(e,t,r){var s=this;if(void 0===t&&(t="all"),Array.isArray(t)||(t=[t]),t.forEach((function(e){if("all"!==e&&!(1<=e&&e<=16))throw new RangeError("The 'channel' parameter is invalid.")})),"function"!=typeof r)throw new TypeError("The 'listener' parameter must be a function.");if(void 0!==n.MIDI_SYSTEM_MESSAGES[e])this._userHandlers.system[e]||(this._userHandlers.system[e]=[]),this._userHandlers.system[e].push(r);else{if(void 0===n.MIDI_CHANNEL_MESSAGES[e])throw new TypeError("The specified event type is not supported.");if(-1<t.indexOf("all")){t=[];for(var a=1;a<=16;a++)t.push(a)}this._userHandlers.channel[e]||(this._userHandlers.channel[e]=[]),t.forEach((function(t){s._userHandlers.channel[e][t]||(s._userHandlers.channel[e][t]=[]),s._userHandlers.channel[e][t].push(r)}))}return this},r.prototype.hasListener=function(e,t,r){var s=this;if("function"!=typeof r)throw new TypeError("The 'listener' parameter must be a function.");if(void 0===t&&(t="all"),t.constructor!==Array&&(t=[t]),void 0!==n.MIDI_SYSTEM_MESSAGES[e]){for(var a=0;a<this._userHandlers.system[e].length;a++)if(this._userHandlers.system[e][a]===r)return!0}else if(void 0!==n.MIDI_CHANNEL_MESSAGES[e]){if(-1<t.indexOf("all")){t=[];for(var i=1;i<=16;i++)t.push(i)}return!!this._userHandlers.channel[e]&&t.every((function(t){var n=s._userHandlers.channel[e][t];return n&&-1<n.indexOf(r)}))}return!1},r.prototype.removeListener=function(e,t,r){var s=this;if(void 0!==r&&"function"!=typeof r)throw new TypeError("The 'listener' parameter must be a function.");if(void 0===t&&(t="all"),t.constructor!==Array&&(t=[t]),void 0!==n.MIDI_SYSTEM_MESSAGES[e])if(void 0===r)this._userHandlers.system[e]=[];else for(var a=0;a<this._userHandlers.system[e].length;a++)this._userHandlers.system[e][a]===r&&this._userHandlers.system[e].splice(a,1);else if(void 0!==n.MIDI_CHANNEL_MESSAGES[e]){if(-1<t.indexOf("all")){t=[];for(var i=1;i<=16;i++)t.push(i)}if(!this._userHandlers.channel[e])return this;t.forEach((function(t){var n=s._userHandlers.channel[e][t];if(n)if(void 0===r)s._userHandlers.channel[e][t]=[];else for(var a=0;a<n.length;a++)n[a]===r&&n.splice(a,1)}))}else{if(void 0!==e)throw new TypeError("The specified event type is not supported.");this._initializeUserHandlers()}return this},r.prototype._initializeUserHandlers=function(){for(var e in n.MIDI_CHANNEL_MESSAGES)n.MIDI_CHANNEL_MESSAGES.hasOwnProperty(e)&&(this._userHandlers.channel[e]={});for(var t in n.MIDI_SYSTEM_MESSAGES)n.MIDI_SYSTEM_MESSAGES.hasOwnProperty(t)&&(this._userHandlers.system[t]=[])},r.prototype._onMidiMessage=function(e){if(0<this._userHandlers.system.midimessage.length){var t={target:this,data:e.data,timestamp:e.timeStamp,type:"midimessage"};this._userHandlers.system.midimessage.forEach((function(e){e(t)}))}e.data[0]<240?(this._parseChannelEvent(e),this._parseNrpnEvent(e)):e.data[0]<=255&&this._parseSystemEvent(e)},r.prototype._parseNrpnEvent=function(e){var t,r,s=e.data[0]>>4,a=15&e.data[0],i=1+a;if(1<e.data.length&&(t=e.data[1],r=2<e.data.length?e.data[2]:void 0),n.nrpnEventsEnabled&&s===n.MIDI_CHANNEL_MESSAGES.controlchange&&(t>=n.MIDI_NRPN_MESSAGES.increment&&t<=n.MIDI_NRPN_MESSAGES.parammsb||t===n.MIDI_NRPN_MESSAGES.entrymsb||t===n.MIDI_NRPN_MESSAGES.entrylsb)){var o={target:this,type:"controlchange",data:e.data,timestamp:e.timeStamp,channel:i,controller:{number:t,name:this.getCcNameByNumber(t)},value:r};if(o.controller.number===n.MIDI_NRPN_MESSAGES.parammsb&&o.value!=n.MIDI_NRPN_MESSAGES.nullactiveparameter)n._nrpnBuffer[a]=[],n._nrpnBuffer[a][0]=o;else if(1===n._nrpnBuffer[a].length&&o.controller.number===n.MIDI_NRPN_MESSAGES.paramlsb)n._nrpnBuffer[a].push(o);else if(2!==n._nrpnBuffer[a].length||o.controller.number!==n.MIDI_NRPN_MESSAGES.increment&&o.controller.number!==n.MIDI_NRPN_MESSAGES.decrement&&o.controller.number!==n.MIDI_NRPN_MESSAGES.entrymsb)if(3===n._nrpnBuffer[a].length&&n._nrpnBuffer[a][2].number===n.MIDI_NRPN_MESSAGES.entrymsb&&o.controller.number===n.MIDI_NRPN_MESSAGES.entrylsb)n._nrpnBuffer[a].push(o);else if(3<=n._nrpnBuffer[a].length&&n._nrpnBuffer[a].length<=4&&o.controller.number===n.MIDI_NRPN_MESSAGES.parammsb&&o.value===n.MIDI_NRPN_MESSAGES.nullactiveparameter)n._nrpnBuffer[a].push(o);else if(4<=n._nrpnBuffer[a].length&&n._nrpnBuffer[a].length<=5&&o.controller.number===n.MIDI_NRPN_MESSAGES.paramlsb&&o.value===n.MIDI_NRPN_MESSAGES.nullactiveparameter){n._nrpnBuffer[a].push(o);var u=[];n._nrpnBuffer[a].forEach((function(e){u.push(e.data)}));var l=n._nrpnBuffer[a][0].value<<7|n._nrpnBuffer[a][1].value,c=n._nrpnBuffer[a][2].value;6===n._nrpnBuffer[a].length&&(c=n._nrpnBuffer[a][2].value<<7|n._nrpnBuffer[a][3].value);var h="";switch(n._nrpnBuffer[a][2].controller.number){case n.MIDI_NRPN_MESSAGES.entrymsb:h=n._nrpnTypes[0];break;case n.MIDI_NRPN_MESSAGES.increment:h=n._nrpnTypes[1];break;case n.MIDI_NRPN_MESSAGES.decrement:h=n._nrpnTypes[2];break;default:throw new Error("The NPRN type was unidentifiable.")}var p={timestamp:o.timestamp,channel:o.channel,type:"nrpn",data:u,controller:{number:l,type:h,name:"Non-Registered Parameter "+l},value:c};n._nrpnBuffer[a]=[],this._userHandlers.channel[p.type]&&this._userHandlers.channel[p.type][p.channel]&&this._userHandlers.channel[p.type][p.channel].forEach((function(e){e(p)}))}else n._nrpnBuffer[a]=[];else n._nrpnBuffer[a].push(o)}},r.prototype._parseChannelEvent=function(e){var t,r,s=e.data[0]>>4,a=1+(15&e.data[0]);1<e.data.length&&(t=e.data[1],r=2<e.data.length?e.data[2]:void 0);var i={target:this,data:e.data,timestamp:e.timeStamp,channel:a};s===n.MIDI_CHANNEL_MESSAGES.noteoff||s===n.MIDI_CHANNEL_MESSAGES.noteon&&0===r?(i.type="noteoff",i.note={number:t,name:n._notes[t%12],octave:n.getOctave(t)},i.velocity=r/127,i.rawVelocity=r):s===n.MIDI_CHANNEL_MESSAGES.noteon?(i.type="noteon",i.note={number:t,name:n._notes[t%12],octave:n.getOctave(t)},i.velocity=r/127,i.rawVelocity=r):s===n.MIDI_CHANNEL_MESSAGES.keyaftertouch?(i.type="keyaftertouch",i.note={number:t,name:n._notes[t%12],octave:n.getOctave(t)},i.value=r/127):s===n.MIDI_CHANNEL_MESSAGES.controlchange&&0<=t&&t<=119?(i.type="controlchange",i.controller={number:t,name:this.getCcNameByNumber(t)},i.value=r):s===n.MIDI_CHANNEL_MESSAGES.channelmode&&120<=t&&t<=127?(i.type="channelmode",i.controller={number:t,name:this.getChannelModeByNumber(t)},i.value=r):s===n.MIDI_CHANNEL_MESSAGES.programchange?(i.type="programchange",i.value=t):s===n.MIDI_CHANNEL_MESSAGES.channelaftertouch?(i.type="channelaftertouch",i.value=t/127):s===n.MIDI_CHANNEL_MESSAGES.pitchbend?(i.type="pitchbend",i.value=((r<<7)+t-8192)/8192):i.type="unknownchannelmessage",this._userHandlers.channel[i.type]&&this._userHandlers.channel[i.type][a]&&this._userHandlers.channel[i.type][a].forEach((function(e){e(i)}))},r.prototype.getCcNameByNumber=function(e){if(!(0<=(e=Math.floor(e))&&e<=119))throw new RangeError("The control change number must be between 0 and 119.");for(var t in n.MIDI_CONTROL_CHANGE_MESSAGES)if(n.MIDI_CONTROL_CHANGE_MESSAGES.hasOwnProperty(t)&&e===n.MIDI_CONTROL_CHANGE_MESSAGES[t])return t},r.prototype.getChannelModeByNumber=function(e){if(!(120<=(e=Math.floor(e))&&status<=127))throw new RangeError("The control change number must be between 120 and 127.");for(var t in n.MIDI_CHANNEL_MODE_MESSAGES)if(n.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===n.MIDI_CHANNEL_MODE_MESSAGES[t])return t},r.prototype._parseSystemEvent=function(e){var t=e.data[0],r={target:this,data:e.data,timestamp:e.timeStamp};t===n.MIDI_SYSTEM_MESSAGES.sysex?r.type="sysex":t===n.MIDI_SYSTEM_MESSAGES.timecode?r.type="timecode":t===n.MIDI_SYSTEM_MESSAGES.songposition?r.type="songposition":t===n.MIDI_SYSTEM_MESSAGES.songselect?(r.type="songselect",r.song=e.data[1]):t===n.MIDI_SYSTEM_MESSAGES.tuningrequest?r.type="tuningrequest":t===n.MIDI_SYSTEM_MESSAGES.clock?r.type="clock":t===n.MIDI_SYSTEM_MESSAGES.start?r.type="start":t===n.MIDI_SYSTEM_MESSAGES.continue?r.type="continue":t===n.MIDI_SYSTEM_MESSAGES.stop?r.type="stop":t===n.MIDI_SYSTEM_MESSAGES.activesensing?r.type="activesensing":t===n.MIDI_SYSTEM_MESSAGES.reset?r.type="reset":r.type="unknownsystemmessage",this._userHandlers.system[r.type]&&this._userHandlers.system[r.type].forEach((function(e){e(r)}))},s.prototype.send=function(e,t,n){if(!(128<=e&&e<=255))throw new RangeError("The status byte must be an integer between 128 (0x80) and 255 (0xFF).");void 0===t&&(t=[]),Array.isArray(t)||(t=[t]);var r=[];return t.forEach((function(e){var t=Math.floor(e);if(!(0<=t&&t<=255))throw new RangeError("Data bytes must be integers between 0 (0x00) and 255 (0xFF).");r.push(t)})),this._midiOutput.send([e].concat(r),parseFloat(n)||0),this},s.prototype.sendSysex=function(e,t,r){if(!n.sysexEnabled)throw new Error("Sysex message support must first be activated.");return r=r||{},e=[].concat(e),t.forEach((function(e){if(e<0||127<e)throw new RangeError("The data bytes of a sysex message must be integers between 0 (0x00) and 127 (0x7F).")})),t=e.concat(t,n.MIDI_SYSTEM_MESSAGES.sysexend),this.send(n.MIDI_SYSTEM_MESSAGES.sysex,t,this._parseTimeParameter(r.time)),this},s.prototype.sendTimecodeQuarterFrame=function(e,t){return t=t||{},this.send(n.MIDI_SYSTEM_MESSAGES.timecode,e,this._parseTimeParameter(t.time)),this},s.prototype.sendSongPosition=function(e,t){t=t||{};var r=(e=Math.floor(e)||0)>>7&127,s=127&e;return this.send(n.MIDI_SYSTEM_MESSAGES.songposition,[r,s],this._parseTimeParameter(t.time)),this},s.prototype.sendSongSelect=function(e,t){if(t=t||{},!(0<=(e=Math.floor(e))&&e<=127))throw new RangeError("The song number must be between 0 and 127.");return this.send(n.MIDI_SYSTEM_MESSAGES.songselect,[e],this._parseTimeParameter(t.time)),this},s.prototype.sendTuningRequest=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.tuningrequest,void 0,this._parseTimeParameter(e.time)),this},s.prototype.sendClock=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.clock,void 0,this._parseTimeParameter(e.time)),this},s.prototype.sendStart=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.start,void 0,this._parseTimeParameter(e.time)),this},s.prototype.sendContinue=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.continue,void 0,this._parseTimeParameter(e.time)),this},s.prototype.sendStop=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.stop,void 0,this._parseTimeParameter(e.time)),this},s.prototype.sendActiveSensing=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.activesensing,[],this._parseTimeParameter(e.time)),this},s.prototype.sendReset=function(e){return e=e||{},this.send(n.MIDI_SYSTEM_MESSAGES.reset,void 0,this._parseTimeParameter(e.time)),this},s.prototype.stopNote=function(e,t,r){if("all"===e)return this.sendChannelMode("allnotesoff",0,t,r);var s=64;return(r=r||{}).rawVelocity?!isNaN(r.velocity)&&0<=r.velocity&&r.velocity<=127&&(s=r.velocity):!isNaN(r.velocity)&&0<=r.velocity&&r.velocity<=1&&(s=127*r.velocity),this._convertNoteToArray(e).forEach(function(e){n.toMIDIChannels(t).forEach(function(t){this.send((n.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(t-1),[e,Math.round(s)],this._parseTimeParameter(r.time))}.bind(this))}.bind(this)),this},s.prototype.playNote=function(e,t,r){var s,a=64;if((r=r||{}).rawVelocity?!isNaN(r.velocity)&&0<=r.velocity&&r.velocity<=127&&(a=r.velocity):!isNaN(r.velocity)&&0<=r.velocity&&r.velocity<=1&&(a=127*r.velocity),s=this._parseTimeParameter(r.time),this._convertNoteToArray(e).forEach(function(e){n.toMIDIChannels(t).forEach(function(t){this.send((n.MIDI_CHANNEL_MESSAGES.noteon<<4)+(t-1),[e,Math.round(a)],s)}.bind(this))}.bind(this)),!isNaN(r.duration)){r.duration<=0&&(r.duration=0);var i=64;r.rawVelocity?!isNaN(r.release)&&0<=r.release&&r.release<=127&&(i=r.release):!isNaN(r.release)&&0<=r.release&&r.release<=1&&(i=127*r.release),this._convertNoteToArray(e).forEach(function(e){n.toMIDIChannels(t).forEach(function(t){this.send((n.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(t-1),[e,Math.round(i)],(s||n.time)+r.duration)}.bind(this))}.bind(this))}return this},s.prototype.sendKeyAftertouch=function(e,t,r,s){var a=this;if(s=s||{},t<1||16<t)throw new RangeError("The channel must be between 1 and 16.");(isNaN(r)||r<0||1<r)&&(r=.5);var i=Math.round(127*r);return this._convertNoteToArray(e).forEach((function(e){n.toMIDIChannels(t).forEach((function(t){a.send((n.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(t-1),[e,i],a._parseTimeParameter(s.time))}))})),this},s.prototype.sendControlChange=function(e,t,r,s){if(s=s||{},"string"==typeof e){if(void 0===(e=n.MIDI_CONTROL_CHANGE_MESSAGES[e]))throw new TypeError("Invalid controller name.")}else if(!(0<=(e=Math.floor(e))&&e<=119))throw new RangeError("Controller numbers must be between 0 and 119.");if(!(0<=(t=Math.floor(t)||0)&&t<=127))throw new RangeError("Controller value must be between 0 and 127.");return n.toMIDIChannels(r).forEach(function(r){this.send((n.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(r-1),[e,t],this._parseTimeParameter(s.time))}.bind(this)),this},s.prototype._selectRegisteredParameter=function(e,t,r){var s=this;if(e[0]=Math.floor(e[0]),!(0<=e[0]&&e[0]<=127))throw new RangeError("The control65 value must be between 0 and 127");if(e[1]=Math.floor(e[1]),!(0<=e[1]&&e[1]<=127))throw new RangeError("The control64 value must be between 0 and 127");return n.toMIDIChannels(t).forEach((function(){s.sendControlChange(101,e[0],t,{time:r}),s.sendControlChange(100,e[1],t,{time:r})})),this},s.prototype._selectNonRegisteredParameter=function(e,t,r){var s=this;if(e[0]=Math.floor(e[0]),!(0<=e[0]&&e[0]<=127))throw new RangeError("The control63 value must be between 0 and 127");if(e[1]=Math.floor(e[1]),!(0<=e[1]&&e[1]<=127))throw new RangeError("The control62 value must be between 0 and 127");return n.toMIDIChannels(t).forEach((function(){s.sendControlChange(99,e[0],t,{time:r}),s.sendControlChange(98,e[1],t,{time:r})})),this},s.prototype._setCurrentRegisteredParameter=function(e,t,r){var s=this;if((e=[].concat(e))[0]=Math.floor(e[0]),!(0<=e[0]&&e[0]<=127))throw new RangeError("The msb value must be between 0 and 127");return n.toMIDIChannels(t).forEach((function(){s.sendControlChange(6,e[0],t,{time:r})})),e[1]=Math.floor(e[1]),0<=e[1]&&e[1]<=127&&n.toMIDIChannels(t).forEach((function(){s.sendControlChange(38,e[1],t,{time:r})})),this},s.prototype._deselectRegisteredParameter=function(e,t){var r=this;return n.toMIDIChannels(e).forEach((function(){r.sendControlChange(101,127,e,{time:t}),r.sendControlChange(100,127,e,{time:t})})),this},s.prototype.setRegisteredParameter=function(e,t,r,s){var a=this;if(s=s||{},!Array.isArray(e)){if(!n.MIDI_REGISTERED_PARAMETER[e])throw new Error("The specified parameter is not available.");e=n.MIDI_REGISTERED_PARAMETER[e]}return n.toMIDIChannels(r).forEach((function(){a._selectRegisteredParameter(e,r,s.time),a._setCurrentRegisteredParameter(t,r,s.time),a._deselectRegisteredParameter(r,s.time)})),this},s.prototype.setNonRegisteredParameter=function(e,t,r,s){var a=this;if(s=s||{},!(0<=e[0]&&e[0]<=127&&0<=e[1]&&e[1]<=127))throw new Error("Position 0 and 1 of the 2-position parameter array must both be between 0 and 127.");return t=[].concat(t),n.toMIDIChannels(r).forEach((function(){a._selectNonRegisteredParameter(e,r,s.time),a._setCurrentRegisteredParameter(t,r,s.time),a._deselectRegisteredParameter(r,s.time)})),this},s.prototype.incrementRegisteredParameter=function(e,t,r){var s=this;if(r=r||{},!Array.isArray(e)){if(!n.MIDI_REGISTERED_PARAMETER[e])throw new Error("The specified parameter is not available.");e=n.MIDI_REGISTERED_PARAMETER[e]}return n.toMIDIChannels(t).forEach((function(){s._selectRegisteredParameter(e,t,r.time),s.sendControlChange(96,0,t,{time:r.time}),s._deselectRegisteredParameter(t,r.time)})),this},s.prototype.decrementRegisteredParameter=function(e,t,r){if(r=r||{},!Array.isArray(e)){if(!n.MIDI_REGISTERED_PARAMETER[e])throw new TypeError("The specified parameter is not available.");e=n.MIDI_REGISTERED_PARAMETER[e]}return n.toMIDIChannels(t).forEach(function(){this._selectRegisteredParameter(e,t,r.time),this.sendControlChange(97,0,t,{time:r.time}),this._deselectRegisteredParameter(t,r.time)}.bind(this)),this},s.prototype.setPitchBendRange=function(e,t,r,s){var a=this;if(s=s||{},!(0<=(e=Math.floor(e)||0)&&e<=127))throw new RangeError("The semitones value must be between 0 and 127");if(!(0<=(t=Math.floor(t)||0)&&t<=127))throw new RangeError("The cents value must be between 0 and 127");return n.toMIDIChannels(r).forEach((function(){a.setRegisteredParameter("pitchbendrange",[e,t],r,{time:s.time})})),this},s.prototype.setModulationRange=function(e,t,r,s){var a=this;if(s=s||{},!(0<=(e=Math.floor(e)||0)&&e<=127))throw new RangeError("The semitones value must be between 0 and 127");if(!(0<=(t=Math.floor(t)||0)&&t<=127))throw new RangeError("The cents value must be between 0 and 127");return n.toMIDIChannels(r).forEach((function(){a.setRegisteredParameter("modulationrange",[e,t],r,{time:s.time})})),this},s.prototype.setMasterTuning=function(e,t,r){var s=this;if(r=r||{},(e=parseFloat(e)||0)<=-65||64<=e)throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");var a=Math.floor(e)+64,i=e-Math.floor(e),o=(i=Math.round((i+1)/2*16383))>>7&127,u=127&i;return n.toMIDIChannels(t).forEach((function(){s.setRegisteredParameter("channelcoarsetuning",a,t,{time:r.time}),s.setRegisteredParameter("channelfinetuning",[o,u],t,{time:r.time})})),this},s.prototype.setTuningProgram=function(e,t,r){var s=this;if(r=r||{},!(0<=(e=Math.floor(e))&&e<=127))throw new RangeError("The program value must be between 0 and 127");return n.toMIDIChannels(t).forEach((function(){s.setRegisteredParameter("tuningprogram",e,t,{time:r.time})})),this},s.prototype.setTuningBank=function(e,t,r){var s=this;if(r=r||{},!(0<=(e=Math.floor(e)||0)&&e<=127))throw new RangeError("The bank value must be between 0 and 127");return n.toMIDIChannels(t).forEach((function(){s.setRegisteredParameter("tuningbank",e,t,{time:r.time})})),this},s.prototype.sendChannelMode=function(e,t,r,s){if(s=s||{},"string"==typeof e){if(!(e=n.MIDI_CHANNEL_MODE_MESSAGES[e]))throw new TypeError("Invalid channel mode message name.")}else if(!(120<=(e=Math.floor(e))&&e<=127))throw new RangeError("Channel mode numerical identifiers must be between 120 and 127.");if((t=Math.floor(t)||0)<0||127<t)throw new RangeError("Value must be an integer between 0 and 127.");return n.toMIDIChannels(r).forEach(function(r){this.send((n.MIDI_CHANNEL_MESSAGES.channelmode<<4)+(r-1),[e,t],this._parseTimeParameter(s.time))}.bind(this)),this},s.prototype.sendProgramChange=function(e,t,r){var s=this;if(r=r||{},e=Math.floor(e),isNaN(e)||e<0||127<e)throw new RangeError("Program numbers must be between 0 and 127.");return n.toMIDIChannels(t).forEach((function(t){s.send((n.MIDI_CHANNEL_MESSAGES.programchange<<4)+(t-1),[e],s._parseTimeParameter(r.time))})),this},s.prototype.sendChannelAftertouch=function(e,t,r){var s=this;r=r||{},e=parseFloat(e),(isNaN(e)||e<0||1<e)&&(e=.5);var a=Math.round(127*e);return n.toMIDIChannels(t).forEach((function(e){s.send((n.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(e-1),[a],s._parseTimeParameter(r.time))})),this},s.prototype.sendPitchBend=function(e,t,r){var s=this;if(r=r||{},isNaN(e)||e<-1||1<e)throw new RangeError("Pitch bend value must be between -1 and 1.");var a=Math.round((e+1)/2*16383),i=a>>7&127,o=127&a;return n.toMIDIChannels(t).forEach((function(e){s.send((n.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(e-1),[o,i],s._parseTimeParameter(r.time))})),this},s.prototype._parseTimeParameter=function(e){var t,r=parseFloat(e);return"string"==typeof e&&"+"===e.substring(0,1)?r&&0<r&&(t=n.time+r):r>n.time&&(t=r),t},s.prototype._convertNoteToArray=function(e){var t=[];return Array.isArray(e)||(e=[e]),e.forEach((function(e){t.push(n.guessNoteNumber(e))})),t},O$?O$=n:e.WebMidi||(e.WebMidi=n)}(O$);var L$,z$=(L$=O$)&&L$.__esModule?L$.default:L$;const P$={dots:"red",mouth:"rgba(255,0,0,0.5)",lipsUpperInner:"pink",lipsLowerInner:"pink",midwayBetweenEyes:"blue",leftEyeLower0:"red",rightEyeLower0:"red",leftEyeIris:"yellow",rightEyeIris:"yellow"};const B$=async e=>async function(e){return new Promise((async(t,n)=>{let r;(e=e||document.createElement("video")).onloadedmetadata=n=>{e.play(),e.width=e.videoWidth,e.height=e.videoHeight,console.log("Video camera",e),t(r)},e.onerror=e=>n(r);try{r=await navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user"}}),e.srcObject=r}catch(e){n(e)}}))}(e);const W$=async e=>async function(e){return new Promise((async(t,n)=>{const r=()=>{e.width=e.naturalWidth,e.height=e.naturalHeight};e.naturalWidth>0?(r(),t(e)):(e.onloaded=()=>{r(),t(e)},e.onerror=e=>n(e))}))}(e),V$=document.querySelector("canvas"),U$=V$.getContext("2d");let G$=V$.width,H$=V$.height;U$.save();const j$=(e,t="blue")=>{U$.fillStyle=t;const n=e[0],r=e[1],s=e[2],a=e[3],i=e[4];U$.strokeWidth=0;U$.beginPath(),U$.fillStyle="blue",U$.arcTo(s[0],s[1],r[0],r[1],6),U$.arcTo(r[0],r[1],i[0],i[1],6),U$.arcTo(i[0],i[1],a[0],a[1],6),U$.arcTo(a[0],a[1],s[0],s[1],6),U$.fill();U$.beginPath(),U$.fillStyle="black",U$.arc(n[0],n[1],2,0,i$),U$.fill()},q$=function(e){return e*e},K$=(e,t=P$)=>{const{scaledMesh:n,annotations:r}=e,{lipsUpperInner:s,lipsLowerInner:a}=r;((e,t="yellow")=>{const{annotations:n,mouthRange:r,mouthOpen:s}=e,{lipsUpperInner:a,lipsLowerInner:i}=n,o=[a,i],u=a[5],l=i[5],c=U$.createLinearGradient(0,0,0,r);c.addColorStop(0,t),c.addColorStop(.5,"black"),c.addColorStop(1,t),U$.beginPath(),U$.moveTo(a[0][0],a[0][1]),U$.fillStyle=c;for(let e=0,t=o.length;e<t;e++){const t=o[e];for(let e=0,n=t.length;e<n;e++){const n=t[e][0],r=t[e][1];U$.lineTo(n,r)}}U$.fill(),U$.fillStyle="blue",U$.beginPath(),U$.arc(u[0],u[1],5,0,i$),U$.fill(),U$.beginPath(),U$.arc(l[0],l[1],5,0,i$),U$.fill(),U$.beginPath(),U$.moveTo(u[0],u[1]),U$.strokeStyle="orange",U$.fillStyle="orange",U$.lineTo(l[0],l[1]),U$.stroke(),U$.font="12px Oxanium",U$.textAlign="center",U$.fillText(`${Math.floor(r)}px`,l[0],l[1]-20)})(e,t.mouth);const{leftEyeIris:i,rightEyeIris:o}=r;j$(i,t.leftEyeIris),j$(o,t.rightEyeIris);const{leftEyeLower0:u,rightEyeLower0:l,midwayBetweenEyes:c}=r},X$=e=>{U$.fillStyle="hsla("+(e?180:90)+", 80%,50%, 0.5)",U$.strokeWidth=10,U$.font="32px Oxanium",U$.textAlign="right",U$.fillText("Quantise",10,10),U$.strokeRect(0,0,G$,H$)},Y$={...P$,LIPS_RANGE:40,delayTime:.14,delayLength:50,feedback:.1,ease:e=>e};class Z${constructor(e,t,n,r={}){this.options=Object.assign({},Y$,r),this.name=e,this.counter=0,this.instrumentLoading=!1,this.data=null,this.audioContext=t,this.active=!1,this.tracks=0,this.stereoNode=t.createStereoPanner();const s=t.createDelay(this.options.delayLength),a=t.createGain();s.delayTime.value=this.options.delayTime,a.gain.value=this.options.feedback,this.gainNode=t.createGain(),this.gainNode.gain.value=0,this.stereoNode.connect(this.gainNode),this.stereoNode.connect(s),s.connect(a),a.connect(s),s.connect(this.gainNode),this.gainNode.connect(n),this.button=document.getElementById(e),this.button.addEventListener("click",(e=>{this.instrumentLoading||this.loadInstrument(l$()),e.preventDefault()})),this.button.addEventListener("mouseover",(e=>{this.isMouseOver=!0})),this.button.addEventListener("mouseout",(e=>{this.isMouseOver=!1})),console.log("Created new person",this,"connecting to",n)}get instrumentName(){return this.instrument?this.instrument.title:"loading"}update(e){this.counter++,this.data=e}draw(e){if(!e&&!this.prediction)return;e||(e=this.prediction);let t=90;this.instrumentLoading&&(t+=120),this.options.dots=t,this.options.mouth=`hsla(${(t+30)%360},70%,50%,0.5)`,this.options.lipsUpperInner=`hsla(${(t+50)%360},70%,50%,1)`,this.options.lipsLowerInner=`hsla(${(t+50)%360},70%,50%,1)`,this.options.midwayBetweenEyes=`hsla(${(t+270)%360},70%,50%,1)`,this.options.leftEyeLower0=`hsla(${(t+300)%360},70%,50%,0.8)`,this.options.rightEyeLower0=`hsla(${(t+300)%360},70%,50%,0.8)`,this.options.leftEyeIris=`hsla(${(t+90)%360},70%,50%,1)`,this.options.rightEyeIris=`hsla(${(t+90)%360},70%,50%,1)`,((e,t=60,n=3)=>{const{scaledMesh:r}=e;for(let e=0;e<r.length;e++){const s=r[e][0],a=r[e][1],i=1-(r[e][2]+45)/45,o=o$(n*q$(i),1,n),u=o$(i,.5,1);U$.beginPath(),U$.fillStyle=`hsla(${t},70%,50%,${u})`,U$.arc(s,a,o,0,i$),U$.fill()}})(e,this.options.dots),K$(e,this.options);const{bottomRight:n,topLeft:r}=e.boundingBox,s=n[0]-r[0],a=n[1]-r[1];if(this.counter%10==0&&(this.button.style.setProperty("--person-a-x",`${r[0]}`),this.button.style.setProperty("--person-a-y",r[1]),this.button.style.setProperty("--person-a-w",s),this.button.style.setProperty("--person-a-h",a)),this.isMouseOver||this.instrumentLoading){const{silhouette:n}=e.annotations;((e,t=4,n="red",r=!0)=>{U$.fillStyle=n,U$.strokeStyle=n,U$.moveTo(e[0][0],e[0][1]),U$.beginPath();for(let n=0,s=e.length;n<s;n++){const s=e[n][0],a=e[n][1];U$.arc(s,a,t,0,i$),r&&U$.lineTo(s,a)}U$.fill(),r&&U$.stroke()})(n,4,"hsla("+t+",50%,50%,0.3)",!0)}}sing(){if(!this.data||this.tracks>8)return;const e=this.data,t=o$(e.mouthRange/this.options.LIPS_RANGE,0,1),n=e.yaw,r=e.pitch,s=(e.roll+1)/2,a=o$(t,0,1),i=this.options.ease(a);if(this.stereoNode.pan.value=o$(n,-1,1),this.instrument&&a>.3){this.gainNode.gain.value=i;const e=Math.floor(s*(E$.length-1)),t=E$[e],n=this.instrument[t];this.active=!0,this.tracks++;((e,t=0,n=m$,r={loop:!1})=>new Promise(((s,a)=>{const i=c$.createBufferSource();i.buffer=e,i.loop=r.loop,i.connect(n),i.onended=()=>{i.disconnect(),k$=!1,s()},i.onerror=e=>{i.disconnect(),k$=!1,a(e)},"suspended"===c$.state&&c$.resume(),0==t?i.start():i.start(0,c$.currentTime-t),k$=!0})))(n,0,this.stereoNode).then((()=>{this.active=!1,this.tracks--}));this.midi&&this.midiChannel&&this.midi.playNote(t,this.midiChannel,{velocity:a})}else this.gainNode.gain.value=0;return{yaw:n,pitch:r,lipPercentage:t}}async loadInstrument(e){this.instrumentLoading=!0,this.instrument=await(async(e="alto_sax-mp3",t="./FluidR3_GM",n)=>{const r={title:e},s=await Promise.all(T$(e,t));return E$.forEach(((e,t)=>{r[e.split(".")[0]]=s[t]})),r})(e),this.instrumentLoading=!1}setMIDI(e,t="all"){this.midiChannel=t,this.midi=e}}const J$=document.documentElement,Q$=document.querySelector("main"),eA=document.querySelector("video"),tA=document.querySelector("img"),nA=document.getElementById("feedback"),rA=(document.getElementById("button-instrument"),document.getElementById("button-video")),sA=[];let aA,iA,oA,uA,lA,cA,hA=eA,pA=16,dA=()=>2403/pA;const fA={metronome:!0,backingTrack:!1};function mA(e,t){let n;return(...r)=>{clearTimeout(n),n=setTimeout((()=>e(...r)),t)}}let gA=null;const yA=(e,t=200)=>{mA((()=>{toast.innerHTML=e}),t)()},bA=(e,t=200)=>{gA!=e&&mA((()=>{nA.innerHTML=e,gA=e}),t)()},xA=async()=>{bA("Changing all instruments");for(let e in sA){const t=l$(),n=sA[e];await n.loadInstrument(t),bA(`${t} loaded!`)}return sA.map((e=>e.instrument))},wA=e=>{if(null==sA[e]){const t=new Z$("person-"+["a","b","c"][e],c$,oA,{dots:"green",leftEyeIris:"blue",rightEyeIris:"blue"});return t.loadInstrument(l$()),uA&&uA.outputs&&uA.outputs.length>0&&t.setMIDI(uA.outputs[0]),sA.push(t),t}return sA[e]};J$.classList.add("loading"),bA("Initialising...<br> Please wait");const vA=async()=>{uA=await new Promise(((e,t)=>{z$.enable((n=>{if(n)return console.log("WebMidi could not be enabled.",n),void t("no MIDI");console.log("WebMidi enabled!"),console.log(z$.inputs),console.log(z$.outputs),e(z$)}))})),bA("MIDI Available<br>Stand By",0),uA.addListener("connected",(e=>{if(console.log(e),bA("MIDI Device connected!"),uA.outputs.length>0){wA(0).setMIDI(uA.outputs[0])}})),uA.addListener("disconnected",(e=>{console.log(e),bA("Lost MIDI Device connection")}))};var kA;kA=Object.assign({},{maxFaces:1,shouldLoadIrisModel:!0},{maxFaces:1}),a$(hA,kA).then((async e=>{try{bA("Attempting to locate camera..."),aA=await B$(eA),bA("Camera located!",0),Q$.style.setProperty("--width",eA.width),Q$.style.setProperty("--height",eA.height),t=eA.width,n=eA.height,G$=t||V$.width,H$=n||V$.height,console.error("Updated canvas size to",{w:t,h:n},V$.width,V$.height),iA=await W$(tA),bA("Image downloaded...<br> Please wait"),c$=new(window.AudioContext||window.webkitAudioContext),f$=c$.createGain(),f$.gain.value=0,d$=c$.createOscillator(),d$.type="sine",b$=c$.createDynamicsCompressor(),b$.threshold.value=-50,b$.knee.value=40,b$.ratio.value=12,b$.attack.value=0,b$.release.value=.5,x$=c$.createConvolver(),m$=c$.createDelay(5),g$=c$.createGain(),m$.delayTime.value=0,g$.gain.value=.3,y$=c$.createAnalyser(),y$.minDecibels=-90,y$.maxDecibels=-10,y$.smoothingTimeConstant=.85,y$.fftSize=2048,h$=y$.fftSize,y$.fftSize=256,h$=y$.frequencyBinCount,p$=new Uint8Array(h$),d$.frequency.value=261.63,d$.connect(m$),m$.connect(g$),g$.connect(m$),m$.connect(f$),f$.connect(b$),b$.connect(y$),y$.connect(c$.destination),oA=m$,bA("Audio Available...<br>Instrument undefined Sounds downloaded",0);const e=await xA();bA(e+" Samples available...<br>Instrument Sounds downloaded"),lA=(()=>{const e=c$.createOscillator(),t=c$.createOscillator(),n=c$.createGain(),r=c$.createGain();return e.type="triangle",t.type="sine",e.connect(n),t.connect(r),n.connect(f$),r.connect(f$),(s=.01,a=.5)=>{n.gain.setValueAtTime(1,c$.currentTime),n.gain.exponentialRampToValueAtTime(s,c$.currentTime+a),r.gain.setValueAtTime(1,c$.currentTime),r.gain.exponentialRampToValueAtTime(s,c$.currentTime+a),e.frequency.setValueAtTime(120,c$.currentTime),e.frequency.exponentialRampToValueAtTime(s,c$.currentTime+a),t.frequency.setValueAtTime(50,c$.currentTime),t.frequency.exponentialRampToValueAtTime(s,c$.currentTime+a);try{e.start(c$.currentTime),t.start(c$.currentTime)}catch(e){}}})(),cA=(()=>{const e=c$.createOscillator(),t=c$.createGain(),n=c$.createGain();e.type="triangle",e.frequency.value=100,t.gain.value=0,e.connect(t),t.connect(f$);const r=c$.createBufferSource(),s=c$.createBuffer(1,4096,c$.sampleRate),a=s.getChannelData(0),i=c$.createBiquadFilter();i.type="highpass";for(var o=0;o<4096;o++)a[o]=Math.random();return r.buffer=s,r.loop=!0,r.connect(i),i.connect(n),n.connect(f$),()=>{const s=c$.currentTime;n.gain.cancelScheduledValues(s),n.gain.setValueAtTime(1,s),n.gain.exponentialRampToValueAtTime(1e-12,s+.2);try{e.start(s),r.start(s),t.gain.setValueAtTime(0,s),t.gain.exponentialRampToValueAtTime(.01,s+.1),i.frequency.setValueAtTime(100,s),i.frequency.linearRampToValueAtTime(1e3,s+.2)}catch(e){}}})()}catch(e){console.error("Bummer",e),bA("Something went wrong :(<br>"+e)}var t,n;try{await(async()=>{const e=async()=>{console.log("User input detected so enabling MIDI!"),await vA(),rA.documentElement.removeEventListener("mousedown",e)};rA.addEventListener("click",e)})(),Q$.classList.add("midi")}catch(e){console.log("no MIDI!"),Q$.classList.add("no-midi")}V$.width=hA.width,V$.height=hA.height,Q$.classList.add(hA.nodeName.toLowerCase()),bA("Open your mouth to begin!");let r=0;w$=1,N$(),(()=>{const e=`<select>${u$.map((e=>`<option value="${e}">${e}</option>`)).join("")}</select>`;document.documentElement.appendChild(document.createDocumentFragment(e))})();let s=0;const a=((e,t=200)=>(null===_$&&(_$=new C$,"suspended"===_$.state&&_$.resume()),R$=t,$$.onmessage=n=>{const r=F$(),s=n.data;switch(s.event){case"starting":const a=s.time;A$=r,D$=!0,console.log("EVENT_STARTING",{time:a,startTime:A$});break;case"tick":const i=s.intervals,o=i*t*.001,u=r-A$,l=s.time,c=l%t*.001,h=l-u,p=Math.floor(l/t);e&&e({timePassed:l,elapsed:u,expected:o,drift:h,level:p,intervals:i,lag:c});break;default:console.log("message: ",n)}},$$.onerror=e=>{console.error("error...",{error:e}),$$.postMessage({error:e,time:_$.currentTime})},$$.postMessage({command:"start",time:_$.currentTime,interval:t}),console.log("Starting...",{audioContext:_$,interval:t,timingWorker:$$}),{currentTime:F$(),timingWorker:$$,mode:"requestframe"}))((({timePassed:e,elapsed:t,expected:n,drift:r,level:a,intervals:i,lag:o})=>{s++,fA.metronome&&(wA(0).sing(),X$(!0)),fA.backingTrack&&(s%4==0&&lA(),(s+2)%4!=0&&s%8!=0||cA())}),dA());console.log("timer",a),e(hA===eA,(e=>{let t="";if(r++,U$.drawImage(hA,0,0),((e,t)=>{const n=G$/t*2;let r,s=0;for(var a=0;a<t;a++)r=e[a],U$.fillStyle="hsla("+r/H$*360+",50%,50%,0.8)",U$.fillRect(s,H$-r,n,r),s+=n+1})(p$,h$),fA.metronome&&X$(),e){const n=0,r=e[n],s=wA(n);if(!(r&&r.faceInViewConfidence>.9))return v$&&(v$=!1,d$.disconnect()),bA("I need to see your face!"),void Q$.classList.toggle("active",!1);Q$.classList.toggle("active",!0),!v$&&("suspended"===c$.state&&c$.resume(),d$.connect(m$),v$=!0,I$()),s.update(r),s.draw(r),fA.metronome||s.sing(),t+=`<br>PITCH:${Math.ceil(360*r.pitch)} ROLL:${Math.ceil(360*r.roll)} YAW:${180*r.yaw} MOUTH:${Math.ceil(100*r.mouthRange/Y$.LIPS_RANGE)}% - ${s.instrumentName}`}e?r<50?bA("Smile to begin!"):r<150?bA("Look at the screen and open your mouth!"):r<250?bA("Click your face to change instruments!"):r>1e4?bA("OMG I can't believe you are still here!"):t.length?bA(t):bA("Look at me and open your mouth"):bA("No faces found!")})),J$.classList.remove("loading")})),V$.addEventListener("mousedown",xA),eA.addEventListener("mousedown",xA),window.addEventListener("keydown",(e=>{switch(e.key){case"ArrowLeft":(async()=>{const e=sA[0];if(e){const t=u$.indexOf(e.instrumentName),n=t-1<0?0:t-1;await e.loadInstrument(u$[n]),bA(`${u$[n]} loaded!`),yA(`${u$[n]}`)}})();break;case"ArrowRight":(async()=>{const e=sA[0];if(e){const t=u$.indexOf(e.instrumentName),n=t+1>=u$.length?0:t+1;await e.loadInstrument(u$[n]),bA(`${u$[n]} loaded!`),yA(`${u$[n]}`)}})();break;case"ArrowUp":pA=++pA>32?32:pA,M$(dA()),bA(`Bars ${pA}`,0);break;case"ArrowDown":pA=--pA<1?1:pA,M$(dA()),bA(`Bars ${pA}`,0);break;case"w":cA();break;case"a":lA();break;case"s":cA();break;case"d":lA();break;default:fA.metronome=!fA.metronome,bA(fA.metronome?"Quantised enabled":"Quantise disabled")}console.log("key",fA,e)}));
//# sourceMappingURL=index.e029c7c0.js.map
