{"mappings":"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","sources":["./source/update.js","./node_modules/@parcel/runtime-js/lib/JSRuntime.js"],"sourcesContent":["\r\nconst formatBytes = (bytes, decimals = 2) => {\r\n\tconst SIZES = ['Bytes', 'KB', 'MB', 'GB'];\r\n\t\r\n\tif (bytes === 0)\r\n\t{\r\n\t\treturn '0 '+SIZES[0];\r\n\t} \r\n\t\r\n\tconst k = 1024;\r\n\tconst dm = decimals < 0 ? 0 : decimals;\r\n\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + SIZES[i];\r\n}\r\n\r\nexport const updater = async (sw='service-worker.js') => new Promise( (resolve,reject) => {\r\n\t\r\n\tlet storageUsed = 0\r\n\tlet reg\r\n\r\n\t// The actual install script!\r\n\t// NB. exported by wrapper\r\n\tconst installUpdate = () => {\r\n\t\treg.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\t// Use the window load event to keep the page load performant\r\n\tconst checkUpdates = async () => {\r\n\t\t\t\r\n\t\treg = await navigator.serviceWorker.register('service-worker.js');// sw\r\n\t\tconst worker = reg.installing;\r\n\t\r\n\t\tif (worker && navigator.storage) \r\n\t\t{\r\n\t\t\tconst storageData = await navigator.storage.estimate();\r\n\t\t\tif (storageData) \r\n\t\t\t{\r\n\t\t\t\tstorageUsed = formatBytes(storageData.usage);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treg.onupdatefound = async () => {\r\n\t\t\tconst newWorker = reg.installing;\r\n\t\t\tnewWorker.onstatechange = async () => {\r\n\t\t\t\tif (newWorker.state === 'installed') \r\n\t\t\t\t{\r\n\t\t\t\t\tif (navigator.serviceWorker) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst registeredWorker = await navigator.serviceWorker.getRegistration();\r\n\t\t\t\t\t\tif (registeredWorker && registeredWorker.waiting) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// show update icon!\r\n\t\t\t\t\t\t\tresolve(installUpdate);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treject(\"No Service Worker\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// not instaLLed\r\n\t\t\t\t\treject(\"Not Installed\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Check that service workers are supported\r\n\tif ('serviceWorker' in navigator) \r\n\t{\r\n\t\t// hook into load event if we haven't loaded yet\r\n\t\tif (document.readyState === 'complete')\r\n\t\t{\r\n\t\t\tcheckUpdates()\r\n\t\t}else{\r\n\t\t\twindow.addEventListener( 'load', checkUpdates,{once:true} )\r\n\t\t}\r\n\r\n\t}else{\r\n\t\treject(\"Service Workers not allowed\");\r\n\t}\r\n})\r\n\r\n\r\n\r\n\r\n// \r\nexport const updateApp = async (sw='service-worker.js') => {\r\n\ttry{\r\n\t\tconst update = await updater(sw);\r\n\t\treturn {\r\n\t\t\tupdater:update,\r\n\t\t\tupdateAvailable:true\r\n\t\t}\r\n\r\n\t}catch(error){\r\n\r\n\t\t// no updates or app not installed etc\r\n\t\tconsole.log(error)\r\n\r\n\t\treturn false\r\n\t}\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _plugin = require(\"@parcel/plugin\");\n\nvar _utils = require(\"@parcel/utils\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _nullthrows = _interopRequireDefault(require(\"nullthrows\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n};\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n}\n\nvar _default = new _plugin.Runtime({\n  apply({\n    bundle,\n    bundleGraph,\n    options\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveExternalDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        // If this bundle already has the asset this dependency references,\n        // return a simple runtime of `Promise.resolve(require(\"path/to/asset\"))`.\n        assets.push({\n          filePath: _path.default.join(options.projectRoot, 'JSRuntime.js'),\n          // Using Promise['resolve'] to prevent Parcel from inferring this is an async dependency.\n          // TODO: Find a better way of doing this.\n          code: `module.exports = Promise['resolve'](require(${JSON.stringify('./' + _path.default.relative(options.projectRoot, resolved.value.filePath))}))`,\n          dependency\n        });\n      } else {\n        assets.push(...getLoaderRuntimes({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value\n        }));\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      let resolved = bundleGraph.resolveExternalDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows.default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let main = b.getMainEntry();\n        return main && bundleGroup.entryAssetId === main.id;\n      }));\n\n      if (mainBundle.isInline) {\n        assets.push({\n          filePath: _path.default.join(__dirname, `/bundles/${mainBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle));\n    }\n\n    if (shouldUseRuntimeManifest(bundle) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getLoaderRuntimes({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph\n}) {\n  let assets = []; // Sort so the bundles containing the entry asset appear last\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline).sort(bundle => bundle.getEntryAssets().map(asset => asset.id).includes(bundleGroup.entryAssetId) ? 1 : -1); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary) {\n    externalBundles = externalBundles.slice(-1);\n  }\n\n  let loaders = getLoaders(bundle.env); // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = loaders ? externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows.default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    return `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n  }).filter(Boolean) : [];\n\n  if (loaderModules.length > 0) {\n    let loaders = loaderModules.join(', ');\n\n    if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n      loaders = `Promise.all([${loaders}])`;\n\n      if (bundle.env.outputFormat !== 'global') {\n        loaders += `.then(r => r[r.length - 1])`;\n      }\n    } else {\n      loaders = `(${loaders})`;\n    }\n\n    if (bundle.env.outputFormat === 'global') {\n      loaders += `.then(() => parcelRequire('${bundleGroup.entryAssetId}')${// In global output with scope hoisting, functions return exports are\n      // always returned. Otherwise, the exports are returned.\n      bundle.env.scopeHoist ? '()' : ''})`;\n    }\n\n    assets.push({\n      filePath: __filename,\n      code: `module.exports = ${loaders};`,\n      dependency\n    });\n  }\n\n  return assets;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  return bundle.isEntry || bundleGraph.getParentBundles(bundle).some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to) {\n  let relativePathExpr = getRelativePathExpr(from, to);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[getPublicBundleId(bundle)] = (0, _nullthrows.default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to) {\n  if (shouldUseRuntimeManifest(from)) {\n    return `require('./relative-path')(${JSON.stringify(getPublicBundleId(from))}, ${JSON.stringify(getPublicBundleId(to))})`;\n  }\n\n  return JSON.stringify((0, _utils.relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser();\n}\n\nfunction getPublicBundleId(bundle) {\n  return bundle.id.slice(-16);\n}"],"names":["formatBytes","bytes","decimals","arguments","length","undefined","SIZES","k","dm","i","Math","floor","log","parseFloat","pow","toFixed","updater","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee4","_args4","wrap","_context4","prev","next","abrupt","Promise","resolve","reject","reg","installUpdate","waiting","postMessage","type","window","location","reload","checkUpdates","_ref2","_callee3","storageData","_context3","navigator","serviceWorker","register","require","sent","installing","storage","estimate","usage","onupdatefound","_callee2","newWorker","_context2","onstatechange","_callee","registeredWorker","_context","state","getRegistration","stop","apply","this","document","readyState","addEventListener","once","updateApp","_ref5","_callee5","sw","update","_args5","_context5","updateAvailable","t0","console","module","exports","getBundleURL"],"version":3,"file":"update.a630c8f4.js.map"}