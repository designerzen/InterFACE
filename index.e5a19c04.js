!function(){function t(t,e,n){Object.defineProperty(t,e,{get:n,enumerable:!0})}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={};class r{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class s{time(t){return a("time")}read(t){return a("read")}readSync(t){return a("readSync")}numDataIds(){return a("numDataIds")}disposeData(t){return a("disposeData")}write(t,e,n){return a("write")}move(t,e,n,r){return a("move")}memory(){return a("memory")}floatPrecision(){return a("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return a("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:i,preluActivationWeights:o}){return a("fusedBatchMatMul")}slice(t,e,n){return a("slice")}stridedSlice(t,e,n,r){return a("stridedSlice")}unstack(t,e){return a("unstack")}reverse(t,e){return a("reverse")}concat(t,e){return a("concat")}neg(t){return a("neg")}add(t,e){return a("add")}addN(t){return a("addN")}subtract(t,e){return a("subtract")}multiply(t,e){return a("multiply")}realDivide(t,e){return a("realDivide")}floorDiv(t,e){return a("floorDiv")}sum(t,e){return a("sum")}prod(t,e){return a("prod")}unsortedSegmentSum(t,e,n){return a("unsortedSegmentSum")}argMin(t,e){return a("argMin")}argMax(t,e){return a("argMax")}equal(t,e){return a("equal")}notEqual(t,e){return a("notEqual")}less(t,e){return a("less")}lessEqual(t,e){return a("lessEqual")}greater(t,e){return a("greater")}greaterEqual(t,e){return a("greaterEqual")}logicalNot(t){return a("logicalNot")}logicalAnd(t,e){return a("logicalAnd")}logicalOr(t,e){return a("logicalOr")}where(t){return a("where")}select(t,e,n){return a("select")}topk(t,e,n){return a("topk")}min(t,e){return a("min")}minimum(t,e){return a("minimum")}mod(t,e){return a("mod")}max(t,e){return a("max")}maximum(t,e){return a("maximum")}all(t,e){return a("all")}any(t,e){return a("any")}squaredDifference(t,e){return a("squaredDifference")}ceil(t){return a("ceil")}floor(t){return a("floor")}round(t){return a("round")}sign(t){return a("sign")}isNaN(t){return a("isNaN")}isInf(t){return a("isInf")}isFinite(t){return a("isFinite")}pow(t,e){return a("pow")}exp(t){return a("exp")}expm1(t){return a("expm1")}softmax(t,e){return a("softmax")}log(t){return a("log")}log1p(t){return a("log1p")}sqrt(t){return a("sqrt")}rsqrt(t){return a("rsqrt")}square(t){return a("square")}reciprocal(t){return a("reciprocal")}relu(t){return a("relu")}relu6(t){return a("relu6")}prelu(t,e){return a("prelu")}elu(t){return a("elu")}eluDer(t,e){return a("eluDer")}selu(t){return a("selu")}int(t){return a("int")}clip(t,e,n){return a("clip")}abs(t){return a("abs")}complexAbs(t){return a("complexAbs")}sigmoid(t){return a("sigmoid")}softplus(t){return a("softplus")}sin(t){return a("sin")}cos(t){return a("cos")}tan(t){return a("tan")}asin(t){return a("asin")}acos(t){return a("acos")}atan(t){return a("atan")}atan2(t,e){return a("atan2")}sinh(t){return a("sinh")}cosh(t){return a("cosh")}tanh(t){return a("tanh")}asinh(t){return a("asinh")}acosh(t){return a("acosh")}atanh(t){return a("atanh")}erf(t){return a("erf")}step(t,e){return a("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:i}){return a("fusedConv2d")}conv2d(t,e,n){return a("conv2d")}conv2dDerInput(t,e,n){return a("conv2dDerInput")}conv2dDerFilter(t,e,n){return a("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:i}){return a("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return a("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return a("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return a("depthwiseConv2DDerFilter")}conv3d(t,e,n){return a("conv3d")}conv3dDerInput(t,e,n){return a("conv3dDerInput")}conv3dDerFilter(t,e,n){return a("conv3dDerFilter")}maxPool(t,e){return a("maxPool")}maxPoolBackprop(t,e,n,r){return a("maxPoolBackprop")}avgPool(t,e){return a("avgPool")}avgPoolBackprop(t,e,n){return a("avgPoolBackprop")}avgPool3d(t,e){return a("avgPool3d")}avgPool3dBackprop(t,e,n){return a("avgPool3dBackprop")}maxPool3d(t,e){return a("maxPool3d")}maxPool3dBackprop(t,e,n,r){return a("maxPool3dBackprop")}reshape(t,e){return a("reshape")}cast(t,e){return a("cast")}tile(t,e){return a("tile")}pad(t,e,n){return a("pad")}transpose(t,e){return a("transpose")}gather(t,e,n){return a("gather")}gatherND(t,e){return a("gatherND")}scatterND(t,e,n){return a("scatterND")}batchToSpaceND(t,e,n){return a("batchToSpaceND")}spaceToBatchND(t,e,n){return a("spaceToBatchND")}resizeBilinear(t,e,n,r){return a("resizeBilinear")}resizeBilinearBackprop(t,e,n){return a("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return a("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return a("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,s,i){return a("batchNorm")}localResponseNormalization4D(t,e,n,r,s){return a("localResponseNormalization4D")}LRNGrad(t,e,n,r,s,i,o){return a("LRNGrad")}multinomial(t,e,n,r){return a("multinomial")}oneHot(t,e,n,r){return a("oneHot")}cumsum(t,e,n,r){return a("cumsum")}nonMaxSuppression(t,e,n,r,s){return a("nonMaxSuppression")}fft(t){return a("fft")}ifft(t){return a("ifft")}complex(t,e){return a("complex")}real(t){return a("real")}imag(t){return a("imag")}cropAndResize(t,e,n,r,s,i){return a("cropAndResize")}depthToSpace(t,e,n){return a("depthToSpace")}split(t,e,n){return a("split")}sparseToDense(t,e,n,r){return a("sparseToDense")}diag(t){return a("diag")}fill(t,e,n){return a("fill")}onesLike(t){return a("onesLike")}zerosLike(t){return a("zerosLike")}linspace(t,e,n){return a("linspace")}dispose(){return a("dispose")}}function a(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function i(t){let e=t.length,n=0,r=0;for(;e>0;)r=Math.random()*e|0,e--,n=t[e],t[e]=t[r],t[r]=n}function o(t,e,n){return Math.max(t,Math.min(e,n))}function u(t){return t%2==0?t:t+1}function l(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function c(t,e,n=""){l(f(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function h(t){l(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function p(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||$(t)&&!n)for(let r=0;r<t.length;++r)p(t[r],e,n);else e.push(t);return e}function d(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function f(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function m(t){return t%1==0}function g(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function y(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function b(t,e=(t=>0),n){return new Promise(((r,s)=>{let a=0;const i=()=>{if(t())return void r();a++;const o=e(a);null!=n&&a>=n?s():setTimeout(i,o)};i()}))}function x(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function w(t,e){const n=e.length;return l((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),l(t.every((t=>m(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function v(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:w(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function k(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error(`Unknown data type ${t}`);n=new Uint8Array(e)}return n}function N(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}function I(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function $(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function C(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function S(t){return"string"==typeof t||t instanceof String}function T(t){return"number"==typeof t}function E(t){return Array.isArray(t)?E(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":T(t)?"float32":S(t)?"string":"boolean"==typeof t?"bool":"float32"}function A(t){return!!(t&&t.constructor&&t.call&&t.apply)}function R(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function D(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function _(t,e,n){const r=new Array;if(1===e.length){const s=e[0];for(let e=0;e<s;e++)r[e]=n[t+e]}else{const s=e[0],a=e.slice(1),i=a.reduce(((t,e)=>t*e));for(let e=0;e<s;e++)r[e]=_(t+e*i,a,n)}return r}function F(t,e){if(0===t.length)return e[0];const n=t.reduce(((t,e)=>t*e));if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return _(0,t,e)}function O(t,e){const n=M(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function M(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function L(t,e){const n=t.reduce(((t,e)=>t*e),1);if(null==e||"float32"===e)return F(t,new Float32Array(n));if("int32"===e)return F(t,new Int32Array(n));if("bool"===e)return F(t,new Uint8Array(n));throw new Error(`Unknown data type ${e}`)}function z(t){t.forEach((e=>{l(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function B(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function P(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}function W(t){return t&&t.then&&"function"==typeof t.then}const V="tfjsflags";class U{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(W(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}(this.global.location.search);if(V in t){t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}}function G(){return H}let H=null;var j,q,K={},X=K={};function Y(){throw new Error("setTimeout has not been defined")}function J(){throw new Error("clearTimeout has not been defined")}function Z(t){if(j===setTimeout)return setTimeout(t,0);if((j===Y||!j)&&setTimeout)return j=setTimeout,setTimeout(t,0);try{return j(t,0)}catch(e){try{return j.call(null,t,0)}catch(e){return j.call(this,t,0)}}}!function(){try{j="function"==typeof setTimeout?setTimeout:Y}catch(t){j=Y}try{q="function"==typeof clearTimeout?clearTimeout:J}catch(t){q=J}}();var Q,tt=[],et=!1,nt=-1;function rt(){et&&Q&&(et=!1,Q.length?tt=Q.concat(tt):nt=-1,tt.length&&st())}function st(){if(!et){var t=Z(rt);et=!0;for(var e=tt.length;e;){for(Q=tt,tt=[];++nt<e;)Q&&Q[nt].run();nt=-1,e=tt.length}Q=null,et=!1,function(t){if(q===clearTimeout)return clearTimeout(t);if((q===J||!q)&&clearTimeout)return q=clearTimeout,clearTimeout(t);try{q(t)}catch(e){try{return q.call(null,t)}catch(e){return q.call(this,t)}}}(t)}}function at(t,e){this.fun=t,this.array=e}function it(){}let ot;function ut(){if(null==ot){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==K)t=K;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}ot=t}return ot}function lt(t,e){const n=function(){const t=ut();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}X.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];tt.push(new at(t,e)),1!==tt.length||et||Z(st)},at.prototype.run=function(){this.fun.apply(null,this.array)},X.title="browser",X.browser=!0,X.env={},X.argv=[],X.version="",X.versions={},X.on=it,X.addListener=it,X.once=it,X.off=it,X.removeListener=it,X.removeAllListeners=it,X.emit=it,X.prependListener=it,X.prependOnceListener=it,X.listeners=function(t){return[]},X.binding=function(t){throw new Error("process.binding is not supported")},X.cwd=function(){return"/"},X.chdir=function(t){throw new Error("process.chdir is not supported")},X.umask=function(){return 0};const ct="Abs",ht="Acos",pt="Acosh",dt="Add",ft="AddN",mt="ArgMax",gt="ArgMin",yt="Asin",bt="Asinh",xt="Atan",wt="Atanh",vt="Atan2",kt="AvgPool",Nt="AvgPoolBackprop",It="AvgPool3D",$t="BatchMatMul",Ct="BatchToSpaceND",St="BroadcastTo",Tt="Cast",Et="Ceil",At="ClipByValue",Rt="Complex",Dt="Concat",_t="Conv2D",Ft="Conv2DBackpropFilter",Ot="Conv2DBackpropInput",Mt="Conv3D",Lt="Conv3DBackpropFilterV2",zt="Conv3DBackpropInputV2",Bt="Cos",Pt="Cosh",Wt="Cumsum",Vt="DepthwiseConv2dNative",Ut="DepthwiseConv2dNativeBackpropFilter",Gt="DepthwiseConv2dNativeBackpropInput",Ht="Dilation2D",jt="Dilation2DBackpropInput",qt="Dilation2DBackpropFilter",Kt="Div",Xt="Elu",Yt="Erf",Jt="Exp",Zt="Expm1",Qt="FFT",te="Fill",ee="FlipLeftRight",ne="Floor",re="FloorDiv",se="FusedBatchNorm",ae="GatherV2",ie="GreaterEqual",oe="Identity",ue="IFFT",le="Imag",ce="IsFinite",he="IsInf",pe="IsNan",de="Log",fe="Log1p",me="LogicalNot",ge="LogSoftmax",ye="Max",be="Maximum",xe="MaxPool",we="MaxPoolBackprop",ve="MaxPool3D",ke="MaxPoolWithArgmax",Ne="Mean",Ie="Minimum",$e="MirrorPad",Ce="Multiply",Se="Negate",Te="NotEqual",Ee="NonMaxSuppressionV3",Ae="NonMaxSuppressionV4",Re="NonMaxSuppressionV5",De="OnesLike",_e="OneHot",Fe="PadV2",Oe="Prelu",Me="Real",Le="Reciprocal",ze="Relu",Be="Reshape",Pe="ResizeNearestNeighbor",We="ResizeBilinear",Ve="Relu6",Ue="Reverse",Ge="Round",He="Rsqrt",je="SelectV2",qe="Selu",Ke="Slice",Xe="Sin",Ye="Sinh",Je="Sign",Ze="Sigmoid",Qe="Softplus",tn="Sqrt",en="SpaceToBatchND",nn="SplitV",rn="Softmax",sn="SquaredDifference",an="Square",on="Sub",un="Tan",ln="Tanh",cn="Tile",hn="Transpose",pn="Unique",dn="Unpack",fn="UnsortedSegmentSum",mn="ZerosLike",gn="Step",yn="FromPixels",bn="RotateWithOffset",xn="_FusedMatMul",wn="FusedConv2D",vn="FusedDepthwiseConv2D",kn=lt("kernelRegistry",(()=>new Map)),Nn=lt("gradRegistry",(()=>new Map));function In(t,e){const n=En(t,e);return kn.get(n)}function $n(t){return Nn.get(t)}function Cn(t){const e=kn.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===t&&n.push(i)}return n}function Sn(t){const{kernelName:e,backendName:n}=t,r=En(e,n);kn.has(r)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),kn.set(r,t)}function Tn(t){const{kernelName:e}=t;Nn.has(e)&&G().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),Nn.set(e,t)}function En(t,e){return`${e}_${t}`}function An(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=p(t)),G().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error(`Unknown data type ${e}`)}function Rn(){return G().platform.now()}function Dn(t,e="utf-8"){return e=e||"utf-8",G().platform.encode(t,e)}function _n(t,e="utf-8"){return e=e||"utf-8",G().platform.decode(t,e)}class Fn{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new Mn)}profileKernel(t,e,n){let r;const s=this.backendTimer.time((()=>{r=n()}));for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{On(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:s.then((t=>t.kernelMs)),extraInfo:s.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach((t=>{Promise.all([t.data(),r,a]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function On(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Mn{logKernelProfile(t,e,n,r,s,a){const i="number"==typeof r?y(`${r}ms`,9):r.error,o=y(t,25),u=e.rank,l=e.size,c=y(e.shape.toString(),14);let h="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;h+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ln(t,e,n,r){const s=D(e),a=function(t,e,n,r){const s=d(e),a=r[r.length-1],i=new Array(a).fill(0),o=e.length,u="complex64"===n?Wn(t):t;if(o>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],zn(u[e+t],0,n).length)}return i}(t,e,n,s),i=e.length,o=Pn(t,e,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(o.map((t=>"    "+t)).join("\n")),u.join("\n")}function zn(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:S(t)?`'${t}'`:"bool"===n?Bn(t):parseFloat(t.toFixed(7)).toString(),y(r,e)}function Bn(t){return 0===t?"false":"true"}function Pn(t,e,n,r,s,a=!0){const i="complex64"===n?2:1,o=e[0],u=e.length;if(0===u){if("complex64"===n){return[zn(Wn(t)[0],0,n)]}return"bool"===n?[Bn(t[0])]:[t[0].toString()]}if(1===u){if(o>20){const e=3*i;let r=Array.from(t.slice(0,e)),a=Array.from(t.slice((o-3)*i,o*i));return"complex64"===n&&(r=Wn(r),a=Wn(a)),["["+r.map(((t,e)=>zn(t,s[e],n))).join(", ")+", ..., "+a.map(((t,e)=>zn(t,s[o-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?Wn(t):Array.from(t)).map(((t,e)=>zn(t,s[e],n))).join(", ")+"]"]}const l=e.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let e=0;e<3;e++){const r=e*h,a=r+h;p.push(...Pn(t.slice(r,a),l,n,c,s,!1))}p.push("...");for(let e=o-3;e<o;e++){const r=e*h,a=r+h;p.push(...Pn(t.slice(r,a),l,n,c,s,e===o-1))}}else for(let e=0;e<o;e++){const r=e*h,a=r+h;p.push(...Pn(t.slice(r,a),l,n,c,s,e===o-1))}const d=2===u?",":"";p[0]="["+p[0]+d;for(let t=1;t<p.length-1;t++)p[t]=" "+p[t]+d;let f=",\n";for(let t=2;t<u;t++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Wn(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class Vn{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=d(t),null!=n){const t=n.length;l(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||N(e,this.size),this.strides=D(t)}set(t,...e){0===e.length&&(e=[0]),l(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Un().makeTensor(this.values,this.shape,this.dtype)}}let Un=null,Gn=null,Hn=null;class jn{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=d(t),this.strides=D(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return Gn.buffer(this.shape,this.dtype,t)}bufferSync(){return Gn.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return F(this.shape,t)}arraySync(){return F(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=Un().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>_n(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=Un().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>_n(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await Un().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Un().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Gn.print(this,t)}clone(){return this.throwIfDisposed(),Gn.clone(this)}toString(t=!1){return Ln(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Gn.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Un().makeVariable(this,t,e,n)}}Object.defineProperty(jn,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class qn extends jn{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!f(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Un().disposeTensor(this),this.dataId=t.dataId,Un().incRef(this,null)}dispose(){Un().disposeVariable(this),this.isDisposedInternal=!0}}var Kn,Xn,Yn,Jn,Zn,Qn,tr,er,nr,rr;Object.defineProperty(qn,Symbol.hasInstance,{value:t=>t instanceof jn&&null!=t.assign&&t.assign instanceof Function}),(Xn=Kn||(Kn={})).R0="R0",Xn.R1="R1",Xn.R2="R2",Xn.R3="R3",Xn.R4="R4",Xn.R5="R5",Xn.R6="R6",(Jn=Yn||(Yn={})).float32="float32",Jn.int32="int32",Jn.bool="int32",Jn.complex64="complex64",(Qn=Zn||(Zn={})).float32="float32",Qn.int32="int32",Qn.bool="bool",Qn.complex64="complex64",(er=tr||(tr={})).float32="float32",er.int32="float32",er.bool="float32",er.complex64="complex64",(rr=nr||(nr={})).float32="complex64",rr.int32="complex64",rr.bool="complex64",rr.complex64="complex64";const sr={float32:tr,int32:Yn,bool:Zn,complex64:nr};function ar(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return sr[t][e]}function ir(t){return ar(t,"int32")}function or(t,e){if(t.dtype===e.dtype)return[t,e];const n=ar(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function ur(t,e){return e.some((e=>e.id===t.id))}function lr(t){const e=[];return cr(t,e,new Set),e}function cr(t,e,n){if(null==t)return;if(t instanceof jn)return void e.push(t);if(r=t,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),cr(r,e,n))}}class hr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class pr{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new hr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Fn(this.backendInstance),!0}setupRegisteredKernels(){Cn(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){Cn(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof s||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,s,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return pr.nextTensorId++}nextVariableId(){return pr.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e="float32",n={x:t},r={dtype:e};return fr.runKernelFunc((n=>n.cast(t,e)),n,null,Tt,r)}})),[],{}),e}runKernel(t,e,n,r,s){return this.runKernelFunc(null,e,null,t,n,r,s)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+="complex64"===t.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,r,s,a,i){let o,u=[];const l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=In(r,this.backendName);let f,m;if(null!=d)p=()=>{const t=this.backend.numDataIds();f=d.kernelFunc({inputs:e,attrs:s,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,t,n);const o=n.map((({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n)));if(l){let t=this.getTensorsForGradient(r,e,o);if(null==t){null==i&&(i=[]);const e=o.filter(((t,e)=>i[e]));t=(a||[]).slice().concat(e)}u=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{l&&(u=t.map((t=>this.keep(this.clone(t)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>t(this.backend,e)));const s=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(r,n,s),s}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(r,e,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),l&&this.addTapeNode(r,e,o,n,u,s),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((t=>null!=e[t]?e[t].shape:null)),outputShapes:o.map((t=>t.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=$n(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(l(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(e).map((t=>e[t]))):a=t.map((t=>e[t]));const i=n.filter(((t,e)=>s[e]));return a.concat(i)}return null}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&S(t[0])&&(s=t.map((t=>Dn(t))));const a=r.write(s,e,n),i=new jn(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){const t=this.state.tensorInfo.get(a),e=function(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,r){const s=new jn(e,n=n||"float32",t,this.nextTensorId());return this.incRef(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new qn(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*C(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof qn||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=$n(t);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=M(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=lr(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(l(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));l(s instanceof jn,(()=>"The result y returned by f() must be a tensor."));const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach((t=>r[t.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[s.id]=null==n?function(t){const e=O(d(t),"float32");return fr.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],i=[];if(a.outputs.forEach((e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const e in a.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[e]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[e];if(!f(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=s;else{const e=t[i.id];t[i.id]=r(e,s),e.dispose()}}}}(t,a,(t=>this.tidy(t)),mr);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return l(A(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;l(e.every((t=>t instanceof jn)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};return e.forEach(((t,e)=>{r[e]=t})),this.runKernelFunc(((r,s)=>(n=t(...e,s),l(n.value instanceof jn,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),l(A(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),r,((t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];l(a.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),l(a.every((t=>t instanceof jn)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((t,e)=>{i[e]=()=>t})),i}))}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Rn(),n=await this.backend.time(t);return n.wallMs=Rn()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new hr;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function dr(){const t=ut();if(null==t._tfengine){const e=new U(t);t._tfengine=new pr(e)}var e;return e=t._tfengine.ENV,H=e,Un=()=>t._tfengine,t._tfengine}pr.nextTensorId=0,pr.nextVariableId=0;const fr=dr();function mr(t,e){const n={a:t,b:e};return fr.runKernelFunc(((n,r)=>{const s=n.add(t,e);return r([t,e]),s}),n,null,dt)}function gr(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function yr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const br=G();br.registerFlag("DEBUG",(()=>!1),(t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),br.registerFlag("IS_BROWSER",(()=>yr())),br.registerFlag("IS_NODE",(()=>void 0!==K&&void 0!==K.versions&&void 0!==K.versions.node)),br.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),br.registerFlag("PROD",(()=>!1)),br.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>br.getBool("DEBUG"))),br.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),br.registerFlag("IS_TEST",(()=>!1));for(var xr=function(t){var e,n,r=function(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");-1===n&&(n=e);return[n,n===e?0:4-n%4]}(t),s=r[0],a=r[1],i=new Nr(function(t,e,n){return 3*(e+n)/4-n}(0,s,a)),o=0,u=a>0?s-4:s;for(n=0;n<u;n+=4)e=kr[t.charCodeAt(n)]<<18|kr[t.charCodeAt(n+1)]<<12|kr[t.charCodeAt(n+2)]<<6|kr[t.charCodeAt(n+3)],i[o++]=e>>16&255,i[o++]=e>>8&255,i[o++]=255&e;2===a&&(e=kr[t.charCodeAt(n)]<<2|kr[t.charCodeAt(n+1)]>>4,i[o++]=255&e);1===a&&(e=kr[t.charCodeAt(n)]<<10|kr[t.charCodeAt(n+1)]<<4|kr[t.charCodeAt(n+2)]>>2,i[o++]=e>>8&255,i[o++]=255&e);return i},wr=function(t){for(var e,n=t.length,r=n%3,s=[],a=16383,i=0,o=n-r;i<o;i+=a)s.push(Sr(t,i,i+a>o?o:i+a));1===r?(e=t[n-1],s.push(vr[e>>2]+vr[e<<4&63]+"==")):2===r&&(e=(t[n-2]<<8)+t[n-1],s.push(vr[e>>10]+vr[e>>4&63]+vr[e<<2&63]+"="));return s.join("")},vr=[],kr=[],Nr="undefined"!=typeof Uint8Array?Uint8Array:Array,Ir="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",$r=0,Cr=Ir.length;$r<Cr;++$r)vr[$r]=Ir[$r],kr[Ir.charCodeAt($r)]=$r;function Sr(t,e,n){for(var r,s,a=[],i=e;i<n;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),a.push(vr[(s=r)>>18&63]+vr[s>>12&63]+vr[s>>6&63]+vr[63&s]);return a.join("")}kr["-".charCodeAt(0)]=62,kr["_".charCodeAt(0)]=63;var Tr=function(t,e,n,r,s){var a,i,o=8*s-r-1,u=(1<<o)-1,l=u>>1,c=-7,h=n?s-1:0,p=n?-1:1,d=t[e+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+t[e+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=r;c>0;i=256*i+t[e+h],h+=p,c-=8);if(0===a)a=1-l;else{if(a===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,r),a-=l}return(d?-1:1)*i*Math.pow(2,a-r)},Er=function(t,e,n,r,s,a){var i,o,u,l=8*a-s-1,c=(1<<l)-1,h=c>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(o=isNaN(e)?1:0,i=c):(i=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-i))<1&&(i--,u*=2),(e+=i+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(e*u-1)*Math.pow(2,s),i+=h):(o=e*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;t[n+d]=255&o,d+=f,o/=256,s-=8);for(i=i<<s|o,l+=s;l>0;t[n+d]=255&i,d+=f,i/=256,l-=8);t[n+d-f]|=128*m},Ar="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null,Rr=Fr,Dr=2147483647;function _r(t){if(t>Dr)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,Fr.prototype),e}function Fr(t,e,n){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return Lr(t)}return Or(t,e,n)}function Or(t,e,n){if("string"==typeof t)return function(t,e){"string"==typeof e&&""!==e||(e="utf8");if(!Fr.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var n=0|Wr(t,e),r=_r(n),s=r.write(t,e);s!==n&&(r=r.slice(0,s));return r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(ds(t,Uint8Array)){var e=new Uint8Array(t);return Br(e.buffer,e.byteOffset,e.byteLength)}return zr(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(ds(t,ArrayBuffer)||t&&ds(t.buffer,ArrayBuffer))return Br(t,e,n);if("undefined"!=typeof SharedArrayBuffer&&(ds(t,SharedArrayBuffer)||t&&ds(t.buffer,SharedArrayBuffer)))return Br(t,e,n);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return Fr.from(r,e,n);var s=function(t){if(Fr.isBuffer(t)){var e=0|Pr(t.length),n=_r(e);return 0===n.length||t.copy(n,0,0,e),n}if(void 0!==t.length)return"number"!=typeof t.length||fs(t.length)?_r(0):zr(t);if("Buffer"===t.type&&Array.isArray(t.data))return zr(t.data)}(t);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return Fr.from(t[Symbol.toPrimitive]("string"),e,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function Mr(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function Lr(t){return Mr(t),_r(t<0?0:0|Pr(t))}function zr(t){for(var e=t.length<0?0:0|Pr(t.length),n=_r(e),r=0;r<e;r+=1)n[r]=255&t[r];return n}function Br(t,e,n){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r;return r=void 0===e&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,e):new Uint8Array(t,e,n),Object.setPrototypeOf(r,Fr.prototype),r}function Pr(t){if(t>=Dr)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Dr.toString(16)+" bytes");return 0|t}function Wr(t,e){if(Fr.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||ds(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var n=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;for(var s=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return cs(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return hs(t).length;default:if(s)return r?-1:cs(t).length;e=(""+e).toLowerCase(),s=!0}}function Vr(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return ns(this,e,n);case"utf8":case"utf-8":return Zr(this,e,n);case"ascii":return ts(this,e,n);case"latin1":case"binary":return es(this,e,n);case"base64":return Jr(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return rs(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function Ur(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function Gr(t,e,n,r,s){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),fs(n=+n)&&(n=s?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(s)return-1;n=t.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof e&&(e=Fr.from(e,r)),Fr.isBuffer(e))return 0===e.length?-1:Hr(t,e,n,r,s);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):Hr(t,[e],n,r,s);throw new TypeError("val must be string, number or Buffer")}function Hr(t,e,n,r,s){var a,i=1,o=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;i=2,o/=2,u/=2,n/=2}function l(t,e){return 1===i?t[e]:t.readUInt16BE(e*i)}if(s){var c=-1;for(a=n;a<o;a++)if(l(t,a)===l(e,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===u)return c*i}else-1!==c&&(a-=a-c),c=-1}else for(n+u>o&&(n=o-u),a=n;a>=0;a--){for(var h=!0,p=0;p<u;p++)if(l(t,a+p)!==l(e,p)){h=!1;break}if(h)return a}return-1}function jr(t,e,n,r){n=Number(n)||0;var s=t.length-n;r?(r=Number(r))>s&&(r=s):r=s;var a=e.length;r>a/2&&(r=a/2);for(var i=0;i<r;++i){var o=parseInt(e.substr(2*i,2),16);if(fs(o))return i;t[n+i]=o}return i}function qr(t,e,n,r){return ps(cs(e,t.length-n),t,n,r)}function Kr(t,e,n,r){return ps(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function Xr(t,e,n,r){return ps(hs(e),t,n,r)}function Yr(t,e,n,r){return ps(function(t,e){for(var n,r,s,a=[],i=0;i<t.length&&!((e-=2)<0);++i)r=(n=t.charCodeAt(i))>>8,s=n%256,a.push(s),a.push(r);return a}(e,t.length-n),t,n,r)}function Jr(t,e,n){return 0===e&&n===t.length?wr(t):wr(t.slice(e,n))}function Zr(t,e,n){n=Math.min(t.length,n);for(var r=[],s=e;s<n;){var a,i,o,u,l=t[s],c=null,h=l>239?4:l>223?3:l>191?2:1;if(s+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(a=t[s+1]))&&(u=(31&l)<<6|63&a)>127&&(c=u);break;case 3:a=t[s+1],i=t[s+2],128==(192&a)&&128==(192&i)&&(u=(15&l)<<12|(63&a)<<6|63&i)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:a=t[s+1],i=t[s+2],o=t[s+3],128==(192&a)&&128==(192&i)&&128==(192&o)&&(u=(15&l)<<18|(63&a)<<12|(63&i)<<6|63&o)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),s+=h}return function(t){var e=t.length;if(e<=Qr)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=Qr));return n}(r)}Fr.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),Fr.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Fr.prototype,"parent",{enumerable:!0,get:function(){if(Fr.isBuffer(this))return this.buffer}}),Object.defineProperty(Fr.prototype,"offset",{enumerable:!0,get:function(){if(Fr.isBuffer(this))return this.byteOffset}}),Fr.poolSize=8192,Fr.from=function(t,e,n){return Or(t,e,n)},Object.setPrototypeOf(Fr.prototype,Uint8Array.prototype),Object.setPrototypeOf(Fr,Uint8Array),Fr.alloc=function(t,e,n){return function(t,e,n){return Mr(t),t<=0?_r(t):void 0!==e?"string"==typeof n?_r(t).fill(e,n):_r(t).fill(e):_r(t)}(t,e,n)},Fr.allocUnsafe=function(t){return Lr(t)},Fr.allocUnsafeSlow=function(t){return Lr(t)},Fr.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==Fr.prototype},Fr.compare=function(t,e){if(ds(t,Uint8Array)&&(t=Fr.from(t,t.offset,t.byteLength)),ds(e,Uint8Array)&&(e=Fr.from(e,e.offset,e.byteLength)),!Fr.isBuffer(t)||!Fr.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var n=t.length,r=e.length,s=0,a=Math.min(n,r);s<a;++s)if(t[s]!==e[s]){n=t[s],r=e[s];break}return n<r?-1:r<n?1:0},Fr.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Fr.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return Fr.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=Fr.allocUnsafe(e),s=0;for(n=0;n<t.length;++n){var a=t[n];if(ds(a,Uint8Array))s+a.length>r.length?Fr.from(a).copy(r,s):Uint8Array.prototype.set.call(r,a,s);else{if(!Fr.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,s)}s+=a.length}return r},Fr.byteLength=Wr,Fr.prototype._isBuffer=!0,Fr.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)Ur(this,e,e+1);return this},Fr.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)Ur(this,e,e+3),Ur(this,e+1,e+2);return this},Fr.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)Ur(this,e,e+7),Ur(this,e+1,e+6),Ur(this,e+2,e+5),Ur(this,e+3,e+4);return this},Fr.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?Zr(this,0,t):Vr.apply(this,arguments)},Fr.prototype.toLocaleString=Fr.prototype.toString,Fr.prototype.equals=function(t){if(!Fr.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===Fr.compare(this,t)},Fr.prototype.inspect=function(){var t="";return t=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(t+=" ... "),"<Buffer "+t+">"},Ar&&(Fr.prototype[Ar]=Fr.prototype.inspect),Fr.prototype.compare=function(t,e,n,r,s){if(ds(t,Uint8Array)&&(t=Fr.from(t,t.offset,t.byteLength)),!Fr.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),e<0||n>t.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&e>=n)return 0;if(r>=s)return-1;if(e>=n)return 1;if(this===t)return 0;for(var a=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(e>>>=0),o=Math.min(a,i),u=this.slice(r,s),l=t.slice(e,n),c=0;c<o;++c)if(u[c]!==l[c]){a=u[c],i=l[c];break}return a<i?-1:i<a?1:0},Fr.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},Fr.prototype.indexOf=function(t,e,n){return Gr(this,t,e,n,!0)},Fr.prototype.lastIndexOf=function(t,e,n){return Gr(this,t,e,n,!1)},Fr.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-e;if((void 0===n||n>s)&&(n=s),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return jr(this,t,e,n);case"utf8":case"utf-8":return qr(this,t,e,n);case"ascii":case"latin1":case"binary":return Kr(this,t,e,n);case"base64":return Xr(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Yr(this,t,e,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},Fr.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Qr=4096;function ts(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(127&t[s]);return r}function es(t,e,n){var r="";n=Math.min(t.length,n);for(var s=e;s<n;++s)r+=String.fromCharCode(t[s]);return r}function ns(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var s="",a=e;a<n;++a)s+=ms[t[a]];return s}function rs(t,e,n){for(var r=t.slice(e,n),s="",a=0;a<r.length-1;a+=2)s+=String.fromCharCode(r[a]+256*r[a+1]);return s}function ss(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function as(t,e,n,r,s,a){if(!Fr.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<a)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function is(t,e,n,r,s,a){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function os(t,e,n,r,s){return e=+e,n>>>=0,s||is(t,0,n,4),Er(t,e,n,r,23,4),n+4}function us(t,e,n,r,s){return e=+e,n>>>=0,s||is(t,0,n,8),Er(t,e,n,r,52,8),n+8}Fr.prototype.slice=function(t,e){var n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t);var r=this.subarray(t,e);return Object.setPrototypeOf(r,Fr.prototype),r},Fr.prototype.readUintLE=Fr.prototype.readUIntLE=function(t,e,n){t>>>=0,e>>>=0,n||ss(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r},Fr.prototype.readUintBE=Fr.prototype.readUIntBE=function(t,e,n){t>>>=0,e>>>=0,n||ss(t,e,this.length);for(var r=this[t+--e],s=1;e>0&&(s*=256);)r+=this[t+--e]*s;return r},Fr.prototype.readUint8=Fr.prototype.readUInt8=function(t,e){return t>>>=0,e||ss(t,1,this.length),this[t]},Fr.prototype.readUint16LE=Fr.prototype.readUInt16LE=function(t,e){return t>>>=0,e||ss(t,2,this.length),this[t]|this[t+1]<<8},Fr.prototype.readUint16BE=Fr.prototype.readUInt16BE=function(t,e){return t>>>=0,e||ss(t,2,this.length),this[t]<<8|this[t+1]},Fr.prototype.readUint32LE=Fr.prototype.readUInt32LE=function(t,e){return t>>>=0,e||ss(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Fr.prototype.readUint32BE=Fr.prototype.readUInt32BE=function(t,e){return t>>>=0,e||ss(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Fr.prototype.readIntLE=function(t,e,n){t>>>=0,e>>>=0,n||ss(t,e,this.length);for(var r=this[t],s=1,a=0;++a<e&&(s*=256);)r+=this[t+a]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*e)),r},Fr.prototype.readIntBE=function(t,e,n){t>>>=0,e>>>=0,n||ss(t,e,this.length);for(var r=e,s=1,a=this[t+--r];r>0&&(s*=256);)a+=this[t+--r]*s;return a>=(s*=128)&&(a-=Math.pow(2,8*e)),a},Fr.prototype.readInt8=function(t,e){return t>>>=0,e||ss(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Fr.prototype.readInt16LE=function(t,e){t>>>=0,e||ss(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},Fr.prototype.readInt16BE=function(t,e){t>>>=0,e||ss(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},Fr.prototype.readInt32LE=function(t,e){return t>>>=0,e||ss(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Fr.prototype.readInt32BE=function(t,e){return t>>>=0,e||ss(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Fr.prototype.readFloatLE=function(t,e){return t>>>=0,e||ss(t,4,this.length),Tr(this,t,!0,23,4)},Fr.prototype.readFloatBE=function(t,e){return t>>>=0,e||ss(t,4,this.length),Tr(this,t,!1,23,4)},Fr.prototype.readDoubleLE=function(t,e){return t>>>=0,e||ss(t,8,this.length),Tr(this,t,!0,52,8)},Fr.prototype.readDoubleBE=function(t,e){return t>>>=0,e||ss(t,8,this.length),Tr(this,t,!1,52,8)},Fr.prototype.writeUintLE=Fr.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e>>>=0,n>>>=0,r)||as(this,t,e,n,Math.pow(2,8*n)-1,0);var s=1,a=0;for(this[e]=255&t;++a<n&&(s*=256);)this[e+a]=t/s&255;return e+n},Fr.prototype.writeUintBE=Fr.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e>>>=0,n>>>=0,r)||as(this,t,e,n,Math.pow(2,8*n)-1,0);var s=n-1,a=1;for(this[e+s]=255&t;--s>=0&&(a*=256);)this[e+s]=t/a&255;return e+n},Fr.prototype.writeUint8=Fr.prototype.writeUInt8=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,1,255,0),this[e]=255&t,e+1},Fr.prototype.writeUint16LE=Fr.prototype.writeUInt16LE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},Fr.prototype.writeUint16BE=Fr.prototype.writeUInt16BE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},Fr.prototype.writeUint32LE=Fr.prototype.writeUInt32LE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},Fr.prototype.writeUint32BE=Fr.prototype.writeUInt32BE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},Fr.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e>>>=0,!r){var s=Math.pow(2,8*n-1);as(this,t,e,n,s-1,-s)}var a=0,i=1,o=0;for(this[e]=255&t;++a<n&&(i*=256);)t<0&&0===o&&0!==this[e+a-1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},Fr.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e>>>=0,!r){var s=Math.pow(2,8*n-1);as(this,t,e,n,s-1,-s)}var a=n-1,i=1,o=0;for(this[e+a]=255&t;--a>=0&&(i*=256);)t<0&&0===o&&0!==this[e+a+1]&&(o=1),this[e+a]=(t/i>>0)-o&255;return e+n},Fr.prototype.writeInt8=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},Fr.prototype.writeInt16LE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},Fr.prototype.writeInt16BE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},Fr.prototype.writeInt32LE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},Fr.prototype.writeInt32BE=function(t,e,n){return t=+t,e>>>=0,n||as(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},Fr.prototype.writeFloatLE=function(t,e,n){return os(this,t,e,!0,n)},Fr.prototype.writeFloatBE=function(t,e,n){return os(this,t,e,!1,n)},Fr.prototype.writeDoubleLE=function(t,e,n){return us(this,t,e,!0,n)},Fr.prototype.writeDoubleBE=function(t,e,n){return us(this,t,e,!1,n)},Fr.prototype.copy=function(t,e,n,r){if(!Fr.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var s=r-n;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,n,r):Uint8Array.prototype.set.call(t,this.subarray(n,r),e),s},Fr.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Fr.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){var s=t.charCodeAt(0);("utf8"===r&&s<128||"latin1"===r)&&(t=s)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var a;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(a=e;a<n;++a)this[a]=t;else{var i=Fr.isBuffer(t)?t:Fr.from(t,r),o=i.length;if(0===o)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(a=0;a<n-e;++a)this[a+e]=i[a%o]}return this};var ls=/[^+/0-9A-Za-z-_]/g;function cs(t,e){var n;e=e||1/0;for(var r=t.length,s=null,a=[],i=0;i<r;++i){if((n=t.charCodeAt(i))>55295&&n<57344){if(!s){if(n>56319){(e-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(e-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(e-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(e-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((e-=1)<0)break;a.push(n)}else if(n<2048){if((e-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function hs(t){return xr(function(t){if((t=(t=t.split("=")[0]).trim().replace(ls,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function ps(t,e,n,r){for(var s=0;s<r&&!(s+n>=e.length||s>=t.length);++s)e[s+n]=t[s];return s}function ds(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function fs(t){return t!=t}var ms=function(){for(var t="0123456789abcdef",e=new Array(256),n=0;n<16;++n)for(var r=16*n,s=0;s<16;++s)e[r+s]=t[n]+t[s];return e}();function gs(t,e){let n=t;if($(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||$(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&G().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&ys(t,r,[]),r}function ys(t,e,n){if(n=n||[],!Array.isArray(t)&&!$(t))return void l(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));l(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),l(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)ys(t[e],r,n.concat(e))}function bs(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}function xs(t,e,n,r="numeric"){if(t instanceof jn)return bs(r,t.dtype,e,n),t;let s=E(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),bs(r,s,e,n),null==t||!$(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=gs(t,s);$(t)||Array.isArray(t)||(t=[t]);const i="string"!==s?An(t,s):p(t,[],!0);return fr.makeTensor(i,a,s)}function ws(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,r)=>xs(t,`${e}[${r}]`,n)),r)}function vs(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...t)=>{fr.startScope(n);try{const e=r(...t);return W(e)&&console.error("Cannot return a Promise inside of tidy."),fr.endScope(e),e}catch(t){throw fr.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const ks=vs({complex_:function(t,e){const n=xs(t,"real","complex"),r=xs(e,"imag","complex");c(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return fr.runKernelFunc((t=>t.complex(n,r)),s,null,Rt)}});function Ns(t,e,n,r){if(null==r&&(r=E(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!$(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){z(e);const t=d(e),r=d(n);l(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==d(e.slice(t));l(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return $(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?An(t,r):p(t,[],!0),fr.makeTensor(t,e,r)}function Is(t,e,n){return Ns(t,e,gs(t,n),n)}const $s={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Cs=Rr;async function Ss(t,e){const n=[],r=[],s=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise((async t=>{const e=await o.bytes(),n=e.reduce(((t,e)=>t+e.length),0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}t(r)}));r.push(t)}else r.push(o.data());null!=e&&(u.group=e),n.push(u)}return{data:Ts(await Promise.all(r)),specs:n}}function Ts(t){if(null===t)throw new Error(`Invalid input value: ${JSON.stringify(t)}`);let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${t.constructor.name}`)}));const r=new Uint8Array(e);let s=0;return n.forEach((t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength})),r.buffer}const Es=void 0!==Cs&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function As(t){return Es?Cs.byteLength(t):new Blob([t]).size}function Rs(t){if(1===t.length)return t[0];let e=0;t.forEach((t=>{e+=t.byteLength}));const n=new Uint8Array(e);let r=0;return t.forEach((t=>{n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Ds(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:As(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:As(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function _s(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[s]=o}return new Float32Array(s)}}class Fs{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Fs.instance&&(Fs.instance=new Fs),Fs.instance}static registerSaveRouter(t){Fs.getInstance().saveRouters.push(t)}static registerLoadRouter(t){Fs.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return Fs.getHandlers(t,"save")}static getLoadHandlers(t,e){return Fs.getHandlers(t,"load",e)}static getHandlers(t,e,n){const r=[];return("load"===e?Fs.getInstance().loadRouters:Fs.getInstance().saveRouters).forEach((e=>{const s=e(t,n);null!==s&&r.push(s)})),r}}const Os=t=>Fs.getSaveHandlers(t),Ms="tensorflowjs",Ls="models_store",zs="model_info_store";function Bs(){if(!G().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Ps(t){const e=t.result;e.createObjectStore(Ls,{keyPath:"modelPath"}),e.createObjectStore(zs,{keyPath:"modelPath"})}class Ws{constructor(t){if(this.indexedDB=Bs(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const r=this.indexedDB.open(Ms,1);r.onupgradeneeded=()=>Ps(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction(Ls,"readonly"),r=e.objectStore(Ls).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Ds(e),a=s.transaction(zs,"readwrite");let i=a.objectStore(zs);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction(Ls,"readwrite");const o=u.objectStore(Ls).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{i=a.objectStore(zs);const e=i.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)}))}}Ws.URL_SCHEME="indexeddb://";const Vs=t=>{return G().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ws.URL_SCHEME)?(e=t.slice(Ws.URL_SCHEME.length),new Ws(e)):null;var e};Fs.registerSaveRouter(Vs),Fs.registerLoadRouter(Vs);class Us{constructor(){this.indexedDB=Bs()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(Ms,1);n.onupgradeneeded=()=>Ps(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(zs,"readonly"),a=s.objectStore(zs).getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(r.close(),e(a.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)}))}async removeModel(t){var e;return t=(e=t).startsWith(Ws.URL_SCHEME)?e.slice(Ws.URL_SCHEME.length):e,new Promise(((e,n)=>{const r=this.indexedDB.open(Ms,1);r.onupgradeneeded=()=>Ps(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(zs,"readwrite"),i=a.objectStore(zs),o=i.get(t);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=i.delete(t),a=()=>{u=s.transaction(Ls,"readwrite");const r=u.objectStore(Ls).delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=a,r.onerror=t=>(a(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)}))}}const Gs="/",Hs="tensorflowjs_models",js="info",qs="model_topology",Ks="weight_specs",Xs="weight_data",Ys="model_metadata";function Js(t){return{info:[Hs,t,js].join(Gs),topology:[Hs,t,qs].join(Gs),weightSpecs:[Hs,t,Ks].join(Gs),weightData:[Hs,t,Xs].join(Gs),modelMetadata:[Hs,t,Ys].join(Gs)}}function Zs(t){const e=t.split(Gs);if(e.length<3)throw new Error(`Invalid key format: ${t}`);return e.slice(1,e.length-1).join(Gs)}class Qs{constructor(t){if(!G().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Js(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Ds(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Es)return Cs.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:r}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Es){const e=Cs.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}Qs.URL_SCHEME="localstorage://";const ta=t=>{return G().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Qs.URL_SCHEME)?(e=t.slice(Qs.URL_SCHEME.length),new Qs(e)):null;var e};Fs.registerSaveRouter(ta),Fs.registerLoadRouter(ta);class ea{constructor(){l(G().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),l("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const t={},e=Hs+Gs,n=Gs+js;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(e)&&s.endsWith(n)){t[Zs(s)]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){var e;const n=Js(t=(e=t).startsWith(Qs.URL_SCHEME)?e.slice(Qs.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}class na{constructor(){this.managers={}}static getInstance(){return null==na.instance&&(na.instance=new na),na.instance}static registerManager(t,e){l(null!=t,(()=>"scheme must not be undefined or null.")),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),l(t.length>0,(()=>"scheme must not be an empty string."));const n=na.getInstance();l(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}class ra{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(G().get("IS_BROWSER")){G().setPlatform("browser",new ra);try{na.registerManager(Qs.URL_SCHEME,new ea)}catch(t){}try{na.registerManager(Ws.URL_SCHEME,new Us)}catch(t){}}var sa=!1;function aa(){return sa||(sa=!0),{}}const ia=()=>aa();let oa;class ua{constructor(){this.util=aa(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=G().global.fetch?G().global.fetch(t,e):(null==oa&&(oa=ia()),oa(t,e))}now(){const t=K.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function la(t,e="float32",n){return e=e||"float32",z(t),new Vn(t,e,n)}G().get("IS_NODE")&&G().setPlatform("node",new ua);const ca=vs({cast_:function(t,e){const n=xs(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return fr.runKernelFunc((t=>t.cast(n,e)),r,null,Tt,s)}});const ha=vs({clone_:function(t){const e=xs(t,"x","clone",null),n={x:e};return fr.runKernelFunc((()=>fr.makeTensorFromDataId(e.dataId,e.shape,e.dtype)),n,null,oe)}});dr();Gn={buffer:la,cast:ca,clone:ha,print:function(t,e=!1){console.log(t.toString(e))}};function pa(t){return new Promise((t=>setTimeout(t))).then(t)}class da{constructor(t){if(!G().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(da.URL_SCHEME)&&(t=t.slice(da.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},s=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=s,await pa((()=>a.dispatchEvent(new MouseEvent("click")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await pa((()=>t.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Ds(t)}}}}da.URL_SCHEME="downloads://";function fa(t,e,n,r){!function(t){l(null!=t&&Array.isArray(t)&&t.length>0,(()=>"promises must be a none empty array"))}(t),function(t,e){l(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${t}`)),l(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${e}`)),l(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction ${e}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map((a=>(a.then((a=>{const i=n+ ++s/t.length*(r-n);return e(i),a})),a))))}Fs.registerSaveRouter((t=>G().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(da.URL_SCHEME)?function(t="model"){return new da(t)}(t.slice(da.URL_SCHEME.length)):null));class ma{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(l("function"==typeof e.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=e.fetchFunc):this.fetch=G().platform.fetch,l(null!=t&&t.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(t)&&l(2===t.length,(()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`)),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:Ds(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,r=e.weightsManifest,s=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,l;if(null!=r){const t=await this.loadWeights(r);[u,l]=t}const c={modelTopology:n,weightSpecs:u,weightData:l,userDefinedMetadata:o,generatedBy:s,convertedBy:a,format:i},h=e.modelInitializer;return h&&(c.modelInitializer=h),c}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),s=n>e?t.substring(n):"";return[r+"/",s]}(e),s=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):i.push(s+t+r);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,Rs(await async function(t,e){null==e&&(e={});const n=null==e.fetchFunc?G().platform.fetch:e.fetchFunc,r=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),s=(null==e.onProgress?await Promise.all(r):await fa(r,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(s):await fa(s,e.onProgress,.5,1)}(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ga(t){return null!=t.match(ma.URL_SCHEME_REGEX)}ma.URL_SCHEME_REGEX=/^https?:\/\//;const ya=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>ga(t))):ga(t),n)return ba(t,e)}return null};function ba(t,e){return new ma(t,e)}function xa(t,e){return ba(t,e)}Fs.registerSaveRouter(ya),Fs.registerLoadRouter(ya);const wa=vs({reshape_:function(t,e){const n=xs(t,"x","reshape",null),r={x:n},s={shape:e};return fr.runKernelFunc(((t,r)=>(e=x(e,n.size),l(n.size===d(e),(()=>"new shape and old shape must have the same number of elements.")),r([n]),t.reshape(n,e))),r,null,Be,s)}});const va=vs({matMul_:function(t,e,n=!1,r=!1){let s=xs(t,"a","matMul"),a=xs(e,"b","matMul");[s,a]=or(s,a);const i={a:s,b:a},o={transposeA:n,transposeB:r};return fr.runKernelFunc(((t,e)=>{e([s,a]);const i=n?s.shape[s.rank-2]:s.shape[s.rank-1],o=r?a.shape[a.rank-1]:a.shape[a.rank-2],u=n?s.shape[s.rank-1]:s.shape[s.rank-2],c=r?a.shape[a.rank-2]:a.shape[a.rank-1],h=s.shape.slice(0,-2),p=a.shape.slice(0,-2),f=d(h),m=d(p),g=f===m||1===f||1===m;l(s.rank>=2&&a.rank>=2&&g,(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${h}) and (${p}).`)),l(i===o,(()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${n} and transposeB=${r} must match.`));const y=(f>m?h:p).concat([u,c]),b=wa(s,n?[f,i,u]:[f,u,i]),x=wa(a,r?[m,c,o]:[m,o,c]),w=t.batchMatMul(b,x,n,r);return wa(w,y)}),i,null,$t,o)}});const ka=vs({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const s=xs(t,"indices","oneHot","int32"),a=[...s.shape,e],i={indices:s},o={depth:e,onValue:n,offValue:r};return fr.runKernelFunc(((t,i)=>(i([s]),wa(t.oneHot(wa(s,[s.size]),e,n,r),a))),i,null,_e,o)}});const Na=vs({transpose_:function(t,e){const n=xs(t,"x","transpose");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),l(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{l(t>=0&&t<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${e}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return fr.runKernelFunc((t=>t.transpose(n,e)),r,null,hn,s)}});vs({confusionMatrix_:function(t,e,n){const r=xs(t,"labels","confusionMatrix"),s=xs(e,"predictions","confusionMatrix");l(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),l(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),l(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),l(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),l(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=ka(ca(r,"int32"),n),i=ka(ca(s,"int32"),n),o=Na(a),u=va(o,i);return ca(u,"int32")}});let Ia;const $a=vs({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${t.constructor.name}`);i=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=In(yn,fr.backendName)){const n={pixels:t},r={numChannels:e};return fr.runKernel(yn,n,r)}const[o,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let l,c;if(i?l=t.getContext("2d").getImageData(0,0,o,u).data:r||n?l=t.data:(a||s)&&(null==Ia&&(Ia=document.createElement("canvas").getContext("2d")),Ia.canvas.width=o,Ia.canvas.height=u,Ia.drawImage(t,0,0,o,u),l=Ia.getImageData(0,0,o,u).data),4===e)c=new Int32Array(l);else{const t=o*u;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=l[4*n+t]}return function(t,e,n){if(h(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const r=gs(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ns(t,e,r,n)}(c,[u,o,e],"int32")}});function Ca(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,r=n[n.length-1];let s=1;for(let t=0;t<n.length-1;++t)s*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=r;e<t.rank;++e)o*=a[e],i.push(a[e]);const u=[...D(t.shape).map((t=>t/o)),1].slice(0,r);return[i,s,o,u]}function Sa(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}!function(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}(n,e,t)}function Ta(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,a=n.length;let i=1;for(let t=s;t<a;++t)i*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:d(e.shape)/o,sliceSize:i,strides:[...D(n.slice(0,s)),1],outputSize:d(n)}}function Ea(t,e,n){const r=t.shape.length;l(r===e.length,(()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`)),l(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)l(e[s]+n[s]<=t.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+n[s]}) would overflow input.shape[${s}] (${t.shape[s]})`))}function Aa(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Ra(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function Da(t,e,n){return n<=t?n:n-(e-1)}function _a(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function Fa(t,e,n,r,s,a,i,u,l){const c=t.length;let h=new Array(c),p=new Array(c),d=new Array(c);if(e.length&&n>0){const l=e[0],c=n+1;h=function(t,e,n,r,s){const a=[...s],i=_a(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=Da(e,n,s);let o=r[i];t&1<<i&&(o=0),a[s]=o}return a}(i,l,c,r,t),p=function(t,e,n,r,s){const a=[...s],i=_a(n,e);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=Da(e,n,s);let o=r[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let t=0;t<a.length;t++){const e=s[t];a[t]<0&&(a[t]+=e),a[t]=o(0,a[t],s[t])}return a}(u,l,c,s,t),d=function(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}(a,l,c,t)}else for(let e=0;e<c;e++)h[e]=Ma(i,r,a,t,e,l),p[e]=La(u,s,a,t,e,l),d[e]=Oa(a,e,l);return{begin:h,end:p,strides:d}}function Oa(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function Ma(t,e,n,r,s,a){let i=e[s];const u=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=o(0,i,l-1),i}function La(t,e,n,r,s,a){let i=e[s];const u=n[s]||1;(t&1<<s||a&1<<s||null==i)&&(i=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=u>0?o(0,i,l):o(-1,i,l-1),i}function za(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function Ba(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function Pa(t,e,n){let r;const s=t.shape.length;let a;return r="number"==typeof e?[e,...new Array(s-1).fill(0)]:e.length<s?e.concat(new Array(s-e.length).fill(0)):e.slice(),r.forEach((t=>{l(-1!==t,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((e,n)=>e>=0?e:(l(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`)),t.shape[n]-r[n]))),[r,a]}class Wa{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Va{constructor(){this.classNameMap={}}static getMap(){return null==Va.instance&&(Va.instance=new Va),Va.instance}static register(t){Va.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Ua(t){l(null!=t.className,(()=>"Class being registered does not have the static className property defined.")),l("string"==typeof t.className,(()=>"className is required to be a string, but got type "+typeof t.className)),l(t.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Va.register(t)}function Ga(t){G().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Ha(){return fr}function ja(){return fr.memory()}function qa(t,e){return fr.tidy(t,e)}function Ka(t){lr(t).forEach((t=>t.dispose()))}function Xa(t){return fr.keep(t)}function Ya(t,e,n=1){return fr.registerBackend(t,e,n)}function Ja(t){return fr.customGrad(t)}Hn=Ga;const Za=vs({abs_:function(t){const e=xs(t,"x","abs"),n={x:e};return fr.runKernelFunc(((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e))),n,null,ct)}});const Qa=vs({acos_:function(t){const e=xs(t,"x","acos"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.acos(e);return n([e]),r}),n,null,ht)}});const ti=vs({acosh_:function(t){const e=xs(t,"x","acosh"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.acosh(e);return n([e]),r}),n,null,pt)}});const ei=vs({add_:function(t,e){let n=xs(t,"a","add"),r=xs(e,"b","add");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.add(n,r);return e([n,r]),s}),s,null,dt)}});const ni=vs({addN_:function(t){l(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),l(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,e)=>xs(t,`tensors${e}`,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!f(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return fr.runKernelFunc(((t,n)=>{const r=t.addN(e);return n(e),r}),r,null,ft)}});function ri(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function si(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map((e=>t[e]))]}function ai(t,e){return function(t,e,n){const r=t.length+e.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[a++]):s.push(e[i++]);return s}(t,e.map((t=>1)),e)}function ii(t,e,n){l(ri(e,n),(()=>`${t} supports only inner-most axes for now. Got axes ${e} and rank-${n} input.`))}function oi(t,e){if(ri(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((t=>n.push(t))),n}function ui(t){return t.map(((t,e)=>[e,t])).sort(((t,e)=>t[1]-e[1])).map((t=>t[0]))}function li(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const ci=vs({all_:function(t,e=null,n=!1){let r=xs(t,"x","all","bool");const s={x:r},a={axis:e,keepDims:n};return fr.runKernelFunc((t=>{const s=w(e,r.shape);let a=s;const i=oi(a,r.rank);null!=i&&(r=Na(r,i),a=li(a.length,r.rank));const o=t.all(r,a);if(n){const t=ai(o.shape,s);return wa(o,t)}return o}),s,null,"All",a)}});const hi=vs({any_:function(t,e=null,n=!1){let r=xs(t,"x","any","bool");const s={x:r},a={axis:e,keepDims:n};return fr.runKernelFunc((t=>{const s=w(e,r.shape);let a=s;const i=oi(a,r.rank);null!=i&&(r=Na(r,i),a=li(a.length,r.rank));const o=t.any(r,a);if(n){const t=ai(o.shape,s);return wa(o,t)}return o}),s,null,"Any",a)}});const pi=vs({argMax_:function(t,e=0){let n=xs(t,"x","argMax");const r={x:n},s={axis:e};return fr.runKernelFunc(((t,r)=>{r([n]);let s=w(e,n.shape);const a=oi(s,n.rank);return null!=a&&(n=Na(n,a),s=li(s.length,n.rank)),t.argMax(n,s[0])}),r,null,mt,s)}});const di=vs({argMin_:function(t,e=0){let n=xs(t,"x","argMin");const r={x:n},s={axis:e};return fr.runKernelFunc(((t,r)=>{r([n]),null==e&&(e=0);let s=w(e,n.shape);const a=oi(s,n.rank);return null!=a&&(n=Na(n,a),s=li(s.length,n.rank)),t.argMin(n,s[0])}),r,null,gt,s)}});const fi=vs({asin_:function(t){const e=xs(t,"x","asin"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.asin(e);return n([e]),r}),n,null,yt)}});const mi=vs({asinh_:function(t){const e=xs(t,"x","asinh"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.asinh(e);return n([e]),r}),n,null,bt)}});const gi=vs({atan_:function(t){const e=xs(t,"x","atan"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.atan(e);return n([e]),r}),n,null,xt)}});const yi=vs({atan2_:function(t,e){let n=xs(t,"a","atan2"),r=xs(e,"b","atan2");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.atan2(n,r);return e([n,r]),s}),s,null,vt)}});const bi=vs({atanh_:function(t){const e=xs(t,"x","atanh"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.atanh(e);return n([e]),r}),n,null,wt)}});function xi(t,e,n,r,s="NHWC",a){return ki(t,[...e,t[3]],n,a,r,null,null,Ri(s))}function wi(t,e,n,r,s,a,i="channelsLast"){const[o,u]=$i(e);let l;if("channelsLast"===i)l=[o,u,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,t[1],t[1]]}return ki(t,l,n,r,s,a,!1,i)}function vi(t,e,n,r,s,a,i="NDHWC"){const[o,u,l]=Ci(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,t[4],t[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,t[1],t[1]]}return Ni(t,c,n,r,s,!1,h,a)}function ki(t,e,n,r,s,a,i=!1,o="channelsLast"){let[u,c,h,p]=[-1,-1,-1,-1];if("channelsLast"===o)[u,c,h,p]=t;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,p,c,h]=t}const[d,f,,g]=e,[y,b]=$i(n),[x,w]=$i(r),v=Si(d,x),k=Si(f,w),{padInfo:N,outHeight:I,outWidth:$}=function(t,e,n,r,s,a,i,o,u){let c,h,p;if("number"==typeof t){c={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=Ii(t,e,n));const a=t[0],i=t[1],o=Ti((a-e+2*r)/n+1,s);l(m(o),(()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`));const u=Ti((i-e+2*r)/n+1,s);return l(m(u),(()=>`The output # of columns (${u}) must be an integer. Change the stride and/or zero pad parameters`)),[o,u]}([e,n],a,r,t,o);h=s[0],p=s[1]}else if("same"===t){h=Math.ceil(e/r),p=Math.ceil(n/s);const t=Math.max(0,(h-1)*r+a-e),o=Math.max(0,(p-1)*s+i-n),u=Math.floor(t/2),l=t-u,d=Math.floor(o/2);c={top:u,bottom:l,left:d,right:o-d,type:"SAME"}}else if("valid"===t)c={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((e-a+1)/r),p=Math.ceil((n-i+1)/s);else{if("object"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const l="channelsLast"===u?t[1][0]:t[2][0],d="channelsLast"===u?t[1][1]:t[2][1],f="channelsLast"===u?t[2][0]:t[3][0],m="channelsLast"===u?t[2][1]:t[3][1];c={top:l,bottom:d,left:f,right:m,type:0===l&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},h=Ti((e-a+l+d)/r+1,o),p=Ti((n-i+f+m)/s+1,o)}}return{padInfo:c,outHeight:h,outWidth:p}}(s,c,h,y,b,v,k,a,o),C=i?g*p:g;let S;return"channelsFirst"===o?S=[u,C,I,$]:"channelsLast"===o&&(S=[u,I,$,C]),{batchSize:u,dataFormat:o,inHeight:c,inWidth:h,inChannels:p,outHeight:I,outWidth:$,outChannels:C,padInfo:N,strideHeight:y,strideWidth:b,filterHeight:d,filterWidth:f,effectiveFilterHeight:v,effectiveFilterWidth:k,dilationHeight:x,dilationWidth:w,inShape:t,outShape:S,filterShape:e}}function Ni(t,e,n,r,s,a=!1,i="channelsLast",o){let[u,c,h,p,d]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,c,h,p,d]=t;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,d,c,h,p]=t}const[f,g,y,,b]=e,[x,w,v]=Ci(n),[k,N,I]=Ci(r),$=Si(f,k),C=Si(g,N),S=Si(y,I),{padInfo:T,outDepth:E,outHeight:A,outWidth:R}=function(t,e,n,r,s,a,i,o,u,c,h){let p,d,f,g;if("number"==typeof t){p={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,r,s,a){null==s&&(s=Ii(t,e,r));const i=t[0],o=t[1],u=t[2],c=Ti((i-e+2*s)/r+1,a);l(m(c),(()=>`The output # of depths (${c}) must be an integer. Change the stride and/or zero pad parameters`));const h=Ti((o-e+2*s)/r+1,a);l(m(h),(()=>`The output # of rows (${h}) must be an integer. Change the stride and/or zero pad parameters`));const p=Ti((u-e+2*s)/r+1,a);return l(m(p),(()=>`The output # of columns (${p}) must be an integer. Change the stride and/or zero pad parameters`)),[c,h,p,n]}([e,n,r,1],o,1,s,t,h);d=a[0],f=a[1],g=a[2]}else if("same"===t){d=Math.ceil(e/s),f=Math.ceil(n/a),g=Math.ceil(r/i);const t=(d-1)*s+o-e,l=(f-1)*a+u-n,h=(g-1)*i+c-r,m=Math.floor(t/2),y=t-m,b=Math.floor(l/2),x=l-b,w=Math.floor(h/2);p={top:b,bottom:x,left:w,right:h-w,front:m,back:y,type:"SAME"}}else{if("valid"!==t)throw Error(`Unknown padding parameter: ${t}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-o+1)/s),f=Math.ceil((n-u+1)/a),g=Math.ceil((r-c+1)/i)}return{padInfo:p,outDepth:d,outHeight:f,outWidth:g}}(s,c,h,p,x,w,v,$,C,S,o),D=a?b*d:b;let _;return"channelsFirst"===i?_=[u,D,E,A,R]:"channelsLast"===i&&(_=[u,E,A,R,D]),{batchSize:u,dataFormat:i,inDepth:c,inHeight:h,inWidth:p,inChannels:d,outDepth:E,outHeight:A,outWidth:R,outChannels:D,padInfo:T,strideDepth:x,strideHeight:w,strideWidth:v,filterDepth:f,filterHeight:g,filterWidth:y,effectiveFilterDepth:$,effectiveFilterHeight:C,effectiveFilterWidth:S,dilationDepth:k,dilationHeight:N,dilationWidth:I,inShape:t,outShape:_,filterShape:e}}function Ii(t,e,n,r=1){const s=Si(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function $i(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Ci(t){return"number"==typeof t?[t,t,t]:t}function Si(t,e){return e<=1?t:t+(t-1)*(e-1)}function Ti(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function Ei(t){const[e,n,r]=$i(t);return 1===e&&1===n&&1===r}function Ai(t,e){return Ei(t)||Ei(e)}function Ri(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error(`Unknown dataFormat ${t}`)}const Di=vs({avgPool_:function(t,e,n,r,s){const a=xs(t,"x","avgPool","float32");l(Ai(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=wa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=s&&l(m(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:i},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let h=fr.runKernelFunc(((t,a)=>{const o=wi(i.shape,e,n,1,r,s);return a([i]),1===o.filterWidth&&1===o.filterHeight&&f(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)}),u,null,kt,c);return h=ca(h,a.dtype),o?wa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const _i=vs({avgPool3d_:function(t,e,n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Ga("dilations is deprecated, this field will be gone in v3.0.0.");const o=xs(t,"x","avgPool3d","float32");let u=o,c=!1;4===o.rank&&(c=!0,u=wa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),l(5===u.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`)),l("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),l(Ai(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&l(m(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const h={x:u},p={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i};let d=fr.runKernelFunc(((t,o)=>{null==i&&(i=[1,1,1]);const l=vi(u.shape,e,n,i,r,s,a);return o([u]),t.avgPool3d(u,l)}),h,null,It,p);return d=ca(d,u.dtype),c?wa(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Fi=vs({batchToSpaceND_:function(t,e,n){const r=xs(t,"x","batchToSpaceND"),s=e.reduce(((t,e)=>t*e));l(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),l(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),l(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`));const a={x:r},i={blockShape:e,crops:n};return fr.runKernelFunc((t=>t.batchToSpaceND(r,e,n)),a,null,Ct,i)}});function Oi(t){return null==t?null:0===t.rank?wa(t,[t.size]):1===t.rank?t:2===t.rank?wa(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?wa(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const Mi=vs({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const i=xs(t,"x","batchNorm"),o=xs(e,"mean","batchNorm"),u=xs(n,"variance","batchNorm");let c,h;null!=s&&(c=xs(s,"scale","batchNorm")),null!=r&&(h=xs(r,"offset","batchNorm")),l(o.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==h||o.rank===h.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p=function(t){let e;return e=0===t.rank||1===t.rank?wa(t,[1,1,1,t.size]):2===t.rank?wa(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?wa(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),d={x:p,scale:c,offset:h,mean:o,variance:u},f={varianceEpsilon:a},m=fr.runKernelFunc(((t,e)=>(e([p,o,u,c]),t.batchNorm(p,Oi(o),Oi(u),Oi(h),Oi(c),a))),d,null,se,f);return wa(m,i.shape)}});const Li=vs({batchNorm2d_:function(t,e,n,r,s,a){const i=xs(t,"x","batchNorm"),o=xs(e,"mean","batchNorm"),u=xs(n,"variance","batchNorm");let c,h;return null!=s&&(c=xs(s,"scale","batchNorm")),null!=r&&(h=xs(r,"offset","batchNorm")),l(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),l(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),l(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&l(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=h&&l(2===h.rank||1===h.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${h.rank}.`)),Mi(i,o,u,h,c,a)}});const zi=vs({batchNorm3d_:function(t,e,n,r,s,a){const i=xs(t,"x","batchNorm"),o=xs(e,"mean","batchNorm"),u=xs(n,"variance","batchNorm");let c,h;return null!=s&&(c=xs(s,"scale","batchNorm")),null!=r&&(h=xs(r,"offset","batchNorm")),l(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),l(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),l(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&l(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=h&&l(3===h.rank||1===h.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${h.rank}.`)),Mi(i,o,u,h,c,a)}});const Bi=vs({batchNorm4d_:function(t,e,n,r,s,a){const i=xs(t,"x","batchNorm"),o=xs(e,"mean","batchNorm"),u=xs(n,"variance","batchNorm");let c,h;return null!=s&&(c=xs(s,"scale","batchNorm")),null!=r&&(h=xs(r,"offset","batchNorm")),l(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),l(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),l(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&l(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=h&&l(4===h.rank||1===h.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${h.rank}.`)),Mi(i,o,u,h,c,a)}});const Pi=vs({broadcastTo_:function(t,e){let n=xs(t,"broadcastTo","x");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=wa(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return ha(n);const i={x:n},o={shape:e,inputShape:s};return fr.runKernelFunc((t=>t.tile(n,a)),i,null,St,o)}});const Wi=vs({ceil_:function(t){const e=xs(t,"x","ceil"),n={x:e};return fr.runKernelFunc((t=>t.ceil(e)),n,null,Et)}});const Vi=vs({clipByValue_:function(t,e,n){const r=xs(t,"x","clipByValue");l(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:e,clipValueMax:n};return fr.runKernelFunc(((t,s)=>{const a=t.clip(r,e,n);return s([r]),a}),s,null,At,a)}});function Ui(t,e){const n=t[0].length;t.forEach(((t,e)=>{l(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`))})),l(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=t[0];t.forEach(((t,s)=>{for(let a=0;a<n;a++)l(a===e||t[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function Gi(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const Hi=vs({concat_:function(t,e=0){l(t.length>=1,(()=>"Pass at least one tensor to concat"));let n=ws(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)}));const r=n,s={axis:e};return fr.runKernelFunc(((t,r)=>{const s=w(e,n[0].shape)[0],a=Gi(n.map((t=>t.shape)),s);if(0===d(a))return Is([],a);if(n=n.filter((t=>t.size>0)),1===n.length)return n[0];Ui(n.map((t=>t.shape)),s);const i=t.concat(n,s);return r(n),i}),r,null,Dt,s)}});const ji=vs({concat1d_:function(t){return Hi(t,0)}});const qi=vs({concat2d_:function(t,e){return Hi(t,e)}});const Ki=vs({concat3d_:function(t,e){return Hi(t,e)}});const Xi=vs({concat4d_:function(t,e){return Hi(t,e)}});const Yi=vs({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=xs(t,"x","conv2d"),u=xs(e,"filter","conv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=wa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),l(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),l(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=i&&l(m(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p="NHWC"===s?c.shape[3]:c.shape[1];l(p===u.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${u.shape[2]}.`)),l(Ai(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const d={x:c,filter:u},f={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},g=fr.runKernelFunc(((t,e)=>{const o=Ri(s),l=ki(c.shape,u.shape,n,a,r,i,!1,o),h=t.conv2d(c,u,l);return e([c,u]),h}),d,null,_t,f);return h?wa(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Ji=vs({conv1d_:function(t,e,n,r,s="NWC",a=1,i){const o=xs(t,"x","conv1d"),u=xs(e,"filter","conv1d");let c=o,h=!1;2===o.rank&&(h=!0,c=wa(o,[1,o.shape[0],o.shape[1]])),l(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),l(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=i&&l(m(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),l(c.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),l(Ai(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),l("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const p=wa(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=wa(c,[c.shape[0],1,c.shape[1],c.shape[2]]),f=Yi(d,p,[1,n],r,"NHWC",[1,a],i);return wa(f,h?[f.shape[2],f.shape[3]]:[f.shape[0],f.shape[2],f.shape[3]])}});const Zi=vs({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",i){l(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let o=t,u=e,c=!1;3===e.rank&&(c=!0,u=wa(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),l(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),l(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),l(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===a?o[3]:o[1],p="NHWC"===a?u.shape[3]:u.shape[1];l(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),l(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&l(m(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const d={dy:u,filter:n},f={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},g=fr.runKernelFunc(((t,e)=>{const l=Ri(a),c=ki(o,n.shape,r,1,s,i,!1,l),h=t.conv2dDerInput(u,n,c);return e([u,n]),h}),d,null,Ot,f);return c?wa(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Qi=vs({conv2dTranspose_:function(t,e,n,r,s,a){const i=xs(t,"x","conv2dTranspose"),o=xs(e,"filter","conv2dTranspose");return Zi(n,i,o,r,s,"NHWC",a)}});const to=vs({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const i=xs(t,"x","conv3d"),o=xs(e,"filter","conv3d");let u=i,c=!1;4===i.rank&&(c=!0,u=wa(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),l(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),l(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),l(u.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),l(Ai(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),l("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const h={x:u,filter:o},p={strides:n,pad:r,dataFormat:s,dilations:a},d=fr.runKernelFunc(((t,e)=>{const s=Ni(u.shape,o.shape,n,a,r),i=t.conv3d(u,o,s);return e([u,o]),i}),h,null,Mt,p);return c?wa(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const eo=vs({cos_:function(t){const e=xs(t,"x","cos"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.cos(e);return n([e]),r}),n,null,Bt)}});const no=vs({cosh_:function(t){const e=xs(t,"x","cosh"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.cosh(e);return n([e]),r}),n,null,Pt)}});const ro=vs({cumsum_:function(t,e=0,n=!1,r=!1){const s=xs(t,"x","cumsum"),a={x:s},i={axis:e,exclusive:n,reverse:r};return fr.runKernelFunc(((t,a)=>{const i=oi([e],s.rank);let o=s;null!=i&&(o=Na(s,i));const u=li(1,s.rank)[0];let l=t.cumsum(o,u,n,r);if(a([s]),null!=i){const t=ui(i);l=Na(l,t)}return l}),a,null,Wt,i)}});const so=vs({depthToSpace_:function(t,e,n="NHWC"){const r=xs(t,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];l(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),l(a*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),l(i%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},u={blockSize:e,dataFormat:n};return fr.runKernelFunc((t=>t.depthToSpace(r,e,n)),o,null,"DepthToSpace",u)}});const ao=vs({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],i){const o=xs(t,"x","depthwiseConv2d"),u=xs(e,"filter","depthwiseConv2d");let c=o,h=!1;3===o.rank&&(h=!0,c=wa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),l(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),l(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),l(c.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=i&&l(m(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={x:c,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=fr.runKernelFunc(((t,e)=>{null==a&&(a=[1,1]),l(Ai(n,a),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const s=ki(c.shape,u.shape,n,a,r,i,!0),o=t.depthwiseConv2D(c,u,s);return e([c,u]),o}),p,null,Vt,d);return h?wa(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const io=vs({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const i=xs(t,"x","dilation2d"),o=xs(e,"filter","dilation2d");l(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),l(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),l("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=i,c=!1;3===i.rank&&(u=wa(i,[1,i.shape[0],i.shape[1],i.shape[2]]),c=!0);const h={x:u,filter:o},p={strides:n,pad:r,dilations:s},d=fr.runKernel(Ht,h,p);return c?wa(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const oo=vs({floorDiv_:function(t,e){let n=xs(t,"a","floorDiv"),r=xs(e,"b","floorDiv");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.floorDiv(n,r);return e([n,r]),s}),s,null,re)}});const uo=vs({div_:function(t,e){let n=xs(t,"a","div"),r=xs(e,"b","div");if([n,r]=or(n,r),"int32"===n.dtype&&"int32"===r.dtype)return oo(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.realDivide(n,r);return e([n,r]),s}),s,null,Kt,{})}});function lo(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=t[a]||1;(e[e.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function co(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function ho(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const po=vs({equal_:function(t,e){let n=xs(t,"a","equal"),r=xs(e,"b","equal");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc((t=>t.equal(n,r)),s,null,"Equal")}});const fo=vs({where_:function(t,e,n){const r=xs(e,"a","where"),s=xs(n,"b","where"),a=xs(t,"condition","where","bool"),i=ho(r.shape,s.shape),o=Pi(r,i),u=Pi(s,i);1===a.rank&&l(a.shape[0]===r.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&c(a.shape,u.shape,"Error in where: ");const h={condition:a,t:o,e:u};return fr.runKernelFunc(((t,e)=>{const n=t.select(a,o,u);return e([a]),n}),h,null,je)}});const mo=vs({zerosLike_:function(t){const e=xs(t,"x","zerosLike"),n={x:e};return fr.runKernelFunc((t=>t.zerosLike(e)),n,null,mn)}});const go=vs({divNoNan_:function(t,e){let n=xs(t,"a","div"),r=xs(e,"b","div");[n,r]=or(n,r);const s=uo(n,r),a=mo(s),i=po(r,a);return fo(i,a,s)}});const yo=vs({elu_:function(t){const e=xs(t,"x","elu"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.elu(e);return n([r]),r}),n,null,Xt)}});const bo=vs({erf_:function(t){let e=xs(t,"x","erf");l("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=ca(e,"float32"));const n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.erf(e);return n([e]),r}),n,null,Yt)}});const xo=vs({exp_:function(t){const e=xs(t,"x","exp"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.exp(e);return n([r]),r}),n,null,Jt)}});const wo=vs({expandDims_:function(t,e=0){const n=xs(t,"x","expandDims",null);l(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r=n.shape.slice();return e<0&&(l(-(n.rank+1)<=e,(()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`)),e=n.rank+e+1),r.splice(e,0,1),wa(n,r)}});const vo=vs({expm1_:function(t){const e=xs(t,"x","expm1"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.expm1(e);return n([e]),r}),n,null,Zt)}});const ko=vs({tile_:function(t,e){const n=xs(t,"x","tile",null);l(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r=[n],s={x:n},a={reps:e};return fr.runKernelFunc(((t,r)=>{const s=t.tile(n,e);return r([n]),s}),s,null,cn,a,r)}});const No=vs({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=la([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const i=wa(s.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return ko(wo(i,0),[n[0],1,1]);if(2===n.length)return ko(wo(wo(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return ko(wo(wo(wo(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Io(t,e,n){const r={shape:t,value:e,dtype:n};return fr.runKernelFunc((r=>r.fill(t,e,n)),{},null,te,r)}const $o=vs({floor_:function(t){const e=xs(t,"x","floor"),n={x:e};return fr.runKernelFunc((t=>t.floor(e)),n,null,ne)}});function Co(t){return t<=30?t:R(t,Math.floor(Math.sqrt(t)))}const So=vs({gather_:function(t,e,n=0){const r=xs(t,"x","gather"),s=xs(e,"indices","gather","int32"),a={x:r,indices:s},i={axis:n};return fr.runKernelFunc(((t,e)=>{const a=w(n,r.shape)[0],i=function(t,e,n){const r=t.shape[n],s=[];let a=1,i=1;for(let e=0;e<n;e++)s.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)s.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)s.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:s}}(r,s,a),o=t.gather(r,wa(s,[s.size]),a);return e([r,s]),wa(o,i.outputShape)}),a,null,ae,i)}});const To=vs({greater_:function(t,e){let n=xs(t,"a","greater"),r=xs(e,"b","greater");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc((t=>t.greater(n,r)),s,null,"Greater")}});const Eo=vs({greaterEqual_:function(t,e){let n=xs(t,"a","greaterEqual"),r=xs(e,"b","greaterEqual");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.greaterEqual(n,r);return e([n,r]),s}),s,null,ie)}});const Ao=vs({imag_:function(t){const e=xs(t,"input","imag"),n={input:e};return fr.runKernelFunc((t=>t.imag(e)),n,null,le)}});const Ro=vs({isFinite_:function(t){const e=xs(t,"x","isFinite"),n={x:e};return fr.runKernelFunc((t=>t.isFinite(e)),n,null,ce)}});const Do=vs({isInf_:function(t){const e=xs(t,"x","isInf"),n={x:e};return fr.runKernelFunc((t=>t.isInf(e)),n,null,he)}});const _o=vs({isNaN_:function(t){const e=xs(t,"x","isNaN"),n={x:e};return fr.runKernelFunc((t=>t.isNaN(e)),n,null,pe)}});const Fo=vs({maximum_:function(t,e){let n=xs(t,"a","maximum"),r=xs(e,"b","maximum");[n,r]=or(n,r),"bool"===n.dtype&&(n=ca(n,"int32"),r=ca(r,"int32")),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.maximum(n,r);return e([n,r]),s}),s,null,be)}});const Oo=vs({mul_:function(t,e){let n=xs(t,"a","mul"),r=xs(e,"b","mul");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.multiply(n,r);return e([n,r]),s}),s,null,Ce)}});function Mo(t,e){if(($(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&$(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ns(t,[],[],e)}const Lo=vs({leakyRelu_:function(t,e=.2){const n=xs(t,"x","leakyRelu");return Fo(Oo(Mo(e),n),n)}});const zo=vs({less_:function(t,e){let n=xs(t,"a","less"),r=xs(e,"b","less");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc((t=>t.less(n,r)),s,null,"Less")}});const Bo=vs({lessEqual_:function(t,e){let n=xs(t,"a","lessEqual"),r=xs(e,"b","lessEqual");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.lessEqual(n,r);return e([n,r]),s}),s,null,"LessEqual")}});function Po(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return fr.runKernelFunc((r=>r.linspace(t,e,n)),{},null,"LinSpace",r)}const Wo=vs({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=xs(t,"x","localResponseNormalization");l(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),l(m(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=wa(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},c={depthRadius:e,bias:n,alpha:r,beta:s},h=fr.runKernelFunc(((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,r,s);return a([i,o]),o}),u,null,"LRN",c);return o?wa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Vo=vs({log_:function(t){const e=xs(t,"x","log"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.log(e);return n([e]),r}),n,null,de)}});const Uo=vs({log1p_:function(t){const e=xs(t,"x","log1p"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.log1p(e);return n([e]),r}),n,null,fe)}});const Go=vs({neg_:function(t){const e=xs(t,"x","neg"),n={x:e};return fr.runKernelFunc((t=>t.neg(e)),n,null,Se)}});const Ho=vs({sigmoid_:function(t){const e=xs(t,"x","sigmoid"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.sigmoid(e);return n([r]),r}),n,null,Ze)}});const jo=vs({softplus_:function(t){const e=xs(t,"x","softplus"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.softplus(e);return n([e]),r}),n,null,Qe)}});const qo=vs({logSigmoid_:function(t){const e=xs(t,"x","logSigmoid");return Ja((t=>({value:Go(jo(Go(t))),gradFunc:e=>Oo(e,Ho(Go(t)))})))(e)}});const Ko=vs({max_:function(t,e=null,n=!1){const r=xs(t,"x","max"),s={x:r},a={reductionIndices:e,keepDims:n};return fr.runKernelFunc(((t,s)=>{let a=w(e,r.shape);const i=oi(a,r.rank);let o=r;null!=i&&(o=Na(r,i),a=li(a.length,o.rank));const u=t.max(o,a);null!=i&&o.dispose();let l=u;if(n){const t=ai(l.shape,w(e,r.shape));l=wa(l,t),u.dispose()}return s([r,l]),l}),s,null,ye,a)}});const Xo=vs({sub_:function(t,e){let n=xs(t,"a","sub"),r=xs(e,"b","sub");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.subtract(n,r);return e([n,r]),s}),s,null,on)}});const Yo=vs({sum_:function(t,e=null,n=!1){let r=xs(t,"x","sum");"bool"===r.dtype&&(r=ca(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return fr.runKernelFunc(((t,s)=>{s([r]);const a=w(e,r.shape),i=oi(a,r.rank);let o=a,u=r;null!=i&&(u=Na(r,i),o=li(o.length,r.rank));let l=t.sum(u,o);if(n){const t=ai(l.shape,a);l=wa(l,t)}return l}),s,null,"Sum",a)}});const Jo=vs({logSoftmax_:function(t,e=-1){const n=xs(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const r={logits:n},s={axis:e};return fr.runKernelFunc(((n,r)=>{const s=Ko(t,e,!0),a=Xo(t,s),i=Xo(ca(a,"float32"),Vo(Yo(xo(a),e,!0)));return r([i]),i}),r,null,ge,s)}});const Zo=vs({logicalAnd_:function(t,e){const n=xs(t,"a","logicalAnd","bool"),r=xs(e,"b","logicalAnd","bool");ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc((t=>t.logicalAnd(n,r)),s,null,"LogicalAnd")}});const Qo=vs({logicalNot_:function(t){const e=xs(t,"x","logicalNot","bool"),n={x:e};return fr.runKernelFunc((t=>t.logicalNot(e)),n,null,me)}});const tu=vs({logicalOr_:function(t,e){const n=xs(t,"a","logicalOr","bool"),r=xs(e,"b","logicalOr","bool");ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc((t=>t.logicalOr(n,r)),s,null,"LogicalOr")}});const eu=vs({maxPool_:function(t,e,n,r,s){const a=xs(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=wa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),l(Ai(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&l(m(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:i},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s},h=fr.runKernelFunc(((t,a)=>{const o=wi(i.shape,e,n,1,r,s);let u;return u=1===o.filterWidth&&1===o.filterHeight&&f(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,u]),u}),u,null,xe,c);return o?wa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const nu=vs({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC",i){null==i?i=[1,1,1]:Ga("dilations is deprecated, this field will be gone in v3.0.0.");const o=xs(t,"x","maxPool3d");let u=o,c=!1;4===o.rank&&(c=!0,u=wa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),l(5===u.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`)),l("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),l(Ai(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=s&&l(m(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const h={x:u},p={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a,dilations:i},d=fr.runKernelFunc(((t,o)=>{null==i&&(i=[1,1,1]);const l=vi(u.shape,e,n,i,r,s,a),c=t.maxPool3d(u,l);return o([u,c]),c}),h,null,ve,p);return c?wa(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const ru=vs({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:xs(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=fr.runKernel(ke,a,i);return{result:o[0],indexes:o[1]}}});function su(t,e="float32"){if("complex64"===e){const e=su(t,"float32"),n=su(t,"float32");return ks(e,n)}const n=M(d(t),e);return fr.makeTensor(n,t,e)}function au(t,e="float32"){if("complex64"===e){const e=au(t,"float32"),n=su(t,"float32");return ks(e,n)}const n=O(d(t),e);return fr.makeTensor(n,t,e)}const iu=vs({mean_:function(t,e=null,n=!1){const r=xs(t,"x","mean"),s=w(e,r.shape),a=d(si(r.shape,s)[1]),i={x:r},o={axis:e,keepDims:n},u=()=>{const t=Mo(a),s=t.dtype===r.dtype?r:ca(r,t.dtype),i=uo(s,t);return Yo(i,e,n)};return Ja((t=>({value:fr.runKernelFunc(u,i,null,Ne,o),gradFunc:e=>{const n=t.shape.slice();s.forEach((t=>{n[t]=1}));const r=wa(e,n);return uo(Oo(r,au(t.shape,"float32")),a)}})))(r)}});const ou=vs({min_:function(t,e=null,n=!1){const r=xs(t,"x","min"),s={x:r},a={axis:e,keepDims:n};return fr.runKernelFunc(((t,s)=>{const a=w(e,r.shape);let i=a;const o=oi(i,r.rank);let u=r;null!=o&&(u=Na(r,o),i=li(i.length,r.rank));const l=t.min(u,i);null!=o&&u.dispose();let c=l;if(n){const t=ai(c.shape,a);c=wa(l,t),l.dispose()}return s([r,c]),c}),s,null,"Min",a)}});const uu=vs({minimum_:function(t,e){let n=xs(t,"a","minimum"),r=xs(e,"b","minimum");[n,r]=or(n,r),"bool"===n.dtype&&(n=ca(n,"int32"),r=ca(r,"int32")),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.minimum(n,r);return e([n,r]),s}),s,null,Ie)}});const lu=vs({mirrorPad_:function(t,e,n){l("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=xs(t,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");l(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const s="reflect"===n?1:0;for(let t=0;t<r.rank;t++)l(2===e[t].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),l(e[t][0]>=0&&e[t][0]<=r.shape[t]-s&&e[t][1]>=0&&e[t][1]<=r.shape[t]-s,(()=>`Padding in dimension ${t} cannot be greater than or equal to ${r.shape[t]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:e,mode:n},i={x:r};return fr.runKernel($e,i,a)}});const cu=vs({mod_:function(t,e){let n=xs(t,"a","mod"),r=xs(e,"b","mod");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.mod(n,r);return e([n,r]),s}),s,null,"Mod")}});const hu=vs({square_:function(t){const e=xs(t,"x","square"),n=[e];return fr.runKernelFunc(((t,n)=>(n([e]),t.square(e))),{x:e},null,"Square",{},n,[])}});const pu=vs({moments_:function(t,e=null,n=!1){const r=w(e,(t=xs(t,"x","moments")).shape),s=iu(t,r,n);let a=s.shape;n||(a=ai(s.shape,r));const i=hu(Xo(ca(t,"float32"),wa(s,a)));return{mean:s,variance:iu(i,r,n)}}});const du=vs({multinomial_:function(t,e,n,r=!1){const s=xs(t,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o=1===i?wa(s,[1,-1]):s,u=fr.runKernelFunc((t=>t.multinomial(o,r,e,n)),{logits2D:o});return 1===i?wa(u,[u.size]):u}});const fu=vs({notEqual_:function(t,e){let n=xs(t,"a","notEqual"),r=xs(e,"b","notEqual");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc((t=>t.notEqual(n,r)),s,null,Te)}});const mu=vs({real_:function(t){const e=xs(t,"input","real"),n={input:e};return fr.runKernelFunc((t=>t.real(e)),n,null,Me)}});const gu=vs({onesLike_:function(t){const e=xs(t,"x","onesLike"),n={x:e};return fr.runKernelFunc(((t,n)=>{if("complex64"===e.dtype){const t=gu(mu(e)),n=mo(Ao(e));return ks(t,n)}return t.onesLike(e)}),n,null,De)}});const yu=vs({pad_:function(t,e,n=0){const r=xs(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return fr.runKernelFunc(((t,s)=>(s([r]),t.pad(r,e,n))),a,null,Fe,s)}});const bu=vs({pow_:function(t,e){let n=xs(t,"base","pow"),r=xs(e,"exp","pow");[n,r]=or(n,r);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.pow(n,r);return e([n,r,s]),s}),s,null,"Pow")}});const xu=vs({prelu_:function(t,e){const n=xs(t,"x","prelu"),r=xs(e,"alpha","prelu"),s={x:n,alpha:r};return fr.runKernelFunc(((t,e)=>{const s=t.prelu(n,r);return e([n,r]),s}),s,null,Oe)}});const wu=vs({prod_:function(t,e=null,n=!1){let r=xs(t,"x","prod");"bool"===r.dtype&&(r=ca(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return fr.runKernelFunc((t=>{const s=w(e,r.shape),a=oi(s,r.rank);let i=s,o=r;null!=a&&(o=Na(r,a),i=li(i.length,r.rank));let u=t.prod(o,i);if(n){const t=ai(u.shape,s);u=wa(u,t)}return u}),s,null,"Prod",a)}});var vu={},ku=function(){var t={exports:this};return function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Nu=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Iu=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),$u=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Cu=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,i,o=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=i,t.X=o,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Su=function(){var t={exports:this};return function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&s(a,n),i.state=function(){return s(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,"object"==typeof t&&t,!1),t.exports}.call({}),Tu={};!function(t,e){var n,r=this,s=256,a=e.pow(s,6),i=e.pow(2,52),o=2*i,u=255;function l(u,l,m){var g=[],y=d(p((l=1==l?{entropy:!0}:l||{}).entropy?[u,f(t)]:null==u?function(){try{var e;return n&&(e=n.randomBytes)?e=e(s):(e=new Uint8Array(s),(r.crypto||r.msCrypto).getRandomValues(e)),f(e)}catch(e){var a=r.navigator,i=a&&a.plugins;return[+new Date,r,i,r.screen,f(t)]}}():u,3),g),b=new c(g),x=function(){for(var t=b.g(6),e=a,n=0;t<i;)t=(t+n)*s,e*=s,n=b.g(1);for(;t>=o;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,d(f(b.S),t),(l.pass||m||function(t,n,r,s){return s&&(s.S&&h(s,b),t.state=function(){return h(b,{})}),r?(e.random=t,n):t})(x,y,"global"in l?l.global:this==e,l.state)}function c(t){var e,n=t.length,r=this,a=0,i=r.i=r.j=0,o=r.S=[];for(n||(t=[n++]);a<s;)o[a]=a++;for(a=0;a<s;a++)o[a]=o[i=u&i+t[a%n]+(e=o[a])],o[i]=e;(r.g=function(t){for(var e,n=0,a=r.i,i=r.j,o=r.S;t--;)e=o[a=u&a+1],n=n*s+o[u&(o[a]=o[i=u&i+e])+(o[i]=e)];return r.i=a,r.j=i,n})(s)}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(p(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function d(t,e){for(var n,r=t+"",s=0;s<r.length;)e[u&s]=u&(n^=19*e[u&s])+r.charCodeAt(s++);return f(e)}function f(t){return String.fromCharCode.apply(0,t)}if(e.seedrandom=l,d(e.random(),t),Tu){Tu=l;try{n=aa()}catch(t){}}else 0}([],Math),Tu.alea=ku,Tu.xor128=Nu,Tu.xorwow=Iu,Tu.xorshift7=$u,Tu.xor4096=Cu,Tu.tychei=Su,vu=Tu;class Eu{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=vu.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class Au{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=vu.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ru=vs({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Eu(e,n,r,!1,s),i=la(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const Du=vs({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=la(t,r),i=new Au(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function _u(t,e){h(t);const n=gs(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ns(t,null,n,e)}function Fu(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return fr.runKernelFunc((()=>{if(t===e||t<e&&n<0||e<t&&n>1)return su([0],r);const s=M(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return _u(s,r)}),{},null,"Range",s)}const Ou=vs({reciprocal_:function(t){const e=xs(t,"x","reciprocal"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.reciprocal(e);return n([e]),r}),n,null,Le)}});const Mu=vs({relu_:function(t){const e=xs(t,"x","relu"),n={x:e};return fr.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?ca(e,"int32"):t.relu(e))),n,null,ze)}});const Lu=vs({reverse_:function(t,e){const n=xs(t,"x","reverse"),r={x:n},s={dims:e};return fr.runKernelFunc((t=>{const r=w(e,n.shape);if(0===n.rank)return ha(n);const s=t.reverse(n,r);return wa(s,n.shape)}),r,null,Ue,s)}});const zu=vs({round_:function(t){const e=xs(t,"x","round"),n={x:e};return fr.runKernelFunc((t=>t.round(e)),n,null,Ge)}});const Bu=vs({rsqrt_:function(t){const e=xs(t,"x","rsqrt"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.rsqrt(e);return n([e]),r}),n,null,He)}});const Pu=vs({selu_:function(t){const e=xs(t,"x","selu"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.selu(e);return n([e]),r}),n,null,qe)}});const Wu=vs({separableConv2d_:function(t,e,n,r,s,a=[1,1],i="NHWC"){const o=xs(t,"x","separableConv2d"),u=xs(e,"depthwiseFilter","separableConv2d"),c=xs(n,"pointwiseFilter","separableConv2d");let h=o,p=!1;if(3===o.rank&&(p=!0,h=wa(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");l(4===h.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`)),l(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),l(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),l(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),l(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const d=u.shape[2],f=u.shape[3];l(c.shape[2]===d*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*f}, but got ${c.shape[2]}.`));const m=ao(h,u,r,s,i,a),g=Yi(m,c,1,"valid",i);return p?wa(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Vu=async function(t,e){const n=xs(t,"x","setdiff1d"),r=xs(e,"y","setdiff1d");l(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),l(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),l(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let t=0;t<s.length;t++)i.has(s[t])||o++;const u=new Vn([o],n.dtype),c=new Vn([o],"int32");for(let t=0,e=0;t<s.length;t++)i.has(s[t])||(u.values[e]=s[t],c.values[e]=t,e++);return[u.toTensor(),c.toTensor()]};const Uu=vs({sign_:function(t){const e=xs(t,"x","sign"),n={x:e};return fr.runKernelFunc((t=>t.sign(e)),n,null,Je)}});const Gu=vs({sin_:function(t){const e=xs(t,"x","sin"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.sin(e);return n([e]),r}),n,null,Xe)}});const Hu=vs({sinh_:function(t){const e=xs(t,"x","sinh"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.sinh(e);return n([e]),r}),n,null,Ye)}});const ju=vs({slice_:function(t,e,n){const r=xs(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:e,size:n};return fr.runKernelFunc(((t,s)=>{const[a,i]=Pa(r,e,n);return Ea(r,a,i),s([r]),t.slice(r,a,i)}),s,null,Ke,a)}});const qu=vs({slice1d_:function(t,e,n){const r=xs(t,"x","slice1d");return l(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),ju(r,[e],[n])}});const Ku=vs({slice2d_:function(t,e,n){const r=xs(t,"x","slice2d");return l(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),ju(r,e,n)}});const Xu=vs({slice3d_:function(t,e,n){const r=xs(t,"x","slice3d");return l(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),ju(r,e,n)}});const Yu=vs({slice4d_:function(t,e,n){const r=xs(t,"x","slice4d");return l(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),ju(r,e,n)}});const Ju=vs({softmax_:function(t,e=-1){const n=xs(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return fr.runKernelFunc(((t,r)=>{const s=t.softmax(n,e);return r([s]),s}),r,null,rn,s)}});const Zu=vs({spaceToBatchND_:function(t,e,n){const r=xs(t,"x","spaceToBatchND");l(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),l(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),l(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},a={blockShape:e,paddings:n};return fr.runKernelFunc((t=>t.spaceToBatchND(r,e,n)),s,null,en,a)}});const Qu=vs({fft_:function(t){l("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return fr.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=t.as2D(r,n);return e.fft(s).reshape(t.shape)}),e,null,Qt)}});const tl=vs({ifft_:function(t){l("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return fr.runKernelFunc((e=>{const n=t.shape[t.shape.length-1],r=t.size/n,s=wa(t,[r,n]),a=e.ifft(s);return wa(a,t.shape)}),e,null,ue)}});const el=vs({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=wa(t,[n,e]);r=tl(s)}else{const s=[n,2*(e-1)],a=wa(mu(t),[n,e]),i=wa(Ao(t),[n,e]),o=Lu(ju(a,[0,1],[n,e-2]),1),u=Oo(Lu(ju(i,[0,1],[n,e-2]),1),Mo(-1)),l=Hi([a,o],1),c=Hi([i,u],1),h=wa(ks(l,c),[s[0],s[1]]);r=tl(h)}if(r=mu(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=wa(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const nl=vs({split_:function(t,e,n=0){const r=xs(t,"x","split"),s={x:r},a={numOrSizeSplits:e,axis:n};return fr.runKernelFunc(((t,s)=>{const a=w(n,r.shape)[0],i=function(t,e,n=0){let r=[];if("number"==typeof e)l(t.shape[n]%e==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(e).fill(t.shape[n]/e);else{l(e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0)<=1,(()=>"There should be only one negative value in split array."));const s=e.indexOf(-1);if(-1!==s){const r=e.reduce(((t,e)=>e>0?t+e:t));e[s]=t.shape[n]-r}l(t.shape[n]===e.reduce(((t,e)=>t+e)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=e}return r}(r,e,a);return t.split(r,i,a)}),s,null,nn,a)}});const rl=vs({rfft_:function(t,e){l("float32"===t.dtype,(()=>`The dtype for rfft() must be real value but got ${t.dtype}`));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),a=t.shape.map((t=>t));a[t.shape.length-1]=e,s=ju(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=Hi([t,su(r)],t.shape.length-1),n=e}else s=t;const a=mo(s),i=wa(ks(s,a),[r,n]),o=Qu(i),u=Math.floor(n/2)+1,c=mu(o),h=Ao(o),p=nl(c,[u,n-u],c.shape.length-1),d=nl(h,[u,n-u],h.shape.length-1),f=s.shape.slice();return f[s.shape.length-1]=u,wa(ks(p[0],d[0]),f)}});const sl=vs({sqrt_:function(t){const e=xs(t,"x","sqrt"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.sqrt(e);return n([e]),r}),n,null,tn)}});const al=vs({squaredDifference_:function(t,e){let n=xs(t,"a","squaredDifference"),r=xs(e,"b","squaredDifference");[n,r]=or(n,r),ho(n.shape,r.shape);const s={a:n,b:r};return fr.runKernelFunc(((t,e)=>{const s=t.squaredDifference(n,r);return e([n,r]),s}),s,null,sn,{})}});const il=vs({squeeze_:function(t,e){const n=xs(t,"x","squeeze");return wa(n,v(n.shape,e).newShape)}});const ol=vs({stack_:function(t,e=0){const n=ws(t,"tensors","stack");if(l(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),1===n.length)return wo(n[0],e);const r=n[0].rank,s=n[0].shape,a=n[0].dtype;l(e<=r,(()=>"Axis must be <= rank of the tensor")),n.forEach((t=>{c(s,t.shape,"All tensors passed to stack must have matching shapes"),l(a===t.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=n.map((t=>wo(t,e)));return Hi(i,e)}});const ul=vs({step_:function(t,e=0){const n=xs(t,"x","step"),r={x:n},s={alpha:e};return fr.runKernelFunc((t=>t.step(n,e)),r,null,gn,s)}});const ll=vs({stridedSlice_:function(t,e,n,r,s=0,a=0,i=0,o=0,u=0){let l=xs(t,"x","stridedSlice");const c={x:l},h={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return fr.runKernelFunc((t=>{null==r&&(r=new Array(e.length));const c=Aa(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=l.rank-e.length,p=Aa(o),d=l.shape.slice();p.forEach((t=>{e[t]=0,n[t]=1,d.splice(t,0,1)})),l=wa(l,d);const{begin:f,end:m,strides:g}=Fa(l.shape,c,h,e,n,r,s,a,i);e=f,n=m,r=g;const y=Aa(u);y.forEach((t=>{n[t]=e[t]+1,r[t]=1}));const b=Ra(e,n,r),x=b.filter(((t,e)=>-1===y.indexOf(e)));if(r.every((t=>1===t)))return wa(ju(l,e,b),x);const w=t.stridedSlice(l,e,n,r);return wa(w,x)}),c,null,"StridedSlice",h)}});const cl=vs({tan_:function(t){const e=xs(t,"x","tan"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.tan(e);return n([e]),r}),n,null,un)}});const hl=vs({tanh_:function(t){const e=xs(t,"x","tanh"),n={x:e};return fr.runKernelFunc(((t,n)=>{const r=t.tanh(e);return n([r]),r}),n,null,ln)}});function pl(t,e,n){if(h(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=gs(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ns(t,e,r,n)}function dl(t,e,n){if(h(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const r=gs(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ns(t,e,r,n)}const fl=vs({topk_:function(t,e=1,n=!0){const r=xs(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const a={x:r},i={k:e,sorted:n},[o,u]=fr.runKernelFunc((t=>t.topk(r,e,n)),a,null,"TopK",i);return{values:o,indices:u}}});const ml=vs({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Eu(e,n,r,!0,s),i=la(t,r);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const gl=vs({unique_:function(t,e=0){const n=xs(t,"x","unique",null);l(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:e},[a,i]=fr.runKernel(pn,r,s);return{values:a,indices:i}}});const yl=vs({unstack_:function(t,e=0){const n=xs(t,"x","unstack");l(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`)),e<0&&(e+=n.shape.length);const r={value:n},s={axis:e};return fr.runKernelFunc((t=>t.unstack(n,e)),r,null,dn,s)}});function bl(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=la(t,"int32"),s=la([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),i=e*t.length;s.values.set(a,i)}return s.toTensor()}const xl=async function(t){const e=xs(t,"condition","whereAsync","bool"),n=await e.data(),r=bl(e.shape,n);return t!==e&&e.dispose(),r};const wl=vs({equalStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","equalStrict"),r=xs(e,"b","equalStrict");return c(n.shape,r.shape,"Error in equalStrict: "),po(n,r)}}),vl=vs({greaterEqualStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","greaterEqualStrict"),r=xs(e,"b","greaterEqualStrict");return c(n.shape,r.shape,"Error in greaterEqualStrict: "),Eo(n,r)}}),kl=vs({greaterStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","greaterStrict"),r=xs(e,"b","greaterStrict");return c(n.shape,r.shape,"Error in greaterStrict: "),To(n,r)}}),Nl=vs({lessEqualStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","lessEqualStrict"),r=xs(e,"b","lessEqualStrict");return c(n.shape,r.shape,"Error in lessEqualStrict: "),Bo(n,r)}}),Il=vs({lessStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","lessStrict"),r=xs(e,"b","lessStrict");return c(n.shape,r.shape,"Error in lessStrict: "),zo(n,r)}}),$l=vs({notEqualStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","notEqualStrict"),r=xs(e,"b","notEqualStrict");return c(n.shape,r.shape,"Error in notEqualStrict: "),fu(n,r)}});const Cl=vs({addStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","addStrict"),r=xs(e,"b","addStrict");return c(n.shape,r.shape,"Error in addStrict: "),ei(n,r)}}),Sl=vs({divStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","div"),r=xs(e,"b","div");return c(n.shape,r.shape,"Error in divideStrict: "),uo(n,r)}}),Tl=vs({maximumStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","maximumStrict"),r=xs(e,"b","maximumStrict");return c(n.shape,r.shape,"Error in maximumStrict: "),Fo(n,r)}}),El=vs({minimumStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","minimumStrict"),r=xs(e,"b","minimumStrict");return c(n.shape,r.shape,"Error in minimumStrict: "),uu(n,r)}}),Al=vs({modStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","modStrict"),r=xs(e,"b","modStrict");return c(n.shape,r.shape,"Error in modStrict: "),cu(n,r)}}),Rl=vs({mulStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","mul"),r=xs(e,"b","mul");return c(n.shape,r.shape,"Error in multiplyStrict: "),Oo(n,r)}}),Dl=vs({powStrict_:function(t,e){return Ga("strict variants of ops have been deprecated and will be removed in future"),c(t.shape,e.shape,"Error in powStrict: "),bu(t,e)}}),_l=vs({squaredDifferenceStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","squaredDifferenceStrict"),r=xs(e,"b","squaredDifferenceStrict");return c(n.shape,r.shape,"Error in squaredDifferenceStrict: "),al(n,r)}}),Fl=vs({subStrict_:function(t,e){Ga("strict variants of ops have been deprecated and will be removed in future");const n=xs(t,"a","subStrict"),r=xs(e,"b","subStrict");return c(n.shape,r.shape,"Error in subStrict: "),Xo(n,r)}});function Ol(t,e,n=null){if(0===t.rank)return Za(t);if(1!==t.rank&&null===n)return Ol(wa(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return Yo(Za(t),n);if(e===1/0)return Ko(Za(t),n);if(e===-1/0)return ou(Za(t),n);if("euclidean"===e||2===e)return sl(Yo(bu(Za(t),Mo(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(n)&&2===n.length){if(1===e)return Ko(Yo(Za(t),n[0]),n[1]-1);if(e===1/0)return Ko(Yo(Za(t),n[1]),n[0]);if(e===-1/0)return ou(Yo(Za(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return sl(Yo(hu(t),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Ml=vs({norm_:function(t,e="euclidean",n=null,r=!1){const s=Ol(t=xs(t,"x","norm"),e,n);let a=s.shape;if(r){const e=w(n,t.shape);a=ai(s.shape,e)}return wa(s,a)}});const Ll=vs({scatterND_:function(t,e,n){const r=xs(t,"indices","scatterND","int32"),s=xs(e,"updates","scatterND");Sa(s,r,n);const a={indices:r,updates:s},i={shape:n};return fr.runKernelFunc((t=>t.scatterND(r,s,n)),a,null,"ScatterNd",i)}});const zl=vs({sparseToDense_:function(t,e,n,r=0){const s=xs(t,"sparseIndices","sparseToDense","int32"),a=xs(e,"sparseValues","sparseToDense"),i=xs(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:n};return fr.runKernelFunc((t=>t.sparseToDense(s,a,n,i)),o,null,"SparseToDense",u)}});const Bl=vs({gatherND_:function(t,e){const n=xs(e,"indices","gatherND","int32"),r=xs(t,"x","gatherND"),s={params:r,indices:n};return fr.runKernelFunc((t=>t.gatherND(r,n)),s,null,"GatherNd")}});const Pl=vs({dropout_:function(t,e,n,r){const s=xs(t,"x","dropout");if(l("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),l(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof jn?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(f(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),i=1-e,o=uo($o(ei(Du(a,0,1,"float32",r),i)),i);return Oo(s,o)}});const Wl=vs({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",i){let o=t;3===t.rank&&(o=wa(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=wa(e,[1,e.shape[0],e.shape[1],e.shape[2]])),l(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),l(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),l(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===a?o.shape[3]:o.shape[1],h="NHWC"===a?u.shape[3]:u.shape[1];l(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),l(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),null!=i&&l(m(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={x:o,dy:u},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n};return fr.runKernelFunc((t=>{const e=Ri(a),l=ki(o.shape,n,r,1,s,i,!1,e);return t.conv2dDerFilter(o,u,l)}),p,null,Ft,d)}});const Vl=vs({relu6_:function(t){const e=xs(t,"x","relu6"),n={x:e};return fr.runKernelFunc(((t,n)=>(n([e]),"bool"===e.dtype?ca(e,"int32"):t.relu6(e))),n,null,Ve)}});function Ul(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return Oo(t,ul(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Gl(t,e){let n=e;const r=co(t.shape,e.shape);return r.length>0&&(n=Yo(n,r)),wa(n,t.shape)}function Hl(t,e,n){if("linear"===e)return t;if("relu"===e)return Mu(t);if("elu"===e)return yo(t);if("relu6"===e)return Vl(t);if("prelu"===e)return xu(t,n);throw new Error(`Unknown fused activation ${e}.`)}const jl=(t,e)=>!(t>0)||"linear"===e;const ql=vs({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c}){if(u=u||"linear",!1===jl(fr.state.gradientDepth,u)){let l=Yi(t,e,n,r,s,a,i);return null!=o&&(l=ei(l,o)),Hl(l,u,c)}const h=xs(t,"x","conv2d"),p=xs(e,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=wa(h,[1,h.shape[0],h.shape[1],h.shape[2]])),l(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),l(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),null!=i&&l(m(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),l(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),l(Ai(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),l("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const g=ki(d.shape,p.shape,n,a,r,i);let y,b;null!=o&&(y=xs(o,"bias","fused conv2d"),[y]=or(y,h),ho(g.outShape,y.shape)),null!=c&&(b=xs(c,"prelu weights","fused conv2d"));const x=(t,e)=>{const[s,i,o,c]=e,h=Ul(t,o,u);l(Ei(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[Zi(i.shape,h,s,n,r),Wl(i,h,s.shape,n,r)];if(null!=c){const t=Gl(c,h);p.push(t)}return p},w=t=>t.fusedConv2d({input:d,filter:p,convInfo:g,bias:y,activation:u,preluActivationWeights:b}),v={x:d,filter:p,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};if(null==o){return Ja(((t,e,n)=>{let r=fr.runKernelFunc(w,v,null,wn,k);return n([e,t,r]),f&&(r=wa(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,p)}return Ja(((t,e,n,r)=>{let s=fr.runKernelFunc(w,v,null,wn,k);return r([e,t,s,n]),f&&(s=wa(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,p,y)}});const Kl=vs({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,s,a=[1,1],i){let o=t;3===t.rank&&(o=wa(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=wa(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const l={x:o,dy:u},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n};return fr.runKernelFunc((e=>{const l=ki(t.shape,n,r,a,s,i,!0);return e.depthwiseConv2DDerFilter(o,u,l)}),l,null,Ut,c)}});const Xl=vs({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r,s,a=[1,1],i){let o=e,u=!1;3===e.rank&&(u=!0,o=wa(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const l={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:t},h=fr.runKernelFunc((e=>{const u=ki(t,n.shape,r,a,s,i,!0);return e.depthwiseConv2DDerInput(o,n,u)}),l,null,Gt,c);return u?wa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Yl=vs({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:c}){if(!1===jl(fr.state.gradientDepth,u)){let l=ao(t,e,n,r,s,a,i);return null!=o&&(l=ei(l,o)),Hl(l,u,c)}const h=xs(t,"x","depthwiseConv2d"),p=xs(e,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=wa(h,[1,h.shape[0],h.shape[1],h.shape[2]])),l(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),l(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),l(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),l(Ai(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&l(m(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`));const g=ki(d.shape,p.shape,n,a,r,i,!0);let y,b;null!=o&&(y=xs(o,"bias","fused conv2d"),[y]=or(y,h),ho(g.outShape,y.shape)),null!=c&&(b=xs(c,"prelu weights","fused depthwiseConv2d"));const x=(t,e)=>{l(Ei(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,o,c,h]=e,p=Ul(t,c,u),d=Xl(o.shape,p,s,n,r,a,i),f=Kl(o,p,s.shape,n,r,a,i);if(null!=h){return[d,f,Gl(y,p)]}return[d,f]},w=t=>t.fusedDepthwiseConv2D({input:d,filter:p,convInfo:g,bias:y,activation:u,preluActivationWeights:b}),v={x:d,filter:p,bias:y,preluActivationWeights:b},k={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u};if(null==o){return Ja(((t,e,n)=>{let r=fr.runKernelFunc(w,v,null,vn,k);return n([e,t,r]),f&&(r=wa(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,p)}return Ja(((t,e,n,r)=>{let s=fr.runKernelFunc(w,v,null,vn,k);return r([e,t,s,n]),f&&(s=wa(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,p,y)}});const Jl=vs({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i}){if(!1===jl(fr.state.gradientDepth,a)){let o=va(t,e,n,r);return null!=s&&(o=ei(o,s)),Hl(o,a,i)}let o=xs(t,"a","fused matMul"),u=xs(e,"b","fused matMul");[o,u]=or(o,u);const c=n?o.shape[o.rank-2]:o.shape[o.rank-1],h=r?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?o.shape[o.rank-1]:o.shape[o.rank-2],m=r?u.shape[u.rank-2]:u.shape[u.rank-1],g=o.shape.slice(0,-2),y=u.shape.slice(0,-2),b=d(g),x=d(y);l(o.rank>=2&&u.rank>=2&&o.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${u.rank}.`)),l(f(g,y),(()=>`Error in fused matMul: outer dimensions (${g}) and (${y}) of Tensors with shapes ${o.shape} and ${u.shape} must match.`)),l(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${o.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=o.shape.slice(0,-2).concat([p,m]),v=wa(o,n?[b,c,p]:[b,p,c]),k=wa(u,r?[x,m,h]:[x,h,m]);let N,I;null!=s&&(N=xs(s,"bias","fused matMul"),[N]=or(N,o),ho(w,N.shape)),null!=i&&(I=xs(i,"prelu weights","fused matMul"));const $=(t,e)=>{const[i,o,u,l]=e,c=Ul(wa(t,u.shape),u,a);let h,p;if(n||r?!n&&r?(h=va(c,o,!1,!1),p=va(c,i,!0,!1)):n&&!r?(h=va(o,c,!1,!0),p=va(i,c,!1,!1)):(h=va(o,c,!0,!0),p=va(c,i,!0,!0)):(h=va(c,o,!1,!0),p=va(i,c,!0,!1)),null!=s){return[h,p,Gl(l,c)]}return[h,p]},C=t=>t.fusedBatchMatMul({a:v,b:k,transposeA:n,transposeB:r,bias:N,activation:a,preluActivationWeights:I}),S={a:v,b:k,bias:N,preluActivationWeights:I},T={transposeA:n,transposeB:r,activation:a};if(null==s){return Ja(((t,e,n)=>{const r=fr.runKernelFunc(C,S,null,xn,T);return n([t,e,r]),{value:wa(r,w),gradFunc:$}}))(v,k)}return Ja(((t,e,n,r)=>{const s=fr.runKernelFunc(C,S,null,xn,T);return r([t,e,s,n]),{value:wa(s,w),gradFunc:$}}))(v,k,N)}});function Zl(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(i)}return _u(s,"float32")}vs({hammingWindow_:function(t){return Zl(t,.54,.46)}});const Ql=vs({hannWindow_:function(t){return Zl(t,.5,.5)}});const tc=vs({frame_:function(t,e,n,r=!1,s=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(ju(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,o=Hi([ju(t,a,e-r),Io([r],s)]);i.push(o),a+=n}return 0===i.length?pl([],[0,e]):wa(Hi(i),[i.length,e])}});vs({stft_:function(t,e,n,r,s=Ql){var a;null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const i=tc(t,e,n),o=Oo(i,s(e)),u=[];for(let t=0;t<i.shape[0];t++)u.push(rl(ju(o,[t,0],[1,e]),r));return Hi(u)}});const ec=vs({cropAndResize_:function(t,e,n,r,s,a){const i=xs(t,"image","cropAndResize"),o=xs(e,"boxes","cropAndResize","float32"),u=xs(n,"boxInd","cropAndResize","int32");s=s||"bilinear",a=a||0;const c=o.shape[0];l(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),l(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${o.shape}.`)),l(1===u.rank&&u.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${o.shape}.`)),l(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),l(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),l("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const h={image:i,boxes:o,boxInd:u},p={method:s,extrapolationValue:a,cropSize:r};return fr.runKernelFunc((t=>t.cropAndResize(i,o,u,r,s,a)),h,null,"CropAndResize",p)}});const nc=vs({flipLeftRight_:function(t){const e=xs(t,"image","flipLeftRight","float32");l(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return fr.runKernel(ee,n,{})}});const rc=vs({rotateWithOffset_:function(t,e,n=0,r=.5){const s=xs(t,"image","rotateWithOffset","float32");l(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:e,fillValue:n,center:r};return fr.runKernel(bn,a,i)}});function sc(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),l(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),l(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),l(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),l(1===e.rank,(()=>"scores must be a 1D tensor")),l(e.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${e.shape[0]}`)),l(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const ac=vs({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=xs(t,"boxes","nonMaxSuppression"),i=xs(e,"scores","nonMaxSuppression"),o=sc(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return fr.runKernelFunc((t=>t.nonMaxSuppression(a,i,n,r,s)),{boxes:a,scores:i},null,Ee,u)}});function ic(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(e,t[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(t,e,n||oc)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function oc(t,e){return t>e?1:t<e?-1:0}function uc(t,e,n,r,s){return hc(t,e,n,r,s,0).selectedIndices}function lc(t,e,n,r,s,a){return hc(t,e,n,r,s,0,!1,a,!0)}function cc(t,e,n,r,s,a){return hc(t,e,n,r,s,a,!0)}function hc(t,e,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let t=0;t<e.length;t++)e[t]>s&&l.push({score:e[t],boxIndex:t,suppressBeginIndex:0});l.sort(fc);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const e=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=pc(t,a,h[n]);if(i>=r){o=!0;break}if(e.score=e.score*dc(r,c,i),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>s&&ic(l,e,fc))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:_u(h,"int32")};return i&&(m.selectedScores=_u(p,"float32")),u&&(m.validOutputs=Mo(d,"int32")),m}function pc(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function dc(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function fc(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const mc=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=xs(t,"boxes","nonMaxSuppressionAsync"),i=xs(e,"scores","nonMaxSuppressionAsync"),o=sc(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=uc(u[0],u[1],n,r,s);return a!==t&&a.dispose(),i!==e&&i.dispose(),l};const gc=vs({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=xs(t,"boxes","nonMaxSuppression"),o=xs(e,"scores","nonMaxSuppression"),u=sc(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=fr.runKernel(Re,l,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const yc=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=xs(t,"boxes","nonMaxSuppressionAsync"),o=xs(e,"scores","nonMaxSuppressionAsync"),u=sc(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=cc(l[0],l[1],n,r,s,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const bc=vs({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=xs(t,"boxes","nonMaxSuppression"),o=xs(e,"scores","nonMaxSuppression"),u=sc(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=fr.runKernel(Ae,l,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const xc=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=xs(t,"boxes","nonMaxSuppressionAsync"),o=xs(e,"scores","nonMaxSuppressionAsync"),u=sc(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=lc(p,d,l,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const wc=vs({resizeBilinear_:function(t,e,n=!1){const r=xs(t,"images","resizeBilinear");l(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),l(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`));let s=r,a=!1;3===r.rank&&(a=!0,s=wa(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,u={images:s},c={alignCorners:n,size:e},h=fr.runKernelFunc(((t,e)=>(e([s]),t.resizeBilinear(s,i,o,n))),u,null,We,c);return a?wa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const vc=vs({resizeNearestNeighbor_:function(t,e,n=!1){const r=xs(t,"images","resizeNearestNeighbor");l(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),l(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),l("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype"));let s=r,a=!1;3===r.rank&&(a=!0,s=wa(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[i,o]=e,u={images:s},c={alignCorners:n,size:e},h=fr.runKernelFunc(((t,e)=>(e([s]),t.resizeNearestNeighbor(s,i,o,n))),u,null,Pe,c);return a?wa(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const kc=vs({bandPart_:function(t,e,n){l(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),l(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=xs(t,"a","bandPart");l(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=wa(Fu(0,a,1,"int32"),[-1,1]),u=Fu(0,i,1,"int32"),c=Xo(o,u),h=Zo(Bo(c,Mo(+e,"int32")),Eo(c,Mo(-n,"int32"))),p=su([a,i],r.dtype);return wa(ol(yl(wa(r,[-1,a,i])).map((t=>fo(h,t,p)))),s)}});const Nc=vs({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,l(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)l(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=nl(t,t.shape[0],0).map((t=>il(t,[0])));l(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(fr.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=Oo(Yo(Oo(n[r],t)),n[r]);t=Xo(t,e)}return uo(t,Ml(t,"euclidean"))})));return e?ol(n,0):n}});function Ic(t,e=!1){return fr.tidy((()=>{l(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=No(n),a=ha(t);const i=pl([[1]],[1,1]);let o=ha(i);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=o,l=s;[o,a,s]=fr.tidy((()=>{const e=ju(a,[t,t],[n-t,1]),u=Ml(e),l=ju(a,[t,t],[1,1]),c=fo(To(l,0),pl([[-1]]),pl([[1]])),h=Xo(l,Oo(c,u)),p=uo(e,h);o=1===p.shape[0]?ha(i):Hi([i,ju(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Go(uo(va(c,h),u)),f=ju(a,[t,0],[n-t,r]),m=Oo(d,o),g=Na(o);if(0===t)a=Xo(f,va(m,va(g,f)));else{const e=Xo(f,va(m,va(g,f)));a=Hi([ju(a,[0,0],[t,r]),e],0)}const y=Na(m),b=ju(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=Xo(b,va(va(b,o),y));else{const e=Xo(b,va(va(b,o),y));s=Hi([ju(s,[0,0],[n,t]),e],1)}return[o,a,s]})),Ka([e,u,l])}return!e&&n>r&&(s=ju(s,[0,0],[n,r]),a=ju(a,[0,0],[r,r])),[s,a]}))}const $c=vs({qr_:function(t,e=!1){if(l(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return Ic(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=yl(wa(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach((t=>{const[n,r]=Ic(t,e);s.push(n),a.push(r)}));return[wa(ol(s,0),t.shape),wa(ol(a,0),t.shape)]}}});var Cc,Sc;(Sc=Cc||(Cc={}))[Sc.NONE=0]="NONE",Sc[Sc.MEAN=1]="MEAN",Sc[Sc.SUM=2]="SUM",Sc[Sc.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const Tc=vs({computeWeightedLoss_:function(t,e,n=Cc.SUM_BY_NONZERO_WEIGHTS){const r=xs(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=xs(e,"weights","computeWeightedLoss"));const a=null==s?r:Oo(r,s);if(n===Cc.NONE)return a;if(n===Cc.SUM)return Yo(a);if(n===Cc.MEAN){if(null==s)return iu(a);{const t=r.size/s.size,e=uo(Yo(a),Yo(s));return t>1?uo(e,Mo(t)):e}}if(n===Cc.SUM_BY_NONZERO_WEIGHTS){if(null==s)return uo(Yo(a),Mo(r.size));{const t=Oo(s,au(r.shape)),e=ca(Yo(fu(t,Mo(0))),"float32");return uo(Yo(a),e)}}throw Error(`Unknown reduction: ${n}`)}});vs({absoluteDifference_:function(t,e,n,r=Cc.SUM_BY_NONZERO_WEIGHTS){const s=xs(t,"labels","absoluteDifference"),a=xs(e,"predictions","absoluteDifference");let i=null;null!=n&&(i=xs(n,"weights","absoluteDifference")),c(s.shape,a.shape,"Error in absoluteDifference: ");const o=Za(Xo(s,a));return Tc(o,i,r)}});vs({cosineDistance_:function(t,e,n,r,s=Cc.SUM_BY_NONZERO_WEIGHTS){const a=xs(t,"labels","cosineDistance"),i=xs(e,"predictions","cosineDistance");let o=null;null!=r&&(o=xs(r,"weights","cosineDistance")),c(a.shape,i.shape,"Error in cosineDistance: ");const u=Mo(1),l=Xo(u,Yo(Oo(a,i),n,!0));return Tc(l,o,s)}});vs({hingeLoss_:function(t,e,n,r=Cc.SUM_BY_NONZERO_WEIGHTS){let s=xs(t,"labels","hingeLoss");const a=xs(e,"predictions","hingeLoss");let i=null;null!=n&&(i=xs(n,"weights","hingeLoss")),c(s.shape,a.shape,"Error in hingeLoss: ");const o=Mo(1);s=Xo(Oo(Mo(2),s),o);const u=Mu(Xo(o,Oo(s,a)));return Tc(u,i,r)}});vs({huberLoss_:function(t,e,n,r=1,s=Cc.SUM_BY_NONZERO_WEIGHTS){const a=xs(t,"labels","huberLoss"),i=xs(e,"predictions","huberLoss");let o=null;null!=n&&(o=xs(n,"weights","huberLoss")),c(a.shape,i.shape,"Error in huberLoss: ");const u=Mo(r),l=Za(Xo(i,a)),h=uu(l,u),p=Xo(l,h),d=ei(Oo(Mo(.5),hu(h)),Oo(u,p));return Tc(d,o,s)}});vs({logLoss_:function(t,e,n,r=1e-7,s=Cc.SUM_BY_NONZERO_WEIGHTS){const a=xs(t,"labels","logLoss"),i=xs(e,"predictions","logLoss");let o=null;null!=n&&(o=xs(n,"weights","logLoss")),c(a.shape,i.shape,"Error in logLoss: ");const u=Mo(1),l=Mo(r),h=Go(Oo(a,Vo(ei(i,l)))),p=Oo(Xo(u,a),Vo(ei(Xo(u,i),l))),d=Xo(h,p);return Tc(d,o,s)}});vs({meanSquaredError_:function(t,e,n,r=Cc.SUM_BY_NONZERO_WEIGHTS){const s=xs(t,"labels","meanSquaredError"),a=xs(e,"predictions","meanSquaredError");let i=null;null!=n&&(i=xs(n,"weights","meanSquaredError")),c(s.shape,a.shape,"Error in meanSquaredError: ");const o=al(s,a);return Tc(o,i,r)}});vs({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Cc.SUM_BY_NONZERO_WEIGHTS){let a=xs(t,"multiClassLabels","sigmoidCrossEntropy");const i=xs(e,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=xs(n,"weights","sigmoidCrossEntropy")),c(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Mo(r),e=Mo(1),n=Mo(.5);a=ei(Oo(a,Xo(e,t)),Oo(n,t))}const u=function(t,e){const n=xs(t,"labels","sigmoidCrossEntropyWithLogits"),r=xs(e,"logits","sigmoidCrossEntropyWithLogits");c(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Mu(r),a=Oo(r,n),i=Uo(xo(Go(Za(r))));return ei(Xo(s,a),i)}(a,i);return Tc(u,o,s)}});const Ec=vs({logSumExp_:function(t,e=null,n=!1){const r=xs(t,"x","logSumExp"),s=w(e,r.shape),a=Ko(r,s,!0),i=Xo(r,a),o=xo(i),u=Yo(o,s),l=Vo(u),c=ei(wa(a,l.shape),l);if(n){const t=ai(c.shape,s);return wa(c,t)}return c}});vs({softmaxCrossEntropy_:function(t,e,n,r=0,s=Cc.SUM_BY_NONZERO_WEIGHTS){let a=xs(t,"onehotLabels","softmaxCrossEntropy");const i=xs(e,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=xs(n,"weights","softmaxCrossEntropy")),c(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Mo(r),e=Mo(1),n=Mo(a.shape[1]);a=ei(Oo(a,Xo(e,t)),uo(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);return Ja(((t,e,r)=>{const s=Ec(e,[n],!0),a=Xo(ca(e,"float32"),s);r([t,a]);const i=Go(Oo(a,t));return{value:Yo(i,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=ai(t.shape,[n]);return[Oo(wa(t,a),Xo(ca(r,"float32"),xo(s))),Oo(wa(t,a),Xo(xo(s),ca(r,"float32")))]}}}))(t,e)}(a,i);return Tc(u,o,s)}});const Ac={flipLeftRight:nc,resizeNearestNeighbor:vc,resizeBilinear:wc,rotateWithOffset:rc,cropAndResize:ec,nonMaxSuppression:ac,nonMaxSuppressionAsync:mc,nonMaxSuppressionWithScore:gc,nonMaxSuppressionWithScoreAsync:yc,nonMaxSuppressionPadded:bc,nonMaxSuppressionPaddedAsync:xc},Rc={bandPart:kc,gramSchmidt:Nc,qr:$c};class Dc extends Wa{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:s[t.name]})));this.applyGradients(t)}else this.applyGradients(s);return Ka(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function(t,e){l(A(t),(()=>"The f passed in variableGrads(f) must be a function")),l(null==e||Array.isArray(e)&&e.every((t=>t instanceof qn)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=e;if(!n){e=[];for(const t in fr.registeredVariables)e.push(fr.registeredVariables[t])}const r=n?e.filter((t=>!t.trainable)):null,s=e.length;l((e=e.filter((t=>t.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=fr.gradients(t,e,null,!0);l(i.some((t=>null!=t)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),l(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return e.forEach(((t,e)=>{null!=i[e]&&(o[t.name]=i[e])})),null!=r&&r.forEach((t=>o[t.name]=null)),{value:a,grads:o}}(t,e)}dispose(){null!=this.iterations_&&Ka(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Mo(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Dc,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class _c extends Dc{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=fr.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=fr.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${e}/accum_grad`,variable:qa((()=>mo(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${e}/accum_var`,variable:qa((()=>mo(r).variable(false)))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;qa((()=>{const t=ei(Oo(a,this.rho),Oo(hu(s),1-this.rho)),e=Oo(uo(sl(ei(i,this.epsilon)),sl(ei(a,this.epsilon))),s),n=ei(Oo(i,this.rho),Oo(hu(e),1-this.rho));a.assign(t),i.assign(n);const o=ei(Oo(e,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ka(this.accumulatedGrads.map((t=>t.variable))),Ka(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}_c.className="Adadelta",Ua(_c);class Fc extends Dc{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=fr.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:`${e}/accumulator`,variable:qa((()=>Io(r.shape,this.initialAccumulatorValue).variable(t)))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const a=this.accumulatedGrads[n].variable;qa((()=>{const t=ei(a,hu(s));a.assign(t);const e=ei(Oo(uo(s,sl(ei(t,fr.backend.epsilon()))),-this.learningRate),r);r.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ka(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}Fc.className="Adagrad",Ua(Fc);class Oc extends Dc{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],qa((()=>{this.accBeta1=Mo(e).variable(),this.accBeta2=Mo(n).variable()})),null==r&&(this.epsilon=fr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);qa((()=>{const n=Xo(1,this.accBeta1),r=Xo(1,this.accBeta2);e.forEach(((e,s)=>{const a=fr.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:qa((()=>mo(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${e}/v`,variable:qa((()=>mo(a).variable(false)))});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=ei(Oo(o,this.beta1),Oo(i,1-this.beta1)),c=ei(Oo(u,this.beta2),Oo(hu(i),1-this.beta2)),h=uo(l,n),p=uo(c,r);o.assign(l),u.assign(c);const d=ei(Oo(uo(h,ei(sl(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Oo(this.accBeta1,this.beta1)),this.accBeta2.assign(Oo(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ka(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&Ka(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),qa((()=>{this.accBeta1.assign(bu(this.beta1,this.iterations_+1)),this.accBeta2.assign(bu(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}Oc.className="Adam",Ua(Oc);class Mc extends Dc{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],qa((()=>{this.iteration=Mo(0).variable(),this.accBeta1=Mo(e).variable()})),null==r&&(this.epsilon=fr.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);qa((()=>{const n=Xo(1,this.accBeta1),r=uo(-this.learningRate,ei(Oo(this.iteration,this.decay),1));e.forEach(((e,s)=>{const a=fr.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:mo(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${e}/v`,variable:mo(a).variable(false)});const i=Array.isArray(t)?t[s].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=ei(Oo(o,this.beta1),Oo(i,1-this.beta1)),c=Oo(u,this.beta2),h=Za(i),p=Fo(c,h);o.assign(l),u.assign(p);const d=ei(Oo(uo(r,n),uo(l,ei(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(ei(this.iteration,1)),this.accBeta1.assign(Oo(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ka(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&Ka(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}Mc.className="Adamax",Ua(Mc);class Lc extends Dc{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=fr.registeredVariables[e];qa((()=>{const t=ei(Oo(this.c,r),s);s.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Xa(Mo(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Lc.className="SGD",Ua(Lc);class zc extends Lc{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Mo(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=fr.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:`${e}/momentum`,variable:qa((()=>mo(r).variable(t)))}}const s=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&qa((()=>{let t;const e=ei(Oo(this.m,s),a);t=this.useNesterov?ei(Oo(this.c,ei(a,Oo(e,this.m))),r):ei(Oo(this.c,e),r),s.assign(e),r.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ka(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}zc.className="Momentum",Ua(zc);class Bc extends Dc{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=fr.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=fr.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${e}/rms`,variable:qa((()=>mo(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${e}/momentum`,variable:qa((()=>mo(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${e}/mg`,variable:qa((()=>mo(r).variable(s)))});const a=Array.isArray(t)?t[n].tensor:t[e];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;qa((()=>{const t=ei(Oo(i,this.decay),Oo(hu(a),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=ei(Oo(e,this.decay),Oo(a,1-this.decay)),u=uo(Oo(a,this.learningRate),sl(Xo(t,ei(hu(s),this.epsilon)))),l=ei(Oo(o,this.momentum),u);i.assign(t),e.assign(s),o.assign(l);const c=Xo(r,l);r.assign(c)}else{const t=ei(Oo(i,this.decay),Oo(hu(a),1-this.decay)),e=ei(Oo(o,this.momentum),uo(Oo(a,this.learningRate),sl(ei(t,this.epsilon))));i.assign(t),o.assign(e);const n=Xo(r,e);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ka(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Ka(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&Ka(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Bc.className="RMSProp",Ua(Bc);class Pc{static sgd(t){return new Lc(t)}static momentum(t,e,n=!1){return new zc(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new Bc(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new Oc(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new _c(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new Mc(t,e,n,r,s)}static adagrad(t,e=.1){return new Fc(t,e)}}const Wc={sgd:Pc.sgd,momentum:Pc.momentum,adadelta:Pc.adadelta,adagrad:Pc.adagrad,rmsprop:Pc.rmsprop,adamax:Pc.adamax,adam:Pc.adam},Vc="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Uc(){return new Promise((t=>Vc((()=>t()))))}function Gc(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function Hc(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function jc(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function qc(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Kc(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Xc(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const Yc=1.7580993408473768,Jc=1.0507009873554805;function Zc(...t){G().getBool("IS_TEST")||console.warn(...t)}function Qc(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function th(t,e){return{real:t[2*e],imag:t[2*e+1]}}function eh(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function nh(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function rh(t,e,n){const r=(e-t)/(n-1),s=M(n,"float32");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return _u(s,"float32")}function sh(t,e,n){const r=new Array(t.rank).fill(0),s=t.shape.slice();return e.map((e=>{const a=[...s];a[n]=e;const i=ju(t,r,a);return r[n]+=e,i}))}function ah(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=la(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const a=t.locToIndex(s);r.values[e]=t.values[a]}return r.toTensor()}function ih(t,e,n,r,s){const a=e[e.length-1],[i,o]=[t.length/a,a],u=k(n,i*r),l=k("int32",i*r);for(let e=0;e<i;e++){const n=e*o,s=t.subarray(n,n+o),a=[];for(let t=0;t<s.length;t++)a.push({value:s[t],index:t});a.sort(((t,e)=>e.value-t.value));const i=e*r,c=u.subarray(i,i+r),h=l.subarray(i,i+r);for(let t=0;t<r;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[Is(u,c,n),Is(l,c,"int32")]}const oh={kernelName:ct,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,ul(ca(n,"float32"),-1))}}},uh={kernelName:ht,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=hu(ca(n,"float32")),r=sl(Xo(Mo(1),e));return Go(uo(t,r))}}}},lh={kernelName:pt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=sl(Xo(hu(ca(n,"float32")),1));return uo(t,e)}}}},ch={kernelName:dt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{let e=t;const r=co(n.shape,s);return r.length>0&&(e=Yo(e,r)),wa(e,n.shape)},b:()=>{let e=t;const n=co(r.shape,s);return n.length>0&&(e=Yo(e,n)),wa(e,r.shape)}}}},hh={kernelName:ft,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach(((e,r)=>{n[r]=()=>t.clone()})),n}},ph={kernelName:mt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>mo(n)}}},dh={kernelName:gt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>mo(n)}}},fh={kernelName:yt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,sl(Xo(Mo(1),hu(ca(n,"float32")))))}}},mh={kernelName:bt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=sl(ei(Mo(1),hu(ca(n,"float32"))));return uo(t,e)}}}},gh={kernelName:vt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{const e=ei(hu(n),hu(r));let a=Oo(t,uo(r,e));const i=co(n.shape,s);return i.length>0&&(a=Yo(a,i)),wa(a,n.shape)},b:()=>{const e=ei(hu(n),hu(r));let a=Go(Oo(t,uo(n,e)));const i=co(r.shape,s);return i.length>0&&(a=Yo(a,i)),wa(a,r.shape)}}}},yh={kernelName:xt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,ei(hu(ca(n,"float32")),1))}}},bh={kernelName:wt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,Xo(Mo(1),hu(ca(n,"float32"))))}}};const xh=vs({avgPool3dBackprop_:function(t,e,n,r,s=[1,1,1],a,i){const o=xs(t,"dy","avgPool3dBackprop"),u=xs(e,"input","avgPool3dBackprop");let c=o,h=u,p=!1;4===u.rank&&(p=!0,c=wa(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=wa(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),l(5===c.rank,(()=>`Error in avgPool3dBackprop: dy must be rank 5 but got rank ${c.rank}.`)),l(5===h.rank,(()=>`Error in avgPool3dBackprop: input must be rank 5 but got rank ${h.rank}.`)),l(Ai(r,s),(()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${s}'`)),null!=i&&l(m(a),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const d={dy:c,input:h},f={filterSize:n,strides:r,dilations:s,pad:a,dimRoundingMode:i},g=fr.runKernelFunc((t=>{const e=vi(h.shape,n,r,s,a,i);return t.avgPool3dBackprop(c,h,e)}),d,null,"AvgPool3DBackprop",f);return p?wa(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),wh={kernelName:It,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,dilations:i,pad:o,dimRoundingMode:u}=n,l=null==i?[1,1,1]:i;return{x:()=>xh(t,r,s,a,l,o,u)}}};const vh=vs({avgPoolBackprop_:function(t,e,n,r,s){const a=xs(t,"dy","avgPoolBackprop"),i=xs(e,"input","avgPoolBackprop");l(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,u=a,c=!1;3===i.rank&&(c=!0,o=wa(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=wa(a,[1,a.shape[0],a.shape[1],a.shape[2]])),l(4===u.rank,(()=>`Error in avgPoolBackprop: dy must be rank 4 but got rank ${u.rank}.`)),l(4===o.rank,(()=>`Error in avgPoolBackprop: input must be rank 4 but got rank ${o.rank}.`));const h={dy:u,input:o},p={filterSize:n,strides:r,pad:s},d=fr.runKernelFunc((t=>{const e=wi(o.shape,n,r,1,s);return t.avgPoolBackprop(u,o,e)}),h,null,Nt,p);return c?wa(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),kh={kernelName:kt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:a,pad:i}=n;return{x:()=>vh(t,r,s,a,i)}}},Nh={kernelName:$t,inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>va(t,s,!1,!1),b:()=>va(t,r,!0,!1)}:a&&!i?{a:()=>va(s,t,!1,!0),b:()=>va(r,t,!1,!1)}:{a:()=>va(s,t,!0,!0),b:()=>va(t,r,!0,!0)}:{a:()=>va(t,s,!1,!0),b:()=>va(r,t,!0,!1)}}},Ih={kernelName:Ct,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>Zu(t,r,s)}}},$h={kernelName:St,gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let t=s.length-1;t>=0;t--)if(s[t]===a[t])i[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>Yo(t,o,!0)}}},Ch={kernelName:Tt,gradFunc:t=>({x:()=>t.clone()})},Sh={kernelName:Et,gradFunc:t=>({x:()=>mo(t)})},Th={kernelName:At,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>fo(Zo(Eo(r,s),Bo(r,a)),t,mo(t))}}},Eh={kernelName:Dt,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map((t=>t.shape)),{axis:s}=n,a=w(s,e[0].shape)[0],i=r.map((t=>t[a]));return nl(t,i,a).map((t=>()=>t))}},Ah={kernelName:_t,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return l(Ei(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Zi(r.shape,t,s,i,o,u),filter:()=>Wl(r,t,s.shape,i,o,u)}}},Rh={kernelName:Ot,inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Yi(t,s,a,i,o,1,u),filter:()=>Wl(t,r,s.shape,a,i,o,u)}}};const Dh=vs({conv3DBackpropFilter_:function(t,e,n,r,s){let a=t;4===t.rank&&(a=wa(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=wa(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),l(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),l(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),l(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),l(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),l(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},u={strides:r,pad:s,filterShape:n};return fr.runKernelFunc((t=>{const e=Ni(a.shape,n,r,1,s);return t.conv3dDerFilter(a,i,e)}),o,null,Lt,u)}});const _h=vs({conv3DBackpropInput_:function(t,e,n,r,s){l(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=wa(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],c=i.shape[4];l(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),l(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),l(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),l(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),l(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const h={dy:i,filter:n},p={pad:s,strides:r,inputShape:a},d=fr.runKernelFunc((t=>{const e=Ni(a,n.shape,r,1,s);return t.conv3dDerInput(i,n,e)}),h,null,zt,p);return o?wa(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Fh={kernelName:Mt,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a}=n;l(Ei(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=e;return{x:()=>_h(i.shape,t,o,s,a),filter:()=>Dh(i,t,o.shape,s,a)}}},Oh={kernelName:Bt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(Go(Gu(ca(n,"float32"))),t)}}},Mh={kernelName:Pt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(Hu(ca(n,"float32")),t)}}},Lh={kernelName:Wt,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const e=oi([s],r.rank);let n=ro(t,s,a,!i);return null!=e&&(n=Na(n,e)),n}}}},zh={kernelName:Vt,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;l(Ei(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,c]=e;return l(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),l(4===c.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`)),l(u.shape[3]===c.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`)),l(Ai(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=i&&l(m(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Xl(u.shape,t,c,s,a,r,i),filter:()=>Kl(u,t,c.shape,s,a,r,i)}}},Bh={kernelName:Ht,inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[r,s]=e,a={x:r,filter:s,dy:t},i={x:r,filter:s,dy:t};return{x:()=>fr.runKernel(jt,a,n),filter:()=>fr.runKernel(qt,i,n)}}},Ph={kernelName:Kt,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{const e=uo(t,ca(r,"float32")),a=co(n.shape,s);return a.length>0?wa(Yo(e,a),n.shape):e},b:()=>{let e=Oo(t,ca(n,"float32"));const a=co(r.shape,s);a.length>0&&(e=wa(Yo(e,a),r.shape));const i=hu(r);return Go(uo(e,ca(i,"float32")))}}}},Wh={kernelName:Xt,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r=e=>e.eluDer(t,n),s={dy:t,y:n};return{x:()=>fr.runKernelFunc(r,s,null,"EluGrad")}}},Vh={kernelName:Yt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Oo(xo(Go(hu(n))),2/Math.sqrt(Math.PI));return{x:()=>Oo(t,r)}}},Uh={kernelName:Jt,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,n)}}},Gh={kernelName:Zt,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,xo(n))}}},Hh={kernelName:ne,gradFunc:t=>({x:()=>mo(t)})},jh={kernelName:re,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{const e=uo(t,ca(r,"float32")),a=co(n.shape,s);return a.length>0?wa(Yo(e,a),n.shape):e},b:()=>{let e=Oo(t,ca(n,"float32"));const a=co(r.shape,s);a.length>0&&(e=wa(Yo(e,a),r.shape));const i=hu(r);return Go(uo(e,ca(i,"float32")))}}}},qh={kernelName:se,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=e,u=null==o?Mo(1):o,l=co(a.shape,s.shape),c=[];if(1===a.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=Xo(s,a),p=Oo(t,u),d=Bu(ei(i,Mo(r))),f=Oo(Oo(Oo(d,d),d),Mo(-.5));return{x:()=>1===a.rank?wa(Oo(Oo(t,ko(wa(d,[1,1,1,a.shape[0]]),c)),u),s.shape):wa(Oo(Oo(t,d),u),s.shape),mean:()=>{let t=Oo(Oo(d,Mo(-1)),p);return 1===a.rank&&(t=Yo(t,l)),wa(t,a.shape)},variance:()=>{let t=Oo(Oo(f,h),p);return 1===a.rank&&(t=Yo(t,l)),wa(t,a.shape)},scale:()=>{const e=Oo(h,d);let n=Oo(t,e);return 1===a.rank&&(n=Yo(n,l)),wa(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=Yo(e,l)),wa(e,a.shape)}}}};const Kh=vs({unsortedSegmentSum_:function(t,e,n){const r=xs(t,"x","unsortedSegmentSum"),s=xs(e,"segmentIds","unsortedSegmentSum","int32");l(m(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return fr.runKernelFunc(((t,e)=>{const a=t.unsortedSegmentSum(r,s,n);return e([s]),a}),a,null,fn,i)}}),Xh={kernelName:ae,inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:a}=n,i=w(a,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,i),u=o.length,l=e.slice(a,e.length).slice(1),c=l.length,h=Yh(0,u),p=Yh(u+1,u+1+c),d=Jh([o,[n],l]),f=wa(t,d),m=wa(s,[n]),g=Jh([[u],h,p]),y=Na(f,g);let b=Kh(y,m,r.shape[i]);const x=ui(g);return b=Na(b,x),b},indices:()=>s}}};function Yh(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Jh(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const Zh={kernelName:ie,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>mo(n),b:()=>mo(r)}}},Qh={kernelName:oe,gradFunc:t=>({x:()=>ca(t,"float32")})},tp={kernelName:ce,gradFunc:t=>({x:()=>mo(t)})},ep={kernelName:he,gradFunc:t=>({x:()=>mo(t)})},np={kernelName:pe,gradFunc:t=>({x:()=>mo(t)})},rp={kernelName:fe,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,ei(n,1))}}},sp={kernelName:de,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,ca(n,"float32"))}}},ap={kernelName:ge,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=xo(r);return Xo(t,Oo(Yo(t,s,!0),e))}}}};const ip=vs({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,a=1,i=.5){const o={x:t,y:e,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return fr.runKernelFunc((o=>o.LRNGrad(n,t,e,r,s,a,i)),o,null,"LRNBackprop",u)}}),op={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>ip(r,s,t,a,i,o,u)}}};function up(t,e,n,r){return e.rank<n.rank&&(e=wa(e,ai(e.shape,r))),t.rank<n.rank&&(t=wa(t,ai(t.shape,r))),{x:()=>Oo(t,ca(po(n,e),t.dtype))}}const lp={kernelName:ye,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,a=e[0],i=up(t,e[1],a,w(s,a.shape));return{x:()=>i.x()}}},cp={kernelName:be,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Oo(t,ca(Eo(n,r),"float32")),b:()=>Oo(t,ca(zo(n,r),"float32"))}}};const hp=vs({maxPool3dBackprop_:function(t,e,n,r,s,a=[1,1,1],i,o){const u=xs(t,"dy","maxPool3dBackprop"),c=xs(e,"input","maxPool3dBackprop"),h=xs(n,"output","maxPool3dBackprop");let p=u,d=c,f=h,g=!1;4===c.rank&&(g=!0,p=wa(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=wa(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),f=wa(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),l(5===p.rank,(()=>`Error in maxPool3dBackprop: dy must be rank 5 but got rank ${p.rank}.`)),l(5===d.rank,(()=>`Error in maxPool3dBackprop: input must be rank 5 but got rank ${d.rank}.`)),l(5===f.rank,(()=>`Error in maxPool3dBackprop: output must be rank 5 but got rank ${f.rank}.`)),l(Ai(s,a),(()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`)),null!=o&&l(m(i),(()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const y={dy:p,input:d,output:f},b={filterSize:r,strides:s,dilations:a,pad:i,dimRoundingMode:o},x=fr.runKernelFunc((t=>{const e=vi(d.shape,r,s,a,i,o);return t.maxPool3dBackprop(p,d,f,e)}),y,null,"MaxPool3DBackprop",b);return g?wa(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}}),pp={kernelName:ve,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,dilations:o,pad:u,dimRoundingMode:l}=n,c=null==o?[1,1,1]:o;return{x:()=>hp(t,r,s,a,i,c,u,l)}}};const dp=vs({maxPoolBackprop_:function(t,e,n,r,s,a,i){const o=xs(t,"dy","maxPoolBackprop"),u=xs(e,"input","maxPoolBackprop"),c=xs(n,"output","maxPoolBackprop");l(u.rank===o.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`)),l(4===o.rank,(()=>`Error in maxPoolBackprop: dy must be rank 4 but got rank ${o.rank}.`)),l(4===u.rank,(()=>`Error in maxPoolBackprop: input must be rank 4 but got rank ${u.rank}.`)),null!=i&&l(m(a),(()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const h={dy:o,input:u,output:c},p={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return fr.runKernelFunc((t=>{const e=wi(u.shape,r,s,1,a,i);return t.maxPoolBackprop(o,u,c,e)}),h,null,we,p)}}),fp={kernelName:Fe,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map((t=>t[0]));return{x:()=>ju(t,a,r.shape)}}},mp={kernelName:en,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>Fi(t,r,s)}}},gp={kernelName:nn,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>Hi(t,r)}}};const yp=[oh,uh,lh,ch,hh,ph,dh,fh,mh,gh,yh,bh,wh,kh,Nh,Ih,$h,Ch,Sh,Th,Eh,Rh,Ah,Fh,Oh,Mh,Lh,zh,Bh,Ph,Wh,Vh,Uh,Gh,jh,Hh,qh,Xh,Zh,Qh,tp,ep,np,rp,sp,ap,op,lp,lp,cp,pp,{kernelName:xe,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>dp(t,r,s,a,i,o)}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[a,i]=e,o=up(t,i,a,w(s,a.shape));return{x:()=>o.x()}}},{kernelName:Ie,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>Oo(t,ca(Bo(n,r),"float32")),b:()=>Oo(t,ca(To(n,r),"float32"))}}},{kernelName:$e,inputsToSave:["x"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,a=s.map((t=>t[0]));return{x:()=>ju(t,a,r.shape)}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{const e=co(n.shape,s);return e.length>0?wa(Yo(t,e),n.shape):t},b:()=>{const e=Oo(t,Go($o(uo(n,r)))),a=co(r.shape,s);return a.length>0?wa(Yo(e,a),r.shape):e}}}},{kernelName:Ce,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{const e=Oo(t,ca(r,"float32")),a=co(n.shape,s);return a.length>0?wa(Yo(e,a),n.shape):e},b:()=>{const e=Oo(t,ca(n,"float32")),a=co(r.shape,s);return a.length>0?wa(Yo(e,a),r.shape):e}}}},{kernelName:Se,gradFunc:t=>({x:()=>Go(t)})},{kernelName:_e,inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>su(n.shape,"float32")}}},{kernelName:De,gradFunc:t=>({x:()=>mo(t)})},fp,fp,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,a=n,i=r,o=ho(a.shape,i.shape);return{a:()=>{const e=ca(i,"float32");let n=Oo(t,Oo(e,bu(a,Xo(e,Mo(1)))));const r=co(a.shape,o);return r.length>0&&(n=Yo(n,r)),wa(n,a.shape)},b:()=>{const e=To(a,0),n=fo(e,Vo(a),mo(a));let r=Oo(t,Oo(s,n));const u=co(i.shape,o);return u.length>0&&(r=Yo(r,u)),wa(r,i.shape)}}}},{kernelName:Oe,inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,r]=e,s=To(n,0);return{x:()=>fo(s,t,Oo(t,r)),alpha:()=>{let e=fo(s,mo(t),Oo(t,n));const a=co(r.shape,t.shape);return a.length>0&&(e=Yo(e,a)),wa(e,r.shape)}}}},{kernelName:Le,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,Go(hu(n)))}}},{kernelName:Ve,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,r=Oo(Bo(n,6),ul(n));return{x:()=>Oo(t,ca(r,"float32"))}}},{kernelName:ze,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,ca(ul(n),"float32"))}}},{kernelName:Be,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>wa(t,n.shape)}}},{kernelName:We,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeBilinearBackprop(t,r,s)},a={images:r};return{images:()=>fr.runKernelFunc(s,a,null,"ResizeBilinearGrad",n)}}},{kernelName:Pe,inputsToSave:["images"],gradFunc:(t,e,n)=>{const[r]=e,s=e=>{const{alignCorners:s}=n;return e.resizeNearestNeighborBackprop(t,r,s)},a={images:r};return{images:()=>fr.runKernelFunc(s,a,null,"ResizeNearestNeighborGrad",n)}}},{kernelName:Ue,gradFunc:(t,e,n)=>{const{dims:r}=n,s=w(r,t.shape);return{x:()=>Lu(t,s)}}},{kernelName:Ge,gradFunc:t=>({x:()=>mo(t)})},{kernelName:He,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Go(uo(t,Oo(bu(n,1.5),2)))}}},{kernelName:je,inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>ca(mo(n),"float32"),t:()=>Oo(t,ca(n,t.dtype)),e:()=>Oo(t,ca(Qo(n),t.dtype))}}},{kernelName:qe,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=To(n,Mo(0)),r=Mo(Yc),s=Mo(Jc),a=Oo(t,s),i=Oo(Oo(t,r),xo(ca(n,"float32")));return fo(e,a,i)}}}},{kernelName:Ze,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,Oo(n,Xo(Mo(1),n)))}}},{kernelName:Je,gradFunc:t=>({x:()=>mo(t)})},{kernelName:Xe,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(eo(ca(n,"float32")),t)}}},{kernelName:Ye,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(no(ca(n,"float32")),t)}}},{kernelName:Ke,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:a}=n,i=r.shape,[o,u]=Pa(r,s,a),l=[];for(let e=0;e<t.rank;e++)l.push([o[e],i[e]-o[e]-u[e]]);return{x:()=>yu(t,l)}}},{kernelName:rn,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,a=Oo(t,r);return{logits:()=>Xo(a,Oo(Yo(a,[s],true),r))}}},{kernelName:Qe,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,Ho(n))}}},mp,mp,gp,gp,{kernelName:tn,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,Oo(sl(ca(n,"float32")),2))}}},{kernelName:sn,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=Mo(2);return{a:()=>Oo(t,Oo(s,Xo(n,r))),b:()=>Oo(t,Oo(s,Xo(r,n)))}}},{kernelName:an,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(t,Oo(ca(n,"float32"),2))}}},{kernelName:gn,gradFunc:t=>({x:()=>mo(t)})},{kernelName:on,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,r]=e,s=ho(n.shape,r.shape);return{a:()=>{let e=t;const r=co(n.shape,s);return r.length>0&&(e=Yo(e,r)),wa(e,n.shape)},b:()=>{let e=t;const n=co(r.shape,s);return n.length>0&&(e=Yo(e,n)),wa(Go(e),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:a}=n;w(a,r.shape).forEach((t=>{s[t]=1}));const i=wa(t,s),o=Oo(i,au(r.shape,"float32"));return{x:()=>o}}},{kernelName:un,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>uo(t,hu(eo(n)))}}},{kernelName:ln,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Oo(Xo(Mo(1),hu(n)),t)}}},{kernelName:cn,inputsToSave:["x"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=mo(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=ei(e,ju(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)e=ei(e,ju(t,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)e=ei(e,ju(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)e=ei(e,ju(t,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:hn,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,a=ui(s);return{x:()=>Na(t,a)}}},{kernelName:dn,gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>ol(t,s)}}},{kernelName:fn,inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Fo(e,mo(e)),r=So(t,n);let s=Eo(e,Mo(0,"int32"));const a=r.rank-s.rank;for(let t=0;t<a;++t)s=wo(s,t+1);s=Zo(s,au(r.shape,"bool"));const i=mo(r);return fo(s,r,i)}(t,n)}}},{kernelName:mn,gradFunc:t=>({x:()=>mo(t)})}];for(const t of yp)Tn(t);jn.prototype.abs=function(){return this.throwIfDisposed(),Za(this)},jn.prototype.acos=function(){return this.throwIfDisposed(),Qa(this)},jn.prototype.acosh=function(){return this.throwIfDisposed(),ti(this)},jn.prototype.addStrict=function(t){return this.throwIfDisposed(),Cl(this,t)},jn.prototype.add=function(t){return this.throwIfDisposed(),ei(this,t)},jn.prototype.all=function(t,e){return this.throwIfDisposed(),ci(this,t,e)},jn.prototype.any=function(t,e){return this.throwIfDisposed(),hi(this,t,e)},jn.prototype.argMax=function(t){return this.throwIfDisposed(),pi(this,t)},jn.prototype.argMin=function(t){return this.throwIfDisposed(),di(this,t)},jn.prototype.asScalar=function(){return this.throwIfDisposed(),l(1===this.size,(()=>"The array must have only 1 element.")),wa(this,[])},jn.prototype.asType=function(t){return this.throwIfDisposed(),ca(this,t)},jn.prototype.as1D=function(){return this.throwIfDisposed(),wa(this,[this.size])},jn.prototype.as2D=function(t,e){return this.throwIfDisposed(),wa(this,[t,e])},jn.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),wa(this,[t,e,n])},jn.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),wa(this,[t,e,n,r])},jn.prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),wa(this,[t,e,n,r,s])},jn.prototype.asin=function(){return this.throwIfDisposed(),fi(this)},jn.prototype.asinh=function(){return this.throwIfDisposed(),mi(this)},jn.prototype.atan=function(){return this.throwIfDisposed(),gi(this)},jn.prototype.atan2=function(t){return this.throwIfDisposed(),yi(this,t)},jn.prototype.atanh=function(){return this.throwIfDisposed(),bi(this)},jn.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),Di(this,t,e,n,r)},jn.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Fi(this,t,e)},jn.prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),Mi(this,t,e,n,r,s)},jn.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Pi(this,t)},jn.prototype.cast=function(t){return this.throwIfDisposed(),ca(this,t)},jn.prototype.ceil=function(){return this.throwIfDisposed(),Wi(this)},jn.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),Vi(this,t,e)},jn.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof jn&&(t=[t]),Hi([this,...t],e)},jn.prototype.conv1d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Ji(this,t,e,n,r,s,a)},jn.prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),Qi(this,t,e,n,r,s)},jn.prototype.conv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Yi(this,t,e,n,r,s,a)},jn.prototype.cos=function(){return this.throwIfDisposed(),eo(this)},jn.prototype.cosh=function(){return this.throwIfDisposed(),no(this)},jn.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),ro(this,t,e,n)},jn.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),so(this,t,e)},jn.prototype.depthwiseConv2D=function(t,e,n,r,s,a){return Ga("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),ao(this,t,e,n,r,s,a)},jn.prototype.depthwiseConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),ao(this,t,e,n,r,s,a)},jn.prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),io(this,t,e,n,r,s)},jn.prototype.divNoNan=function(t){return this.throwIfDisposed(),go(this,t)},jn.prototype.divStrict=function(t){return this.throwIfDisposed(),Sl(this,t)},jn.prototype.div=function(t){return this.throwIfDisposed(),uo(this,t)};const bp=vs({dot_:function(t,e){const n=xs(t,"t1","dot"),r=xs(e,"t2","dot");l(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(l(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const t=wa(n,[1,-1]),e=wa(r,[-1,1]),s=va(t,e);return wa(s,[])}if(1===n.rank&&2===r.rank){const t=wa(n,[1,-1]),e=wa(r,[r.shape[0],r.shape[1]]),s=va(t,e);return wa(s,[s.size])}if(2===n.rank&&1===r.rank){const t=wa(r,[-1,1]),e=va(n,t);return wa(e,[e.size])}{const t=wa(r,[r.shape[0],r.shape[1]]);return va(n,t)}}});jn.prototype.dot=function(t){return this.throwIfDisposed(),bp(this,t)},jn.prototype.elu=function(){return this.throwIfDisposed(),yo(this)},jn.prototype.equalStrict=function(t){return this.throwIfDisposed(),wl(this,t)},jn.prototype.equal=function(t){return this.throwIfDisposed(),po(this,t)},jn.prototype.erf=function(){return this.throwIfDisposed(),bo(this)},jn.prototype.exp=function(){return this.throwIfDisposed(),xo(this)},jn.prototype.expandDims=function(t){return this.throwIfDisposed(),wo(this,t)},jn.prototype.expm1=function(){return this.throwIfDisposed(),vo(this)},jn.prototype.fft=function(){return this.throwIfDisposed(),Qu(this)},jn.prototype.flatten=function(){return this.throwIfDisposed(),wa(this,[this.size])},jn.prototype.floor=function(){return this.throwIfDisposed(),$o(this)},jn.prototype.floorDiv=function(t){return this.throwIfDisposed(),oo(this,t)},jn.prototype.gather=function(t,e){return this.throwIfDisposed(),So(this,t,e)},jn.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),vl(this,t)},jn.prototype.greaterEqual=function(t){return this.throwIfDisposed(),Eo(this,t)},jn.prototype.greaterStrict=function(t){return this.throwIfDisposed(),kl(this,t)},jn.prototype.greater=function(t){return this.throwIfDisposed(),To(this,t)},jn.prototype.ifft=function(){return this.throwIfDisposed(),tl(this)},jn.prototype.irfft=function(){return this.throwIfDisposed(),el(this)},jn.prototype.isFinite=function(){return this.throwIfDisposed(),Ro(this)},jn.prototype.isInf=function(){return this.throwIfDisposed(),Do(this)},jn.prototype.isNaN=function(){return this.throwIfDisposed(),_o(this)},jn.prototype.leakyRelu=function(t){return this.throwIfDisposed(),Lo(this,t)},jn.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),Nl(this,t)},jn.prototype.lessEqual=function(t){return this.throwIfDisposed(),Bo(this,t)},jn.prototype.lessStrict=function(t){return this.throwIfDisposed(),Il(this,t)},jn.prototype.less=function(t){return this.throwIfDisposed(),zo(this,t)},jn.prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),Wo(this,t,e,n,r)},jn.prototype.logSigmoid=function(){return this.throwIfDisposed(),qo(this)},jn.prototype.logSoftmax=function(t){return this.throwIfDisposed(),Jo(this,t)},jn.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Ec(this,t,e)},jn.prototype.log=function(){return this.throwIfDisposed(),Vo(this)},jn.prototype.log1p=function(){return this.throwIfDisposed(),Uo(this)},jn.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Zo(this,t)},jn.prototype.logicalNot=function(){return this.throwIfDisposed(),Qo(this)},jn.prototype.logicalOr=function(t){return this.throwIfDisposed(),tu(this,t)};const xp=vs({logicalXor_:function(t,e){const n=xs(t,"a","logicalXor","bool"),r=xs(e,"b","logicalXor","bool");return ho(n.shape,r.shape),Zo(tu(t,e),Qo(Zo(t,e)))}});jn.prototype.logicalXor=function(t){return this.throwIfDisposed(),xp(this,t)},jn.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),va(this,t,e,n)},jn.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),eu(this,t,e,n,r)},jn.prototype.max=function(t,e){return this.throwIfDisposed(),Ko(this,t,e)},jn.prototype.maximumStrict=function(t){return this.throwIfDisposed(),Tl(this,t)},jn.prototype.maximum=function(t){return this.throwIfDisposed(),Fo(this,t)},jn.prototype.mean=function(t,e){return this.throwIfDisposed(),iu(this,t,e)},jn.prototype.min=function(t,e){return this.throwIfDisposed(),ou(this,t,e)},jn.prototype.minimumStrict=function(t){return this.throwIfDisposed(),El(this,t)},jn.prototype.minimum=function(t){return this.throwIfDisposed(),uu(this,t)},jn.prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),lu(this,t,e)},jn.prototype.modStrict=function(t){return this.throwIfDisposed(),Al(this,t)},jn.prototype.mod=function(t){return this.throwIfDisposed(),cu(this,t)},jn.prototype.mulStrict=function(t){return this.throwIfDisposed(),Rl(this,t)},jn.prototype.mul=function(t){return this.throwIfDisposed(),Oo(this,t)},jn.prototype.neg=function(){return this.throwIfDisposed(),Go(this)},jn.prototype.norm=function(t,e,n){return this.throwIfDisposed(),Ml(this,t,e,n)},jn.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),$l(this,t)},jn.prototype.notEqual=function(t){return this.throwIfDisposed(),fu(this,t)},jn.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),ka(this,t,e,n)},jn.prototype.onesLike=function(){return this.throwIfDisposed(),gu(this)},jn.prototype.pad=function(t,e){return this.throwIfDisposed(),yu(this,t,e)};const wp=vs({pool_:function(t,e,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=xs(t,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=wa(i,[1,i.shape[0],i.shape[1],i.shape[2]])),l(Ai(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const c=wi(o.shape,e,a,s,r),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),a=t.concat(r,s),i=e.map(((t,e)=>(t-a[e]%t)%t)),o=s.map(((t,e)=>t+i[e])),u=e.map(((t,e)=>[r[e],o[e]])),l=e.map(((t,e)=>[0,i[e]]));return[u,l]}([c.inHeight,c.inWidth],h,p),g=d?r:"valid",y=d?o:Zu(o,h,f),b=("avg"===n?()=>Di(y,e,a,g):()=>eu(y,e,a,g))(),x=d?b:Fi(b,h,m);return u?wa(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});var vp,kp,Np;jn.prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),wp(this,t,e,n,r,s)},jn.prototype.powStrict=function(t){return this.throwIfDisposed(),Dl(this,t)},jn.prototype.pow=function(t){return this.throwIfDisposed(),bu(this,t)},jn.prototype.prelu=function(t){return this.throwIfDisposed(),xu(this,t)},jn.prototype.prod=function(t,e){return this.throwIfDisposed(),wu(this,t,e)},jn.prototype.reciprocal=function(){return this.throwIfDisposed(),Ou(this)},jn.prototype.relu=function(){return this.throwIfDisposed(),Mu(this)},jn.prototype.relu6=function(){return this.throwIfDisposed(),Vl(this)},jn.prototype.reshapeAs=function(t){return this.throwIfDisposed(),wa(this,t.shape)},jn.prototype.reshape=function(t){return this.throwIfDisposed(),wa(this,t)},jn.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),wc(this,t,e)},jn.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),vc(this,t,e)},jn.prototype.reverse=function(t){return this.throwIfDisposed(),Lu(this,t)},jn.prototype.rfft=function(){return this.throwIfDisposed(),rl(this)},jn.prototype.round=function(){return this.throwIfDisposed(),zu(this)},jn.prototype.rsqrt=function(){return this.throwIfDisposed(),Bu(this)},jn.prototype.selu=function(){return this.throwIfDisposed(),Pu(this)},jn.prototype.separableConv2d=function(t,e,n,r,s,a){return this.throwIfDisposed(),Wu(this,t,e,n,r,s,a)},jn.prototype.sigmoid=function(){return this.throwIfDisposed(),Ho(this)},jn.prototype.sign=function(){return this.throwIfDisposed(),Uu(this)},jn.prototype.sin=function(){return this.throwIfDisposed(),Gu(this)},jn.prototype.sinh=function(){return this.throwIfDisposed(),Hu(this)},jn.prototype.slice=function(t,e){return this.throwIfDisposed(),ju(this,t,e)},jn.prototype.softmax=function(t){return this.throwIfDisposed(),Ju(this,t)},jn.prototype.softplus=function(){return this.throwIfDisposed(),jo(this)},jn.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),Zu(this,t,e)},jn.prototype.split=function(t,e){return this.throwIfDisposed(),nl(this,t,e)},jn.prototype.sqrt=function(){return this.throwIfDisposed(),sl(this)},jn.prototype.square=function(){return this.throwIfDisposed(),hu(this)},jn.prototype.squaredDifference=function(t){return this.throwIfDisposed(),al(this,t)},jn.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),_l(this,t)},jn.prototype.squeeze=function(t){return this.throwIfDisposed(),il(this,t)},jn.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof jn?[this,t]:[this,...t];return ol(n,e)},jn.prototype.step=function(t){return this.throwIfDisposed(),ul(this,t)},jn.prototype.stridedSlice=function(t,e,n,r,s,a,i,o){return this.throwIfDisposed(),ll(this,t,e,n,r,s,a,i,o)},jn.prototype.subStrict=function(t){return this.throwIfDisposed(),Fl(this,t)},jn.prototype.sub=function(t){return this.throwIfDisposed(),Xo(this,t)},jn.prototype.sum=function(t,e){return this.throwIfDisposed(),Yo(this,t,e)},jn.prototype.tan=function(){return this.throwIfDisposed(),cl(this)},jn.prototype.tanh=function(){return this.throwIfDisposed(),hl(this)},jn.prototype.tile=function(t){return this.throwIfDisposed(),ko(this,t)},jn.prototype.toBool=function(){return this.throwIfDisposed(),ca(this,"bool")},jn.prototype.toFloat=function(){return this.throwIfDisposed(),ca(this,"float32")},jn.prototype.toInt=function(){return this.throwIfDisposed(),ca(this,"int32")},jn.prototype.topk=function(t,e){return this.throwIfDisposed(),fl(this,t,e)},jn.prototype.transpose=function(t){return this.throwIfDisposed(),Na(this,t)},jn.prototype.unique=function(t){return this.throwIfDisposed(),gl(this,t)},jn.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),Kh(this,t,e)},jn.prototype.unstack=function(t){return this.throwIfDisposed(),yl(this,t)},jn.prototype.where=function(t,e){return this.throwIfDisposed(),fo(t,this,e)},jn.prototype.zerosLike=function(){return this.throwIfDisposed(),mo(this)},(kp=vp||(vp={}))[kp.DT_INVALID=0]="DT_INVALID",kp[kp.DT_FLOAT=1]="DT_FLOAT",kp[kp.DT_DOUBLE=2]="DT_DOUBLE",kp[kp.DT_INT32=3]="DT_INT32",kp[kp.DT_UINT8=4]="DT_UINT8",kp[kp.DT_INT16=5]="DT_INT16",kp[kp.DT_INT8=6]="DT_INT8",kp[kp.DT_STRING=7]="DT_STRING",kp[kp.DT_COMPLEX64=8]="DT_COMPLEX64",kp[kp.DT_INT64=9]="DT_INT64",kp[kp.DT_BOOL=10]="DT_BOOL",kp[kp.DT_QINT8=11]="DT_QINT8",kp[kp.DT_QUINT8=12]="DT_QUINT8",kp[kp.DT_QINT32=13]="DT_QINT32",kp[kp.DT_BFLOAT16=14]="DT_BFLOAT16",kp[kp.DT_FLOAT_REF=101]="DT_FLOAT_REF",kp[kp.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",kp[kp.DT_INT32_REF=103]="DT_INT32_REF",kp[kp.DT_UINT8_REF=104]="DT_UINT8_REF",kp[kp.DT_INT16_REF=105]="DT_INT16_REF",kp[kp.DT_INT8_REF=106]="DT_INT8_REF",kp[kp.DT_STRING_REF=107]="DT_STRING_REF",kp[kp.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",kp[kp.DT_INT64_REF=109]="DT_INT64_REF",kp[kp.DT_BOOL_REF=110]="DT_BOOL_REF",kp[kp.DT_QINT8_REF=111]="DT_QINT8_REF",kp[kp.DT_QUINT8_REF=112]="DT_QUINT8_REF",kp[kp.DT_QINT32_REF=113]="DT_QINT32_REF",kp[kp.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(Np||(Np={}));const Ip={};function $p(t){return Ip[t]}function Cp(t,e,n,r,s){const a=e.inputParams[t];if(a&&void 0!==a.inputIndexStart){const t=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?t+1:a.inputIndexEnd;if("tensor"===a.type)return Sp(e.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return e.inputNames.slice(t,i).map((t=>Sp(t,n,r,s)))}const o=Sp(e.inputNames.slice(t)[0],n,r,s),u=o.dataSync();return"number"===a.type?u[0]:F(o.shape,u)}const i=e.attrParams[t];return i&&i.value}function Sp(t,e,n,r){const[s,a]=Ap(t);if(null!=r){const t=r.getHashTableHandleByName(s);if(null!=t)return t}const i=n.currentContextIds.find((t=>!!e[Ep(s,t)]));return void 0!==i?e[Ep(s,i)][a]:void 0}function Tp(t,e){const[n,r]=Ap(t);return[Ep(n,e&&e.currentContextId),r]}function Ep(t,e){return e?`${t}-${e}`:t}function Ap(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function Rp(t,e,n){let r=Cp("pad",t,e,n);if("explicit"===r){r=Cp("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function Dp(t){return t.kept?t:ha(t)}var _p={};const Fp=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];t(_p,"json",(function(){return Fp}));var Op={};const Mp=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];t(Op,"json",(function(){return Mp}));var Lp={};const zp=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}];t(Lp,"json",(function(){return zp}));var Bp={};const Pp=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];t(Bp,"json",(function(){return Pp}));var Wp={};const Vp=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];t(Wp,"json",(function(){return Vp}));var Up={};const Gp=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];t(Up,"json",(function(){return Gp}));var Hp={};const jp=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];t(Hp,"json",(function(){return jp}));var qp={};const Kp=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];t(qp,"json",(function(){return Kp}));var Xp={};const Yp=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}];t(Xp,"json",(function(){return Yp}));var Jp={};const Zp=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}];t(Jp,"json",(function(){return Zp}));var Qp={};const td=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];t(Qp,"json",(function(){return td}));var ed={};const nd=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];t(ed,"json",(function(){return nd}));var rd={};const sd=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];t(rd,"json",(function(){return sd}));var ad={};const id=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];t(ad,"json",(function(){return id}));var od={};const ud=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];t(od,"json",(function(){return ud}));var ld={};const cd=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];t(ld,"json",(function(){return cd}));var hd={};const pd=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];t(hd,"json",(function(){return pd}));var dd=Rr;class fd{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[_p,Op,Lp,Bp,Wp,Up,Hp,Qp,Jp,qp,ed,rd,ad,od,ld,hd,Xp].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=[],i=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(t[e.name]):"Const"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||a.push(t[e.name]),t)),{});let o=[];const u=[];let l={},c={};null!=e&&(l=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const h=Object.keys(i);h.forEach((t=>{const e=i[t];e.inputNames.forEach((t=>{const[n]=Tp(t);e.inputs.push(i[n]),i[n].children.push(e)}))})),0===Object.keys(c).length?h.forEach((t=>{const e=i[t];0===e.children.length&&u.push(e)})):Object.keys(c).forEach((t=>{const[e]=Tp(t),n=i[e];null!=n&&(n.signatureKey=c[t],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((t=>{const[e]=Tp(t),n=i[e];n&&(n.signatureKey=l[t],o.push(n))})):o=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const d={nodes:i,inputs:o,outputs:u,weights:s,placeholders:r,signature:e,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=$p(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.substr(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let s;switch(n.type){case"string":s=gd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Cd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Cd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=bd(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=bd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=$d(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=$d(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=yd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=yd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Td(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Td(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Id(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Id(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Sd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Sd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=vd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=vd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=kd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=kd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=wd(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=wd(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t)),{}));const s=[],a=[];t.signature.inputArg.forEach((t=>{const[e]=Tp(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:xd(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n}));Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach((t=>{const[n]=Tp(t);e.inputs.push(r[n]),r[n].children.push(e)}))}));const i=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=Tp(i[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))}));const o=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function md(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=G().global;if(void 0!==e.atob)return e.atob(t);if(void 0!==dd)return new dd(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function gd(t,e,n,r=!1){const s=t[e];return null!=s?md(s.s,r):n}function yd(t,e,n){const r=t[e];return r?r.b:n}function bd(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function xd(t){switch("string"==typeof t&&(t=vp[t]),t){case vp.DT_FLOAT:return"float32";case vp.DT_INT32:case vp.DT_INT64:case vp.DT_INT8:case vp.DT_UINT8:return"int32";case vp.DT_BOOL:return"bool";case vp.DT_DOUBLE:return"float32";case vp.DT_STRING:return"string";default:return null}}function wd(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function vd(t,e,n){const r=t[e];return r&&r.type?xd(r.type):n}function kd(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>xd(t))):n}function Nd(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"==typeof t.size?t.size:parseInt(t.size,10))):[]}function Id(t,e,n){const r=t[e];return r&&r.shape?Nd(r.shape):n}function $d(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>"number"==typeof t?t:parseInt(t,10))):n}function Cd(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map((t=>md(t,r))):n}function Sd(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>Nd(t))):n}function Td(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class Ed{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return Sp(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return Sp(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return bd(this.node.rawAttrs,t,e);if(null!=n.s)return gd(this.node.rawAttrs,t,e);if(null!=n.b)return yd(this.node.rawAttrs,t,e);if(null!=n.shape)return Id(this.node.rawAttrs,t,e);if(null!=n.type)return vd(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return $d(this.node.rawAttrs,t,e);if(null!=n.list.s)return Cd(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Sd(this.node.rawAttrs,t,e);if(null!=n.list.b)return Td(this.node.rawAttrs,t,e);if(null!=n.list.type)return kd(this.node.rawAttrs,t,e)}return e}}function Ad(t,e,n=""){l(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}class Rd{constructor(t,e,n,r,s,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Mo(0),Xa(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),Ad(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Xa(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return Is([],[0].concat(this.elementShape));const n=this.readMany(t);return Ad(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),ol(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Is([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return Ad(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Hi(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,yl(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];qa((()=>{e=wa(e,[1,n,s]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],s];a[n]=wa(ju(e,i,o),this.elementShape)}return a}));const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class Dd{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);Ad(e,t.shape,"TensorList shape mismatch: "),Xa(t)})),this.idTensor=Mo(0),this.maxNumElements=r,Xa(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Dd([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return Ad(t,this.elementShape,"TensorList shape mismatch: "),qa((()=>{const e=this.tensors.map((e=>wa(e,t)));return ol(e,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return Ad(n.shape,t,"TensorList shape mismatch: "),wa(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Ad(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Xa(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return Ad(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Ad(this.elementShape,e.shape,"TensorList shape mismatch: "),Xa(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return Ad(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?Is([],[0].concat(this.elementShape)):qa((()=>{const e=t.map((t=>wa(this.tensors[t],n)));return ol(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return Ad(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?Is([],[0].concat(this.elementShape)):qa((()=>{const t=this.tensors.map((t=>wa(t,e)));return Hi(t,0)}))}}const _d=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=Cp("thenBranch",t,e,n),s=Cp("elseBranch",t,e,n),a=Cp("cond",t,e,n),i=Cp("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Cp("body",t,e,n),s=Cp("cond",t,e,n),a=Cp("args",t,e,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((t=>t.id));let u=await i[0].data();i.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()}));let l=a;for(;u[0];){const t=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const e=l.map((t=>t.id));t.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return l}case"LoopCond":return[Dp(Cp("pred",t,e,n))];case"Switch":{const r=Cp("pred",t,e,n);let s=Cp("data",t,e,n);return s.kept||(s=Dp(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=t.inputNames.find((t=>void 0!==Sp(t,e,n)));if(r){return[Dp(Sp(r,e,n))]}return}case"Enter":{const r=Cp("frameName",t,e,n),s=Cp("tensor",t,e,n);return n.enterFrame(r),[Dp(s)]}case"Exit":{const r=Cp("tensor",t,e,n);return n.exitFrame(),[Dp(r)]}case"NextIteration":{const r=Cp("tensor",t,e,n);return n.nextIteration(),[Dp(r)]}case"TensorArrayV3":{const r=Cp("size",t,e,n),s=Cp("dtype",t,e,n),a=Cp("elementShape",t,e,n),i=Cp("dynamicSize",t,e,n),o=Cp("clearAfterRead",t,e,n),u=Cp("identicalElementShapes",t,e,n),l=Cp("name",t,e,n),c=new Rd(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,Mo(1)]}case"TensorArrayWriteV3":{const r=Cp("tensorArrayId",t,e,n),s=Cp("index",t,e,n),a=Cp("tensor",t,e,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=Cp("tensorArrayId",t,e,n),s=Cp("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Cp("tensorArrayId",t,e,n),s=Cp("indices",t,e,n),a=Cp("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Cp("tensorArrayId",t,e,n),s=Cp("indices",t,e,n),a=Cp("tensor",t,e,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=Cp("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),a=Cp("dtype",t,e,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Cp("tensorArrayId",t,e,n),s=Cp("tensor",t,e,n),a=Cp("lengths",t,e,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=Cp("tensorArrayId",t,e,n);return[Mo(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Cp("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Cp("tensorListId",t,e,n),s=Cp("index",t,e,n),a=Cp("tensor",t,e,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=Cp("tensorListId",t,e,n),s=Cp("index",t,e,n),a=Cp("elementShape",t,e,n),i=Cp("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Cp("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Dd([],n,t.dtype,r),i=yl(t,0);return e.forEach(((t,e)=>{a.setItem(t,i[e])})),a}(Cp("tensor",t,e,n),r,Cp("elementShape",t,e,n),Cp("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":{const r=function(t,e,n){return new Dd([],t,e,n)}(Cp("elementShape",t,e,n),Cp("elementDType",t,e,n),Cp("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListGather":{const r=Cp("tensorListId",t,e,n),s=Cp("indices",t,e,n),a=Cp("elementShape",t,e,n),i=Cp("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=Cp("tensorListId",t,e,n),s=Cp("elementShape",t,e,n),a=Cp("elementDType",t,e,n),i=Cp("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);Ad(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=yl(t);return new Dd(s,e,r)}(Cp("tensor",t,e,n),Cp("elementShape",t,e,n),Cp("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=Cp("tensorListId",t,e,n),s=n.getTensorList(r.id),a=Cp("dtype",t,e,n),i=Cp("elementShape",t,e,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=Cp("tensorListId",t,e,n),s=Cp("tensor",t,e,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Cp("tensorListId",t,e,n),s=Cp("elementShape",t,e,n),a=Cp("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Cp("tensor",t,e,n),s=Cp("elementShape",t,e,n),a=function(t,e,n){let r=0;const s=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const a=0===r?0:t.size/r,i=qa((()=>{const i=[];t=wa(t,[1,r,a]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:s[r-1],0],u=[1,e[r],a];i[r]=wa(ju(t,o,u),n)}return t.dispose(),i})),o=new Dd([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(r,Cp("lengths",t,e,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function Fd(t,e,n){const[r,s]=Cp("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o="fusedbatchnorm"===r,u=Cp("numArgs",t,e,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const l=Cp("strides",t,e,n),c=Rp(t,e,n),h=Cp("dataFormat",t,e,n).toUpperCase(),p=Cp("dilations",t,e,n),[d,f]=Cp("args",t,e,n);return{stride:l,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:s}}function Od(t,e,n){return{boxes:Cp("boxes",t,e,n),scores:Cp("scores",t,e,n),maxOutputSize:Cp("maxOutputSize",t,e,n),iouThreshold:Cp("iouThreshold",t,e,n),scoreThreshold:Cp("scoreThreshold",t,e,n),softNmsSigma:Cp("softNmsSigma",t,e,n)}}class Md{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Mo(0),this.tensorMap=new Map,Xa(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),qa((()=>{const t=yl(e),r=n.length,s=t.length;l(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let e=0;e<r;e++){const r=n[e],s=t[e];Xa(s),this.tensorMap.set(r,s)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return qa((()=>{const t=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,e);t.push(a)}return ol(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function Ld(t,e,n,r){const s=((t,e,n)=>{switch(t.category){case"arithmetic":return qa((()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[ei(Cp("a",t,e,n),Cp("b",t,e,n))];case"AddN":return[ni(Cp("tensors",t,e,n))];case"FloorMod":case"Mod":return[cu(Cp("a",t,e,n),Cp("b",t,e,n))];case"Mul":return[Oo(Cp("a",t,e,n),Cp("b",t,e,n))];case"RealDiv":case"Div":return[uo(Cp("a",t,e,n),Cp("b",t,e,n))];case"DivNoNan":return[go(Cp("a",t,e,n),Cp("b",t,e,n))];case"FloorDiv":return[oo(Cp("a",t,e,n),Cp("b",t,e,n))];case"Sub":return[Xo(Cp("a",t,e,n),Cp("b",t,e,n))];case"Minimum":return[uu(Cp("a",t,e,n),Cp("b",t,e,n))];case"Maximum":return[Fo(Cp("a",t,e,n),Cp("b",t,e,n))];case"Pow":return[bu(Cp("a",t,e,n),Cp("b",t,e,n))];case"SquaredDifference":return[al(Cp("a",t,e,n),Cp("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"basic_math":return qa((()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[Za(Cp("x",t,e,n))];case"Acos":return[Qa(Cp("x",t,e,n))];case"Acosh":return[ti(Cp("x",t,e,n))];case"Asin":return[fi(Cp("x",t,e,n))];case"Asinh":return[mi(Cp("x",t,e,n))];case"Atan":return[gi(Cp("x",t,e,n))];case"Atan2":return[yi(Cp("x",t,e,n),Cp("y",t,e,n))];case"Atanh":return[bi(Cp("x",t,e,n))];case"Ceil":return[Wi(Cp("x",t,e,n))];case"Complex":return[ks(Cp("real",t,e,n),Cp("imag",t,e,n))];case"Cos":return[eo(Cp("x",t,e,n))];case"Cosh":return[no(Cp("x",t,e,n))];case"Elu":return[yo(Cp("x",t,e,n))];case"Erf":return[bo(Cp("x",t,e,n))];case"Exp":return[xo(Cp("x",t,e,n))];case"Expm1":return[vo(Cp("x",t,e,n))];case"Floor":return[$o(Cp("x",t,e,n))];case"Log":return[Vo(Cp("x",t,e,n))];case"Log1p":return[Uo(Cp("x",t,e,n))];case"Imag":return[Ao(Cp("x",t,e,n))];case"Neg":return[Go(Cp("x",t,e,n))];case"Reciprocal":return[Ou(Cp("x",t,e,n))];case"Real":return[mu(Cp("x",t,e,n))];case"Relu":return[Mu(Cp("x",t,e,n))];case"Round":return[zu(Cp("x",t,e,n))];case"Selu":return[Pu(Cp("x",t,e,n))];case"Sigmoid":return[Ho(Cp("x",t,e,n))];case"Sin":return[Gu(Cp("x",t,e,n))];case"Sign":return[Uu(Cp("x",t,e,n))];case"Sinh":return[Hu(Cp("x",t,e,n))];case"Softplus":return[jo(Cp("x",t,e,n))];case"Sqrt":return[sl(Cp("x",t,e,n))];case"Square":return[hu(Cp("x",t,e,n))];case"Tanh":return[hl(Cp("x",t,e,n))];case"Tan":return[cl(Cp("x",t,e,n))];case"Relu6":case"ClipByValue":return[Vi(Cp("x",t,e,n),Cp("clipValueMin",t,e,n),Cp("clipValueMax",t,e,n))];case"Rsqrt":return[Bu(Sp(t.inputNames[0],e,n))];case"Prod":return[wu(Cp("x",t,e,n),Cp("axes",t,e,n))];case"LeakyRelu":return[Lo(Cp("x",t,e,n),Cp("alpha",t,e,n))];case"Prelu":return[xu(Cp("x",t,e,n),Cp("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"control":return _d(t,e,n);case"convolution":return qa((()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=Cp("stride",t,e,n),s=Cp("pad",t,e,n),a=Cp("dataFormat",t,e,n).toUpperCase(),i=Cp("dilation",t,e,n);return[Ji(Cp("x",t,e,n),Cp("filter",t,e,n),r,s,a,i)]}case"Conv2D":{const r=Cp("strides",t,e,n),s=Rp(t,e,n),a=Cp("dataFormat",t,e,n).toUpperCase(),i=Cp("dilations",t,e,n);return[Yi(Cp("x",t,e,n),Cp("filter",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l}=Fd(t,e,n);return[ql({x:Cp("x",t,e,n),filter:Cp("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l}=Fd(t,e,n);return[Yl({x:Cp("x",t,e,n),filter:Cp("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Cp("outputShape",t,e,n),s=Cp("strides",t,e,n),a=Rp(t,e,n);return[Qi(Cp("x",t,e,n),Cp("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Cp("strides",t,e,n),s=Rp(t,e,n),a=Cp("dilations",t,e,n),i=Cp("dataFormat",t,e,n).toUpperCase();return[ao(Cp("input",t,e,n),Cp("filter",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("dataFormat",t,e,n).toUpperCase(),i=Cp("dilations",t,e,n);return[to(Cp("x",t,e,n),Cp("filter",t,e,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("kernelSize",t,e,n);return[Di(Cp("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("kernelSize",t,e,n);return[eu(Cp("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("kernelSize",t,e,n),i=Cp("includeBatchInIndex",t,e,n),{result:o,indexes:u}=ru(Cp("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("kernelSize",t,e,n);return[_i(Cp("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("kernelSize",t,e,n);return[nu(Cp("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=Cp("strides",t,e,n),s=Cp("pad",t,e,n),a=Cp("dilations",t,e,n),i=r[1],o=r[2],u=a[1],l=a[2];return[io(Cp("x",t,e,n),Cp("filter",t,e,n),[i,o],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"creation":return qa((()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=Cp("shape",t,e,n),s=Cp("dtype",t,e,n);return[Io(r,Cp("value",t,e,n),s)]}case"LinSpace":return[Po(Cp("start",t,e,n),Cp("stop",t,e,n),Cp("num",t,e,n))];case"Multinomial":{const r=Cp("logits",t,e,n),s=Cp("numSamples",t,e,n),a=Cp("seed",t,e,n);return[du(r,s,a)]}case"OneHot":{const r=Cp("indices",t,e,n),s=Cp("depth",t,e,n),a=Cp("onValue",t,e,n),i=Cp("offValue",t,e,n);return[ka(r,s,a,i)]}case"Ones":return[au(Cp("shape",t,e,n),Cp("dtype",t,e,n))];case"OnesLike":return[gu(Cp("x",t,e,n))];case"RandomUniform":return[Du(Cp("shape",t,e,n),Cp("minval",t,e,n),Cp("maxval",t,e,n),Cp("dtype",t,e,n))];case"Range":return[Fu(Cp("start",t,e,n),Cp("stop",t,e,n),Cp("step",t,e,n),Cp("dtype",t,e,n))];case"TruncatedNormal":{const r=Cp("shape",t,e,n),s=Cp("mean",t,e,n),a=Cp("stdDev",t,e,n),i=Cp("seed",t,e,n);return[ml(r,s,a,Cp("dtype",t,e,n),i)]}case"Zeros":return[su(Cp("shape",t,e,n),Cp("dtype",t,e,n))];case"ZerosLike":return[mo(Cp("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=Od(t,e,n),l=await Ac.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Od(t,e,n),u=Cp("padToMaxOutputSize",t,e,n),l=await Ac.nonMaxSuppressionPaddedAsync(r,s,a,i,o,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=Od(t,e,n);return[await Ac.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=ca(Cp("condition",t,e,n),"bool"),s=[await xl(r)];return r.dispose(),s}case"ListDiff":return Vu(Cp("x",t,e,n),Cp("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return qa((()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=Cp("x",t,e,n),s=Cp("k",t,e,n),a=Cp("sorted",t,e,n),i=fl(r,s,a);return[i.values,i.indices]}case"Unique":{const r=Cp("x",t,e,n),s=gl(r);return[s.values,s.indices]}case"UniqueV2":{const r=Cp("x",t,e,n),s=Cp("axis",t,e,n),a=gl(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"image":return qa((()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=Cp("images",t,e,n),s=Cp("size",t,e,n),a=Cp("alignCorners",t,e,n);return[Ac.resizeBilinear(r,[s[0],s[1]],a)]}case"ResizeNearestNeighbor":{const r=Cp("images",t,e,n),s=Cp("size",t,e,n),a=Cp("alignCorners",t,e,n);return[Ac.resizeNearestNeighbor(r,[s[0],s[1]],a)]}case"CropAndResize":{const r=Cp("image",t,e,n),s=Cp("boxes",t,e,n),a=Cp("boxInd",t,e,n),i=Cp("cropSize",t,e,n),o=Cp("method",t,e,n),u=Cp("extrapolationValue",t,e,n);return[Ac.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"graph":return qa((()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=Cp("default",t,e,n);return[Sp(t.name,e,n)||r];case"Placeholder":return[Sp(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Dp(Cp("x",t,e,n))];case"IdentityN":return Cp("x",t,e,n).map((t=>Dp(t)));case"Snapshot":return[Dp(Cp("x",t,e,n))];case"Shape":return[_u(Cp("x",t,e,n).shape,"int32")];case"ShapeN":return Cp("x",t,e,n).map((t=>_u(t.shape)));case"Size":return[Mo(Cp("x",t,e,n).size,"int32")];case"Rank":return[Mo(Cp("x",t,e,n).rank,"int32")];case"NoOp":return[Mo(1)];case"Print":const s=Cp("x",t,e,n),a=Cp("data",t,e,n),i=Cp("message",t,e,n),o=Cp("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"logical":return qa((()=>((t,e,n)=>{switch(t.op){case"Equal":return[po(Cp("a",t,e,n),Cp("b",t,e,n))];case"NotEqual":return[fu(Cp("a",t,e,n),Cp("b",t,e,n))];case"Greater":return[To(Cp("a",t,e,n),Cp("b",t,e,n))];case"GreaterEqual":return[Eo(Cp("a",t,e,n),Cp("b",t,e,n))];case"Less":return[zo(Cp("a",t,e,n),Cp("b",t,e,n))];case"LessEqual":return[Bo(Cp("a",t,e,n),Cp("b",t,e,n))];case"LogicalAnd":return[Zo(Cp("a",t,e,n),Cp("b",t,e,n))];case"LogicalNot":return[Qo(Cp("a",t,e,n))];case"LogicalOr":return[tu(Cp("a",t,e,n),Cp("b",t,e,n))];case"Select":case"SelectV2":return[fo(Cp("condition",t,e,n),Cp("a",t,e,n),Cp("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"matrices":return qa((()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[va(Cp("a",t,e,n),Cp("b",t,e,n),Cp("transposeA",t,e,n),Cp("transposeB",t,e,n))];case"Transpose":return[Na(Cp("x",t,e,n),Cp("perm",t,e,n))];case"_FusedMatMul":const[r,s]=Cp("fusedOps",t,e,n),a="biasadd"===r,i="prelu"===s,o=Cp("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,l]=Cp("args",t,e,n);return[Jl({a:Cp("a",t,e,n),b:Cp("b",t,e,n),transposeA:Cp("transposeA",t,e,n),transposeB:Cp("transposeB",t,e,n),bias:u,activation:s,preluActivationWeights:l})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"normalization":return qa((()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Mi(Cp("x",t,e,n),Cp("mean",t,e,n),Cp("variance",t,e,n),Cp("offset",t,e,n),Cp("scale",t,e,n),Cp("epsilon",t,e,n))];case"LRN":return[Wo(Cp("x",t,e,n),Cp("radius",t,e,n),Cp("bias",t,e,n),Cp("alpha",t,e,n),Cp("beta",t,e,n))];case"Softmax":return[Ju(Cp("x",t,e,n))];case"LogSoftmax":return[Jo(Cp("x",t,e,n))];case"SparseToDense":return[zl(Cp("sparseIndices",t,e,n),Cp("outputShape",t,e,n),Cp("sparseValues",t,e,n),Cp("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"reduction":return qa((()=>((t,e,n)=>{switch(t.op){case"Max":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[Ko(Cp("x",t,e,n),r,s)]}case"Mean":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[iu(Cp("x",t,e,n),r,s)]}case"Min":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[ou(Cp("x",t,e,n),r,s)]}case"Sum":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[Yo(Cp("x",t,e,n),r,s)]}case"All":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[ci(Cp("x",t,e,n),r,s)]}case"Any":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[hi(Cp("x",t,e,n),r,s)]}case"ArgMax":{const r=Cp("axis",t,e,n);return[pi(Cp("x",t,e,n),r)]}case"ArgMin":{const r=Cp("axis",t,e,n);return[di(Cp("x",t,e,n),r)]}case"Prod":{const r=Cp("axis",t,e,n),s=Cp("keepDims",t,e,n);return[wu(Cp("x",t,e,n),r,s)]}case"Cumsum":{const r=Cp("axis",t,e,n),s=Cp("exclusive",t,e,n),a=Cp("reverse",t,e,n);return[ro(Cp("x",t,e,n),r,s,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"slice_join":return qa((()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const r=Cp("n",t,e,n),s=Cp("axis",t,e,n);let a=Cp("tensors",t,e,n);return a=a.slice(0,r),[Hi(a,s)]}case"GatherV2":case"Gather":{const r=Cp("axis",t,e,n),s=Cp("x",t,e,n),a=Cp("indices",t,e,n);return[So(s,ca(a,"int32"),r)]}case"ReverseV2":case"Reverse":{const r=Cp("axis",t,e,n),s=Cp("x",t,e,n);return[Lu(s,r)]}case"Slice":{const r=Cp("begin",t,e,n),s=Cp("size",t,e,n);return[ju(Cp("x",t,e,n),r,s)]}case"StridedSlice":{const r=Cp("begin",t,e,n),s=Cp("end",t,e,n),a=Cp("strides",t,e,n),i=Cp("beginMask",t,e,n),o=Cp("endMask",t,e,n),u=Cp("ellipsisMask",t,e,n),l=Cp("newAxisMask",t,e,n),c=Cp("shrinkAxisMask",t,e,n),h=Cp("x",t,e,n);return[ll(h,r,s,a,i,o,u,l,c)]}case"Pack":return qa((()=>{const r=Cp("axis",t,e,n),s=Cp("tensors",t,e,n),a=s[0].shape,i=il(s[0]).shape,o=s.map((t=>{const e=f(t.shape,a);if(!e&&!f(il(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:wa(t,a)}));return[ol(o,r)]}));case"Unpack":{const r=Cp("axis",t,e,n),s=Cp("tensor",t,e,n);return yl(s,r)}case"Tile":{const r=Cp("reps",t,e,n);return[ko(Cp("x",t,e,n),r)]}case"Split":case"SplitV":{const r=Cp("axis",t,e,n),s=Cp("numOrSizeSplits",t,e,n),a=Cp("x",t,e,n);return nl(a,s,r)}case"ScatterNd":{const r=Cp("indices",t,e,n),s=Cp("values",t,e,n),a=Cp("shape",t,e,n);return[Ll(r,s,a)]}case"GatherNd":{const r=Cp("x",t,e,n),s=Cp("indices",t,e,n);return[Bl(r,s)]}case"SparseToDense":{const r=Cp("sparseIndices",t,e,n),s=Cp("outputShape",t,e,n),a=Cp("sparseValues",t,e,n),i=Cp("defaultValue",t,e,n);return[zl(r,a,s,a.dtype===i.dtype?i:ca(i,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"spectral":return qa((()=>((t,e,n)=>{switch(t.op){case"FFT":return[Qu(Cp("x",t,e,n))];case"IFFT":return[tl(Cp("x",t,e,n))];case"RFFT":return[rl(Cp("x",t,e,n))];case"IRFFT":return[el(Cp("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"transformation":return qa((()=>((t,e,n)=>{switch(t.op){case"Cast":return[ca(Cp("x",t,e,n),Cp("dtype",t,e,n))];case"ExpandDims":{const r=Cp("axis",t,e,n);return[wo(Cp("x",t,e,n),r)]}case"Squeeze":{const r=Cp("axis",t,e,n);return[il(Cp("x",t,e,n),r)]}case"Reshape":return[wa(Cp("x",t,e,n),Cp("shape",t,e,n))];case"MirrorPad":return[lu(Cp("x",t,e,n),Cp("padding",t,e,n),Cp("mode",t,e,n))];case"PadV2":case"Pad":return[yu(Cp("x",t,e,n),Cp("padding",t,e,n),Cp("constantValue",t,e,n))];case"SpaceToBatchND":{const r=Cp("blockShape",t,e,n),s=Cp("paddings",t,e,n);return[Zu(Cp("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=Cp("blockShape",t,e,n),s=Cp("crops",t,e,n);return[Fi(Cp("x",t,e,n),r,s)]}case"DepthToSpace":{const r=Cp("blockSize",t,e,n),s=Cp("dataFormat",t,e,n).toUpperCase();return[so(Cp("x",t,e,n),r,s)]}case"BroadcastTo":return[Pi(Cp("x",t,e,n),Cp("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=Cp("keyDType",t,e,n),a=Cp("valueDType",t,e,n),i=new Md(s,a);return r.addHashTable(t.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Cp("tableHandle",t,e,n,r),a=Cp("keys",t,e,n),i=Cp("values",t,e,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Cp("tableHandle",t,e,n,r),a=Cp("keys",t,e,n),i=Cp("defaultValue",t,e,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,r);case"custom":const s=$p(t.op);if(s&&s.customExecutor)return s.customExecutor(new Ed(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return W(s)?s.then((t=>[].concat(t))):[].concat(s)}class zd{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Bd(t,e,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,l=Object.keys(t).map((t=>Ap(t)[0]));let c=[];null!=r&&(c=r.map((t=>Ap(t.name)[0])));const h=[...e];for(;h.length>0;){const t=h.pop();(Ud(t)||Gd(t)||Hd(t))&&null==i&&(i=t,o=i.children.map((t=>t.name)).filter((t=>s.has(t)))),s.add(t.name),null==n[t.name]&&(-1===l.indexOf(t.name)&&-1===c.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{u.has(t.name)||(u.add(t.name),h.push(t))})):a.push(t.name)))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}const Pd=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Wd=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Vd=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function Ud(t){return Pd.indexOf(t.op)>=0}function Gd(t){return Wd.indexOf(t.op)>=0}function Hd(t){return Vd.indexOf(t.op)>=0}class jd{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new jd(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Bd(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map((t=>t.name)),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[],i=Object.keys(s).map((t=>Ap(t)[0])).map((e=>t.nodes[e])),o=t.initNodes;i.forEach((t=>{r.has(t.name)&&a.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&a.push(t)})),null!=o&&o.forEach((t=>{r.has(t.name)&&a.push(t)}));const u=new Set,l=[];for(;a.length>0;){const t=a.pop();u.add(t.name),e[t.name]||l.push(t),t.children.forEach((t=>{!u.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>u.has(t.name)))&&a.push(t)}))}return l}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map((t=>this.graph.nodes[Ap(t)[0]])),s=e.map((t=>Ap(t)[0]));let a=s.map((t=>this.graph.nodes[t]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(r,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(t,a),this.compiledMap.set(i,o));const u={},l={};return qa((()=>{const n=new zd(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,s]=Ap(e),a=[];a[s]=t[e],r[n]=a}));const a=this.getFrozenTensorIds(r),i={};for(let t=0;t<o.length;t++){const e=o[t];if(!r[e.name]){const t=Ld(e,r,n,this._resourceManager);if(W(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.checkTensorForDisposal(e.name,e,r,n,a,s,i)}}return null==this.parent&&n.dispose(a),e.map((t=>Sp(t,r,n)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if("control"!==t.category){const e=function(t,e,n){return e[Ep(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach((t=>{if(t&&!s.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new zd(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map((t=>Sp(t,i,a))),u=o.map((t=>t.id)),l=Object.keys(t).map((e=>t[e].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(i).forEach((t=>{i[t].forEach((t=>{!t||t.isDisposed||c.has(t.id)||t.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map((t=>this.graph.nodes[Ap(t)[0]])),i=n.map((t=>Ap(t)[0]));let o=i.map((t=>this.graph.nodes[t]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=Bd(t,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=Ap(e),s=[];s[r]=t[e],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const t=this.processStack(a,p,e,d,g,m,i,f,u);await Promise.all(t)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((t=>!Ud(t)&&!Sp(t.name,d,e))).map((t=>t.name));if(y.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${t}`)}return d}processStack(t,e,n,r,s,a,i,o,u){const l=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let c="";if("Enter"===t.node.op&&Cp("isConstant",t.node,r,n)&&([c]=Tp(t.node.name,n)),null==r[t.node.name]){const h=Ld(t.node,r,n,this._resourceManager);c||([c]=Tp(t.node.name,n));const p=n.currentContext;W(h)?l.push(h.then((l=>(r[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,t.node,r,n,a,i,o),this.processChildNodes(t.node,e,n,r,s,u),l)))):(r[c]=h,this.checkTensorForDisposal(c,t.node,r,n,a,i,o),this.processChildNodes(t.node,e,n,r,s,u))}else this.processChildNodes(t.node,e,n,r,s,u)}return l}processChildNodes(t,e,n,r,s,a){t.children.forEach((t=>{const[i]=Tp(t.name,n);!s[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!Sp(t,r,n)))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!Sp(t,r,n)))&&(s[i]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const n=t[e],[r]=Ap(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;l(t.length===n.shape.length&&n.shape.every(((e,n)=>-1===t[n]||t[n]===e)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&l(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=Ap(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t}),{})}checkOutputs(t){t.forEach((t=>{const[e]=Ap(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class qd{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class Kd{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new qd}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=xa(t,this.loadOptions);else{const r=(e=t,n=this.loadOptions,Fs.getLoadHandlers(e,n));if(0===r.length)r.push(xa(t,this.loadOptions));else if(r.length>1)throw new Error(`Found more than one (${r.length}) load handlers for URL '${[t]}'`);this.handler=r[0]}var e,n}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=function(t,e){const n={};let r,s=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,u=d(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=$s[n.dtype],c=t.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];l[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=_s()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];l[t]=Math.round(e*n.scale+n.min)}}s+=u*o}else if("string"===i){const e=d(a.shape);l=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));l.push(n),s+=e}}else{const r=$s[i],a=t.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{l=new Float32Array(a);const t=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let e=0;e<t.length;e++)t[e]=l[2*e],r[e]=l[2*e+1];const s=Is(t,o,"float32"),i=Is(r,o,"float32");n[e]=ks(s,i),s.dispose(),i.dispose()}}s+=u*r}"complex64"!==i&&(n[e]=Is(l,o,i))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new jd(fd.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer){const e=fd.Instance.transformGraph(t.modelInitializer);this.initializer=new jd(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"==typeof t){const e=Os(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof jn||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Xd(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t=`${t}model.json?tfjs-format=file`);const n=new Kd(t,e);return await n.load(),n}var Yd=function(){return(Yd=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)};function Jd(t,e,n,r){return new(n||(n=Promise))((function(s,a){function i(t){try{u(r.next(t))}catch(t){a(t)}}function o(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,o)}u((r=r.apply(t,e||[])).next())}))}function Zd(t,e){var n,r,s,a,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((s=(s=i.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){i.label=a[1];break}if(6===a[0]&&i.label<s[1]){i.label=s[1],s=a;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(a);break}s[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}const Qd=t=>({startEndTensor:t,startPoint:ju(t,[0,0],[-1,2]),endPoint:ju(t,[0,2],[-1,2])}),tf={strides:[8,16],anchors:[2,6]};function ef(t,e){let n,r,s;if(t.topLeft instanceof jn&&t.bottomRight instanceof jn){const[a,i]=qa((()=>[Hi([Xo(e-1,t.topLeft.slice(0,1)),t.topLeft.slice(1,1)]),Hi([Xo(e-1,t.bottomRight.slice(0,1)),t.bottomRight.slice(1,1)])]));n=a,r=i,null!=t.landmarks&&(s=qa((()=>{const n=Xo(_u([e-1,0]),t.landmarks),r=_u([1,-1]);return Oo(n,r)})))}else{const[a,i]=t.topLeft,[o,u]=t.bottomRight;n=[e-1-a,i],r=[e-1-o,u],null!=t.landmarks&&(s=t.landmarks.map((t=>[e-1-t[0],t[1]])))}const a={topLeft:n,bottomRight:r};return null!=s&&(a.landmarks=s),null!=t.probability&&(a.probability=t.probability instanceof jn?t.probability.clone():t.probability),a}function nf(t,e){return qa((()=>{let n;return n=t.hasOwnProperty("box")?t.box:t,((t,e)=>{const n=Oo(t.startPoint,e),r=Oo(t.endPoint,e),s=qi([n,r],1);return Qd(s)})(n,e).startEndTensor.squeeze()}))}class rf{constructor(t,e,n,r,s,a){this.blazeFaceModel=t,this.width=e,this.height=n,this.maxFaces=r,this.anchorsData=function(t,e,n){const r=[];for(let s=0;s<n.strides.length;s++){const a=n.strides[s],i=Math.floor((e+a-1)/a),o=Math.floor((t+a-1)/a),u=n.anchors[s];for(let t=0;t<i;t++){const e=a*(t+.5);for(let t=0;t<o;t++){const n=a*(t+.5);for(let t=0;t<u;t++)r.push([n,e])}}}return r}(e,n,tf),this.anchors=pl(this.anchorsData),this.inputSizeData=[e,n],this.inputSize=_u([e,n]),this.iouThreshold=s,this.scoreThreshold=a}async getBoundingBoxes(t,e,n=!0){const[r,s,a]=qa((()=>{const e=t.resizeBilinear([this.width,this.height]),n=Oo(Xo(e.div(255),.5),2),r=this.blazeFaceModel.predict(n).squeeze(),s=function(t,e,n){const r=ju(t,[0,1],[-1,2]),s=ei(r,e),a=ju(t,[0,3],[-1,2]),i=uo(a,n),o=uo(s,n),u=uo(i,2),l=Xo(o,u),c=ei(o,u),h=Oo(l,n),p=Oo(c,n);return qi([h,p],1)}(r,this.anchors,this.inputSize),a=ju(r,[0,0],[-1,1]);return[r,s,Ho(a).squeeze()]})),i=console.warn;console.warn=()=>{};const o=Ac.nonMaxSuppression(s,a,this.maxFaces,this.iouThreshold,this.scoreThreshold);console.warn=i;const u=await o.array();o.dispose();let l=u.map((t=>ju(s,[t,0],[1,-1])));e||(l=await Promise.all(l.map((async t=>{const e=await t.array();return t.dispose(),e}))));const c=t.shape[1],h=t.shape[2];let p;p=e?uo([h,c],this.inputSize):[h/this.inputSizeData[0],c/this.inputSizeData[1]];const d=[];for(let t=0;t<l.length;t++){const s=l[t],i=qa((()=>{const i=Qd(s instanceof jn?s:pl(s));if(!n)return i;const o=u[t];let l;return l=e?this.anchors.slice([o,0],[1,2]):this.anchorsData[o],{box:i,landmarks:ju(r,[o,5],[1,-1]).squeeze().reshape([6,-1]),probability:ju(a,[o],[1]),anchor:l}}));d.push(i)}return s.dispose(),a.dispose(),r.dispose(),{boxes:d,scaleFactor:p}}async estimateFaces(t,e=!1,n=!1,r=!0){const[,s]=function(t){return t instanceof jn?[t.shape[0],t.shape[1]]:[t.height,t.width]}(t),a=qa((()=>(t instanceof jn||(t=$a(t)),t.toFloat().expandDims(0)))),{boxes:i,scaleFactor:o}=await this.getBoundingBoxes(a,e,r);return a.dispose(),e?i.map((t=>{const e=nf(t,o);let a={topLeft:e.slice([0],[2]),bottomRight:e.slice([2],[2])};if(r){const{landmarks:e,probability:n,anchor:r}=t,s=e.add(r).mul(o);a.landmarks=s,a.probability=n}return n&&(a=ef(a,s)),a})):Promise.all(i.map((async t=>{const e=nf(t,o);let a;if(r){const[n,r,s]=await Promise.all([t.landmarks,e,t.probability].map((async t=>t.array()))),i=t.anchor,[u,l]=o,c=n.map((t=>[(t[0]+i[0])*u,(t[1]+i[1])*l]));a={topLeft:r.slice(0,2),bottomRight:r.slice(2),landmarks:c,probability:s},(t=>{t.startEndTensor.dispose(),t.startPoint.dispose(),t.endPoint.dispose()})(t.box),t.landmarks.dispose(),t.probability.dispose()}else{const t=await e.array();a={topLeft:t.slice(0,2),bottomRight:t.slice(2)}}return e.dispose(),n&&(a=ef(a,s)),a})))}}async function sf({maxFaces:t=10,inputWidth:e=128,inputHeight:n=128,iouThreshold:r=.3,scoreThreshold:s=.75}={}){const a=await Xd("https://tfhub.dev/tensorflow/tfjs-model/blazeface/1/default/1",{fromTFHub:!0});return new rf(a,e,n,t,r,s)}var af={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function of(t){return[Math.abs(t.endPoint[0]-t.startPoint[0]),Math.abs(t.endPoint[1]-t.startPoint[1])]}function uf(t){return[t.startPoint[0]+(t.endPoint[0]-t.startPoint[0])/2,t.startPoint[1]+(t.endPoint[1]-t.startPoint[1])/2]}function lf(t,e){void 0===e&&(e=1.5);var n=uf(t),r=of(t),s=[e*r[0]/2,e*r[1]/2];return{startPoint:[n[0]-s[0],n[1]-s[1]],endPoint:[n[0]+s[0],n[1]+s[1]],landmarks:t.landmarks}}var cf=[[1,0,0],[0,1,0],[0,0,1]];function hf(t,e){return[[1,0,t],[0,1,e],[0,0,1]]}function pf(t,e){for(var n=0,r=0;r<t.length;r++)n+=t[r]*e[r];return n}function df(t,e){for(var n=[],r=0;r<t.length;r++)n.push(t[r][e]);return n}function ff(t,e){for(var n=[],r=t.length,s=0;s<r;s++){n.push([]);for(var a=0;a<r;a++)n[s].push(pf(t[s],df(e,a)))}return n}function mf(t,e){var n=Math.cos(t),r=Math.sin(t),s=[[n,-r,0],[r,n,0],[0,0,1]],a=ff(hf(e[0],e[1]),s);return ff(a,hf(-e[0],-e[1]))}var gf=[13,af.midwayBetweenEyes[0]],yf=[3,2],bf=af.leftEyeLower0,xf=[bf[0],bf[bf.length-1]],wf=af.rightEyeLower0,vf=[wf[0],wf[wf.length-1]],kf=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}];function Nf(t,e,n,r){for(var s=0;s<kf.length;s++){var a=kf[s],i=a.key,o=a.indices,u=af[""+n+i];if(null==r||r.includes(i))for(var l=0;l<o.length;l++){var c=o[l];t[u[l]]=[e[c][0],e[c][1],(e[c][2]+t[u[l]][2])/2]}}}var If=function(){function t(t,e,n,r,s,a,i){this.regionsOfInterest=[],this.runsWithoutFaceDetector=0,this.boundingBoxDetector=t,this.meshDetector=e,this.irisModel=i,this.meshWidth=n,this.meshHeight=r,this.maxContinuousChecks=s,this.maxFaces=a}return t.prototype.transformRawCoords=function(t,e,n,r){var s,a,i,o,u=this,l=of({startPoint:e.startPoint,endPoint:e.endPoint}),c=[l[0]/this.meshWidth,l[1]/this.meshHeight],h=t.map((function(t){return[c[0]*(t[0]-u.meshWidth/2),c[1]*(t[1]-u.meshHeight/2),t[2]]})),p=mf(n,[0,0]),d=h.map((function(t){return function(t,e){return[pf(t,e[0]),pf(t,e[1])]}(t,p).concat([t[2]])})),f=(a=[[(s=r)[0][0],s[1][0]],[s[0][1],s[1][1]]],i=[s[0][2],s[1][2]],o=[-pf(a[0],i),-pf(a[1],i)],[a[0].concat(o[0]),a[1].concat(o[1]),[0,0,1]]),m=uf({startPoint:e.startPoint,endPoint:e.endPoint}).concat([1]),g=[pf(m,f[0]),pf(m,f[1])];return d.map((function(t){return[t[0]+g[0],t[1]+g[1],t[2]]}))},t.prototype.getLeftToRightEyeDepthDifference=function(t){return t[xf[0]][2]-t[vf[0]][2]},t.prototype.getEyeBox=function(t,e,n,r,s){void 0===s&&(s=!1);var a=function(t){var e=uf(t),n=of(t),r=Math.max.apply(Math,n)/2;return{startPoint:[e[0]-r,e[1]-r],endPoint:[e[0]+r,e[1]+r],landmarks:t.landmarks}}(lf(this.calculateLandmarksBoundingBox([t[n],t[r]]),2.3)),i=of(a),o=Ac.cropAndResize(e,[[a.startPoint[1]/this.meshHeight,a.startPoint[0]/this.meshWidth,a.endPoint[1]/this.meshHeight,a.endPoint[0]/this.meshWidth]],[0],[64,64]);return s&&(o=Ac.flipLeftRight(o)),{box:a,boxSize:i,crop:o}},t.prototype.getEyeCoords=function(t,e,n,r){void 0===r&&(r=!1);for(var s=[],a=0;a<76;a++){var i=t[3*a],o=t[3*a+1],u=t[3*a+2];s.push([(r?1-i/64:i/64)*n[0]+e.startPoint[0],o/64*n[1]+e.startPoint[1],u])}return{rawCoords:s,iris:s.slice(71)}},t.prototype.getAdjustedIrisCoords=function(t,e,n){var r=t[af[n+"EyeUpper0"][3]][2],s=t[af[n+"EyeLower0"][4]][2],a=(r+s)/2;return e.map((function(t,e){var n=a;return 2===e?n=r:4===e&&(n=s),[t[0],t[1],n]}))},t.prototype.predict=function(t,e){return Jd(this,void 0,void 0,(function(){var n,r,s,a,i=this;return Zd(this,(function(o){switch(o.label){case 0:return this.shouldUpdateRegionsOfInterest()?[4,this.boundingBoxDetector.getBoundingBoxes(t,!1,!0)]:[3,2];case 1:return n=o.sent(),r=n.boxes,s=n.scaleFactor,0===r.length?(this.regionsOfInterest=[],[2,null]):(a=r.map((function(t){var e,n,r={startPoint:t.box.startPoint.squeeze().arraySync(),endPoint:t.box.endPoint.squeeze().arraySync()},a=lf((n=s,{startPoint:[(e=r).startPoint[0]*n[0],e.startPoint[1]*n[1]],endPoint:[e.endPoint[0]*n[0],e.endPoint[1]*n[1]]}));return Yd({},a,{landmarks:t.landmarks.arraySync()})})),r.forEach((function(t){null!=t&&null!=t.startPoint&&(t.startEndTensor.dispose(),t.startPoint.dispose(),t.endPoint.dispose())})),this.updateRegionsOfInterest(a),this.runsWithoutFaceDetector=0,[3,3]);case 2:this.runsWithoutFaceDetector++,o.label=3;case 3:return[2,qa((function(){return i.regionsOfInterest.map((function(n,r){var s,a=n.landmarks.length>=468,o=gf[0],u=gf[1];!1===a&&(o=yf[0],u=yf[1]),s=function(t,e){var n;return(n=Math.PI/2-Math.atan2(-(e[1]-t[1]),e[0]-t[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}(n.landmarks[o],n.landmarks[u]);var l=uf({startPoint:n.startPoint,endPoint:n.endPoint}),c=[l[0]/t.shape[2],l[1]/t.shape[1]],h=t,p=cf;0!==s&&(h=Ac.rotateWithOffset(t,s,0,c),p=mf(-s,l));var d=function(t,e,n){var r=e.shape[1],s=e.shape[2],a=[[t.startPoint[1]/r,t.startPoint[0]/s,t.endPoint[1]/r,t.endPoint[0]/s]];return Ac.cropAndResize(e,a,[0],n)}({startPoint:n.startPoint,endPoint:n.endPoint},h,[i.meshHeight,i.meshWidth]).div(255),f=i.meshDetector.predict(d),m=f[1],g=f[2],y=wa(g,[-1,3]).arraySync();if(e){var b=i.getEyeBox(y,d,xf[0],xf[1],!0),x=b.box,w=b.boxSize,v=b.crop,k=i.getEyeBox(y,d,vf[0],vf[1]),N=k.box,I=k.boxSize,$=k.crop,C=i.irisModel.predict(Hi([v,$])).dataSync(),S=C.slice(0,228),T=i.getEyeCoords(S,x,w,!0),E=T.rawCoords,A=T.iris,R=C.slice(228),D=i.getEyeCoords(R,N,I),_=D.rawCoords,F=D.iris,O=i.getLeftToRightEyeDepthDifference(y);Math.abs(O)<30?(Nf(y,E,"left"),Nf(y,_,"right")):O<1?Nf(y,E,"left",["EyeUpper0","EyeLower0"]):Nf(y,_,"right",["EyeUpper0","EyeLower0"]);var M=i.getAdjustedIrisCoords(y,A,"left"),L=i.getAdjustedIrisCoords(y,F,"right");y=y.concat(M).concat(L)}var z=i.transformRawCoords(y,n,s,p),B=pl(z),P=lf(i.calculateLandmarksBoundingBox(z));return i.regionsOfInterest[r]=Yd({},P,{landmarks:B.arraySync()}),{coords:pl(y,[y.length,3]),scaledCoords:B,box:P,flag:m.squeeze()}}))}))]}}))}))},t.prototype.updateRegionsOfInterest=function(t){for(var e=0;e<t.length;e++){var n=t[e],r=this.regionsOfInterest[e],s=0;if(r&&r.startPoint){var a=n.startPoint,i=a[0],o=a[1],u=n.endPoint,l=u[0],c=u[1],h=r.startPoint,p=h[0],d=h[1],f=r.endPoint,m=f[0],g=f[1],y=Math.max(i,p),b=Math.max(o,d),x=(Math.min(l,m)-y)*(Math.min(c,g)-b);s=x/((l-i)*(c-o)+(m-p)*(g-o)-x)}s<.25&&(this.regionsOfInterest[e]=n)}this.regionsOfInterest=this.regionsOfInterest.slice(0,t.length)},t.prototype.clearRegionOfInterest=function(t){null!=this.regionsOfInterest[t]&&(this.regionsOfInterest=this.regionsOfInterest.slice(0,t).concat(this.regionsOfInterest.slice(t+1)))},t.prototype.shouldUpdateRegionsOfInterest=function(){var t=this.regionsOfInterest.length,e=0===t;return 1===this.maxFaces||e?e:t!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks},t.prototype.calculateLandmarksBoundingBox=function(t){var e=t.map((function(t){return t[0]})),n=t.map((function(t){return t[1]}));return{startPoint:[Math.min.apply(Math,e),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,e),Math.max.apply(Math,n)]}},t}(),$f=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]];function Cf(t){return Jd(this,void 0,void 0,(function(){var e,n,r,s,a,i,o,u,l,c,h,p,d,f,m;return Zd(this,(function(g){switch(g.label){case 0:return e=t.maxContinuousChecks,n=void 0===e?5:e,r=t.detectionConfidence,s=void 0===r?.9:r,a=t.maxFaces,i=void 0===a?10:a,o=t.iouThreshold,u=void 0===o?.3:o,l=t.scoreThreshold,c=void 0===l?.75:l,h=t.shouldLoadIrisModel,p=void 0===h||h,d=t.modelUrl,f=t.irisModelUrl,p?[4,Promise.all([Sf(i,u,c),Tf(d),Ef(f)])]:[3,2];case 1:return m=g.sent(),[3,4];case 2:return[4,Promise.all([Sf(i,u,c),Tf(d)])];case 3:m=g.sent(),g.label=4;case 4:return[2,new Df(m[0],m[1],n,s,i,p?m[2]:null)]}}))}))}function Sf(t,e,n){return Jd(this,void 0,void 0,(function(){return Zd(this,(function(r){return[2,sf({maxFaces:t,iouThreshold:e,scoreThreshold:n})]}))}))}function Tf(t){return Jd(this,void 0,void 0,(function(){return Zd(this,(function(e){return null!=t?[2,Xd(t)]:[2,Xd("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1",{fromTFHub:!0})]}))}))}function Ef(t){return Jd(this,void 0,void 0,(function(){return Zd(this,(function(e){return null!=t?[2,Xd(t)]:[2,Xd("https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2",{fromTFHub:!0})]}))}))}function Af(t,e){if(t.mesh instanceof jn){var n=qa((function(){var n=_u([e-1,0,0]),r=_u([1,-1,1]);return qa((function(){return[Hi([Xo(e-1,t.boundingBox.topLeft.slice(0,1)),t.boundingBox.topLeft.slice(1,1)]),Hi([Xo(e-1,t.boundingBox.bottomRight.slice(0,1)),t.boundingBox.bottomRight.slice(1,1)]),Xo(n,t.mesh).mul(r),Xo(n,t.scaledMesh).mul(r)]}))})),r=n[0],s=n[1],a=n[2],i=n[3];return Object.assign({},t,{boundingBox:{topLeft:r,bottomRight:s},mesh:a,scaledMesh:i})}return Object.assign({},t,{boundingBox:{topLeft:[e-1-t.boundingBox.topLeft[0],t.boundingBox.topLeft[1]],bottomRight:[e-1-t.boundingBox.bottomRight[0],t.boundingBox.bottomRight[1]]},mesh:t.mesh.map((function(t){var n=t.slice(0);return n[0]=e-1-t[0],n})),scaledMesh:t.scaledMesh.map((function(t){var n=t.slice(0);return n[0]=e-1-t[0],n}))})}var Rf,Df=function(){function t(t,e,n,r,s,a){this.kind="MediaPipeFaceMesh",this.pipeline=new If(t,e,192,192,n,s,a),this.detectionConfidence=r}return t.getAnnotations=function(){return af},t.getUVCoords=function(){return $f},t.prototype.estimateFaces=function(t){return Jd(this,void 0,void 0,(function(){var e,n,r,s,a,i,o,u,l,c,h,p,d=this;return Zd(this,(function(f){switch(f.label){case 0:if(e=t.returnTensors,n=void 0!==e&&e,r=t.flipHorizontal,s=void 0!==r&&r,a=t.predictIrises,i=void 0===a||a,o=t.input,i&&null==this.pipeline.irisModel)throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).");return u=function(t){return t instanceof jn?[t.shape[0],t.shape[1]]:[t.height,t.width]}(o),l=u[1],c=qa((function(){return o instanceof jn||(o=$a(o)),o.toFloat().expandDims(0)})),"webgl"!==fr.backendName?[3,2]:(p=G().get("WEBGL_PACK_DEPTHWISECONV"),G().set("WEBGL_PACK_DEPTHWISECONV",!0),[4,this.pipeline.predict(c,i)]);case 1:return h=f.sent(),G().set("WEBGL_PACK_DEPTHWISECONV",p),[3,4];case 2:return[4,this.pipeline.predict(c,i)];case 3:h=f.sent(),f.label=4;case 4:return c.dispose(),null!=h&&h.length>0?[2,Promise.all(h.map((function(t,e){return Jd(d,void 0,void 0,(function(){var r,a,o,u,c,h,p,d,f,m,g,y,b,x,w=this;return Zd(this,(function(v){switch(v.label){case 0:return r=t.coords,a=t.scaledCoords,o=t.box,u=t.flag,c=[u],n||(c=c.concat([r,a])),[4,Promise.all(c.map((function(t){return Jd(w,void 0,void 0,(function(){return Zd(this,(function(e){return[2,t.array()]}))}))})))];case 1:if(h=v.sent(),p=h[0],u.dispose(),p<this.detectionConfidence&&this.pipeline.clearRegionOfInterest(e),n)return d={kind:"MediaPipePredictionTensors",faceInViewConfidence:p,mesh:r,scaledMesh:a,boundingBox:{topLeft:_u(o.startPoint),bottomRight:_u(o.endPoint)}},s?[2,Af(d,l)]:[2,d];for(x in f=h.slice(1),m=f[0],g=f[1],a.dispose(),r.dispose(),y={kind:"MediaPipePredictionValues",faceInViewConfidence:p,boundingBox:{topLeft:o.startPoint,bottomRight:o.endPoint},mesh:m,scaledMesh:g},s&&(y=Af(y,l)),b={},af)(i||!1===x.includes("Iris"))&&(b[x]=af[x].map((function(t){return y.scaledMesh[t]})));return y.annotations=b,[2,y]}}))}))})))]:[2,[]]}}))}))},t}();function _f(t,e){return void 0===t&&(t=Rf.mediapipeFacemesh),void 0===e&&(e={}),Jd(this,void 0,void 0,(function(){return Zd(this,(function(n){if(t===Rf.mediapipeFacemesh)return[2,Cf(e)];throw new Error(t+" is not a valid package name.")}))}))}let Ff;function Of(){return null==Ff&&(Ff=fr.backend.epsilon()),Ff}(Rf||(Rf={})).mediapipeFacemesh="mediapipe-facemesh",t(n,"load",(function(){return _f})),t(n,"SupportedPackages",(function(){return Rf}));class Mf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Mf.prototype)}}class Lf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Lf.prototype)}}class zf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,zf.prototype)}}class Bf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Bf.prototype)}}class Pf extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Pf.prototype)}}Error;function Wf(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Vf(t,e){if(!t)throw new Pf(e)}function Uf(t,e){let n=0;for(const r of t)r===e&&n++;return n}function Gf(t){return 1===t.length?t[0]:t}function Hf(t){return Array.isArray(t)?t:[t]}function jf(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function qf(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,((t,e)=>e.toUpperCase()))}let Kf={};function Xf(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Yf(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach((t=>Yf(t)));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&"object"==typeof e&&(Array.isArray(e)||"ndarray"!==e.type||"number"!=typeof e.value?Yf(e):t[n]=e.value)}}}function Jf(t,e={},n={},r="object",s=!1){if("string"==typeof t){const s=t;let a;if(s in n)a=n[s];else if(s in Kf)a=Kf[s];else if(a=e[s],null==a)throw new zf(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new zf(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in Kf?[o,u]=Kf.className:i in e&&([o,u]=e[i]),null==o)throw new zf(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const t={};for(const e of Object.keys(Kf))t[e]=Kf[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},Kf);for(const t of Object.keys(n))Kf[t]=n[t];Yf(a.config);const r=u(o,a.config,n,s);return Kf=Object.assign({},e),r}{const t=Object.assign({},Kf);for(const t of Object.keys(n))Kf[t]=n[t];const e=new o(a.config);return Kf=Object.assign({},t),e}}}function Zf(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Qf(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function tm(t){if(null==t)throw new zf(`Invalid value in obj: ${JSON.stringify(t)}`);for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function em(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new zf(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function nm(t,e,n=0,r=1/0){return Vf(n>=0),Vf(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every((t=>typeof t===e))}function rm(t,e){Array.isArray(t)?(l(t.length>0,(()=>`${e} is unexpectedly an empty array.`)),t.forEach(((t,n)=>rm(t,`element ${n+1} of ${e}`)))):l(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got ${sm(t)}.`))}function sm(t){return null===t?"null":Array.isArray(t)?"["+t.map((t=>sm(t))).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}function am(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function im(t,e){return qa((()=>sl(Yo(Oo(t,t),e,!0))))}class om extends Wa{getConfig(){return{}}}class um extends om{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return qa((()=>{const e=im(t,this.axis),n=Vi(e,0,this.maxValue);return Oo(t,uo(n,ei(Of(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}um.className="MaxNorm",Ua(um);class lm extends om{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return qa((()=>uo(t,ei(Of(),im(t,this.axis)))))}getConfig(){return{axis:this.axis}}}lm.className="UnitNorm",Ua(lm);class cm extends om{apply(t){return Mu(t)}}cm.className="NonNeg",Ua(cm);class hm extends om{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return qa((()=>{const e=im(t,this.axis),n=ei(Oo(this.rate,Vi(e,this.minValue,this.maxValue)),Oo(1-this.rate,e));return Oo(t,uo(n,ei(Of(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}hm.className="MinMaxNorm",Ua(hm);const pm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function dm(t){return Xf(t)}function fm(t,e={}){return Jf(t,Va.getMap().classNameMap,e,"constraint")}function mm(t){if(null==t)return null;if("string"==typeof t){return fm({className:t in pm?pm[t]:t,config:{}})}return t instanceof om?t:fm(t)}const gm=["channelsFirst","channelsLast"],ym=["valid","same","causal"],bm=["max","avg"],xm=["sum","mul","concat","ave"],wm=new Map;function vm(t){em(gm,"DataFormat",t)}function km(t){em(ym,"PaddingMode",t)}function Nm(t){em(bm,"PoolMode",t)}const Im=[];function $m(t,e){Im.push(t);try{const t=e();return Im.pop(),t}catch(t){throw Im.pop(),t}}function Cm(t){if(!Em(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===Im.length?"":Im.join("/")+"/")+t}function Sm(t){if(!Em(t))throw new Error("Not a valid tensor name: '"+t+"'");wm.has(t)||wm.set(t,0);const e=wm.get(t);if(wm.set(t,wm.get(t)+1),e>0){const n=`${t}_${e}`;return wm.set(n,1),n}return t}const Tm=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Em(t){return!!t.match(Tm)}function Am(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function Rm(t){return _u(t=Array.isArray(t)?new Float32Array(t):t)}function Dm(t){return ou(Rm(t)).dataSync()[0]}function _m(t){return Ko(Rm(t)).dataSync()[0]}function Fm(t,e){if(e<t)throw new zf(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Om(t,e){return t.asType(e)}function Mm(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function Lm(t,e,n){return qa((()=>{switch(t.rank){case 1:return qu(t,e,n);case 2:return Ku(t,[e,0],[n,t.shape[1]]);case 3:return Xu(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Yu(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return ju(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return ju(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new zf(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function zm(t,e,n){return qa((()=>{switch(t.rank){case 1:return qu(t,e,n);case 2:return Ku(t,[0,e],[t.shape[0],n]);case 3:return Xu(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Yu(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new zf(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Bm(t,e,n,r){return qa((()=>{switch(t.rank){case 1:return qu(t,e,n);case 2:switch(r){case 1:return Lm(t,e,n);case 2:return zm(t,e,n);default:throw new zf(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return Lm(t,e,n);case 2:return Xu(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return zm(t,e,n);default:throw new zf(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return Lm(t,e,n);case 2:return Yu(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Yu(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return zm(t,e,n);default:throw new zf(`The axis is not within the rank of the tensor ${r}`)}default:throw new zf(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Pm(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),Hi(t,e)}function Wm(t,e){switch(t.rank){case 1:return ji([t,e]);case 2:return qi([t,e],0);case 3:return Ki([t,e],0);case 4:return Xi([t,e],0);default:throw new zf(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function Vm(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new zf(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return ko(t,e)}function Um(t,e=0,n=1,r,s){return Ru(t,e,n,r,s)}function Gm(t,e,n,r){if(t.rank<2||e.rank<2)throw new Bf(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Bf(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${e.shape}`)}if(2===t.rank&&2===e.rank){return Jl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?qm(t.rank,r,"channelsLast"):null,activation:n})}{const s=t.shape.slice(),a=s.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:e.rank},((t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n));e=e.transpose(c).reshape([u,-1]);const h=[...s,...l];return Jl({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?qm(t.rank,r,"channelsLast"):null,activation:n}).reshape(h)}}function Hm(t,e,n){return qa((()=>(e=Array.isArray(e)?_u(e,"int32"):e.toInt(),So(t,e,n))))}function jm(t){return Oo(t,t)}function qm(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new zf(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${t}`);if(5===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1,1]):e.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,1,r[0]]):e.reshape([1].concat(r))}else if(4===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1,1]):e.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,1,r[0]]):e.reshape([1].concat(r))}else if(3===t){if("channelsFirst"===n)return 1===r.length?e.reshape([1,r[0],1]):e.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?e.reshape([1,1,r[0]]):e.reshape([1].concat(r))}else if(t<3)return e;throw new zf(`Unsupported input rank by biasAdd: ${e.rank}`)}function Km(t,e,n){return qa((()=>(null==n&&(n="channelsLast"),vm(n),t.add(qm(t.rank,e,n)))))}function Xm(t,e,n,r){return qa((()=>Pl(t,e,n,r)))}function Ym(t,e,n=!1){return n?t():e()}const Jm=["fanIn","fanOut","fanAvg"],Zm=["normal","uniform","truncatedNormal"];class Qm extends Wa{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class tg extends Qm{apply(t,e){return su(t,e)}}tg.className="Zeros",Ua(tg);class eg extends Qm{apply(t,e){return au(t,e)}}eg.className="Ones",Ua(eg);class ng extends Qm{constructor(t){if(super(),"object"!=typeof t)throw new zf(`Expected argument of type ConstantConfig but got ${t}`);if(void 0===t.value)throw new zf(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return qa((()=>Oo(Mo(this.value),au(t,e))))}getConfig(){return{value:this.value}}}ng.className="Constant",Ua(ng);class rg extends Qm{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return Du(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}rg.className="RandomUniform",Ua(rg);class sg extends Qm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Bf(`randomNormal does not support dType ${e}.`);return Um(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}sg.className="RandomNormal",Ua(sg);class ag extends Qm{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Bf(`truncatedNormal does not support dType ${e}.`);return ml(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ag.className="TruncatedNormal",Ua(ag);class ig extends Qm{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return qa((()=>{if(2!==t.length||t[0]!==t[1])throw new zf("Identity matrix initializer can only be used for 2D square matrices.");return Oo(this.gain,No(t[0]))}))}getConfig(){return{gain:this.gain}}}ig.className="Identity",Ua(ig);class og extends Qm{constructor(t){if(super(),t.scale<0)throw new zf(`scale must be a positive float. Got: ${t.scale}`);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,em(Jm,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){em(Zm,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,r;if(vm(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=Am(t,2);n=t[1]*e,r=t[0]*e}else if("channelsLast"===e){const e=Am(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=Am(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new Bf(`${this.getClassName()} does not support dType ${e}.`);return ml(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return Du(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}og.className="VarianceScaling",Ua(og);class ug extends og{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return og.className}}ug.className="GlorotUniform",Ua(ug);class lg extends og{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return og.className}}lg.className="GlorotNormal",Ua(lg);class cg extends og{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return og.className}}cg.className="HeNormal",Ua(cg);class hg extends og{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return og.className}}hg.className="HeUniform",Ua(hg);class pg extends og{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return og.className}}pg.className="LeCunNormal",Ua(pg);class dg extends og{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return og.className}}dg.className="LeCunNormal",Ua(dg);class fg extends Qm{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Bf("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return qa((()=>{if(t.length<2)throw new Bf("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Um(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=Rc.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),Oo(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}fg.className="Orthogonal",Ua(fg);const mg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function gg(t,e={}){return Jf(t,Va.getMap().classNameMap,e,"initializer")}function yg(t){return Xf(t)}function bg(t){if("string"==typeof t){const e=t in mg?mg[t]:t;if("GlorotNormal"===e)return new lg;if("GlorotUniform"===e)return new ug;if("HeNormal"===e)return new cg;if("HeUniform"===e)return new hg;if("LeCunNormal"===e)return new pg;if("LeCunUniform"===e)return new dg;{const t={};return t.className=e,t.config={},gg(t)}}return t instanceof Qm?t:gg(t)}let xg=0;function wg(){return xg++}const vg={};function kg(t=""){return t in vg||(vg[t]=0),vg[t]+=1,t+vg[t].toString()}function Ng(t){return Array.isArray(t)&&Array.isArray(t[0])}function Ig(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function $g(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new zf(`Expected Tensor length to be 1; got ${t.length}`);e=t[0]}else e=t;return e}function Cg(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new zf(`Expected exactly 1 Shape; got ${t.length}`)}return t}function Sg(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce(((t,e)=>t*e));return e}const Tg="Variable";class Eg{constructor(t,e="float32",n="Variable",r=!0,s=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=wg(),n=null==n?Tg:n,this.originalName=Cm(n),this.name=Sm(this.originalName),this.trainable_=r,this.constraint=s,this.val=function(t,e=!0,n,r){return fr.makeVariable(t,e,n,r)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Ag(t){return t.map((t=>t.read()))}function Rg(t){t.forEach((t=>{t[0].write(t[1])}))}class Dg{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class _g{constructor(t,e,n,r,s,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=wg(),null!=a&&(this.originalName=Cm(a),this.name=Sm(this.originalName)),this.rank=e.length}}let Fg=0;class Og{constructor(t,e){this.callArgs=e,this.id=Fg++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Mg=0;class Lg extends Wa{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Mg++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=jf(t)+"_"+kg(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Lf(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new zf(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Gf(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Gf(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Mf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Mf(`Layer ${this.name} is not connected, no input to return.`);return Gf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Mf(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Mf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Gf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Hf(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Hf(this.inputSpec);if(t.length!==e.length)throw new zf(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new zf(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new zf(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new zf(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new zf(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),a=s.axes[e],i=r>=0?t[r]:t[t.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new zf(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],a=r.shape[t];if(null!=e&&null!=a&&e!==a)throw new zf(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Hf(t);let r=!0;for(const t of n)if(!(t instanceof _g)){r=!1;break}let s=!0;for(const t of n)if(t instanceof _g){s=!1;break}if(r===s)throw new zf("Arguments to apply() must be all SymbolicTensors or all Tensors");return $m(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Hf(t))e.push(n.shape);this.build(Gf(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=Hf(r),a=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(r=Gf(a),null!=this.activityRegularizer)throw new Bf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(t){t=Hf(t);const e=[];for(const n of t)e.push(n.shape);return Gf(e)}(t),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new _g(a,n,this,Hf(t),e,this.name,r))):new _g(a,r,this,Hf(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Bf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Mf(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new Mf(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Lf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Sg(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Ag(t?this.trainableWeights:this.weights)}setWeights(t){qa((()=>{const e=this.weights;if(e.length!==t.length)throw new zf(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=Ag(e);for(let s=0;s<r.length;++s){const a=r[s],i=e[s],o=t[s];if(!f(a.shape,o.shape))throw new zf(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}Rg(n)}))}addWeight(t,e,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new zf(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=bg("zeros"));const o=r.apply(e,n),u=new Eg(o,n,t,a,i);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Hf(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,n,r,s,a,i=null){const o=Hf(t);e=Hf(e),n=Hf(n),r=Hf(r),s=Ig(s),a=Ig(a);const u=[],l=[],c=[];for(const t of o)u.push(t.sourceLayer),l.push(t.nodeIndex),c.push(t.tensorIndex);new Og({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function zg(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const r=zg(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of r)-1===e.indexOf(t)&&e.push(t)}return e}}}class Bg extends Lg{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:kg("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new zf("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new zf("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new zf("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new _g(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Og({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new zf(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}async function Pg(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const a=t[s];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Ka(r)}}function Wg(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var Vg,Ug;Bg.className="InputLayer",Ua(Bg),(Ug=Vg||(Vg={}))[Ug.SILENT=0]="SILENT",Ug[Ug.VERBOSE=1]="VERBOSE";class Gg{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Hg{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class jg extends Gg{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if("number"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=qa((()=>ei(this.totals[t],Oo(r,n))));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:qa((()=>{const n=Oo(uo(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Xa(e[t])})))}}class qg extends Gg{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];t.push(i.data()),e.push(r),n.push(a)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}}class Kg extends Gg{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");T(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Rn();return(...s)=>{const a=Rn();return a-r<e||(r=a,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Pg(n),r.push(this.yield(t,e,n))),r.push(Uc()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Pg(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Pg(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Uc()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Pg(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Pg(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Uc()):T(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Pg(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Pg(t),await this.trainEnd(t))}}function Xg(t,e){if(null==t&&(t={}),t instanceof Gg)return[t];if(Array.isArray(t)&&t[0]instanceof Gg)return t;return Hf(t).map((t=>new Kg(t,e)))}class Yg{constructor(){}static registerCallbackConstructor(t,e){l(t>=0&&Number.isInteger(t),(()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`)),Yg.checkForDuplicate(e),null==Yg.constructors[t]&&(Yg.constructors[t]=[]),Yg.constructors[t].push(e)}static checkForDuplicate(t){for(const e in Yg.constructors){Yg.constructors[+e].forEach((e=>{if(e===t)throw new zf("Duplicate callback constructor.")}))}}static clear(){Yg.constructors={}}static createCallbacks(t){const e=[];for(const n in Yg.constructors){const r=+n;t>=r&&e.push(...Yg.constructors[r])}return e.map((t=>new t))}}function Jg(t,e,n,r,s,a,i,o,u){const l=new qg,c=[new jg,...Yg.createCallbacks(e)];null!=t&&c.push(...t),c.push(l);const h=new Hg(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:u}),{callbackList:h,history:l}}function Zg(t,e={},n=!1){return Jf(t,Va.getMap().classNameMap,e,"layer",n)}function Qg(t,e){return qa((()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=Yo(jm(t),e,!0),r=Io(n.shape,Of()),s=sl(Fo(n,r));return uo(t,s)}))}function ty(t,e){return qa((()=>iu(jm(Xo(e,t)),-1)))}function ey(t,e){return qa((()=>iu(Za(Xo(e,t)),-1)))}function ny(t,e){return qa((()=>{const n=Xo(t,e),r=Vi(Za(t),Of(),Number.MAX_VALUE),s=Za(uo(n,r));return Oo(100,iu(s,-1))}))}function ry(t,e,n=!1){return qa((()=>{if(n)e=Ju(e);else{const t=Yo(e,e.shape.length-1,!0);e=uo(e,t)}return e=Vi(e,Of(),1-Of()),Go(Yo(Oo(t.toFloat(),Vo(e)),e.shape.length-1))}))}function sy(t,e,n=!1){return qa((()=>{const r=$o(function(t){const e=[Am(t.shape)];return t.reshape(e)}(t)).toInt(),s=(e=Vi(e,Of(),1-Of())).shape;return ry(ka(r,s[s.length-1]).reshape(s),e,n)}))}function ay(t,e){return qa((()=>{let n;return n=Vi(e,Of(),1-Of()),n=Vo(uo(n,Xo(1,n))),iu(function(t,e){if(!f(t.shape,e.shape))throw new zf(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return qa((()=>{const n=e.relu(),r=e.abs().neg();return n.sub(e.mul(t)).add(r.exp().log1p())}))}(t,n),-1)}))}function iy(t,e){return qa((()=>{const n=Qg(t,-1),r=Qg(e,-1),s=Oo(n,r);return Go(Yo(s,-1))}))}Yg.constructors={};const oy={meanSquaredError:ty,meanAbsoluteError:ey,meanAbsolutePercentageError:ny,meanSquaredLogarithmicError:function(t,e){return qa((()=>{const n=Vi(e,Of(),Number.MAX_VALUE),r=Vo(ei(1,n)),s=Vi(t,Of(),Number.MAX_VALUE),a=Vo(ei(1,s));return iu(jm(Xo(r,a)),-1)}))},squaredHinge:function(t,e){return qa((()=>{const n=Fo(0,Xo(1,Oo(t,e)));return iu(jm(n),-1)}))},hinge:function(t,e){return qa((()=>{const n=Fo(0,Xo(1,Oo(t,e)));return iu(n,-1)}))},categoricalHinge:function(t,e){return qa((()=>{const n=Yo(Oo(t,e),-1),r=Ko(Oo(Xo(1,t),e),-1);return Fo(0,ei(1,Xo(r,n)))}))},logcosh:function(t,e){return qa((()=>{const n=Math.log(2),r=Xo(e,t),s=Xo(ei(r,jo(Oo(-2,r))),n);return iu(s,-1)}))},categoricalCrossentropy:ry,sparseCategoricalCrossentropy:sy,binaryCrossentropy:ay,kullbackLeiblerDivergence:function(t,e){return qa((()=>{const n=Vi(t,Of(),1),r=Vi(e,Of(),1);return Yo(Oo(t,Vo(uo(n,r))),-1)}))},poisson:function(t,e){return qa((()=>{const n=Vo(ei(Of(),e));return iu(Xo(e,Oo(t,n)),-1)}))},cosineProximity:iy};function uy(t){if("string"==typeof t){if(t in oy)return oy[t];let e=`Unknown loss ${t}`;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new zf(e)}return t}function ly(t,e){return qa((()=>{const n=Oo(.5,gu(e)),r=Om(To(e,n),t.dtype);return iu(po(t,r),-1)}))}function cy(t,e){return qa((()=>Om(po(pi(t,-1),pi(e,-1)),"float32")))}function hy(t,e){return ay(t,e)}function py(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),po(t,e).asType("float32")}const dy=ry,fy=sy,my={binaryAccuracy:ly,categoricalAccuracy:cy,precision:function(t,e){return qa((()=>{const n=function(t,e){return qa((()=>Zo(t.equal(1),e.equal(1)).sum().cast("float32")))}(t,e),r=function(t,e){return qa((()=>Zo(t.equal(0),e.equal(1)).sum().cast("float32")))}(t,e),s=n.add(r);return fo(To(s,0),n.div(s),0).cast("float32")}))},categoricalCrossentropy:dy,sparseCategoricalCrossentropy:fy,mse:ty,MSE:ty,mae:ey,MAE:ey,mape:ny,MAPE:ny,cosine:iy};function gy(t){if("string"==typeof t&&t in my)return my[t];if("string"!=typeof t&&null!=t)return t;throw new zf(`Unknown metric ${t}`)}function yy(t){if(Vf(null!==t,`Unknown LossOrMetricFn ${t}`),"string"==typeof t)return t;{let e;for(const n of Object.keys(oy))if(oy[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(my))if(my[n]===t){e=n;break}return void 0!==e?e:t.name}}const by=1048576;function xy(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!wy(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>by&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function wy(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if("string"!=typeof n)return!1;if(!wy(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!wy(e))return!1;return!0}return!1}{const e=typeof t;return"string"===e||"number"===e||"boolean"===e}}function vy(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((t=>Math.floor(e*t)))),!s){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}r("_".repeat(e)),ky(a,n,r),r("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?Ny(o[t],n,r):Iy(o[t],n,i,r),r((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const u=function(t){let e;e=null!=t.collectedTrainableWeights?Sg(t.collectedTrainableWeights):Sg(t.trainableWeights);return e}(t),l=Sg(t.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(e))}function ky(t,e,n=console.log){let r="";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=t[n],r=r.slice(0,e[n]),r+=" ".repeat(e[n]-r.length);n(r)}function Ny(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}ky([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Iy(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];a.push(`${n}[${r}][${s}]`)}const i=t.name,o=t.getClassName(),u=0===a.length?"":a[0];ky([`${i} (${o})`,s,t.countParams().toString(),u],e,r);for(let t=1;t<a.length;++t)ky(["","","",a[t]],e,r)}function $y(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function Cy(t,e){if(null===t)return null;if("string"==typeof t)return qf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];$y(e,s,r)?n.push(r):n.push(Cy(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if("name"===n&&"string"==typeof r)e[n]=r;else{const t=qf(n);e[t]=Cy(r,t)}}return e}}function Sy(t,e){if(null==t)return null;if("string"==typeof t)return jf(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];$y(e,s,r)?n.push(r):n.push(Sy(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n],s=jf(n);e[s]="name"!==n&&"className"!==n||"string"!=typeof r?Sy(r,n):r}return e}}class Ty{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Ty)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new zf(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return ca(e,t.dtype)}catch(n){throw new zf(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof _g){if(null==this.id2Value[t.id])throw new zf(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new zf(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof _g){if(null==this.id2Value[t.id])throw new zf(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new zf(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Ka(this.id2Mask)}}const Ey={},Ay={};function Ry(t,e,n,r){const s=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map((t=>t.name)),u=[],c=e.names();for(const t of o)-1!==c.indexOf(t)?u.push(e.getValue(t)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const h=o.join(",")+"|"+e.names().join(",");let p,d;if(null==Ey[h]){const t=function(t,e){l(null!=t&&t.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===t.length){const s=_y(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of t){const{sorted:t,recipientMap:i}=_y(a,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in i)null==r[t]&&(r[t]=new Set),i[t].forEach((e=>r[t].add(e)))}}return{sorted:n,recipientCounts:Dy(r)}}(i,e);p=t.sorted,d=t.recipientCounts,Ey[h]=p,Ay[h]=d}p=Ey[h],d={},s||Object.assign(d,Ay[h]);const f=new Ty(e);for(let t=0;t<p.length;++t){if(null!=r){const t=ja().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const a=p[t],i=a.sourceLayer;if(i instanceof Bg)continue;const l=[],c=[],h=[];let m=!1;for(const t of a.inputs){const n=f.getValue(t),r=f.getMask(t);l.push(n),c.push(r),null!=r&&(m=!0),s||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||h.push(n))}m&&((n=n||{}).mask=c[0]);const g=Hf(i.apply(l,n));let y=null;i.supportsMasking&&(y=i.computeMask(l,c));const b=Fy(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){f.hasKey(x[t])||f.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(u[e]=g[t])}s||Ka(h)}return f.disposeMasks(),a?u:u[0]}function Dy(t){const e={};for(const n in t)e[n]=t[n].size;return e}function _y(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),r.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:r,recipientMap:s}}function Fy(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class Oy extends Lg{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=kg(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Qf(this.inputs).length!==this.inputs.length)throw new zf(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((t=>t.name))}`);Qf(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((t=>t.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;Vf(0===n,"input layer has >1 nodes"),Vf(0===r,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Bg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},n={},r={},s={},a={},i=[],o=(t,e,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=t.sourceLayer,s=t.nodeIndex,u=t.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new Lf(`The tensor ${t.name} at layer "${r.name}" is part of a cycle.`);if(-1!==e.indexOf(l))return;this.containerNodes.add(Oy.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let t=0;t<c;t++){const r=l.inputTensors[t],s=l.inboundLayers[t],a=l.nodeIndices[t],i=l.tensorIndices[t];o(r,e,n,s,a,i)}for(e.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const t of this.outputs)o(t,u,l);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];a=Math.max(a,i),r[t.outboundLayer.id]=a,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],i=t.nodeIndices[r],o=s.inboundNodes[i],u=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const p={};for(const t in r){const e=r[t];e in p||(p[e]=[]),p[e].push(s[t])}let d=Object.keys(p).map((t=>parseInt(t,10))).sort(Zf);this.layers=[];for(const t of d){const e=p[t];e.sort(((t,e)=>{const n=a[t.id],r=a[e.id];return n<r?-1:n>r?1:0}));for(const t of e)t instanceof Oy&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map((t=>parseInt(t,10))).sort(Zf);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Lf(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${t.name}". The following previous layers were accessed without issue: ${m}`);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map((t=>t.name));for(const t of g){const e=g.filter((e=>e===t)).length;if(1!==e)throw new Lf(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Og({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new zf("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new zf(`Duplicate weight name: ${e.originalName}`);n[e.originalName]=e,r++}const s=[];for(const r in t){let a=r;if(null==n[r]){const t=r.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])s.push([n[a],t[r]]);else if(e)throw new zf(`Provided weight data has no target variable: ${r}`);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new zf(`${t.length} of ${r} weights are not set: ${t}`)}Rg(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.7.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=Sy(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return qa((()=>{t=Hf(t);const n=new Ty;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return Ry(this.outputs,n,e)}))}computeMask(t,e){return qa((()=>{let n;return t=Hf(t),n=null==e?Wf(null,t.length):Hf(e),this.runInternalGraph(t,n)[1]}))}computeOutputShape(t){const e=Ig(t);if(e.length!==this.inputLayers.length)throw new zf(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Zf);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=Ig(e.computeOutputShape(Gf(r))),a=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++){n[`${e.name}_${a}_${t}`]=s[t]}}}const s=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;a.push(s)}for(let t=0;t<a.length;t++){const e=a[t];Vf(e in n),s.push(n[e])}return Gf(s)}runInternalGraph(t,e){null==e&&(e=Wf(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=t[r],i=e[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Zf);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,a=new Array;for(const t of r)t.id in n&&a.push(n[t.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=t.callArgs&&(l=t.callArgs),1===a.length){const[t,n]=a[0];null==l.mask&&(l.mask=n),o=Hf(e.call(t,l)),u=Hf(e.computeMask(t,n)),r=[t],i=[n]}else r=a.map((t=>t[0])),i=a.map((t=>t[1])),null==l.mask&&(l.mask=i),o=Hf(e.call(r,l)),u=Hf(e.computeMask(r,i));if(e.activityRegularizer)throw new Bf("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],a=u[t];n[e.id]=[r,a]}}}}const s=[],a=[],i=[];for(const t of this.outputs){Vf(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];i.push(e.shape),s.push(e),a.push(r)}return[s,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof Oy?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=Oy.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new zf(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new zf("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new zf(`No such layer: ${t}`)}calculateLosses(){return qa((()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=Oy.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=Oy.nodeKey(t,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=e[Oy.nodeKey(s,a)];null==u&&(u=0),t.push([s.name,u,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],a=Oy.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,i,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],a=Oy.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,i,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let r;for(const a of e){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(t,e);const c=s[o];if(c.inboundNodes.length<=u)return void i(t,e);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&t.apply(Gf(n),r)}function u(t){const n=t.name,a=Zg(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;t.inboundNodes.forEach((t=>{if(!(t instanceof Array))throw new zf(`Corrupted configuration, expected array for nodeData: ${t}`);i(a,t)}))}const l=e.name,c=e.layers;for(const t of c)u(t);for(;!tm(a);)for(const t of c){const e=s[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],r=t[2];Vf(e in s);const a=s[e].inboundNodes[n].outputTensors;h.push(a[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];Vf(e in s);const a=s[e].inboundNodes[n].outputTensors;p.push(a[r])}return new t({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new zf("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){qa((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}function My(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===r)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach((e=>{e in t?n.push(t[e]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,"classWeight")}async function Ly(t,e,n,r){if(null!=e||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=qa((()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await e.data());Ka(e);const s=[];return r.forEach((t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])})),_u(s,"float32")}return null}function zy(t,e){return Oo(t,e)}function By(t,e){let n,r;const s=e;n=s.xs,r=s.ys,l(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`));const a=Py("input",t.inputNames,n),i=Py("output",t.outputNames,r),o=a[0].shape[0];l(a.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`)),l(i.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`));for(let e=0;e<a.length;e++)l(a[e].shape[0]===o,(()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));for(let e=0;e<i.length;e++)l(i[e].shape[0]===o,(()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));return{xs:a,ys:i}}function Py(t,e,n){if(n instanceof jn)return[n];if(Array.isArray(n))return l(n.length===e.length,(()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),n;{const r=[];for(const s of e){if(null==n[s])throw new zf(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}async function Wy(t,e,n){const r=null!=n.batchesPerEpoch;if(l(null!=t.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),l(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),l(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),l(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),l(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(Vy(n.validationData))l(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const t=function(t){if(3===t.length)throw new Bf("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let c;c=s?u.slice().concat(u.map((t=>"val_"+t))):u.slice();const h=Xg(n.callbacks,n.yieldEvery),p=null==n.verbose?1:n.verbose,{callbackList:d,history:f}=Jg(h,p,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,s,c);d.setModel(t),t.history=f,await d.onTrainBegin(),t.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await e.iterator();for(;m<n.epochs;){const l={};await d.onEpochBegin(m);let c=0,h=0;for(r||(g=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await g.next();if(r&&e.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:r,ys:s}=By(t,e.value),a={};a.batch=h,a.size=r[0].shape[0],await d.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=My(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await Ly(s[t],null,e[t]))}const l=r.concat(s).concat(i),p=o(l);Ka(l);for(let t=0;t<u.length;++t){const e=u[t],n=p[t];a[e]=n,Xa(n)}await d.onBatchEnd(h,a),Wg(a),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Vy(n.validationData)?Hf(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Hf(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)l[`val_${t.metricsNames[n]}`]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(m,l),m++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Vy(t){return"function"==typeof t.iterator}function Uy(t){l(t>0&&Number.isInteger(t),(()=>`batchSize is required to be a positive integer, but got ${t}`))}function Gy(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((t=>Lm(t,e,n-e))):Lm(t,e,n-e)}function Hy(t,e){return qa((()=>null==t?null:Array.isArray(t)?t.map((t=>Hy(t,e))):Hm(t,"int32"===e.dtype?e:e.toInt())))}function jy(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}async function qy(t,e,n,r={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,o,u,l,c,h;t.isTraining=!0;try{const p=null==r.batchSize?32:r.batchSize;Uy(p);const d=!1,f=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,d,p);s=f[0],a=f[1],h=f[2];let m,g=!1;if(null!=r.validationData&&r.validationData.length>0){if(g=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Bf("validationData including sample weights is not supported yet."):new zf(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);o=r.validationData[0],u=r.validationData[1];const e=!0,n=await t.standardizeUserData(o,u,null,null,e,p);l=n[0],c=n[1],m=l.concat(c)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){g=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];l=Gy(s,t,e),s=Gy(s,0,t),c=Gy(a,t,e),a=Gy(a,0,t),m=l.concat(c)}else null!=r.validationSteps&&(g=!0);const y=s.concat(a).concat(h);t.checkTrainableWeightsConsistency();const b=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let w,v;g?(t.makeTestFunction(),w=t.testFunction,v=x.slice().concat(x.map((t=>"val_"+t)))):(w=null,m=[],v=x.slice());const k=Xg(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,a,o,u,l,c,h,p,d,f,m){null==s&&(s=32),null==a&&(a=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=l&&null!=c&&(g=!0),null!=m&&(g=!0,null==f))throw new zf("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const y=t.checkNumSamples(n,s,f,"steps_per_epoch");let b;null!=y&&(b=Fm(0,y)),null==o&&(o=1);const{callbackList:x,history:w}=Jg(u,o,a,d,y,f,s,g,p);x.setModel(t),t.history=w,await x.onTrainBegin(),t.stopTraining_=!1;for(let o=d;o<a;++o){await x.onEpochBegin(o);const a={};if(null!=f)throw new Bf("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Bf("batch shuffling is not implemneted yet");h&&i(b);const o=_u(b),u=jy(y,s);for(let i=0;i<u.length;++i){const h={};if(await x.onBatchBegin(i,h),qa((()=>{const p=u[i][0],d=u[i][1],f=Lm(o,p,d-p);h.batch=i,h.size=d-p;const m=Hy(n,f),y=e(m);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,Xa(n)}if(i===u.length-1&&g){const e=t.testLoop(l,c,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];Xa(s),a["val_"+n]=s}}})),await x.onBatchEnd(i,h),Wg(h),t.stopTraining_)break}o.dispose()}if(await x.onEpochEnd(o,a),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,b,y,x,p,r.epochs,r.verbose,k,w,m,r.shuffle,v,r.initialEpoch,null,null)}finally{t.isTraining=!1,Xy(s,e),Xy(a,n),Xy(l,o),Xy(c,u),null!=h&&Ka(h)}}function Ky(t){const e=[];t instanceof jn&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(Mm(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(r)}}return e}function Xy(t,e){if(null==t)return;const n=[];if(e instanceof jn)n.push(e.id);else if(Array.isArray(e))e.forEach((t=>n.push(t.id)));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof jn)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===n.indexOf(t.id)&&r.push(t)}));else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((t=>{t.isDisposed||t.dispose()}))}function Yy(t){return Array.isArray(t)}function Jy(t){return!function(t){return t instanceof jn}(t)&&!Yy(t)}function Zy(t,e,n,r=!0,s=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(Yy(t)&&t.length>0)e=!0;else if(Jy(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new zf(`Error when checking model ${s} expected no data, but got ${t}`)}return[]}if(null==t)return e.map((t=>null));let a;if(Jy(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new zf(`No data provided for "${n}". Need data for each key in: ${e}`);a.push(t[n])}}else if(Yy(t)){if((t=t).length!==e.length)throw new zf(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);a=t}else{if(t=t,e.length>1)throw new zf(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);a=[t]}if(a=Ky(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new zf(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u>=0&&o!==u)throw new zf(`Error when checking ${s}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function Qy(t,e,n,r=!0,s=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new zf(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new zf(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new zf(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[t].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[t][a];if(null!=u&&u!==o)throw new zf(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class tb extends Oy{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new zf("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");vy(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Wc.adagrad(.01),Adadelta:()=>Wc.adadelta(1,.95,Of()),Adam:()=>Wc.adam(.001,.9,.999,Of()),Adamax:()=>Wc.adamax(.002,.9,.999,Of(),0),RMSProp:()=>Wc.rmsprop(.001,.9,0,Of()),SGD:()=>Wc.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new zf(`Unknown Optimizer ${t}`)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Dc))throw new zf("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new zf(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map((t=>uy(t)))}else{const n=uy(t.loss);this.outputs.forEach((t=>{e.push(n)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new zf(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(uy(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],$m("loss",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}}));const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);n=t}if(Array.isArray(n))return e.map((t=>n));{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};$m("metric",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,r,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===ay?-1!==["accuracy","acc"].indexOf(i)?r=ly:-1!==["crossentropy","ce"].indexOf(i)&&(r=hy):this.lossFunctions[t]===sy?-1!==["accuracy","acc"].indexOf(i)?r=py:-1!==["crossentropy","ce"].indexOf(i)&&(r=fy):-1!==["accuracy","acc"].indexOf(i)?r=cy:-1!==["crossentropy","ce"].indexOf(i)&&(r=dy),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const t=gy(i);a=t,n=""+yy(i)}let e;$m(n,(()=>{e=a})),s(t,n,e)}})(r[t])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;Uy(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return Gf(this.testLoop(i,a,r,n.verbose,n.steps))}finally{Xy(s[0],t),Xy(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let a=[];if(n.verbose>0)throw new Bf("Verbose mode is not implemented yet.");l(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof e.next?e:await e.iterator();let o=0,u=0;for(;!r||u<n.batches;){const e=await i.next();if(a=qa((()=>{if(e.value){const{xs:n,ys:r}=By(t,e.value),i=n.concat(r),l=qa((()=>s(i)));if(Ka(i),0===u)for(let t=0;t<l.length;++t)a.push(Mo(0));const c=i[0].shape[0];for(let t=0;t<l.length;++t){const e=l[t],n=a[t];a[t]=qa((()=>ei(a[t],Oo(c,e)))),u>0&&Ka(n)}Ka(l),o+=c,++u}return a})),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=uo(a[t],o),Ka(e)}return Gf(a)}(this,t,e)}checkNumSamples(t,e,n,r="steps"){let s;if(null!=n){if(s=null,null!=e)throw new zf(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else{if(null==t)throw new zf(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new zf("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),a=new Ty;if(t instanceof jn&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new zf(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new zf(`No value is provided for the model's input ${e.name}`);a.add(e,n)}const i=Ry(s,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=Wf(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((t=>t.name));for(let r=0;r<t.length;++r){const i=a.indexOf(t[r]);if(-1!==i&&(e[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach(((e,r)=>{null==e&&n.push(t[r])})),new zf(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,n=!1){return qa((()=>{const r=this.checkNumSamples(t);if(n)throw new Bf("Verbose predictLoop() is not implemented yet.");const s=jy(r,e),a=this.outputs.map((t=>[]));for(let e=0;e<s.length;++e){qa((()=>{const n=s[e][0],r=s[e][1],a=Gy(t,n,r),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new Ty(i);return Ry(this.outputs,o)})).forEach(((t,e)=>a[e].push(t)))}return Gf(a.map((t=>Hi(t,0))))}))}predict(t,e={}){const n=Ky(t);Qy(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return Uy(r),this.predictLoop(n,r)}finally{Xy(n,t)}}predictOnBatch(t){Qy(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new Lf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===sy?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Qf(t.map((t=>t.shape[0])));r.sort();const s=Qf(e.map((t=>t.shape[0])));if(s.sort(),r.length>1)throw new zf(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((t=>t.shape)))}`);if(s.length>1)throw new zf(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((t=>t.shape)))}`);if(r.length>0&&s.length>0&&!f(r,s))throw new zf(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=Zy(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Zy(e,this.feedOutputNames,s,!1,"target")),function(t,e,n){const r=[ty,ay,ry];for(let s=0;s<t.length;++s){const a=t[s],i=e[s],o=n[s];if(null!=i){if(i===ry&&1===a.shape[a.shape.length-1])throw new zf(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new zf(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new zf(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const t=My(r,this.outputNames);u=[];for(let e=0;e<t.length;++e)u.push(await Ly(o[e],null,t[e]))}return[i,o,u]}testLoop(t,e,n,r=0,s){return qa((()=>{const a=this.checkNumSamples(e,n,s,"steps"),i=[];if(r>0)throw new Bf("Verbose mode is not implemented yet.");if(null!=s)throw new Bf("steps mode in testLoop() is not implemented yet");{const r=jy(a,n),s=_u(Fm(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=Lm(s,a,o-a),l=Hy(e,u),c=t(l);if(0===n)for(let t=0;t<c.length;++t)i.push(Mo(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=ei(i[t],Oo(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=uo(i[t],a)}return i}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;if(Uf(t,r)>1){s+=`_${Uf(t.slice(0,n),r)}`}e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((t=>t.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new Ty(t),o=Ry(this.outputs,i,{training:!0});let u;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=zy(n,s[t]));const a=iu(n);e.push(a),u=0===t?n:ei(u,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=iu(e(r[s],o[s]))}Xa(n),a.push(n)}return u=iu(u),this.calculateLosses().forEach((t=>{u=ei(u,t)})),u}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>qa((()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:r[t]});const i=new Ty(a),o=Ry(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],a=iu(r(s[t],o[t]));n=0===t?a:ei(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],a=iu(n(s[r],o[r]));e.push(a)}return e}))}async fit(t,e,n={}){return qy(this,t,e,n)}async fitDataset(t,e){return Wy(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return Ka(a),Gf(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=ja().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-ja().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=jf(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map((t=>jf(t)))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");t[r]=jf(n[r])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[jf(yy(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>jf(yy(t))));{const t={};for(const e in this.metrics)t[e]=jf(yy(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Zg(Cy(t.optimizer_config));let n,r;if("string"==typeof t.loss)n=qf(t.loss);else if(Array.isArray(t.loss))n=t.loss.map((t=>qf(t)));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=qf(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map((t=>qf(t)));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=qf(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if("string"==typeof t){const e=Os(t);if(0===e.length)throw new zf(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new zf(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new zf("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ss(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.7.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:s}=await Ss(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Rs([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;xy(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){xy(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}tb.className="Model",Ua(tb);class eb extends tb{}eb.className="Functional",Ua(eb);class nb extends tb{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:kg("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some((t=>t<0)))throw new zf(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){const e=t instanceof nb||t instanceof tb;let n;if(e){if(n=t,1!==n.outputs.length)throw new zf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new zf("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new zf("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=function(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new zf("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new Bg({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new zf(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new zf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=zg(this.outputs[0])}this.inboundNodes=[],new Og({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Wf(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(Cg(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new tb({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new Lf("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new Lf("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new Lf("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new Lf("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new zf("Legacy serialization format not supported yet.");s=e}else l(null!=e.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof nb))throw new Bf(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const t of s){const e=Zg(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new zf("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new zf("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}nb.className="Sequential",Ua(nb);class rb extends Wa{getConfig(){return{}}}class sb extends rb{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Bf(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return yo(t)}(t,e)}}sb.className="elu",Ua(sb);class ab extends rb{apply(t){return Pu(t)}}ab.className="selu",Ua(ab);class ib extends rb{apply(t){return Mu(t)}}ib.className="relu",Ua(ib);class ob extends rb{apply(t){return qa((()=>uu(6,Mu(t))))}}ob.className="relu6",Ua(ob);class ub extends rb{apply(t){return t}}ub.className="linear",Ua(ub);class lb extends rb{apply(t){return Ho(t)}}lb.className="sigmoid",Ua(lb);class cb extends rb{apply(t){return function(t){return qa((()=>{const e=ei(.5,Oo(.2,t));return Vi(e,0,1)}))}(t)}}cb.className="hardSigmoid",Ua(cb);class hb extends rb{apply(t){return jo(t)}}hb.className="softplus",Ua(hb);class pb extends rb{apply(t){return function(t){return qa((()=>uo(t,Za(t).add(1))))}(t)}}pb.className="softsign",Ua(pb);class db extends rb{apply(t){return hl(t)}}db.className="tanh",Ua(db);class fb extends rb{apply(t,e=-1){return Ju(t,e)}}fb.className="softmax",Ua(fb);class mb extends rb{apply(t,e=-1){return Jo(t,e)}}mb.className="logSoftmax",Ua(mb);class gb extends rb{apply(t,e=1){return qa((()=>Ho(t.mul(e)).mul(t)))}}function yb(t){return t.getClassName()}function bb(t,e={}){return Jf(t,Va.getMap().classNameMap,e,"activation")}function xb(t){if(null==t){const t={className:"linear",config:{}};return bb(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},bb(e)}return t instanceof rb?t:bb(t)}gb.className="swish",Ua(gb);class wb extends Wa{}class vb extends wb{constructor(t){super(),function(t){if(null!=t&&"object"!=typeof t)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`)}(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return qa((()=>{let e=su([1]);return this.hasL1&&(e=ei(e,Yo(Oo(this.l1,Za(t))))),this.hasL2&&(e=ei(e,Yo(Oo(this.l2,jm(t))))),e.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}vb.className="L1L2",Ua(vb);const kb={l1l2:"L1L2"};function Nb(t){return Xf(t)}function Ib(t,e={}){return Jf(t,Va.getMap().classNameMap,e,"regularizer")}function $b(t){if(null==t)return null;if("string"==typeof t){return Ib({className:t in kb?kb[t]:t,config:{}})}return t instanceof wb?t:Ib(t)}class Cb extends Lg{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=$g(t);let n=Mu(t);return null!=this.maxValue&&(n=Vi(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Cb.className="ReLU",Ua(Cb);class Sb extends Lg{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=$g(t);return Lo(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Sb.className="LeakyReLU",Ua(Sb);class Tb extends Lg{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=bg(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=$b(t.alphaRegularizer),this.alphaConstraint=mm(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new zf(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=Cg(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new Dg({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=$g(t),xu(t,this.alpha.read())}getConfig(){const t={alphaInitializer:yg(this.alphaInitializer),alphaRegularizer:Nb(this.alphaRegularizer),alphaConstraint:dm(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Tb.className="PReLU",Ua(Tb);class Eb extends Lg{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Bf(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=$g(t);return yo(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Eb.className="ELU",Ua(Eb);class Ab extends Lg{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=$g(t);return n.mul(Om(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}Ab.className="ThresholdedReLU",Ua(Ab);class Rb extends Lg{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new fb).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=$g(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Db(t,e,n){if("number"==typeof t)return Wf(t,e);if(t.length!==e)throw new zf(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const a=t[s];if((r=a)!==parseInt(r.toString(),10))throw new zf(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number ${a}`)}return t;var r}function _b(t,e,n,r,s=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((a+r-1)/r)}function Fb(t,e,n,r){if(null==t)return null;if("valid"===r)t=t*e+_m([n-e,0]);else{if("same"!==r)throw new zf(`Unsupport padding mode: ${r}.`);t*=e}return t}function Ob(t,e){return qa((()=>(vm(e),"channelsFirst"===e?Na(t,[0,2,3,1]):t)))}function Mb(t,e){return qa((()=>(vm(e),"channelsFirst"===e?Na(t,[0,2,3,4,1]):t)))}function Lb(t,e,n,r=[1,1],s="valid",a,i,o=null){return qa((()=>{if(null==a&&(a="channelsLast"),vm(a),3!==t.rank&&4!==t.rank)throw new zf(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new zf(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=Ob(t,a);if("causal"===s)throw new Bf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=ql({x:u,filter:e,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=Na(u,[0,3,1,2])),u}))}Rb.className="Softmax",Ua(Rb);class zb extends Lg{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",zb.verifyArgs(e),this.rank=t,rm(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Bf(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Db(e.kernelSize,t,"kernelSize"),this.strides=Db(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,km(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,vm(this.dataFormat),this.activation=xb(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=bg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=mm(e.biasConstraint),this.biasRegularizer=$b(e.biasRegularizer),this.activityRegularizer=$b(e.activityRegularizer),this.dilationRate=Db(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new zf(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new zf(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new zf(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Vf("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!nm(t.kernelSize,"number",1,3))throw new zf(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:yb(this.activation),useBias:this.useBias,biasInitializer:yg(this.biasInitializer),biasRegularizer:Nb(this.biasRegularizer),activityRegularizer:Nb(this.activityRegularizer),biasConstraint:dm(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Bb extends zb{constructor(t,e){super(t,e),this.kernel=null,Bb.verifyArgs(e),this.filters=e.filters,rm(this.filters,"filters"),this.kernelInitializer=bg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=mm(e.kernelConstraint),this.kernelRegularizer=$b(e.kernelRegularizer)}build(t){t=Cg(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new zf(`The channel dimension of the input should be defined. Found ${t[e]}`);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return qa((()=>{let e;t=$g(t);const n=null==this.bias?null:this.bias.read(),r=am(this.activation.getClassName());if(null!=r&&2===this.rank)e=Lb(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s="valid",a,i=1){return qa((()=>{if(null==a&&(a="channelsLast"),vm(a),3!==t.shape.length)throw new zf(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==e.shape.length)throw new zf(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new zf(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if("channelsFirst"===a&&(t=Na(t,[0,2,1])),"causal"===s)throw new Bf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Ji(t,e,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Km(o,n)),o}))}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=Lb(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Bf("convolutions greater than 3D are not implemented yet.");e=function(t,e,n,r=[1,1,1],s="valid",a,i){return qa((()=>{if(null==a&&(a="channelsLast"),vm(a),4!==t.rank&&5!==t.rank)throw new zf(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==e.rank&&5!==e.rank)throw new zf(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let o=Mb(t,a);if("causal"===s)throw new Bf("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=to(o,e,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Km(o,n)),"channelsFirst"===a&&(o=Na(o,[0,4,1,2,3])),o}))}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=Cg(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=_b(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:yg(this.kernelInitializer),kernelRegularizer:Nb(this.kernelRegularizer),kernelConstraint:dm(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new zf(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}class Pb extends Bb{constructor(t){super(2,t),Pb.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!nm(t.kernelSize,"number",1,2))throw new zf(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Pb.className="Conv2D",Ua(Pb);class Wb extends Bb{constructor(t){super(3,t),Wb.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new zf(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}Wb.className="Conv3D",Ua(Wb);class Vb extends Pb{constructor(t){if(super(t),this.inputSpec=[new Dg({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new zf(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(4!==(t=Cg(t)).length)throw new zf("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new zf("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Dg({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return qa((()=>{let e=$g(t);if(4!==e.shape.length)throw new zf(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const n=e.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,Fb(i,c,u,this.padding),Fb(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=Na(e,[0,2,3,1]));let d=Qi(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Na(d,[0,3,1,2])),null!=this.bias&&(d=Km(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(t){const e=(t=Cg(t)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return e[n]=this.filters,e[r]=Fb(e[r],o,a,this.padding),e[s]=Fb(e[s],u,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}Vb.className="Conv2DTranspose",Ua(Vb);class Ub extends Bb{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new zf("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new zf("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new zf(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=bg(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=$b(e.depthwiseRegularizer),this.depthwiseConstraint=mm(e.depthwiseConstraint),this.pointwiseInitializer=bg(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=$b(e.pointwiseRegularizer),this.pointwiseConstraint=mm(e.pointwiseConstraint)}build(t){if((t=Cg(t)).length<this.rank+2)throw new zf(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new zf(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Dg({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return qa((()=>{let e;if(t=$g(t),1===this.rank)throw new Bf("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=Na(t,[0,2,3,1])),e=Wu(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Km(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=Na(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=yg(this.depthwiseInitializer),t.pointwiseInitializer=yg(this.pointwiseInitializer),t.depthwiseRegularizer=Nb(this.depthwiseRegularizer),t.pointwiseRegularizer=Nb(this.pointwiseRegularizer),t.depthwiseConstraint=dm(this.depthwiseConstraint),t.pointwiseConstraint=dm(this.pointwiseConstraint),t}}Ub.className="SeparableConv";class Gb extends Ub{constructor(t){super(2,t)}}Gb.className="SeparableConv2D",Ua(Gb);class Hb extends Bb{constructor(t){super(1,t),Hb.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!nm(t.kernelSize,"number",1,1))throw new zf(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}Hb.className="Conv1D",Ua(Hb);class jb extends Lg{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return qa((()=>{if(t=$g(t),"channelsLast"===this.dataFormat){const e=Bm(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Bm(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Bm(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Bm(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}jb.className="Cropping2D",Ua(jb);class qb extends Lg{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return qa((()=>{let e=$g(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=Na(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=e.resizeNearestNeighbor([t,r]);return Na(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return e.resizeNearestNeighbor([t,r])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}qb.className="UpSampling2D",Ua(qb);class Kb extends zb{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=bg(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=mm(t.depthwiseConstraint),this.depthwiseRegularizer=$b(t.depthwiseRegularizer)}build(t){if((t=Cg(t)).length<4)throw new zf(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new zf(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return qa((()=>{let e=function(t,e,n=[1,1],r="valid",s,a){return qa((()=>{null==s&&(s="channelsLast"),vm(s);let i=Ob(t,s);if(4!==t.rank)throw new zf(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==e.rank)throw new zf(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return i=ao(i,e,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Na(i,[0,3,1,2])),i}))}(t=$g(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Km(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=Cg(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=_b(e,this.kernelSize[0],this.padding,this.strides[0]),a=_b(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],r,s,a]:[t[0],s,a,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=yg(this.depthwiseInitializer),t.depthwiseRegularizer=Nb(this.depthwiseRegularizer),t.depthwiseConstraint=dm(this.depthwiseRegularizer),t}}function Xb(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new zf("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function Yb(t,e,n,r=!1,s,a,i=!1,o=!1){return qa((()=>{const u=e.shape.length;if(u<3)throw new zf(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(Fm(2,u));if(e=Na(e,l),null!=a)throw new Bf("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=s.asType("bool").asType("float32")).rank===u-1&&(s=wo(s,-1)),s=Na(s,l)),r&&(e=Lu(e,0),null!=s&&(s=Lu(s,0)));const c=[];let h,p=n;const d=e.shape[0],f=yl(e);let m,g;null!=s&&(m=yl(s));for(let e=0;e<d;++e){const n=f[e],r=qa((()=>t(n,p)));if(null==s)h=r[0],p=r[1];else{const t=qa((()=>{const t=m[e],n=gu(t).sub(t);return{output:r[0].mul(t).add(p[0].mul(n)),newStates:p.map(((e,s)=>r[1][s].mul(t).add(e.mul(n))))}}));h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=ol(c,1)}return[h,g,p]}))}Kb.className="DepthwiseConv2D",Ua(Kb);class Jb extends Lg{constructor(t){let e;if(super(t),null==t.cell)throw new zf("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new ax({cells:t.cell}):t.cell,null==e.stateSize)throw new zf("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new Dg({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Fm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((t=>null))}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){Ng(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return qa((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Bf("Constants support is not implemented in RNN yet.");Ng(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new Dg({shape:[e,null,...n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!f(this.stateSpec.map((t=>t.shape[t.shape.length-1])),s))throw new zf(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((t=>new Dg({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){qa((()=>{if(!this.stateful)throw new Mf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new zf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>su([n,t]))):this.states_=[su([n,this.cell.stateSize])];else if(null==t)Ka(this.states_),null!=this.keptStates&&(Ka(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>su([n,t]))):this.states_[0]=su([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new zf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);!0===e?this.keptStates.push(this.states_.slice()):Ka(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,s];if(!f(r.shape,a))throw new zf(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map((t=>Xa(t.clone())))}))}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Xb(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new Dg({shape:t.shape}));i=i.concat(this.stateSpec)}null!=r&&(e.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof _g){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return qa((()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=$g(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new zf(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Yb(((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]}),t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(t){return qa((()=>{let e=su(t.shape);return e=Yo(e,[1,2]),e=Mm(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?Vm(e,[1,t]):e)):this.cell.stateSize>1?[Vm(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Jb.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const r=Zg(e.cell,n);return new t(Object.assign(e,{cell:r}))}}Jb.className="RNN",Ua(Jb);class Zb extends Lg{}class Qb extends Zb{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,rm(this.units,"units"),this.activation=xb(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=bg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bg(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=$b(t.kernelRegularizer),this.recurrentRegularizer=$b(t.recurrentRegularizer),this.biasRegularizer=$b(t.biasRegularizer),this.kernelConstraint=mm(t.kernelConstraint),this.recurrentConstraint=mm(t.recurrentConstraint),this.biasConstraint=mm(t.biasConstraint),this.dropout=Dm([1,_m([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Dm([1,_m([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Cg(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return qa((()=>{if(2!==(t=t).length)throw new zf(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ix({ones:()=>gu(t),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ix({ones:()=>gu(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=Gm(null!=a?Oo(t,a):t,this.kernel.read()),null!=this.bias&&(s=Km(s,this.bias.read())),null!=i&&(n=Oo(n,i));let o=ei(s,Gm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:yb(this.activation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),recurrentInitializer:yg(this.recurrentInitializer),biasInitializer:yg(this.biasInitializer),kernelRegularizer:Nb(this.kernelRegularizer),recurrentRegularizer:Nb(this.recurrentRegularizer),biasRegularizer:Nb(this.biasRegularizer),activityRegularizer:Nb(this.activityRegularizer),kernelConstraint:dm(this.kernelConstraint),recurrentConstraint:dm(this.recurrentConstraint),biasConstraint:dm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}Qb.className="SimpleRNNCell",Ua(Qb);class tx extends Jb{constructor(t){t.cell=new Qb(t),super(t)}call(t,e){return qa((()=>{null!=this.cell.dropoutMask&&(Ka(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ka(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return new t(e)}}tx.className="SimpleRNN",Ua(tx);class ex extends Zb{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new zf("GRUCell does not support reset_after parameter set to true.");this.units=t.units,rm(this.units,"units"),this.activation=xb(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=xb(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=bg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bg(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=$b(t.kernelRegularizer),this.recurrentRegularizer=$b(t.recurrentRegularizer),this.biasRegularizer=$b(t.biasRegularizer),this.kernelConstraint=mm(t.kernelConstraint),this.recurrentConstraint=mm(t.recurrentConstraint),this.biasConstraint=mm(t.biasConstraint),this.dropout=Dm([1,_m([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Dm([1,_m([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=Cg(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return qa((()=>{if(2!==(t=t).length)throw new zf(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ix({ones:()=>gu(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ix({ones:()=>gu(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(t=Oo(t,s[0]));let l=Gm(t,this.kernel.read());this.useBias&&(l=Km(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Oo(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=nl(c,[2*this.units,this.units],c.rank-1),d=Gm(r,h),[f,m,g]=nl(l,3,l.rank-1),[y,b]=nl(d,2,d.rank-1);i=this.recurrentActivation.apply(ei(f,y)),o=this.recurrentActivation.apply(ei(m,b));const x=Gm(Oo(o,r),p);u=this.activation.apply(ei(g,x));const w=ei(Oo(i,r),Oo(ei(1,Go(i)),u));return[w,w]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:yb(this.activation),recurrentActivation:yb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),recurrentInitializer:yg(this.recurrentInitializer),biasInitializer:yg(this.biasInitializer),kernelRegularizer:Nb(this.kernelRegularizer),recurrentRegularizer:Nb(this.recurrentRegularizer),biasRegularizer:Nb(this.biasRegularizer),activityRegularizer:Nb(this.activityRegularizer),kernelConstraint:dm(this.kernelConstraint),recurrentConstraint:dm(this.recurrentConstraint),biasConstraint:dm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}ex.className="GRUCell",Ua(ex);class nx extends Jb{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new ex(t),super(t)}call(t,e){return qa((()=>{null!=this.cell.dropoutMask&&(Ka(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ka(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}nx.className="GRU",Ua(nx);class rx extends Zb{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,rm(this.units,"units"),this.activation=xb(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=xb(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=bg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=bg(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=bg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=$b(t.kernelRegularizer),this.recurrentRegularizer=$b(t.recurrentRegularizer),this.biasRegularizer=$b(t.biasRegularizer),this.kernelConstraint=mm(t.kernelConstraint),this.recurrentConstraint=mm(t.recurrentConstraint),this.biasConstraint=mm(t.biasConstraint),this.dropout=Dm([1,_m([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Dm([1,_m([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=Cg(t))[t.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Qm{apply(e,r){const s=t.apply([n]),a=(new eg).apply([n]),i=t.apply([2*n]);return Wm(Wm(s,a),i)}}).className="CustomInit",e)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return qa((()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new zf(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ix({ones:()=>gu(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ix({ones:()=>gu(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(t=Oo(t,a[0]));let h=Gm(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=Oo(r,i[0])),h=ei(h,Gm(r,this.recurrentKernel.read())),this.useBias&&(h=Km(h,this.bias.read()));const[p,d,f,m]=nl(h,4,h.rank-1);o=this.recurrentActivation.apply(p),u=this.recurrentActivation.apply(d),l=ei(Oo(u,s),Oo(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Oo(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:yb(this.activation),recurrentActivation:yb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),recurrentInitializer:yg(this.recurrentInitializer),biasInitializer:yg(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Nb(this.kernelRegularizer),recurrentRegularizer:Nb(this.recurrentRegularizer),biasRegularizer:Nb(this.biasRegularizer),activityRegularizer:Nb(this.activityRegularizer),kernelConstraint:dm(this.kernelConstraint),recurrentConstraint:dm(this.recurrentConstraint),biasConstraint:dm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}rx.className="LSTMCell",Ua(rx);class sx extends Jb{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new rx(t),super(t)}call(t,e){return qa((()=>{null!=this.cell.dropoutMask&&(Ka(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ka(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}sx.className="LSTM",Ua(sx);class ax extends Zb{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return qa((()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),s.push(a.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[a[0]].concat(n)}))}build(t){let e;Ng(t)&&(t=t[0]),t=t,this.cells.forEach(((n,r)=>{$m(`RNNCell_${r}`,(()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map((t=>({className:t.getClassName(),config:t.getConfig()})))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(Zg(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return Ag(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}Rg(e)}}function ix(t){const{ones:e,rate:n,training:r=!1,count:s=1}=t,a=()=>Xm(e(),n),i=()=>Ym(a,e,r);if(!s||s<=1)return Xa(i().clone());return Array(s).fill(void 0).map(i).map((t=>Xa(t.clone())))}ax.className="StackedRNNCells",Ua(ax);var ox=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(t);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(t,r[s])&&(n[r[s]]=t[r[s]])}return n};class ux extends Jb{constructor(t){if(t.unroll)throw new Bf("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new Bf("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new Dg({ndim:5})]}call(t,e){return qa((()=>{if(null!=this.cell.dropoutMask&&(Ka(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ka(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new zf("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return qa((()=>{const{stateSize:e}=this.cell,n=t.shape,r=this.computeSingleOutputShape(n),s=su([r[0],...r.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]}))}resetStates(t,e=!1){qa((()=>{if(!this.stateful)throw new Mf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new zf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>su(s))):this.states_=[su(s)];else if(null==t)Ka(this.states_),null!=this.keptStates&&(Ka(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>su(s))):this.states_[0]=su(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new zf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):Ka(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=s;if(!f(n.shape,r))throw new zf(`State ${e} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>Xa(t.clone())))}))}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===e,u=t[o?3:2],l=t[o?4:3],c=_b(u,r[0],s,a[0],i[0]),h=_b(l,r[1],s,a[1],i[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}ux.className="ConvRNN2D";class lx extends rx{constructor(t){const{filters:e,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=t;super(Object.assign({},t,{units:e})),this.filters=e,rm(this.filters,"filters"),this.kernelSize=Db(n,2,"kernelSize"),this.kernelSize.forEach((t=>rm(t,"kernelSize"))),this.strides=Db(r||1,2,"strides"),this.strides.forEach((t=>rm(t,"strides"))),this.padding=s||"valid",km(this.padding),this.dataFormat=a||"channelsLast",vm(this.dataFormat),this.dilationRate=Db(i||1,2,"dilationRate"),this.dilationRate.forEach((t=>rm(t,"dilationRate")))}build(t){var e;t=Cg(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new zf(`The channel dimension of the input should be defined. Found ${t[n]}`);const r=t[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;t=new((e=class extends Qm{apply(t,e){return Pm([n.apply([r]),au([r]),n.apply([2*r])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return qa((()=>{if(3!==t.length)throw new zf(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);const n=e.training||!1,r=t[0],s=t[1],a=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ix({ones:()=>gu(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(t,e,n)=>e&&e[n]?Oo(e[n],t):t;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ix({ones:()=>gu(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=nl(this.kernel.read(),4,3),[v,k,N,I]=this.useBias?nl(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,v,this.padding),l=this.inputConv(l,b,k,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[$,C,S,T]=nl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,$),f=this.recurrentConv(f,C),m=this.recurrentConv(m,S),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(ei(u,d)),A=this.recurrentActivation.apply(ei(l,f)),R=ei(Oo(A,a),Oo(E,this.activation.apply(ei(c,m)))),D=Oo(this.recurrentActivation.apply(ei(h,g)),this.activation.apply(R));return[D,D,R]}))}getConfig(){const t=super.getConfig(),{units:e}=t,n=ox(t,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(t,e,n,r){const s=Yi(t,e,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Km(s,n,this.dataFormat):s}recurrentConv(t,e){return Yi(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}lx.className="ConvLSTM2DCell",Ua(lx);class cx extends ux{constructor(t){const e=new lx(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}cx.className="ConvLSTM2D",Ua(cx);class hx extends Lg{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return Ym((()=>Xm(n,this.rate,r,this.seed)),(()=>n),t)}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}hx.className="Dropout",Ua(hx);class px extends hx{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}px.className="SpatialDropout1D",Ua(px);class dx extends Lg{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,rm(this.units,"units"),this.activation=xb(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=bg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=bg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=mm(t.kernelConstraint),this.biasConstraint=mm(t.biasConstraint),this.kernelRegularizer=$b(t.kernelRegularizer),this.biasRegularizer=$b(t.biasRegularizer),this.activityRegularizer=$b(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=Cg(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=Cg(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t),r=am(this.activation.getClassName());let s;return null!=r?s=Gm(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Gm(n,this.kernel.read()),null!=this.bias&&(s=Km(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const t={units:this.units,activation:yb(this.activation),useBias:this.useBias,kernelInitializer:yg(this.kernelInitializer),biasInitializer:yg(this.biasInitializer),kernelRegularizer:Nb(this.kernelRegularizer),biasRegularizer:Nb(this.biasRegularizer),activityRegularizer:Nb(this.activityRegularizer),kernelConstraint:dm(this.kernelConstraint),biasConstraint:dm(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}dx.className="Dense",Ua(dx);class fx extends Lg{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Cg(t);for(const e of t.slice(1))if(null==e)throw new zf(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],Am(t,1)]}call(t,e){return qa((()=>{this.invokeCallHook(t,e);let n=$g(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new zf(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],Am(t.shape,1)];return t.reshape(e)}(n)}))}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}fx.className="Flatten",Ua(fx);class mx extends Lg{constructor(t){super(t),this.supportsMasking=!0,this.activation=xb(t.activation)}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t);return this.activation.apply(n)}))}getConfig(){const t={activation:yb(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}mx.className="Activation",Ua(mx);class gx extends Lg{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return qa((()=>{return t=$g(t),e=t,n=this.n,qa((()=>{if(2!==e.shape.length)throw new zf(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return Vm(Mm(e,1),[1,n,1])}));var e,n}))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}gx.className="RepeatVector",Ua(gx);class yx extends Lg{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",r=e.slice();let s=1,a=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==a)throw new zf("Can only specifiy one unknown dimension.");a=t}else s*=e}const i=Am(t);if(null!==a){if(0===s||i%s!=0)throw new zf(n);r[a]=i/s}else if(i!==s)throw new zf(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return n.reshape(s)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}yx.className="Reshape",Ua(yx);class bx extends Lg{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);const e=Fm(1,t.dims.length+1);if(!f(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Dg({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=Cg(t)).slice();return this.dims.forEach(((n,r)=>{e[r+1]=t[n]})),e}call(t,e){return Na($g(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}bx.className="Permute",Ua(bx);class xx extends Lg{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=$g(t);return hi(fu(n,this.maskValue),-1)}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t),r=hi(fu(n,this.maskValue),-1,!0);return n.mul(r.asType(n.dtype))}))}}xx.className="Masking",Ua(xx);class wx extends Lg{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Hf(t.inputLength))}this.inputDim=t.inputDim,rm(this.inputDim,"inputDim"),this.outputDim=t.outputDim,rm(this.outputDim,"outputDim"),this.embeddingsInitializer=bg(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=$b(t.embeddingsRegularizer),this.activityRegularizer=$b(t.activityRegularizer),this.embeddingsConstraint=mm(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return qa((()=>this.maskZero?(t=$g(t),fu(t,mo(t))):null))}computeOutputShape(t){if(t=Cg(t),null==this.inputLength)return[...t,this.outputDim];const e=Hf(this.inputLength);if(e.length!==t.length-1)throw new zf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],a=t[r+1];if(null!=s&&null!=a&&s!==a)throw new zf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);null==s&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return qa((()=>{this.invokeCallHook(t,e);let n=$g(t);"int32"!==n.dtype&&(n=Om(n,"int32"));return Hm(this.embeddings.read(),n.as1D()).reshape(Cg(this.computeOutputShape(n.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:yg(this.embeddingsInitializer),embeddingsRegularizer:Nb(this.embeddingsRegularizer),activityRegularizer:Nb(this.activityRegularizer),embeddingsConstraint:dm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}wx.className="Embedding",Ua(wx);class vx extends Lg{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Bf}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],a=e[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new zf("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Cg(t)]),(t=t).length<2)throw new zf(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Qf(e),e.length>1)throw new zf(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map((t=>t.length));-1===t.indexOf(null)&&1===Qf(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return qa((()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map((t=>t.rank));if(-1===n.indexOf(null)){const r=_m(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=Mm(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],a=t.slice(1).concat([s]);let i=r.reshape([s].concat(Am(t.slice(1))));i=Na(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const s=Fm(1,t).concat([0]);e.push(Na(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=Na(r.reshape([-1,e]),[1,0]).reshape(n)}else if(s>1){const t=[s-1].concat(Fm(0,s-1));r=Na(r,t)}return r}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Qf(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return qa((()=>{if(null==e)return null;if(!Array.isArray(e))throw new zf("`mask` should be an Array");if(!Array.isArray(t))throw new zf("`inputs` should be an Array");if(e.length!==t.length)throw new zf(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;let n=(e=e.map((t=>null==t?t:wo(t,0))))[0];for(let t=1;t<e.length-1;++t)n=Zo(n,e[t]);return n}))}}class kx extends vx{constructor(t){super(t)}mergeFunction(t){return qa((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=ei(e,t[n]);return e}))}}kx.className="Add",Ua(kx);class Nx extends vx{constructor(t){super(t)}mergeFunction(t){return qa((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=Oo(e,t[n]);return e}))}}Nx.className="Multiply",Ua(Nx);class Ix extends vx{constructor(t){super(t)}mergeFunction(t){return qa((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=ei(e,t[n]);return Oo(1/t.length,e)}))}}Ix.className="Average",Ua(Ix);class $x extends vx{constructor(t){super(t)}mergeFunction(t){return qa((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Fo(e,t[n]);return e}))}}$x.className="Maximum",Ua($x);class Cx extends vx{constructor(t){super(t)}mergeFunction(t){return qa((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=uu(e,t[n]);return e}))}}Cx.className="Minimum",Ua(Cx);class Sx extends vx{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new zf("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(f(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new zf("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return qa((()=>Pm(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new zf("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new zf("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new zf("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new zf(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return qa((()=>{let n=!0;if(e.forEach((t=>{null==t||(n=!1)})),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(gu(t[n]).asType("bool")):e[n].rank<t[n].rank?r.push(wo(e[n],-1)):r.push(e[n]);const s=Hi(r,this.axis);return ci(s,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Tx(t,e){for(;t<0;)t+=e;return t}Sx.className="Concatenate",Ua(Sx);class Ex extends vx{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){l(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Bf("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new zf(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new zf(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,n)=>Tx(e,t[n].shape.length))):[Tx(this.axes,n.shape.length),Tx(this.axes,r.shape.length)],this.normalize&&(n=Qg(n,e[0]),r=Qg(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Bf("batchDot is not implemented for tensors of 4D or higher rank yet");if(l(t.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`)),l(t.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new Bf("batchDot is not implemented for complex64-type Tensors yet.");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return qa((()=>{let n,i;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,r=a[1]===e.shape.length-1;i=t.matMul(e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Tx(this.axes,t.length),Tx(this.axes,e.length)],n}computeOutputShape(t){l(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Bf("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}Ex.className="Dot",Ua(Ex);class Ax extends Lg{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t);return Ym((()=>Um(n.shape,0,this.stddev).add(n)),(()=>n),e.training||!1)}))}}Ax.className="GaussianNoise",Ua(Ax);class Rx extends Lg{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return qa((()=>{this.invokeCallHook(t,e);const n=$g(t);if(this.rate>0&&this.rate<1){return Ym((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Um(n.shape,1,t))}),(()=>n),e.training||!1)}return n}))}}Rx.className="GaussianDropout",Ua(Rx);class Dx extends Lg{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||$g(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return qa((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Ym((()=>{const e=$g(t),r=-1.7580993408473766;let s=Eo(Du(n),this.rate);s=Om(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate;return e.mul(s).add(s.add(-1).mul(r)).mul(a).add(i)}),(()=>$g(t)),e.training||!1)}return t}))}}function _x(t,e,n,r,s,a=.001){let i;if(2===t.rank)i=Li(t,e,n,r,s,a);else if(3===t.rank)i=zi(t,e,n,r,s,a);else{if(4!==t.rank)throw new Bf(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Bi(t,e,n,r,s,a)}return i}function Fx(t,e,n,r,s=.001){return f(r.slice().sort(),Fm(0,t.rank-1))?function(t,e,n,r,s=.001){return qa((()=>{const a=pu(t,r),i=a.mean,o=a.variance;return[_x(t,i,o,n,e,s),i,o]}))}(t,e,n,r,s):function(t,e,n,r,s=.001){return qa((()=>{const a=pu(t,r),i=a.mean,o=a.variance,u=[];for(const e of Fm(0,t.rank))-1!==r.indexOf(e)?u.push(1):u.push(t.shape[e]);const l=i.reshape(u),c=o.reshape(u),h=null==e?null:e.reshape(u),p=null==n?null:n.reshape(u);return[_x(t,l,c,p,h,s),i,o]}))}(t,e,n,r,s)}Dx.className="AlphaDropout",Ua(Dx);class Ox extends Lg{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=bg(t.betaInitializer||"zeros"),this.gammaInitializer=bg(t.gammaInitializer||"ones"),this.movingMeanInitializer=bg(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=bg(t.movingVarianceInitializer||"ones"),this.betaConstraint=mm(t.betaConstraint),this.gammaConstraint=mm(t.gammaConstraint),this.betaRegularizer=$b(t.betaRegularizer),this.gammaRegularizer=$b(t.gammaRegularizer)}build(t){t=Cg(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new zf(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new Dg({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return qa((()=>{const n=null!=e.training&&e.training,r=$g(t),s=r.shape,a=s.length,i=Fm(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=Wf(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!f(l,Fm(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(u),e=this.movingVariance.read().reshape(u),n=this.center?this.beta.read().reshape(u):null,s=this.scale?this.gamma.read().reshape(u):null;return _x(r,t,e,n,s,this.epsilon)}return _x(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=Fx(r,this.gamma.read(),this.beta.read(),i,this.epsilon),m=(t,e,n)=>{qa((()=>{const r=1-n,s=t.read(),a=s.sub(e).mul(r);t.write(s.sub(a))}))};return(()=>{m(this.movingMean,p,this.momentum),m(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:yg(this.betaInitializer),gammaInitializer:yg(this.gammaInitializer),movingMeanInitializer:yg(this.movingMeanInitializer),movingVarianceInitializer:yg(this.movingVarianceInitializer),betaRegularizer:Nb(this.betaRegularizer),gammaRegularizer:Nb(this.gammaRegularizer),betaConstraint:dm(this.betaConstraint),gammaConstraint:dm(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Ox.className="BatchNormalization",Ua(Ox);class Mx extends Lg{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=bg(t.betaInitializer||"zeros"),this.gammaInitializer=bg(t.gammaInitializer||"ones"),this.betaRegularizer=$b(t.betaRegularizer),this.gammaRegularizer=$b(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=Cg(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error(`Invalid axis: ${t}`);if(this.axis.length!==Qf(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((e=>t[e]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(t,e){const n=$g(t),r=n.shape,s=r.length;return qa((()=>{let{mean:t,variance:e}=pu(n,this.axis,!0);const a=Wf(1,s);for(const t of this.axis)a[t]=r[t];const i=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?t.reshape(a):t;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(l.push(r[t]),c.push(1)):(l.push(1),c.push(r[t]));return t=t.tile(l),e=e.tile(l),o=o.tile(c),u=u.tile(c),_x(n,t,e,u,o,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:yg(this.betaInitializer),gammaInitializer:yg(this.gammaInitializer),betaRegularizer:Nb(this.betaRegularizer),gammaRegularizer:Nb(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Mx.className="LayerNormalization",Ua(Mx);class Lx extends Lg{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new zf(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new zf(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new zf(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new Dg({ndim:4})]}computeOutputShape(t){let e,n;return t=Cg(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return qa((()=>{return e=$g(t),n=this.padding,r=this.dataFormat,qa((()=>{if(4!==e.rank)throw new zf(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new zf("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new zf(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],yu(e,t)}));var e,n,r}))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function zx(t,e,n,r,s,a){return qa((()=>{let i;vm(s),Nm(a),km(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Ob(t,s);const o="same"===r?"same":"valid";return i="max"===a?eu(t,e,n,o):Di(t,e,n,o),"channelsFirst"===s&&(i=Na(i,[0,3,1,2])),i}))}function Bx(t,e,n,r,s,a){return qa((()=>{let i;vm(s),Nm(a),km(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),t=Mb(t,s);const o="same"===r?"same":"valid";return i="max"===a?nu(t,e,n,o):_i(t,e,n,o),"channelsFirst"===s&&(i=Na(i,[0,4,1,2,3])),i}))}Lx.className="ZeroPadding2D",Ua(Lx);class Px extends Lg{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new zf(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(rm(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new zf(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}rm(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,km(this.padding),this.inputSpec=[new Dg({ndim:3})]}computeOutputShape(t){const e=_b((t=Cg(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return qa((()=>{this.invokeCallHook(t,e),t=Mm($g(t),2);const n=this.poolingFunction($g(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return il(n,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class Wx extends Px{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return vm(s),km(r),zx(t,e,n,r,s,"max")}}Wx.className="MaxPooling1D",Ua(Wx);class Vx extends Px{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return vm(s),km(r),zx(t,e,n,r,s,"avg")}}Vx.className="AveragePooling1D",Ua(Vx);class Ux extends Lg{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new zf(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];rm(this.poolSize,"poolSize"),rm(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,vm(this.dataFormat),km(this.padding),this.inputSpec=[new Dg({ndim:4})]}computeOutputShape(t){t=Cg(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=_b(e,this.poolSize[0],this.padding,this.strides[0]),n=_b(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return qa((()=>(this.invokeCallHook(t,e),this.poolingFunction($g(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Gx extends Ux{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return vm(s),km(r),zx(t,e,n,r,s,"max")}}Gx.className="MaxPooling2D",Ua(Gx);class Hx extends Ux{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return vm(s),km(r),zx(t,e,n,r,s,"avg")}}Hx.className="AveragePooling2D",Ua(Hx);class jx extends Lg{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new zf(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];rm(this.poolSize,"poolSize"),rm(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,vm(this.dataFormat),km(this.padding),this.inputSpec=[new Dg({ndim:5})]}computeOutputShape(t){t=Cg(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=_b(e,this.poolSize[0],this.padding,this.strides[0]),n=_b(n,this.poolSize[1],this.padding,this.strides[1]),r=_b(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return qa((()=>(this.invokeCallHook(t,e),this.poolingFunction($g(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class qx extends jx{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return vm(s),km(r),Bx(t,e,n,r,s,"max")}}qx.className="MaxPooling3D",Ua(qx);class Kx extends jx{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return vm(s),km(r),Bx(t,e,n,r,s,"avg")}}Kx.className="AveragePooling3D",Ua(Kx);class Xx extends Lg{constructor(t){super(t),this.inputSpec=[new Dg({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Bf}}class Yx extends Xx{constructor(t){super(t||{})}call(t,e){return qa((()=>{const e=$g(t);return iu(e,1)}))}}Yx.className="GlobalAveragePooling1D",Ua(Yx);class Jx extends Xx{constructor(t){super(t||{})}call(t,e){return qa((()=>{const e=$g(t);return Ko(e,1)}))}}Jx.className="GlobalMaxPooling1D",Ua(Jx);class Zx extends Lg{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,vm(this.dataFormat),this.inputSpec=[new Dg({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Bf}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Qx extends Zx{call(t,e){return qa((()=>{const e=$g(t);return"channelsLast"===this.dataFormat?iu(e,[1,2]):iu(e,[2,3])}))}}Qx.className="GlobalAveragePooling2D",Ua(Qx);class tw extends Zx{call(t,e){return qa((()=>{const e=$g(t);return"channelsLast"===this.dataFormat?Ko(e,[1,2]):Ko(e,[2,3])}))}}tw.className="GlobalMaxPooling2D",Ua(tw);class ew extends Lg{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=Zg(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class nw extends ew{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=Cg(t)).length<3)throw new zf(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=Cg(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return qa((()=>Yb(((t,n)=>[$g(this.layer.call(t,e)),[]]),t=$g(t),[],!1,null,null,!1,!0)[1]))}}nw.className="TimeDistributed",Ua(nw);class rw extends ew{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Zg(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=Zg(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,s=this.mergeMode,em(xm,"BidirectionalMergeMode",s),t.weights)throw new Bf("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):Gf(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=Xb(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new zf("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const r=n.map((t=>new Dg({shape:t.shape})));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),i.push(...r)}if(null!=r)throw new Bf("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof _g;for(const t of a)if(t instanceof _g!==o)throw new zf("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return qa((()=>{const n=e.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=Lu(s,1)),"concat"===this.mergeMode?i=Pm([r,s]):"sum"===this.mergeMode?i=ei(r,s):"ave"===this.mergeMode?i=Oo(.5,ei(r,s)):"mul"===this.mergeMode?i=Oo(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){$m(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),$m(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map((t=>null));return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Zg(e.layer);if(delete e.layer,null!=e.numConstants)throw new Bf("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=e;return r.layer=n,new t(r)}}function sw(t,e){return aw(t,e)}function aw(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(lw(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const a in t){const i=aw(t[a],e,n,r);s[a]=i}return r.delete(t),s}throw new Error(`Can't recurse into non-iterable type: ${t}`)}return n.set(t,s.value),s.value}function iw(t,e=uw){return ow(t,e)}function ow(t,e,n=new Set){const r=t[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=e(t);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(lw(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=ow(t.map((t=>t[a])),e,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function uw(t){return null===t?null:lw(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function lw(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof jn))}function cw(t){return t instanceof jn?{value:t.clone(),recurse:!1}:lw(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}rw.className="Bidirectional",Ua(rw);class hw{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class pw extends hw{constructor(){super(pw.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}pw.INITIAL_CAPACITY=32;class dw{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new kw(this,t)}filter(t){return new ww(this,t)}map(t){return new vw(this,t)}mapAsync(t){return new Nw(this,t)}serialMapAsync(t){return new Nw(this,t).serial()}flatmap(t){return new $w(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile((t=>!0===t))}rowMajorBatch(t,e=!0){return new xw(this,t,e)}columnMajorBatch(t,e=!0,n=uw){return this.rowMajorBatch(t,e).map((t=>iw(t,n)))}concatenate(t,e){return new Cw(new fw([this,t]),e)}take(t){return t<0||null==t?this:new bw(this,t)}skip(t){return t<0||null==t?this:new yw(this,t)}prefetch(t){return new Ew(this,t)}shuffle(t,e){return new Aw(this,t,e)}serial(){return new gw(this)}}class fw extends dw{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:(e=t,sw(e,cw)),done:!1};var e}}class mw extends dw{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}}class gw extends dw{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class yw extends dw{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Ka(t.value)}return this.upstream.next()}}class bw extends dw{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class xw extends dw{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class ww extends dw{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Ka(t.value)}}}class vw extends dw{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=lr(t.value),n=this.transform(t.value),r=lr(n);for(const t of e)ur(t,r)||t.dispose();return{value:n,done:!1}}}class kw extends dw{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class Nw extends dw{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=lr(t.value),n=await this.transform(t.value),r=lr(n);for(const t of e)ur(t,r)||t.dispose();return{value:n,done:!1}}}class Iw extends dw{constructor(){super(),this.outputQueue=new pw,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class $w extends Iw{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=lr(t.value),n=this.transform(t.value),r=lr(n);this.outputQueue.pushAll(n);for(const t of e)ur(t,r)||t.dispose();return!0}}class Cw extends dw{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var Sw,Tw;(Tw=Sw||(Sw={}))[Tw.FAIL=0]="FAIL",Tw[Tw.SHORTEST=1]="SHORTEST",Tw[Tw.LONGEST=2]="LONGEST";class Ew extends dw{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new hw(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class Aw extends Ew{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=vu.alea(n||Rn().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Rw{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return l(t>0,(()=>`batchSize needs to be positive, but it is\n      ${t}`)),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),Dw((async()=>(await n.iterator()).columnMajorBatch(t,e,_w)),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,Dw((async()=>(await e.iterator()).concatenate(await t.iterator())),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,Dw((async()=>(await e.iterator()).filter((e=>qa((()=>t(e)))))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return Dw((async()=>(await e.iterator()).map((e=>qa((()=>t(e)))))),this.size)}mapAsync(t){const e=this;return Dw((async()=>(await e.iterator()).mapAsync(t)),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return Dw((async()=>(await e.iterator()).prefetch(t)),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,Dw((async()=>{const n=new mw((async()=>({value:await e.iterator(),done:!1})));var r,s;return r=n.take(t),new Cw(r,s)}),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,Dw((async()=>(await e.iterator()).skip(t)),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=vu.alea(e||Rn().toString());return Dw((async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())}),this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,Dw((async()=>(await e.iterator()).take(t)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Dw(t,e=null){return new class extends Rw{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function _w(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof jn||$(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof jn?ol(t):Is(t)}(t),recurse:!1}}var n,r;return{value:null,recurse:!0}}Rw.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function Fw(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&l("complex64"!==t.dtype,(()=>`${e} does not support complex64 tensors in the CPU backend.`))}))}const Ow=uc,Mw=sh,Lw=ah,zw=ih,Bw=bl;class Pw extends s{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r(this,Ha())}write(t,e,n){this.firstUse&&(this.firstUse=!1,G().get("IS_NODE")&&Zc("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={};return this.data.set(r,{values:t,dtype:n,refCount:1}),r}makeTensorInfo(t,e,n){let r;if("string"===e&&null!=n&&n.length>0&&S(n[0])){const s=n.map((t=>Dn(t)));r=this.write(s,t,e)}else r=this.write(n,t,e);return{dataId:r,shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,r){this.data.set(t,{values:e,dtype:r,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);if("complex64"===e){return Qc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map((t=>_n(t)))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return la(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return Ha().makeTensorFromDataId(r,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=Rn();t();return{kernelMs:Rn()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}stridedSlice(t,e,n,r){Fw(t,"stridedSlice");const s=Ra(e,n,r);if(s.some((t=>0===t)))return Is([],s);const a=la(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[t]*r[t]+e[t];a.set(i.get(...s),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=la([t.size,t.size],t.dtype),r=n.values;for(let n=0;n<e.length;n++)r[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=ju(t,a,i).reshape(r);return o}reverse(t,e){Fw(t,"reverse");const n=la(t.shape,t.dtype),r=this.bufferSync(t);for(let s=0;s<n.size;s++){const a=n.indexToLoc(s),i=a.slice();e.forEach((e=>i[e]=t.shape[e]-1-i[e])),n.set(r.get(...i),...a)}return n.toTensor()}neg(t){return Fw(t,"neg"),Oo(Mo(-1),t)}addN(t){Fw(t,"addN");const e=t.map((t=>this.readSync(t.dataId))),n=la(t[0].shape,t[0].dtype),r=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<r.length;e++)r[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=w([e],t.shape),r=Ko(t,n),s=ai(r.shape,n),a=Xo(t,r.reshape(s)),i=xo(a),o=this.sum(i,n).reshape(s);return uo(i,o)}pow(t,e){return Fw([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.pow(t,e)))}floorDiv(t,e){Fw([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",((t,e)=>Math.floor(t/e)))}sum(t,e){Fw(t,"sum"),ii("sum",e,t.rank);const[n,r]=si(t.shape,e),s=su(n,ar(t.dtype,"int32")),a=d(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return s}prod(t,e){Fw(t,"sum");const[n,r]=si(t.shape,e),s=su(n,ar(t.dtype,"int32")),a=d(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return s}unsortedSegmentSum(t,e,n){Fw(t,"unsortedSegmentSum");const r=[],s=t.rank-e.rank;for(let t=0;t<s;++t)e=e.expandDims(t+1);for(let s=0;s<n;++s){const n=Mo(s,"int32"),a=po(n,e).asType("float32").mul(t).sum(0);r.push(a)}return ol(r)}argMin(t,e){Fw(t,"argMin");const n=[e];ii("argMin",n,t.rank);const[r,s]=si(t.shape,n),a=su(r,"int32"),i=d(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s<n&&(n=s,r=t)}o[t]=r}return a}argMax(t,e){Fw(t,"argMax");const n=[e];ii("argMax",n,t.rank);const[r,s]=si(t.shape,n),a=su(r,"int32"),i=d(s),o=this.readSync(a.dataId),u=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=u[e],r=0;for(let t=0;t<i;++t){const s=u[e+t];s>n&&(n=s,r=t)}o[t]=r}return a}cumsum(t,e,n,r){if(Fw(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=${e}`);const s=ar(t.dtype,"int32"),a=su(t.shape,s),i=this.readSync(a.dataId),o=this.readSync(t.dataId),u=t.shape[t.rank-1],l=r?(t,e)=>t+u-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=u)for(let e=0;e<u;e++){const r=l(t,e);if(0===e)i[r]=n?0:o[r];else{const s=l(t,e-1);i[r]=n?o[s]+i[s]:o[r]+i[s]}}return a}equal(t,e){return Fw([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t===e?1:0))}notEqual(t,e){return Fw([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t!==e?1:0))}less(t,e){return Fw([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t<e?1:0))}lessEqual(t,e){return Fw([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t<=e?1:0))}greater(t,e){return Fw([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t>e?1:0))}greaterEqual(t,e){return Fw([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t>=e?1:0))}logicalAnd(t,e){return Fw([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t&&e))}logicalOr(t,e){return Fw([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",((t,e)=>t||e))}select(t,e,n){Fw([t,e,n],"select");const r=this.readSync(t.dataId),s=this.readSync(e.dataId),a=this.readSync(n.dataId),i=su(e.shape,ar(e.dtype,n.dtype)),o=this.readSync(i.dataId);let u=0;const l=0===t.rank||t.rank>1||1===e.rank?1:d(e.shape.slice(1));for(let t=0;t<r.length;t++)for(let e=0;e<l;e++)1===r[t]?o[u++]=s[t]:o[u++]=a[t];return i}where(t){Fw([t],"where");const e=this.readSync(t.dataId);return Bw(t.shape,e)}topk(t,e,n){Fw(t,"topk");const r=this.readSync(t.dataId);return zw(r,t.shape,t.dtype,e,n)}min(t,e){Fw(t,"min"),ii("min",e,t.rank);const[n,r]=si(t.shape,e),s=su(n,t.dtype),a=d(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];r<n&&(n=r)}i[t]=n}return s}minimum(t,e){return Fw([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.min(t,e)))}mod(t,e){return Fw([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))}maximum(t,e){return Fw([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.max(t,e)))}all(t,e){Fw(t,"all"),ii("all",e,t.rank);const[n,r]=si(t.shape,e),s=su(n,t.dtype),a=d(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n&&r}i[t]=n}return s}any(t,e){Fw(t,"any"),ii("any",e,t.rank);const[n,r]=si(t.shape,e),s=su(n,t.dtype),a=d(r),i=this.readSync(s.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const r=o[e+t];n=n||r}i[t]=n}return s}squaredDifference(t,e){return Fw([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>{const n=t-e;return n*n}))}eluDer(t,e){Fw([t,e],"eluDer");const n=new Float32Array(e.size),r=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<r.length;++t){const e=r[t];n[t]=e>=1?s[t]:s[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}atan2(t,e){return Fw([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,((t,e)=>Math.atan2(t,e)))}tile(t,e){return Fw(t,"tile"),Lw(this.bufferSync(t),e)}gather(t,e,n){Fw([t,e],"gather");const r=t.shape.slice(),s=this.readSync(e.dataId);r[n]=s.length;const a=la(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),r=e.slice();r[n]=s[e[n]];const o=i.locToIndex(r);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){Fw([t],"batchToSpaceND");const r=e.reduce(((t,e)=>t*e)),s=Hc(t.shape,e,r),a=jc(s.length,e.length),i=qc(t.shape,e,r),o=Kc(n,e.length),u=Xc(i,n,e.length);return Na(t.reshape(s),a).reshape(i).slice(o,u)}pool3d(t,e,n){Fw(t,"pool3d");const r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=la(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],k=e.outShape[4];for(let y=0;y<e.batchSize;++y){const N=y*x,I=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const $=x*r-p;let C=$;for(;C<0;)C+=i;const S=Math.min(e.inDepth,l+$),T=N+x*w;for(let r=0;r<e.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+l),w=T+r*v;for(let r=0;r<e.outWidth;++r){const s=r*a-f;let l=s;for(;l<0;)l+=u;const c=Math.min(e.inWidth,h+s),d=w+r*k;let v=m,N=0,$=0;for(let e=C;e<S;e+=i){const r=I+e*t.strides[1];for(let e=p;e<x;e+=o){const s=r+e*t.strides[2];for(let e=l;e<c;e+=u){const r=g[s+e*t.strides[3]+y];if("max"===n&&r>v?v=r:"avg"===n&&(N+=r,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?N/$:v}}}}return y.toTensor()}avgPool3d(t,e){return Fw(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){Fw([t,e],"avgPool3dBackprop");const r=n.strideDepth,s=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,u=n.filterWidth,l=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=la(e.shape,"float32"),x=1/(i*o*u),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let u=0;u<n.inWidth;++u){const v=i-m,k=o-y,N=u-g;let I=0;for(let i=0;i<p;i+=l){const o=(v+i)/r;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let r=0;r<d;r+=c){const i=(k+r)/s;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let r=0;r<f;r+=h){const s=(N+r)/a;if(s<0||s>=n.outWidth||Math.floor(s)!==s)continue;I+=w.get(t,o,i,s,e)}}}b.set(I*x,t,i,o,u,e)}return b.toTensor()}maxPool3d(t,e){return Fw(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=la(e.outShape,"int32"),r=e.strideDepth,s=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,u=e.dilationWidth,l=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,l+b);for(let r=0;r<e.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+l);for(let s=0;s<e.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=u;const N=Math.min(e.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,$=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let r=p;r<v;r+=o){const s=r-l;for(let a=k;a<N;a+=u){const i=a-d,o=m.get(t,e,r,a,g);o>=I&&(I=o,$=n*c*h+s*c+i)}}}n.set($,t,y,r,s,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,r){Fw([e,n],"maxPool3dBackprop");const s=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,o=r.strideWidth,u=r.dilationDepth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterDepth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,f=h-1-r.padInfo.front,m=d-1-r.padInfo.left,g=p-1-r.padInfo.top,y=la(e.shape,"float32"),b=this.bufferSync(s),x=this.bufferSync(t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.inDepth;++n)for(let s=0;s<r.inHeight;++s)for(let w=0;w<r.inWidth;++w){const v=n-f,k=s-g,N=w-m;let I=0;for(let n=0;n<h;n+=u){const s=(v+n)/a;if(!(s<0||s>=r.outDepth||Math.floor(s)!==s))for(let a=0;a<p;a+=l){const u=(k+a)/i;if(!(u<0||u>=r.outHeight||Math.floor(u)!==u))for(let i=0;i<d;i+=c){const l=(N+i)/o;if(l<0||l>=r.outWidth||Math.floor(l)!==l)continue;const c=h*p*d-1-b.get(t,s,u,l,e)===n*p*d+a*d+i?1:0;if(0===c)continue;I+=x.get(t,s,u,l,e)*c}}}y.set(I,t,n,s,w,e)}return y.toTensor()}resizeBilinear(t,e,n,r){Fw(t,"resizeBilinear");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(d([s,e,n,o])),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n];let p=0;const f=c[0]/h[0],m=c[1]/h[1];for(let r=0;r<s;r++)for(let s=0;s<e;s++){const e=f*s,c=Math.floor(e),h=e-c,d=Math.min(a-1,Math.ceil(e)),g=r*t.strides[0]+c*t.strides[1],y=r*t.strides[0]+d*t.strides[1];for(let e=0;e<n;e++){const n=m*e,r=Math.floor(n),s=n-r,a=Math.min(i-1,Math.ceil(n)),c=g+r*t.strides[2],d=y+r*t.strides[2],f=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=u[c+t],n=u[d+t],r=e+(u[f+t]-e)*s,a=r+(n+(u[b+t]-n)*s-r)*h;l[p++]=a}}}return Is(l,[s,e,n,o])}resizeBilinearBackprop(t,e,n){Fw([t,e],"resizeBilinearBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=[n&&o>1?s-1:s,n&&u>1?a-1:a],h=[n&&o>1?o-1:o,n&&u>1?u-1:u],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<r;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const r=t*p,o=Math.floor(r),c=Math.min(Math.ceil(r),s-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=r-o,b=1-y;for(let t=0;t<u;t++){const n=t*d,r=Math.floor(n),s=Math.min(Math.ceil(n),a-1),o=n-r,u=1-o,c=h+r*e.strides[2],p=h+s*e.strides[2],x=g+r*e.strides[2],w=g+s*e.strides[2],v=b*u,k=b*o,N=y*u,I=y*o;for(let t=0;t<i;t++){const e=f[m++];l[c+t]+=e*v,l[p+t]+=e*k,l[x+t]+=e*N,l[w+t]+=e*I}}}}return dl(l,[r,a,s,i],e.dtype)}resizeNearestNeighbor(t,e,n,r){Fw(t,"resizeNearestNeighbor");const[s,a,i,o]=t.shape,u=this.readSync(t.dataId),l=new Float32Array(s*e*n*o),c=[r&&e>1?a-1:a,r&&n>1?i-1:i],h=[r&&e>1?e-1:e,r&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<s;c++){const s=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=s+Math.min(a-1,r?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,s=h+Math.min(i-1,r?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=u[s+t];l[f++]=e}}}}return Is(l,[s,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){Fw([t,e],"resizeNearestNeighborBackprop");const[r,s,a,i]=e.shape,[,o,u]=t.shape,l=new Float32Array(r*s*a*i),c=this.readSync(t.dataId),h=[n&&o>1?s-1:s,n&&u>1?a-1:a],p=[n&&o>1?o-1:o,n&&u>1?u-1:u],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<r;h++){const r=h*e.strides[0];for(let h=0;h<s;h++){const p=r+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),k=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let l=0;l<y;l++){const p=l+w;if(p<0||p>=o)continue;const g=r+p*t.strides[1],y=p*d;if(h===Math.min(s-1,n?Math.round(y):Math.floor(y)))for(let r=0;r<b;r++){const s=r+k;if(s<0||s>=u)continue;const o=g+s*t.strides[2],l=s*f;m===Math.min(a-1,n?Math.round(l):Math.floor(l))&&(i+=c[o+e])}}l[x+e]=i}}}}return dl(l,e.shape,e.dtype)}localResponseNormalization4D(t,e,n,r,s){Fw(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),u=t.size,l=new Float32Array(u);function c(t){const n=t%a;let r=t-n+Math.max(0,n-e);const s=t-n+Math.min(n+e,i);let u=0;for(;r<=s;r++){const t=o[r];u+=t*t}return u}for(let t=0;t<u;t++){const e=c(t),a=o[t]*Math.pow(n+r*e,-s);l[t]=a}return dl(l,t.shape)}LRNGrad(t,e,n,r,s,a,i){Fw(t,"LRNGrad");const o=t.shape[3],u=this.readSync(t.dataId),l=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-r),p=t-e+Math.min(o,e+r+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(l[t],2);d=a*d+s;for(let e=n;e<p;e++){let n=-2*a*i*l[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=u[t],h[e]+=n}}return dl(h,t.shape)}multinomial(t,e,n,r){Fw(t,"multinomial");const s=e?t:Ju(t),a=s.shape[0],i=s.shape[1],o=su([a,n],"int32"),u=this.readSync(o.dataId),l=this.readSync(s.dataId);for(let t=0;t<a;++t){const e=t*i,s=new Float32Array(i-1);s[0]=l[e];for(let t=1;t<s.length;++t)s[t]=s[t-1]+l[e+t];const a=vu.alea(r.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();u[o+t]=s.length;for(let n=0;n<s.length;n++)if(e<s[n]){u[o+t]=n;break}}}return o}oneHot(t,e,n,r){Fw(t,"oneHot");const s=new Float32Array(t.size*e);s.fill(r);const a=this.readSync(t.dataId);for(let r=0;r<t.size;++r)a[r]>=0&&a[r]<e&&(s[r*e+a[r]]=n);return pl(s,[t.size,e],"int32")}nonMaxSuppression(t,e,n,r,s){Fw(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return Ow(a,i,n,r,s)}depthToSpace(t,e,n){l("NHWC"===n,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${n}`)),l(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`));const r=t.shape[0],s=t.shape[1],a=t.shape[2],i=t.shape[3],o=s*e,u=a*e,c=i/(e*e),h=this.readSync(t.dataId),p=new Float32Array(r*o*u*c);let d=0;for(let t=0;t<r;++t)for(let n=0;n<o;++n){const r=Math.floor(n/e),o=n%e;for(let n=0;n<u;++n){const u=Math.floor(n/e),l=(o*e+n%e)*c;for(let e=0;e<c;++e){const n=e+l+i*(u+a*(r+s*t));p[d++]=h[n]}}}return dl(p,[r,o,u,c])}broadcastedBinaryOp(t,e,n,r){const s=ho(t.shape,e.shape),a=la(s,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),u=lo(t.shape,s),l=lo(e.shape,s),c=a.values;if(u.length+l.length===0)for(let t=0;t<c.length;++t)c[t]=r(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),s=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);u.forEach((t=>d[t]=0));const f=n.locToIndex(d),m=p.slice(-e.rank);l.forEach((t=>m[t]=0));const g=s.locToIndex(m);c[h]=r(i[f],o[g])}}return a.toTensor()}split(t,e,n){return Mw(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,r,s,a){const[i,o,u,l]=t.shape,c=e.shape[0],[h,p]=r,d=la([c,h,p,l],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],r=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,k=p>1?(x-r)*(u-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let r=0;r<l;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}else if("bilinear"===s){const n=Math.floor(i),s=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?r*(u-1)+i*k:.5*(r+x)*(u-1);if(c<0||c>u-1){for(let n=0;n<l;n++){const r=n+i*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let r=0;r<l;r++){let a=r+h*y[2]+n*y[1]+w*y[0];const u=g[a];a=r+f*y[2]+n*y[1]+w*y[0];const l=g[a];a=r+h*y[2]+s*y[1]+w*y[0];const c=g[a];a=r+f*y[2]+s*y[1]+w*y[0];const p=u+(l-u)*m,x=c+(g[a]-c)*m;a=r+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const s=p>1?r*(u-1)+n*k:.5*(r+x)*(u-1);if(s<0||s>u-1){for(let r=0;r<l;r++){const s=r+n*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const o=Math.round(s),c=Math.round(i);for(let r=0;r<l;r++){const s=r+o*y[2]+c*y[1]+w*y[0],a=r+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[s]}}}}return d.toTensor()}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,sliceSize:i,strides:o,outputSize:u}=Ta(0,t,n);return this.scatter(t,e,n,u,i,a,s,o,r,!1)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Ca(t,e);if(0===a)return Is([],s,t.dtype);const u=new Vn([a,i],t.dtype),l=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let s=0;for(let t=0;t<r;t++){const a=l[e*r+t];s+=a*o[t],n.push(a)}if(s<0||s>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)u.values[e*i+t]=c[s*i+t]}return u.toTensor().reshape(s)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Ta(0,t,n),u=Mo(0);return this.scatter(t,e,n,o,a,s,r,i,u,!0)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return Io(t.shape,1,t.dtype)}zerosLike(t){const e=N(t.dtype,d(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return rh(t,e,n)}scatter(t,e,n,r,s,a,i,o,u,l){const c=[r/s,s],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===r)return Is([],n,e.dtype);const d=new Vn(c,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(let t=0;t<a;t++){const a=[];let u=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),u+=n*o[e]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=p[t*s+n]:d.values[u*s+n]=0===e.rank?p[0]:p[t*s+n]}return d.toTensor().reshape(n)}}function Ww(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}const Vw={kernelName:ct,backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;let r=new Float32Array(d(e.shape));if("complex64"!==e.dtype){r=Ww(n.data.get(e.dataId).values)}else{const t=n.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values;for(let t=0;t<i.length;t++){const e=i[t],n=o[t];r[t]=Math.hypot(e,n)}}return n.makeOutput(r,e.shape,"float32")}};function Uw(t){return(e,n,r,s,a)=>{const i=ho(e,n),o=i.length,u=D(i),l=k(a,d(i)),c=e.length,h=n.length,p=D(e),f=D(n),m=lo(e,i),g=lo(n,i);if(m.length+g.length===0)for(let e=0;e<l.length;++e)l[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<l.length;++e){const n=P(e,o,u),a=n.slice(-c);m.forEach((t=>a[t]=0));const i=B(a,c,p),d=n.slice(-h);g.forEach((t=>d[t]=0));const y=B(d,h,f);l[e]=t(r[i],s[y])}return[l,i]}}function Gw(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const Hw={kernelName:Rt,backendName:"cpu",kernelFunc:Gw};function jw(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const qw={kernelName:oe,backendName:"cpu",kernelFunc:jw};function Kw(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Xw={kernelName:Me,backendName:"cpu",kernelFunc:Kw};function Yw(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return jw({inputs:{x:s},backend:n});const t=su(s.shape),e=Yw({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=Gw({inputs:{real:e,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(e),r}if("complex64"===s.dtype){const t=Kw({inputs:{input:s},backend:n}),e=Yw({inputs:{x:t},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(t),e}if(!I(s.dtype,a)){const t=jw({inputs:{x:s},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:a}}if("int32"===a){const t=n.data.get(s.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(s.shape,"int32",e)}if("bool"===a){const t=n.data.get(s.dataId).values,e=An([0],s.dtype),[r,a]=Uw(((t,e)=>t!==e?1:0))(s.shape,[],t,e,"bool");return n.makeTensorInfo(a,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const Jw={kernelName:Tt,backendName:"cpu",kernelFunc:Yw};function Zw(t,e,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:i}=n,o=s;Fw([a,i],t);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c=r||a.dtype,[h,p]=e(a.shape,i.shape,u,l,c);return o.makeTensorInfo(p,c,h)}:({inputs:t,backend:s})=>{const{a:a,b:i}=t,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const t=Yw({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),e=o.data.get(t.dataId),r=e.complexTensorInfos.real,s=e.complexTensorInfos.imag,u=o.data.get(r.dataId).values,l=o.data.get(s.dataId).values,c=Yw({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=Gw({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(t),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const t=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=e(a.shape,i.shape,t,n,s);return o.makeTensorInfo(l,s,u)}}}function Qw(t){return(e,n,r,s,a,i)=>{const o=ho(e,n),u=d(o),l=o.length,c=D(o),h=k("float32",u),p=k("float32",u),f=lo(e,o),m=lo(n,o),g=Qc(r,s),y=Qc(a,i),b=e.length,x=D(e),w=n.length,v=D(n);if(f.length+m.length===0)for(let e=0;e<h.length;e++){const n=e%g.length,r=e%y.length,s=t(g[2*n],g[2*n+1],y[2*r],y[2*r+1]);h[e]=s.real,p[e]=s.imag}else for(let e=0;e<h.length;e++){const n=P(e,l,c),r=n.slice(-b);f.forEach((t=>r[t]=0));const s=B(r,b,x),a=n.slice(-w);m.forEach((t=>a[t]=0));const i=B(a,w,v),o=t(g[2*s],g[2*s+1],y[2*i],y[2*i+1]);h[e]=o.real,p[e]=o.imag}return[h,p,o]}}const tv=Uw(((t,e)=>t+e)),ev=Qw(((t,e,n,r)=>({real:t+n,imag:e+r}))),nv=Zw(dt,tv,ev),rv={kernelName:dt,backendName:"cpu",kernelFunc:nv};function sv(t){return(e,n,r)=>{const s=k(n,e.length);for(let n=0;n<e.length;++n)s[n]=t(e[n],r);return s}}function av(t,e,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(Fw(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=d(i.shape),c=n||i.dtype,h=N(c,l);for(let t=0;t<l;++t)h[t]=e(u[t],s);return o.makeTensorInfo(i.shape,c,h)}}function iv(t,e,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(Fw(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=e(u,l,s);return o.makeTensorInfo(i.shape,l,c)}}const ov=sv((t=>Math.ceil(t))),uv=iv(Et,ov),lv={kernelName:Et,backendName:"cpu",kernelFunc:uv},cv=sv((t=>Math.exp(t))),hv=iv(Jt,cv),pv={kernelName:Jt,backendName:"cpu",kernelFunc:hv},dv=sv((t=>Math.expm1(t))),fv=iv(Zt,dv),mv={kernelName:Zt,backendName:"cpu",kernelFunc:fv},gv=sv((t=>Math.floor(t))),yv=iv(ne,gv),bv={kernelName:ne,backendName:"cpu",kernelFunc:yv},xv=sv((t=>Math.log(t))),wv=iv(de,xv),vv={kernelName:de,backendName:"cpu",kernelFunc:wv};function kv(t,e,n,r){const s=k(r,d(n));for(let n=0;n<s.length;++n){const r=n*e;let a=t[r];for(let n=0;n<e;++n){const e=t[r+n];e>a&&(a=e)}s[n]=a}return s}const Nv=Uw(((t,e)=>t*e)),Iv=Qw(((t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n}))),$v=Zw(Ce,Nv,Iv),Cv={kernelName:Ce,backendName:"cpu",kernelFunc:$v},Sv=Uw(((t,e)=>t!==e?1:0)),Tv=Zw(Te,Sv,null,"bool"),Ev={kernelName:Te,backendName:"cpu",kernelFunc:Tv},Av=sv((t=>1/Math.sqrt(t))),Rv=iv(He,Av),Dv={kernelName:He,backendName:"cpu",kernelFunc:Rv};function _v(t,e,n,r,s){const a=za(r,e,n),i=d(n),o=D(r);if(a){const n=Ba(e,o);return t.subarray(n,n+i)}const u=k(s,i);for(let s=0;s<i;++s){const a=B(P(s,n.length,D(n)).map(((t,n)=>t+e[n])),r.length,o);u[s]=t[a]}return u}function Fv(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:a,size:i}=r;Fw(s,"slice");const[o,u]=Pa(s,a,i);Ea(s,o,u);const l=_v(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const Ov={kernelName:Ke,backendName:"cpu",kernelFunc:Fv},Mv=Uw(((t,e)=>{const n=t-e;return n*n})),Lv=Zw(sn,Mv),zv={kernelName:sn,backendName:"cpu",kernelFunc:Lv},Bv=Uw(((t,e)=>t-e)),Pv=Qw(((t,e,n,r)=>({real:t-n,imag:e-r}))),Wv=Zw(on,Bv,Pv),Vv={kernelName:on,backendName:"cpu",kernelFunc:Wv};function Uv(t,e,n,r,s){const a=e.length,i=d(e),o=D(e),u=D(s),l=k(n,d(s));for(let e=0;e<i;++e){const n=P(e,a,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];l[B(s,a,u)]=t[e]}return l}function Gv(t,e,n,r){const s=w(e,n)[0],a=[1,n[0],1];for(let t=0;t<s;t++)a[0]*=n[t];a[1]=n[s];for(let t=s+1;t<n.length;t++)a[2]*=n[t];const i={},o=new Int32Array(n[s]),u=new Vn(a,r,t),l=[],c=1===a[0]&&1===a[2];for(let e=0;e<n[s];e++){let n;if(c)n=t[e].toString();else{const t=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)t.push(u.get(n,e,r));n=t.join(",")}if(void 0!==i[n])o[e]=i[n];else{const t=Object.keys(i).length;i[n]=t,o[e]=t,l.push(e)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Vn(h,r);l.forEach(((t,e)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(u.get(n,t,r),n,e,r)}));const d=n.slice();return d[s]=h[1],{outputValues:p.values,outputShape:d,indices:o}}Ya("cpu",(()=>new Pw),1);const Hv=av(Xt,(t=>t>=0?t:Math.exp(t)-1)),jv={kernelName:Xt,backendName:"cpu",kernelFunc:Hv},qv=Uw(((t,e)=>t<0?e*t:t));function Kv(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e;Fw([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=qv(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(u,r.dtype,o)}const Xv={kernelName:Oe,backendName:"cpu",kernelFunc:Kv},Yv=av(ze,(t=>Math.max(0,t))),Jv={kernelName:ze,backendName:"cpu",kernelFunc:Yv},Zv=av(Ve,(t=>Math.min(Math.max(0,t),6))),Qv={kernelName:Ve,backendName:"cpu",kernelFunc:Zv};function tk(t,e,n,r){if("linear"===n)return jw({inputs:{x:e},backend:t});if("relu"===n)return Yv({inputs:{x:e},backend:t});if("elu"===n)return Hv({inputs:{x:e},backend:t});if("relu6"===n)return Zv({inputs:{x:e},backend:t});if("prelu"===n)return Kv({inputs:{x:e,alpha:r},backend:t});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function ek(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:a}=r,i=d(s.shape),o=x(a,i),u=d(o);l(i===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const c=n.data.get(s.dataId);if(null!=c.complexTensorInfos){const t=c.complexTensorInfos.real,e=c.complexTensorInfos.imag;t.shape=o,e.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const nk={kernelName:Be,backendName:"cpu",kernelFunc:ek};function rk(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:a}=e,{transposeA:i,transposeB:o}=r;Fw([s,a],"matMul");const u=s.shape.length,c=a.shape.length,h=i?s.shape[u-2]:s.shape[u-1],p=o?a.shape[c-1]:a.shape[c-2],f=i?s.shape[u-1]:s.shape[u-2],m=o?a.shape[c-2]:a.shape[c-1],g=s.shape.slice(0,-2),y=a.shape.slice(0,-2),b=d(g),x=d(y);l(u>=2&&c>=2&&(b===x||1===b||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const w=(b>x?s.shape.slice(0,-2):a.shape.slice(0,-2)).concat([f,m]);l(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const v=o?[x,m,p]:[x,p,m],k=ek({inputs:{x:s},backend:n,attrs:{shape:i?[b,h,f]:[b,f,h]}}),N=ek({inputs:{x:a},backend:n,attrs:{shape:v}}),I=i?k.shape[1]:k.shape[2],$=i?k.shape[2]:k.shape[1],C=o?N.shape[1]:N.shape[2],S=Math.max(b,x),T=n.data.get(k.dataId).values,E=n.data.get(N.dataId).values,A=D(k.shape),R=D(N.shape),[_,F,O]=i?[A[0],1,A[1]]:[A[0],A[1],1],[M,L,z]=o?[1,R[1],R[0]]:[R[1],1,R[0]],B=$*C,P=la([S,$,C],k.dtype),W=P.values,V=n.blockSize;for(let t=0;t<S;t++)for(let e=0;e<$;e+=V)for(let n=0;n<C;n+=V)for(let r=0;r<I;r+=V){const s=Math.min(e+V,$),a=Math.min(n+V,C),i=Math.min(r+V,I);for(let o=e;o<s;o++)for(let e=n;e<a;e++){let n=0;for(let s=r;s<i;s++){const r=Math.min(t,b-1)*_,a=Math.min(t,x-1)*z;n+=T[r+o*F+s*O]*E[s*M+e*L+a]}W[t*B+(o*C+e)]+=n}}return n.disposeIntermediateTensorInfo(k),n.disposeIntermediateTensorInfo(N),n.makeTensorInfo(w,P.dtype,P.values)}const sk={kernelName:$t,backendName:"cpu",kernelFunc:rk};const ak={kernelName:xn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:a,bias:i,preluActivationWeights:o}=e,{transposeA:u,transposeB:l,activation:c}=r;let h,p,d;const f=[];h=rk({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(p=nv({inputs:{a:h,b:i},backend:n}),f.push(h),h=p),c&&(d=tk(n,h,c,o),f.push(h),h=d);for(const t of f)n.disposeIntermediateTensorInfo(t);return h}},ik=av(ht,(t=>Math.acos(t))),ok={kernelName:ht,backendName:"cpu",kernelFunc:ik},uk=av(pt,(t=>Math.acosh(t))),lk={kernelName:pt,backendName:"cpu",kernelFunc:uk},ck=av(yt,(t=>Math.asin(t))),hk={kernelName:yt,backendName:"cpu",kernelFunc:ck},pk=av(bt,(t=>Math.asinh(t))),dk={kernelName:bt,backendName:"cpu",kernelFunc:pk},fk=av(xt,(t=>Math.atan(t))),mk={kernelName:xt,backendName:"cpu",kernelFunc:fk},gk=av(wt,(t=>Math.atanh(t))),yk={kernelName:wt,backendName:"cpu",kernelFunc:gk};function bk(t,e,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=la(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),N=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=u){const s=m+n*r[1];for(let n=c;n<p;n+=l){const i=t[s+n*r[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+e]="avg"===a?b/w:y}}}return m}function xk(t,e,n,r,s=!1,a=!1){const i=la(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=la(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=l){const i=n-g;for(let o=d;o<x;o+=c){const u=o-h,l=m.get(t,n,o,e);l>w&&(w=l,v=s?a?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:i*p+u)}}i.set(v,t,n,o,e)}}return i}const wk={kernelName:kt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;Fw(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;l(Ai(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=wi(s.shape,a,i,1,o,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&f(c.inShape,c.outShape))h=jw({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=D(s.shape),r=bk(t,s.shape,s.dtype,e,c,"avg");h=n.makeTensorInfo(c.outShape,s.dtype,r.values)}return h}};const vk={kernelName:Nt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a}=e,i=a;Fw([s,a],"avgPoolBackprop");const{filterSize:o,strides:u,pad:l}=r,c=wi(i.shape,o,u,1,l),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=la(i.shape,"float32"),k=1/(d*f),N=n.data.get(s.dataId).values,I=la(s.shape,"float32",N);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let i=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/p;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;i+=I.get(t,r,s,e)}}v.set(i*k,t,n,r,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const kk={kernelName:se,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,scale:a,offset:i,mean:o,variance:u}=e;l(o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Fw([s,o,u,a,i],"batchNorm");let{varianceEpsilon:c}=r;null==c&&(c=.001);const h=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,d=n.data.get(u.dataId).values,f=a?n.data.get(a.dataId).values:new Float32Array([1]),m=i?n.data.get(i.dataId).values:new Float32Array([0]),g=new Float32Array(h.length),y=m.length,b=f.length,x=d.length,w=p.length;let v=0,k=0,N=0,I=0;for(let t=0;t<h.length;++t)g[t]=m[v++]+(h[t]-p[k++])*f[N++]/Math.sqrt(d[I++]+c),v>=y&&(v=0),k>=w&&(k=0),N>=b&&(N=0),I>=x&&(I=0);return n.makeTensorInfo(s.shape,s.dtype,g)}},Nk=av(At,((t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t})),Ik={kernelName:At,backendName:"cpu",kernelFunc:Nk};function $k(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const Ck={kernelName:le,backendName:"cpu",kernelFunc:$k};function Sk(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,a=w(s,e[0].shape)[0];let i=Gi(e.map((t=>t.shape)),a);if(0===d(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter((t=>d(t.shape)>0));if(1===o.length)return o[0];if(Ui(o.map((t=>t.shape)),a),"complex64"===o[0].dtype){const t=o.map((t=>Kw({inputs:{input:t},backend:n}))),e=o.map((t=>$k({inputs:{input:t},backend:n}))),r=Sk({inputs:t,backend:n,attrs:{axis:a}}),s=Sk({inputs:e,backend:n,attrs:{axis:a}}),i=Gw({inputs:{real:r,imag:s},backend:n});return t.forEach((t=>n.disposeIntermediateTensorInfo(t))),e.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}const u=o.map((t=>{const e=d(t.shape.slice(a));return ek({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})}));i=Gi(u.map((t=>t.shape)),1);const l=k(o[0].dtype,d(i));if(1===u[0].shape[0]){let t=0;u.forEach((e=>{const r=n.data.get(e.dataId).values,s=d(e.shape);l.set(r,t),t+=s}))}else{let t=0;u.forEach((e=>{const r=n.data.get(e.dataId).values;let s=0;for(let n=0;n<e.shape[0];++n){const a=n*i[1]+t;for(let t=0;t<e.shape[1];++t)l[a+t]=r[s++]}t+=e.shape[1]}))}const c=Gi(o.map((t=>t.shape)),a),h=n.makeTensorInfo(c,e[0].dtype,l);return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),h}const Tk={kernelName:Dt,backendName:"cpu",kernelFunc:Sk};function Ek(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a}=e,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r;Fw([s,a],"conv2d");const h=Ri(u),p=ki(s.shape,a.shape,i,l,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Vn(p.outShape,s.dtype),v=D(s.shape),k=D(a.shape),N=v[0],I=x?v[1]:v[2],$=x?v[2]:1,C=x?1:v[1],S=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(s.dataId).values,_=n.data.get(a.dataId).values,F=w.values;for(let t=0;t<p.batchSize;++t){const e=t*N,n=t*S;for(let t=0;t<p.outHeight;++t){const r=n+t*T,s=t*p.strideHeight-b;for(let t=0;t<d;++t){const n=s+t*m;if(n<0||n>=p.inHeight)continue;const a=t*k[0],i=e+n*I;for(let t=0;t<p.outWidth;++t){const e=r+t*E,n=t*p.strideWidth-y;for(let t=0;t<f;++t){const r=n+t*g;if(r<0||r>=p.inWidth)continue;const s=i+r*$;let o=a+t*k[1];for(let t=0;t<p.inChannels;++t){const n=R[s+t*C];for(let t=0;t<p.outChannels;++t)F[e+t*A]+=n*_[o+t];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const Ak={kernelName:_t,backendName:"cpu",kernelFunc:Ek};const Rk={kernelName:Ft,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:a}=e,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;Fw([s,a],"conv2dBackpropFilter");const h=Ri(u),p=ki(s.shape,c,i,1,o,l,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Vn(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=new Vn(s.shape,s.dtype,v),I=new Vn(a.shape,a.dtype,k);for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((w-t)/d)),n=Math.min(p.outHeight,(p.inHeight+w-t)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(p.outWidth,(p.inWidth+x-r)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let u=0;for(let l=0;l<p.batchSize;++l)for(let c=e;c<n;++c){const e=t+c*d-w;for(let t=s;t<a;++t){const n=r+t*f-x;u+=y?N.get(l,e,n,i)*I.get(l,c,t,o):N.get(l,i,e,n)*I.get(l,o,c,t)}}b.set(u,t,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Dk={kernelName:Ot,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:a}=e,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r;Fw([s,a],"conv2dBackpropInput");const h=D(a.shape),p=D(s.shape);let d=Ri(l);const f=ki(i,a.shape,o,1,u,c,!1,d),m=new Vn(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:N,filterWidth:I,inChannels:$,inHeight:C,inWidth:S,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:_}=f;d=f.dataFormat;const F=N-1-f.padInfo.top,O=I-1-f.padInfo.left,M="channelsLast"===d,L=m.strides[0],z=M?m.strides[1]:m.strides[2],B=M?m.strides[2]:1,P=M?1:m.strides[1],W=p[0],V=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let t=0;t<k;++t)for(let e=0;e<$;++e)for(let n=0;n<C;++n){const r=n-F,s=Math.max(0,Math.ceil(r/R)),a=Math.min(E,(N+r)/R);for(let i=0;i<S;++i){const o=i-O,u=Math.max(0,Math.ceil(o/_)),l=Math.min(A,(I+o)/_);let c=0;for(let n=s;n<a;++n){const s=n*R-r;for(let r=u;r<l;++r){const a=W*t+V*n+U*r,i=x*(N-1-s)+w*(I-1-(r*_-o))+v*e;for(let t=0;t<T;++t){c+=y[a+G*t]*b[i+t]}}}g[L*t+z*n+B*i+P*e]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const _k={kernelName:Mt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a}=e,{strides:i,pad:o,dilations:u}=r;Fw([s,a],"conv3d");const l=Ni(s.shape,a.shape,i,u,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new Vn(l.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,N=w.values,I=D(s.shape),$=D(a.shape);for(let t=0;t<l.batchSize;++t){const e=t*I[0],n=t*w.strides[0];for(let t=0;t<l.outDepth;++t){const r=n+t*w.strides[1],s=t*l.strideDepth-y;for(let t=0;t<c;++t){const n=s+t*d;if(n<0||n>=l.inDepth)continue;const a=t*$[0],i=e+n*I[1];for(let t=0;t<l.outHeight;++t){const e=r+t*w.strides[2],n=t*l.strideHeight-x;for(let t=0;t<h;++t){const r=n+t*f;if(r<0||r>=l.inHeight)continue;const s=a+t*$[1],o=i+r*I[2];for(let t=0;t<l.outWidth;++t){const n=e+t*l.outChannels,r=t*l.strideWidth-b;for(let t=0;t<p;++t){const e=r+t*m;if(e<0||e>=l.inWidth)continue;const a=s+t*$[2],i=o+e*l.inChannels;let u=a;for(let t=0;t<l.inChannels;++t){const e=v[i+t];for(let t=0;t<l.outChannels;++t)N[n+t]+=e*k[u+t];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const Fk={kernelName:Lt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:a}=e,{strides:i,pad:o,filterShape:u}=r;Fw([s,a],"conv3dBackpropFilterV2");const l=D(s.shape),c=D(a.shape),h=Ni(s.shape,u,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Vn(h.filterShape,"float32"),x=b.values,[w,v,k,N]=b.strides,I=n.data.get(a.dataId).values,[$,C,S,T]=c,E=n.data.get(s.dataId).values,[A,R,_,F]=l,O=h.padInfo.front,M=h.padInfo.left,L=h.padInfo.top;for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((O-t)/p)),n=Math.min(h.outDepth,(h.inDepth+O-t)/p),r=t*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((L-s)/d)),i=Math.min(h.outHeight,(h.inHeight+L-s)/d),o=s*v+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((M-r)/f)),l=Math.min(h.outWidth,(h.inWidth+M-r)/f),c=r*k+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*$;for(let m=e;m<n;++m){const e=(t+m*p-O)*R+h,n=m*C+y;for(let t=a;t<i;++t){const a=(s+t*d-L)*_+e,i=t*S+n;for(let t=u;t<l;++t){const e=t*T+i;g+=E[(r+t*f-M)*F+a+o]*I[e+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Ok={kernelName:zt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:a}=e,{pad:i,strides:o,inputShape:u}=r;Fw([s],"conv3dBackpropInputV2");const l=D(s.shape),c=D(a.shape),h=Ni(u,a.shape,o,1,i),p=new Vn(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=l,N=n.data.get(a.dataId).values,[I,$,C,S]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:_,inDepth:F,inHeight:O,inWidth:M,outChannels:L,outDepth:z,outHeight:B,outWidth:P,strideDepth:W,strideHeight:V,strideWidth:U}=h,G=E-1-h.padInfo.front,H=A-1-h.padInfo.top,j=R-1-h.padInfo.left;for(let t=0;t<T;++t)for(let e=0;e<_;++e)for(let n=0;n<F;++n){const r=n-G,s=Math.max(0,Math.ceil(r/W)),a=Math.min(z,(E+r)/W);for(let i=0;i<O;++i){const o=i-H,u=Math.max(0,Math.ceil(o/V)),l=Math.min(B,(A+o)/V);for(let c=0;c<M;++c){const h=c-j,p=Math.max(0,Math.ceil(h/U)),T=Math.min(P,(R+h)/U);let D=0;for(let n=s;n<a;++n){const s=n*W-r;for(let r=u;r<l;++r){const a=r*V-o;for(let i=p;i<T;++i){const o=x*t+w*n+v*r+k*i,u=I*(E-1-s)+$*(A-1-a)+C*(R-1-(i*U-h))+S*e;for(let t=0;t<L;++t){D+=b[o+t]*N[u+t]}}}}d[f*t+m*n+g*i+y*c+e]=D}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Mk=av(Bt,(t=>Math.cos(t))),Lk={kernelName:Bt,backendName:"cpu",kernelFunc:Mk},zk=av(Pt,(t=>Math.cosh(t))),Bk={kernelName:Pt,backendName:"cpu",kernelFunc:zk};function Pk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a}=e,{strides:i,pad:o,dilations:u,dimRoundingMode:c}=r;Fw([s,a],"depthwiseConv2DNative");const h=D(s.shape),p=D(a.shape);let d=u;null==d&&(d=[1,1]),l(Ai(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const f=ki(s.shape,a.shape,i,d,o,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,w=x.left,v=x.top,k=f.outChannels/f.inChannels,N=new Vn(f.outShape,s.dtype),I=n.data.get(s.dataId).values,$=n.data.get(a.dataId).values,C=N.values;for(let t=0;t<f.batchSize;++t){const e=t*h[0],n=t*N.strides[0];for(let t=0;t<f.outHeight;++t){const r=n+t*N.strides[1],s=t*f.strideHeight-w;for(let t=0;t<m;++t){const n=s+t*y;if(n<0||n>=f.inHeight)continue;const a=t*p[0],i=e+n*h[1];for(let t=0;t<f.outWidth;++t){const e=r+t*N.strides[2],n=t*f.strideWidth-v;for(let t=0;t<g;++t){const r=n+t*b;if(r<0||r>=f.inWidth)continue;const s=a+t*p[1],o=i+r*f.inChannels;let u=e,l=s;for(let t=0;t<f.inChannels;++t){const e=I[o+t];for(let t=0;t<k;++t)C[u+t]+=e*$[l+t];u+=k,l+=k}}}}}}return n.makeTensorInfo(N.shape,N.dtype,N.values)}const Wk={kernelName:Vt,backendName:"cpu",kernelFunc:Pk};const Vk={kernelName:Ut,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:a}=e,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;Fw([s,a],"depthwiseConv2dNativeBackpropFilter");const h=ki(s.shape,c,i,o,u,l,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Vn(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new Vn(s.shape,s.dtype,w),k=n.data.get(a.dataId).values,N=new Vn(a.shape,a.dtype,k);for(let t=0;t<f;++t){const e=Math.max(0,Math.ceil((b-t)/p)),n=Math.min(h.outHeight,(h.inHeight+b-t)/p);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(h.outWidth,(h.inWidth+y-r)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),u=i%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=e;c<n;++c){const e=t+c*p-b;for(let t=s;t<a;++t){const n=r+t*d-y;l+=v.get(u,e,n,o)*N.get(u,c,t,i)}}g.set(l,t,r,o,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const Uk={kernelName:Gt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:a}=e,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r;Fw([s,a],"depthwiseConv2DNativeBackpropInput");const h=D(s.shape),p=D(a.shape),d=ki(c,a.shape,i,o,u,l,!0),f=new Vn(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,N=n.data.get(a.dataId).values,[I,$,C]=p,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:_,outChannels:F,outHeight:O,outWidth:M,strideHeight:L,strideWidth:z}=d,B=T-1-d.padInfo.top,P=E-1-d.padInfo.left,W=F/A;for(let t=0;t<S;++t)for(let e=0;e<A;++e)for(let n=0;n<R;++n){const r=n-B,s=Math.max(0,Math.ceil(r/L)),a=Math.min(O,(T+r)/L);for(let i=0;i<_;++i){const o=i-P,u=Math.max(0,Math.ceil(o/z)),l=Math.min(M,(E+o)/z);let c=0;for(let n=s;n<a;++n){const s=n*L-r;for(let r=u;r<l;++r){const a=w*t+v*n+k*r,i=I*(T-1-s)+$*(E-1-(r*z-o))+C*e;for(let t=0;t<W;++t){c+=x[a+(e*W+t)]*N[i+t]}}}m[g*t+y*n+b*i+e]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Gk={kernelName:Ht,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:a,pad:i,dilations:o}=n,u=e,l=u.data.get(r.dataId).values,c=r.shape.length,h=u.data.get(s.dataId).values,p=s.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:w,strideHeight:v,strideWidth:k,filterHeight:I,filterWidth:$,dilationHeight:C,dilationWidth:S,outShape:T}=xi(r.shape,s.shape,a,i,"NHWC",o),E=d(T),A=T.length,R=N(r.dtype,E);for(let t=0;t<f;++t)for(let e=0;e<b;++e){const n=e*v-w.top;for(let a=0;a<x;++a){const i=a*k-w.left;for(let o=0;o<y;++o){let u=Number.MIN_SAFE_INTEGER;for(let e=0;e<I;++e){const a=n+e*C;if(a>=0&&a<m)for(let n=0;n<$;++n){const d=i+n*S;if(d>=0&&d<g){const i=B([t,a,d,o],c,D(r.shape)),f=B([e,n,o],p,D(s.shape)),m=l[i]+h[f];m>u&&(u=m)}}}R[B([t,e,a,o],A,D(T))]=u}}}return{dataId:u.write(An(R,r.dtype),T,r.dtype),shape:T,dtype:r.dtype}}},Hk={kernelName:qt,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,c=e,h=F(r.shape,c.data.get(r.dataId).values),p=F(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:C}=xi(r.shape,s.shape,i,o,"NHWC",u);l(a.rank===C.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${C.length}, but got ${a.rank}`));const S=F(C,c.data.get(a.dataId).values),T=L(s.shape,s.dtype);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let r=0;r<b;++r){const s=r*v-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let e=0;e<k;++e){const r=n+e*I;if(r>=0&&r<f)for(let n=0;n<N;++n){const l=s+n*$;if(l>=0&&l<m){const s=h[t][r][l][a]+p[e][n][a];s>i&&(i=s,o=e,u=n)}}}T[o][u][a]+=S[t][e][r][a]}}}return{dataId:c.write(An(T,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},jk={kernelName:jt,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:a}=t,{strides:i,pad:o,dilations:u}=n,c=e,h=F(r.shape,c.data.get(r.dataId).values),p=F(s.shape,c.data.get(s.dataId).values),{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:C}=xi(r.shape,s.shape,i,o,"NHWC",u);l(a.rank===C.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${C.length}, but got ${a.rank}`));const S=F(C,c.data.get(a.dataId).values),T=L(r.shape,r.dtype);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let r=0;r<b;++r){const s=r*v-x.left;for(let a=0;a<g;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let e=0;e<k;++e){const r=n+e*I;if(r>=0&&r<f)for(let n=0;n<N;++n){const l=s+n*$;if(l>=0&&l<m){const s=h[t][r][l][a]+p[e][n][a];s>i&&(i=s,o=r,u=l)}}}T[t][o][u][a]+=S[t][e][r][a]}}}return{dataId:c.write(An(T,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},qk=Uw(((t,e)=>t/e)),Kk=Zw(Kt,qk),Xk={kernelName:Kt,backendName:"cpu",kernelFunc:Kk},Yk=av(Yt,(t=>{const e=Math.sign(t),n=Math.abs(t),r=1/(1+.3275911*n);return e*(1-((((1.061405429*r-1.453152027)*r+1.421413741)*r-.284496736)*r+.254829592)*r*Math.exp(-n*n))})),Jk={kernelName:Yt,backendName:"cpu",kernelFunc:Yk};function Zk(t,e,n){const r=t.shape,s=r[0],a=r[1],i=n.data.get(t.dataId),o=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,l=[s,a],c=d(l),h=k("float32",c),p=k("float32",c);for(let t=0;t<s;t++){const r=Fv({inputs:{x:o},backend:n,attrs:{begin:[t,0],size:[1,a]}}),s=Fv({inputs:{x:u},backend:n,attrs:{begin:[t,0],size:[1,a]}}),i=Gw({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=Qk(i,e,n),d=Qc(l,c);for(let e=0;e<a;e++){const n=th(d,e);h[t*a+e]=n.real,p[t*a+e]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const f=n.makeTensorInfo(l,"float32",h),m=n.makeTensorInfo(l,"float32",p),g=Gw({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function Qk(t,e,n){const r=d(t.shape),s=n.data.get(t.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((l=r)&l-1)){const s=tN(a,i,r,e,n),l=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(l,"float32",s.real),e=n.makeTensorInfo(l,"float32",s.imag),a=n.makeTensorInfo([],"float32",(o=r,"string"===(u="float32")?Dn(o):An([o],u))),i=jw({inputs:{x:a},backend:n}),c=Xk.kernelFunc({inputs:{a:t,b:a},backend:n}),h=Xk.kernelFunc({inputs:{a:e,b:i},backend:n}),p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),{real:p,imag:d}}return s}return function(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(function(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let a=0,i=0;for(let r=0;r<e;r++){const o=nh(s*r,e,n),u=th(t,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=e,i/=e),eh(r,a,i,s)}return r}(Qc(a,i),r,e));var o,u,l}function tN(t,e,n,r,s){if(1===n)return{real:t,imag:e};const a=Qc(t,e),i=n/2,o=function(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}(a),u=o.real,l=o.imag,c=[u.length],h=s.makeTensorInfo(c,"float32",u),p=s.makeTensorInfo(c,"float32",l),d=Gw({inputs:{real:h,imag:p},backend:s}),f=function(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=Gw({inputs:{real:b,imag:x},backend:s}),v=tN(u,l,i,r,s),k=v.real,N=v.imag,I=[k.length],$=s.makeTensorInfo(I,"float32",k),C=s.makeTensorInfo(I,"float32",N),S=Gw({inputs:{real:$,imag:C},backend:s}),T=tN(m,g,i,r,s),E=T.real,A=T.imag,R=[E.length],D=s.makeTensorInfo(R,"float32",E),_=s.makeTensorInfo(R,"float32",A),F=Gw({inputs:{real:D,imag:_},backend:s}),O=function(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const a=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=Gw({inputs:{real:L,imag:z},backend:s}),P=$v({inputs:{a:B,b:F},backend:s}),W=nv({inputs:{a:S,b:P},backend:s}),V=Wv({inputs:{a:S,b:P},backend:s}),U=Kw({inputs:{input:W},backend:s}),G=Kw({inputs:{input:V},backend:s}),H=$k({inputs:{input:W},backend:s}),j=$k({inputs:{input:V},backend:s}),q=Sk({inputs:[U,G],backend:s,attrs:{axis:0}}),K=Sk({inputs:[H,j],backend:s,attrs:{axis:0}}),X=s.data.get(q.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo($),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const eN={kernelName:Qt,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=d(r.shape),a=r.shape[r.shape.length-1],i=ek({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=Zk(i,!1,n),u=ek({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}};const nN={kernelName:te,backendName:"cpu",kernelFunc:function(t){const{backend:e,attrs:n}=t,{shape:r,value:s,dtype:a}=n,i=a||E(s),o=N(i,d(r));return function(t,e,n){t.fill(e)}(o,s),e.makeTensorInfo(r,i,o)}};const rN={kernelName:ee,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,a=k(r.dtype,d(r.shape)),[i,o,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let t=0;t<i;t++){const e=t*u*o*l;for(let t=0;t<o;t++){const n=t*(u*l);for(let r=0;r<u;r++){const s=r*l;for(let o=0;o<l;o++){const h=[i,t,r,o][2],p=Math.round(u-h),d=e+n+s+o;let f=c[d];if(p>=0&&p<u){f=c[e+n+p*l+o]}a[d]=f}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const sN={kernelName:wn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a,bias:i,preluActivationWeights:o}=e,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=r;let f=Ek({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const t=f;f=nv({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(t)}if(d){const t=f;f=tk(n,f,d,o),n.disposeIntermediateTensorInfo(t)}return f}};const aN={kernelName:vn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:a,bias:i,preluActivationWeights:o}=e,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d}=r;let f=Pk({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const t=f;f=nv({inputs:{a:f,b:i},backend:n}),n.disposeIntermediateTensorInfo(t)}if(d){const t=f;f=tk(n,f,d,o),n.disposeIntermediateTensorInfo(t)}return f}};const iN={kernelName:ue,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=d(r.shape),a=r.shape[r.shape.length-1],i=ek({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=Zk(i,!0,n),u=ek({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},oN=av(ce,(t=>Number.isFinite(t)?1:0),"bool"),uN={kernelName:ce,backendName:"cpu",kernelFunc:oN},lN=av(he,(t=>Math.abs(t)===1/0?1:0),"bool"),cN={kernelName:he,backendName:"cpu",kernelFunc:lN},hN=av(pe,(t=>Number.isNaN(t)?1:0),"bool"),pN={kernelName:pe,backendName:"cpu",kernelFunc:hN},dN=av(fe,(t=>Math.log1p(t))),fN={kernelName:fe,backendName:"cpu",kernelFunc:dN},mN=av(me,(t=>t?0:1),"bool"),gN={kernelName:me,backendName:"cpu",kernelFunc:mN},yN={kernelName:ye,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n;let o=r.shape;const u=o.length,l=w(s,o);let c=l;const h=oi(c,u);let p=i.data.get(r.dataId).values;if(null!=h){const t=new Array(u);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=Uv(p,o,r.dtype,h,t),c=li(c.length,u),o=t}Fw(r,"max"),ii("max",c,u);const[f,m]=si(o,c),g=kv(p,d(m),f,r.dtype),y=i.write(g,f,r.dtype);let b=f;if(a){b=ai(f,l)}return{dataId:y,shape:b,dtype:r.dtype}}};const bN={kernelName:xe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;Fw(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;l(Ai(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=wi(s.shape,a,i,1,o,u);let h;if(1===c.filterWidth&&1===c.filterHeight&&f(c.inShape,c.outShape))h=jw({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=D(s.shape),r=bk(t,s.shape,s.dtype,e,c,"max");h=n.makeTensorInfo(c.outShape,s.dtype,r.values)}return h}};const xN={kernelName:we,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a,output:i}=e,o=a;Fw([a,i],"maxPoolBackprop");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=wi(o.shape,u,l,1,c,h),d=n.data.get(o.dataId).values,f=la(p.outShape,o.dtype,xk(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,N=la(o.shape,"float32"),I=n.data.get(s.dataId).values,$=la(s.shape,"float32",I);for(let t=0;t<p.batchSize;++t)for(let e=0;e<p.inChannels;++e)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const s=n-k,a=r-v;let i=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const o=(a+s)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const u=x*w-1-f.get(t,r,o,e)===n*w+s?1:0;if(0===u)continue;i+=$.get(t,r,o,e)*u}}N.set(i,t,n,r,e)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const wN={kernelName:ke,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;Fw(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=wi(r.shape,s,a,[1,1],i),[h,p]=function(t,e,n,r,s){const a=bk(t,0,n,D(e),s,"max"),i=xk(t,e,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),d=u.write(h,c.outShape,r.dtype),f=u.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const vN={kernelName:$e,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:a,mode:i}=r;Fw(s,"mirrorPad");const o=a.map(((t,e)=>t[0]+s.shape[e]+t[1])),u=a.map((t=>t[0])),l=a.map(((t,e)=>t[0]+s.shape[e])),c="reflect"===i?0:1,h=n.data.get(s.dataId).values,p=s.shape.length,f=D(s.shape),m=d(o),g=o.length,y=D(o),b=k(s.dtype,m);for(let t=0;t<m;t++){let e=P(t,g,y);for(let t=0;t<g;t++)e[t]<u[t]?e[t]=2*u[t]-e[t]-c:e[t]>=l[t]&&(e[t]=2*(l[t]-1)-e[t]+c);e=e.map(((t,e)=>t-u[e]));const n=B(e,p,f);b[t]=h[n]}return{dataId:n.write(b,o,s.dtype),shape:o,dtype:s.dtype}}},kN=lc,NN={kernelName:Ae,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e;Fw(r,"NonMaxSuppressionPadded");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,{selectedIndices:p,validOutputs:d}=kN(c,h,a,i,o,u);return[p,d]}},IN=cc,$N={kernelName:Re,backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e;Fw(r,"NonMaxSuppressionWithScore");const c=l.data.get(r.dataId).values,h=l.data.get(s.dataId).values,p=a,d=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=IN(c,h,p,d,f,m);return[g,y]}};const CN={kernelName:Fe,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:a,constantValue:i}=r;Fw(s,"pad");const o=a.map(((t,e)=>t[0]+s.shape[e]+t[1])),u=a.map((t=>t[0])),l=n.data.get(s.dataId).values,c=d(s.shape),h=s.shape.length,p=D(s.shape),f=d(o),m=o.length,g=D(o),y=k(s.dtype,f);0!==i&&y.fill(i);for(let t=0;t<c;t++){y[B(P(t,h,p).map(((t,e)=>t+u[e])),m,g)]=l[t]}return{dataId:n.write(y,o,s.dtype),shape:o,dtype:s.dtype}}},SN=av(Le,(t=>1/t)),TN={kernelName:Le,backendName:"cpu",kernelFunc:SN},EN={kernelName:bn,backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=k(r.dtype,d(r.shape)),[l,c,h,p]=r.shape,[f,m]=Gc(i,c,h),g=Math.sin(s),y=Math.cos(s),b=o.data.get(r.dataId).values;for(let t=0;t<l;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[l,t,r,i],d=o[2],x=o[1];let w=(d-f)*y-(x-m)*g,v=(d-f)*g+(x-m)*y;w=Math.round(w+f),v=Math.round(v+m);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=b[e+v*(h*p)+w*p+i]}u[e+n+s+i]=k}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},AN=av(Ge,(t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2==0?e:e+1})),RN={kernelName:Ge,backendName:"cpu",kernelFunc:AN},DN=av(qe,(t=>t>=0?1.0507009873554805*t:1.7580993408473768*(Math.exp(t)-1))),_N={kernelName:qe,backendName:"cpu",kernelFunc:DN},FN=av(Ze,(t=>1/(1+Math.exp(-t)))),ON={kernelName:Ze,backendName:"cpu",kernelFunc:FN},MN=av(Je,(t=>t<0?-1:t>0?1:0)),LN={kernelName:Je,backendName:"cpu",kernelFunc:MN},zN=av(Xe,(t=>Math.sin(t))),BN={kernelName:Xe,backendName:"cpu",kernelFunc:zN},PN=av(Ye,(t=>Math.sinh(t))),WN={kernelName:Ye,backendName:"cpu",kernelFunc:PN},VN=Math.log(1.1920928955078125e-7)+2,UN=av(Qe,(t=>{const e=t>-VN,n=t<VN,r=Math.exp(t);let s;return s=n?r:e?t:Math.log(1+r),s})),GN={kernelName:Qe,backendName:"cpu",kernelFunc:UN};function HN(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{perm:a}=n;Fw(s,"transpose");const i=s.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=s.shape[a[t]];const u=Uv(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(u,o,s.dtype),shape:o,dtype:s.dtype}}const jN={kernelName:hn,backendName:"cpu",kernelFunc:HN};const qN={kernelName:en,backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:a,paddings:i}=r;Fw([s],"spaceToBatchND");const o=d(a),u=[[0,0]];u.push(...i);for(let t=1+a.length;t<s.shape.length;++t)u.push([0,0]);const l=CN.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=Hc(l.shape,a,o,!1),h=jc(c.length,a.length,!1),p=qc(l.shape,a,o,!1),f=ek({inputs:{x:l},backend:n,attrs:{shape:c}}),m=HN({inputs:{x:f},backend:n,attrs:{perm:h}}),g=ek({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}},KN=av(tn,(t=>Math.sqrt(t))),XN={kernelName:tn,backendName:"cpu",kernelFunc:KN},YN={kernelName:an,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;Fw(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];a[t]=e*e}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},JN=av(gn,((t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha})),ZN={kernelName:gn,backendName:"cpu",kernelFunc:JN},QN=av(un,(t=>Math.tan(t))),tI={kernelName:un,backendName:"cpu",kernelFunc:QN},eI=av(ln,(t=>Math.tanh(t)));const nI=[ak,Vw,ok,lk,rv,hk,dk,mk,yk,wk,vk,sk,kk,Jw,lv,Ik,Hw,Tk,Rk,Dk,Ak,Fk,Ok,_k,Lk,Bk,Wk,Vk,Uk,Gk,jk,Hk,Xk,jv,Jk,pv,mv,eN,nN,rN,bv,sN,aN,qw,iN,Ck,uN,cN,pN,vv,fN,gN,bN,xN,wN,yN,vN,Cv,NN,$N,Ev,CN,Xv,Xw,TN,Jv,Qv,nk,EN,RN,Dv,_N,ON,LN,BN,WN,Ov,GN,qN,XN,YN,zv,ZN,Vv,tI,{kernelName:ln,backendName:"cpu",kernelFunc:eI},jN,{kernelName:pn,backendName:"cpu",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:a}=e;Fw(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=Gv(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}}];for(const t of nI)Sn(t);const rI={},sI={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function aI(t){if(!(t in rI)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",(e=>{e.preventDefault(),delete rI[t]}),!1),1===t)return e.getContext("webgl",sI)||e.getContext("experimental-webgl",sI);return e.getContext("webgl2",sI)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;rI[t]=e}const e=rI[t];return e.isContextLost()?(delete rI[t],aI(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),rI[t])}var iI,oI,uI,lI,cI,hI;function pI(t,e){return[e,t]}function dI(t){const e=d(t);return g(Math.ceil(e/4))}function fI(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function mI(t,e){const n=t;let r,s,a,i,o,u,l,c,h,p;return 2===G().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(r=t.RGBA,s=t.RGBA,a=t.RGBA,i=n.RGBA,o=t.RGBA,l=4,c=4,h=null!=e?e.HALF_FLOAT_OES:null,p=t.FLOAT),u=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function gI(t,e){const n=e();return G().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${e}`}}(t,e))}(t),n}(oI=iI||(iI={}))[oI.DENSE=0]="DENSE",oI[oI.SHARED_BATCH=1]="SHARED_BATCH",(lI=uI||(uI={}))[lI.RENDER=0]="RENDER",lI[lI.UPLOAD=1]="UPLOAD",lI[lI.PIXELS=2]="PIXELS",lI[lI.DOWNLOAD=3]="DOWNLOAD",(hI=cI||(cI={}))[hI.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",hI[hI.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",hI[hI.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",hI[hI.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",hI[hI.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";function yI(t){return!!(G().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function bI(t,e){return SI(t,(()=>t.getExtension(e)),'Extension "'+e+'" not supported on this browser.')}function xI(t,e){const n=SI(t,(()=>t.createShader(t.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(gI(t,(()=>t.shaderSource(n,e))),gI(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=wI.exec(e);if(null==n)return console.log(`Couldn't parse line number in error: ${e}`),void console.log(t);const r=+n[1],s=t.split("\n"),a=s.length.toString().length+2,i=s.map(((t,e)=>y((e+1).toString(),a)+t));let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(e.split("\n")[0]),console.log(`%c ${y(l[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const wI=/ERROR: [0-9]+:([0-9]+):/g;function vI(t,e){if(gI(t,(()=>t.validateProgram(e))),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function kI(t,e,n,r,s,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(gI(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,r))),gI(t,(()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,a,i))),gI(t,(()=>t.enableVertexAttribArray(o))),!0)}function NI(t,e,n){!function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}(t,n),gI(t,(()=>t.activeTexture(t.TEXTURE0+n))),gI(t,(()=>t.bindTexture(t.TEXTURE_2D,e)))}function II(t,e,n){gI(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,n))),gI(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)))}function $I(t,e){gI(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,e))),gI(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)))}function CI(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${e}`}}(t,e))}function SI(t,e,n){const r=gI(t,(()=>e()));if(null==r)throw new Error(n);return r}function TI(t,e=2){return d(t.slice(0,t.length-e))}function EI(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function AI(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[TI(t),...EI(t)]),e}function RI(t){return t%2==0}function DI(t,e){if(f(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(RI(n)&&RI(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&RI(t[0])&&RI(e[0])}let _I,FI;function OI(t,e){return null!=t.getExtension(e)}function MI(t){try{if(null!=aI(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function LI(t){if(0===t)return!1;const e=aI(t);if(1!==t){if(OI(e,"EXT_color_buffer_float"))return zI(e);const t="EXT_color_buffer_half_float";if(OI(e,t)){const n=e.getExtension(t);return function(t,e){const n=mI(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);const s=1,a=1;t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(i),o}(e,n)}return!1}if(!OI(e,"OES_texture_float"))return!1;if(!OI(e,"WEBGL_color_buffer_float"))return!1;return zI(e)}function zI(t){const e=mI(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}function BI(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&l("complex64"!==t.dtype,(()=>`${e} does not support complex64 tensors in the WebGL backend.`))}))}const PI=G();PI.registerFlag("HAS_WEBGL",(()=>PI.getNumber("WEBGL_VERSION")>0)),PI.registerFlag("WEBGL_VERSION",(()=>MI(2)?2:MI(1)?1:0)),PI.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),PI.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===PI.get("WEBGL_VERSION"))),PI.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),PI.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),PI.registerFlag("WEBGL_PACK",(()=>PI.getBool("HAS_WEBGL"))),PI.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_PACK_CLIP",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),PI.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_PACK_REDUCE",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_LAZILY_UNPACK",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_CONV_IM2COL",(()=>PI.getBool("WEBGL_PACK"))),PI.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(t){if(null==_I){const e=aI(t);_I=e.getParameter(e.MAX_TEXTURE_SIZE)}return _I}(PI.getNumber("WEBGL_VERSION")))),PI.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(t){if(null==FI){const e=aI(t);FI=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,FI)}(PI.getNumber("WEBGL_VERSION")))),PI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const t=PI.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=aI(t);return e=OI(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:OI(n,"EXT_disjoint_timer_query")?1:0,e}(t)})),PI.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>PI.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!gr())),PI.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(t){if(0===t)return!1;const e=aI(t);if(1===t){if(!OI(e,"OES_texture_float"))return!1}else if(!OI(e,"EXT_color_buffer_float"))return!1;return zI(e)}(PI.getNumber("WEBGL_VERSION")))),PI.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!PI.getBool("WEBGL_FORCE_F16_TEXTURES")&&PI.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),PI.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>LI(PI.getNumber("WEBGL_VERSION")))),PI.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(t=PI.getNumber("WEBGL_VERSION"))&&null!=aI(t).fenceSync;var t})),PI.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>PI.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),PI.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)}));class WI{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`float v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class VI{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}class UI{constructor(t,e,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function GI(t,e){return["x","y","z","w","u","v"].slice(0,e).map((e=>`${t}.${e}`))}function HI(t,e){return 1===e?[t]:GI(t,e)}function jI(){let t,e,n,r,s,a,i,o,u,l;return 2===G().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function qI(t,e,n="index"){const r=D(e);return r.map(((e,s)=>`${`int ${t[s]} = ${n} / ${e}`}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`)).join("")}function KI(t){const e=D(t).map((t=>t.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const XI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function YI(t,e,n,r){const s=[];t.forEach((t=>{const e=d(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?s.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(s.push(`uniform sampler2D ${t.name};`),s.push(`uniform int offset${t.name};`))}));const a=s.join("\n"),i=t.map((t=>function(t,e,n=!1){let r="";r+=n?ZI(t):JI(t);const s=t.shapeInfo.logicalShape,a=e.logicalShape;s.length<=a.length&&(r+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=lo(t.shapeInfo.logicalShape,e.logicalShape),u=i$(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((t=>`coords.${h[t+l]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${h[e+l]}`)).join(", ");let f="return outputValue;";const m=1===d(t.shapeInfo.logicalShape),g=1===d(e.logicalShape);if(1!==a||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?f="return vec4(outputValue.x);":o.indexOf(t)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${f}\n    }\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===u&&null==t.shapeInfo.flatOffset&&f(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=i$(u),c=lo(t.shapeInfo.logicalShape,e.logicalShape),h=u-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map((t=>`coords.${d[t+h]} = 0;`)).join("\n");let m="";m=u<2&&o>0?"coords":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${d[e+h]}`)).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      return get${r}(${m});\n    }\n  `}(t,e));return r}(t,e,r))).join("\n"),o=e.texShape,u=jI(),l=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${QI}\n    ${t$}\n    ${e$}\n  `}(u);e.isPacked?(c=function(t,e){switch(t.length){case 0:return r$();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(f(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[2]/2),s=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),s=r*Math.ceil(t[t.length-2]/2);let a=s,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(u)):(c=function(t,e){switch(t.length){case 0:return r$();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(f(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=qI(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=qI(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=qI(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=qI(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(`${t.length}-D output sampling is not yet supported`)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(p+=n$);return[p,l,h,a,c,i,n].join("\n")}function JI(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[r,s]=t.shapeInfo.texShape;if(1===r&&1===s)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=s$(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${a$(t)}\n      }\n    `;const r=t.shapeInfo.texShape,s=r[0],a=r[1];if(1===a&&1===s)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=s$(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape;if(null!=s&&f(e,s)){const t=s[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${s[1]}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=v(e),o=a;if(o.length<e.length){const e=["row","col"];return`\n      ${JI(o$(t,o))}\n      float ${r}(int row, int col) {\n        return ${r}(${u$(e,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${a$(t)}\n      }\n    `;const u=s[0],l=s[1],c=s$(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=v(e),u=i;if(u.length<e.length){const e=["row","col","depth"];return`\n        ${JI(o$(t,u))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${u$(e,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${s}, ${a}, 1)));\n        ${a$(t)}\n      }\n    `;const l=t.shapeInfo.texShape,c=l[0],h=l[1],p=t.shapeInfo.flatOffset;if(h===s&&null==p)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=s$(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:o,keptDims:u}=v(e);if(o.length<e.length){const e=["row","col","depth","depth2"];return`\n      ${JI(o$(t,o))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${u$(e,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${s}, 1)));\n        ${a$(t)}\n      }\n    `;const l=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===s&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=s$(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${s} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],a=e[3]*s,i=e[2]*a,o=e[1]*i,{newShape:u,keptDims:l}=v(e);if(u.length<e.length){const e=["row","col","depth","depth2","depth3"];return`\n      ${JI(o$(t,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${u$(e,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${a$(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=s$(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=v(e);if(s.length<e.length){const e=["row","col","depth","depth2","depth3","depth4"];return`\n      ${JI(o$(t,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${u$(e,a)});\n      }\n    `}const i=e[5],o=e[4]*i,u=e[3]*o,l=e[2]*u,c=e[1]*l;if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${a$(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=s$(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function ZI(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=jI();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=jI();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${s[0]}, ${s[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=s[0],i=s[1],o=jI();if(null!=s&&f(e,s))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],l=Math.ceil(e[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===e[0]){const n=[1,2],s=["b","row","col"];return`\n        ${ZI(o$(t,e.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${u$(s,n)});\n        }\n      `}const i=a[0],o=a[1],u=Math.ceil(e[2]/2),l=u*Math.ceil(e[1]/2),c=jI();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,r=t.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],u=i[1],l=Math.ceil(e[n-1]/2);let c=l*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=jI();return`\n    vec4 ${s}(${h}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${o});\n      return ${d.texture2D}(${r}, uv);\n    }\n  `}(t)}}const QI="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",t$="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",e$="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",n$="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function r$(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function s$(t){return`offset${t}`}function a$(t){const e=t.name,n=d(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function i$(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function o$(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function u$(t,e){return e.map((e=>t[e])).join(", ")}class l${constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,l(t.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=i$(o),c=HI("coords",o);let h,p;if(1===a){p=o+1;const t=i$(p);h=`\n        ${t} sourceLocR = ${t}(${c.join()}, 0);\n        ++${c[o-1]};\n        ${t} sourceLocG = ${t}(${c.join()}, 0);\n        ++${c[o-2]};\n        ${t} sourceLocA = ${t}(${c.join()}, 0);\n        --${c[o-1]};\n        ${t} sourceLocB = ${t}(${c.join()}, 0);\n        --${c[o-2]};`}else p=o,h=`\n        ${u} sourceLocR = coords;\n        ++${c[o-1]};\n        ${u} sourceLocG = coords;\n        ++${c[o-2]};\n        ${u} sourceLocA = coords;\n        --${c[o-1]};\n        ${u} sourceLocB = coords;\n        --${c[o-2]};`;const d=["x","y","z","w","u","v"].slice(0,p),f="."+d[p-1],m=d.map((t=>"int "+t)),g=HI("sourceLocR",p-1).concat("inIdx.r"),y=HI("sourceLocG",p-1).concat("inIdx.g"),b=HI("sourceLocB",p-1).concat("inIdx.b"),x=HI("sourceLocA",p-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",v=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,N=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${c[o-2]} < ${i[o-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class c${constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,u=t.effectiveFilterWidth,l=o-1-t.padInfo.top,c=u-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class h${constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const p$="return (a < 0.) ? b * a : a;";class d${constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=ho(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const f$="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class m${constructor(t,e,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=ho(e,n);const s=this.outputShape.length;let a="";if(r)if(0===s||1===d(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${i$(s)} coords = getOutputCoords();\n        `,1===s)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=HI("coords",s);a+=`\n            bool nextRowOutOfBounds =\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class g${constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class y${constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,r)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(r,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(r,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class b${constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class x${constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class w${constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class v${constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${s};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class k${constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,u=n-1-t.padInfo.top,l=r-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class N${constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${r};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class I${constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class $${constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${s}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class C${constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,u=t.dilationHeight,l=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class S${constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,u=t.strideHeight,l=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${u}, ${l});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class T${constructor(t,e=!1,n=null,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const s=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,c=t.strideWidth,h=t.dilationHeight,p=t.dilationWidth,d=t.filterHeight,f=t.filterWidth,m=f;let g="int xR; int xC; int xCOffset;";for(let t=0;t<d;t++)for(let e=0;e<f;e++)g+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<d;t++)for(let e=0;e<m;e++){const n=2*e;if(g+=`\n          xR = xRCorner + ${t*h};\n          xC = xCCorner + ${n*p};\n        `,1===c){if(n<f&&(g+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${s} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${s} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<f)){const e=o%2==0?u(p):p;p%2==0&&o%2==1||p%2!=0&&o%2!=1?(g+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${s} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${s} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<f&&(g+=`\n              if(xR >= 0 && xR < ${s}) {\n            `,o%2==1?(g+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<f&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<f&&(g+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),g+="}");n<f&&(g+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<f&&(g+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<d;t++)for(let e=0;e<f;e++)g+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let y="",b="";n&&(y=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}class E${constructor(t,e,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=t,[l]=e,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class A${constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const r=t.length,s=e?"0.0":`getX(${R$(r,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${i$(r)} coords = getOutputCoords();\n        int end = ${D$(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${D$(r,"coords")} = idx;\n          val += getX(${R$(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function R$(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function D$(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.y`;if(3===t)return`${e}.z`;if(4===t)return`${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class _${constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=iI.DENSE;const e=dI(t),n=jI();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${qI(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class F${constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=iI.DENSE;const e=dI(t),n=jI();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${qI(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class O${constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class M${constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class L${constructor(t){this.variableNames=["A"],this.outTexUsage=uI.DOWNLOAD;const e=jI();this.outputShape=t,this.userCode=`\n      ${XI}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class z${constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=uI.DOWNLOAD;const e=jI();this.outputShape=t,this.userCode=`\n      ${XI}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class B${constructor(t,e,n=!1){this.variableNames=["A"];const r=jI(),[s,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${KI(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class P${constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=jI(),[s,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${KI(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}class W${constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class V${constructor(t,e,n){this.variableNames=["A","indices"];const r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;const s=i$(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const r=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let n=0;n<t.length;n++)n===e?s.push(`int(getIndices(${r[n]}))`):s.push(`${r[n]}`);return s.join()}(t,n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class U${constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const r=i$(e.length),s=i$(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function G$(t){const e=jI();return function(t,e){const n=SI(t,(()=>t.createShader(t.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(gI(t,(()=>t.shaderSource(n,e))),gI(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function H$(t){return function(t,e){const n=SI(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return gI(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),gI(t,(()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function j$(t){return function(t,e){const n=SI(t,(()=>t.createBuffer()),"Unable to create WebGLBuffer");return gI(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n))),gI(t,(()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Uint16Array([0,1,2,2,1,3]))}function q$(t,e,n,r,s,a){!function(t,e){const n=G().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const i=function(t){return SI(t,(()=>t.createTexture()),"Unable to create WebGLTexture.")}(t),o=t.TEXTURE_2D;return gI(t,(()=>t.bindTexture(o,i))),gI(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE))),gI(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE))),gI(t,(()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST))),gI(t,(()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST))),gI(t,(()=>t.texImage2D(o,0,r,e,n,0,s,a,null))),gI(t,(()=>t.bindTexture(t.TEXTURE_2D,null))),i}function K$(t){return t.internalFormatFloat}function X$(t){return t.internalFormatHalfFloat}function Y$(t){return t.downloadTextureFormat}function J$(t){return t.internalFormatPackedFloat}function Z$(t){return t.internalFormatPackedHalfFloat}function Q$(t,e,n,r,s,a,i,o){const u=t,l=new Float32Array(function(t,e){const[n,r]=fI(t,e);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class tC{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=G().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){rI[t]=e}(e,t)):this.gl=aI(e);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===G().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=bI(this.gl,t),OI(this.gl,e))this.textureHalfFloatExtension=bI(this.gl,e);else if(G().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),OI(this.gl,r))this.colorBufferHalfFloatExtension=bI(this.gl,r);else if(G().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",OI(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!OI(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=H$(this.gl),this.indexBuffer=j$(this.gl),this.framebuffer=function(t){return SI(t,(()=>t.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=mI(this.gl,this.textureHalfFloatExtension)}get debug(){return G().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;gI(t,(()=>t.finish())),gI(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,null))),gI(t,(()=>t.deleteFramebuffer(this.framebuffer))),gI(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,null))),gI(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null))),gI(t,(()=>t.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=pI(e,n);return q$(t,s,a,K$(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=pI(e,n);return q$(t,s,a,X$(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=pI(e,n);return q$(t,s,a,Y$(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){gI(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),n.data instanceof Uint8Array?gI(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data))):gI(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n))),gI(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,a){let i,o,u;gI(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,u=t.RGBA):(i=new Float32Array(n*r*4),o=t.FLOAT,u=a.internalFormatPackedFloat),i.set(s),gI(t,(()=>t.texImage2D(t.TEXTURE_2D,0,u,n,r,0,t.RGBA,o,i))),gI(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=fI(e,n);return q$(t,s,a,Z$(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,a]=fI(e,n);return q$(t,s,a,J$(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&($I(this.gl,this.framebuffer),this.outputTexture=null),gI(this.gl,(()=>this.gl.deleteTexture(t)))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n,r){const[s,a]=pI(e,n),i=new Uint8Array(e*n*4);return gI(t,(()=>t.readPixels(0,0,s,a,r.downloadTextureFormat,t.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(t,e,n,r,s,a){return Q$(this.gl,t,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();gI(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s)));const a=16*e*n;return gI(t,(()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ))),gI(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0))),gI(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null))),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(G().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n){const r=new Float32Array(e*n*4);return gI(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r))),r}(this.gl,e,n)))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=xI(e,t),r=G$(e),s=function(t){return SI(t,(()=>t.createProgram()),"Unable to create WebGLProgram.")}(e);return gI(e,(()=>e.attachShader(s,r))),gI(e,(()=>e.attachShader(s,n))),function(t,e){if(gI(t,(()=>t.linkProgram(e))),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,s),this.debug&&vI(e,s),this.vertexAttrsAreBound||(this.setProgram(s),this.vertexAttrsAreBound=function(t,e,n){return gI(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),kI(t,e,"clipSpacePos",n,3,20,0)&&kI(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),s}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&gI(this.gl,(()=>this.gl.deleteProgram(t)))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&vI(this.gl,this.program),gI(this.gl,(()=>this.gl.useProgram(t)))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return SI(t,(()=>t.getUniformLocation(e,n)),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),gI(this.gl,(()=>this.gl.getAttribLocation(t,e)))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),function(t,e,n,r){gI(t,(()=>NI(t,e,r))),gI(t,(()=>t.uniform1i(n,r)))}(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=fI(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&vI(this.gl,this.program),CI(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),gI(t,(()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),gI(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=bI(this.gl,2===G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await b((()=>this.disposed||this.isQueryAvailable(t,G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(t,G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||b((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),II(this.gl,t,this.framebuffer),this.debug&&CI(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(II(this.gl,this.outputTexture,this.framebuffer),this.debug&&CI(this.gl)):$I(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;II(r,t,this.framebuffer),this.debug&&CI(r),this.outputTexture=t,gI(r,(()=>r.viewport(0,0,e,n))),gI(r,(()=>r.scissor(0,0,e,n)))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),gI(this.gl,(()=>this.gl.scissor(t,e,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function eC(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach(((t,n)=>{const r=t.logicalShape,s=e[n],a=s.shape;if(!f(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(t.isUniform&&s.isUniform)return;const i=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!f(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}class nC{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=jI(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class rC{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class sC{constructor(t,e,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class aC{constructor(t,e,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class iC{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,o=a-1-t.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oC{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,u=t.effectiveFilterHeight,l=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=u-1-t.padInfo.top,p=l-1-t.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class uC{constructor(t,e,n,r=!1,s=!1,a=!1,i=null,o=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=r?t[1]:t[2],l=Math.ceil(u/2),c=r?"i * 2, rc.y":"rc.y, i * 2",h=s?"rc.z, i * 2":"i * 2, rc.z",p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let f="",m="";i&&(f=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,m="result = activation(result);");const g=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights");let y="rc.x",b="rc.x";t[0]<e[0]?y=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(b=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${f}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          int batchA = ${y};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${c});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${d[0]});\n          result += (${p[1]} * ${d[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${g}\n\n        ${m}\n\n        setOutput(result);\n      }\n    `}}class lC{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class cC{constructor(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class hC{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=HI("rc",e),r=i$(e),s=function(t,e,n){if(1===t)return`rc > ${e[0]}`;let r="";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<t;n++)a=`${e[e.length-1-n]},`+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class pC{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=i$(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class dC{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=i$(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=HI("rc",r),u=HI("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===r?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${s} source = rc - start;\n          result[${t}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class fC{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,u=t.dilationHeight,l=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class mC{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,u=t.strideWidth,l=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class gC{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=t;this.outputShape=[r,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}class yC{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${qI(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${KI(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class bC{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class xC{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class wC{constructor(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]},\n          ${u[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class vC{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,r,s]=e.shape,[,a,i]=t.shape,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class kC{constructor(t,e,n,r){this.variableNames=["A"],this.outputShape=[];const[s,a,i,o]=t;this.outputShape=[s,e,n,o];const u=[r&&e>1?a-1:a,r&&n>1?i-1:i],l=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/l[0]},\n          ${u[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class NC{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const r=t.map(((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=i$(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class IC{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=HI("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=i$(n);function o(n){const r=t.map(((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(r.slice())};\n          if(${s}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class $C{constructor(t,e,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=i$(s.length),u=i$(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class CC{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,r=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class SC{constructor(t,e,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<e.length;r++)i.push(`${n[r]}`),r<t&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=i$(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}class TC{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=i$(this.rank),n=`uniform int start[${this.rank}];`,r=function(t){if(1===t)return"sourceLoc";if(t<=6)return EC.slice(0,t).map((t=>"sourceLoc."+t)).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let s;s=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map(((t,e)=>`sourceLoc.${EC[e]} = start[${e}] + coords.${EC[e]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${s}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const EC=["x","y","z","w","u","v"];class AC{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=i$(this.rank),n=HI("coords",this.rank),r=HI("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map(((t,e)=>`start[${e}]`)).join()});`:t.map(((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class RC{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=i$(n.length),a=i$(n.length);let i="";if(1===r)i="coords * strides + begin";else{let t=0;i=n.map(((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${t});\n      ${s} strides = ${s}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class DC{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=FC(e,n),s=OC(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=_C(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let i;return r===cI.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===cI.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===cI.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===cI.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===cI.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=FC(n,r),a=OC(e,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=_C(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=G().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(t);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));for(const t in this.usedTextures)this.usedTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function _C(t,e,n,r,s){const a=function(t,e){switch(t){case cI.PACKED_2X2_FLOAT32:return J$(e);case cI.PACKED_2X2_FLOAT16:return Z$(e);case cI.UNPACKED_FLOAT32:return K$(e);case cI.UNPACKED_FLOAT16:return X$(e);case cI.PACKED_4X1_UNSIGNED_BYTE:return Y$(e);default:throw new Error(`Unknown physical texture type ${t}`)}}(e,r);let i;if(s){const[e,n]=fI(t[0],t[1]);i=e*n}else{const[e,n]=pI(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${e}`)}(n,a)}function FC(t,e){if(t===uI.UPLOAD)return cI.PACKED_2X2_FLOAT32;if(t===uI.RENDER||null==t)return function(t){return G().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?cI.PACKED_2X2_FLOAT32:cI.UNPACKED_FLOAT32:t?cI.PACKED_2X2_FLOAT16:cI.UNPACKED_FLOAT16}(e);if(t===uI.DOWNLOAD||t===uI.PIXELS)return cI.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${t}`)}function OC(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class MC{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=i$(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}class LC{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const zC="return abs(x);",BC="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",PC="if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",WC="return (x >= 0.0) ? x : (exp(x) - 1.0);";const VC="return -x;",UC="return ceil(x);",GC="return floor(x);",HC="return exp(x);",jC="return exp(x) - 1.0;",qC="return x;",KC="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",XC="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",YC="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class JC{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class ZC{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=HI("rc",e),r=i$(e),s=function(t,e){if(1===t)return"rc";let n="";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const QC=sh,tS=ah,eS=ih,nS=bl,rS={};function sS(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?KC:BC;if("elu"===t)return e?YC:WC;if("relu6"===t)return e?XC:PC;if("prelu"===t)return e?f$:p$;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class aS extends s{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!G().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=aI(G().getNumber("WEBGL_VERSION"));this.binaryCache=((e=G().getNumber("WEBGL_VERSION"))in rS||(rS[e]={}),rS[e]),this.gpgpu=new tC(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new DC(this.gpgpu),this.numMBBeforeWarning=null==G().global.screen?1024:G().global.screen.height*G().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new r(this,Ha())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((G().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||G().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:uI.UPLOAD,refCount:1,complexParentRefCount:0}),r}incRef(t){this.texData.get(t).refCount++}decRef(t){if(this.texData.has(t)){this.texData.get(t).refCount--}}move(t,e,n,r){if(G().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:uI.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new JC(i,qC):new LC(i,qC);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=Rn()),"complex64"===r){c=Qc(this.readSync(s.real.dataId),this.readSync(s.imag.dataId))}else c=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=Rn()-l),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((t=>e.push(t)))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:i,isPacked:o}=e;if(null!=s){let e;e=o?new JC(r,qC):new LC(r,qC);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!G().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===G().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&G().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(e.texture,...dI(r))}if(this.pendingRead.set(t,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const t=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);l=Qc(t[0],t[1])}else if(null==c)l=this.getValuesFromTexture(t);else{const t=d(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,t)}null!=u&&this.disposeIntermediateTensorInfo(u);const h=this.convertAndCacheOnCPU(t,l),p=this.pendingRead.get(t);return this.pendingRead.delete(t),p.forEach((t=>t(h))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),h}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!yI(n)){if(G().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=d(e);if(G().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...dI(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=G().getBool("WEBGL_PACK")&&!0===r,i=a?AI(e):e,o=a?new z$(i):new L$(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:t}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=p(this.activeTimers.map((t=>t.query))).filter((t=>null!=t)),a=p(this.activeTimers.map((t=>t.name))).filter((t=>null!=t));this.activeTimers=e,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(s);i.kernelMs=function(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}(t),i.getExtraProfileInfo=()=>t.map(((t,e)=>({name:a[e],ms:t}))).map((t=>`${t.name}: ${t.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Rn(),endMs:null}}endTimer(t){return G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=Rn(),t)}async getQueryTime(t){if(G().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;if(this.texData.get(t).complexParentRefCount>0)return void this.texData.get(t).refCount--;this.releaseGPUData(t);const{complexTensorInfos:e}=this.texData.get(t);null!=e&&(this.texData.get(e.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.real),this.texData.get(e.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(e.imag)),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,a)));const l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return G().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ha().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every((t=>null==this.texData.get(t.dataId).texture&&d(t.shape)<e))}getGPGPUContext(){return this.gpgpu}slice(t,e,n){if(this.shouldExecuteOnCPU([t])){const r=_v(this.texData.get(t.dataId).values,e,n,t.shape,t.dtype);return this.makeOutput(n,t.dtype,r)}if(0===d(n))return Is([],n,t.dtype);const{isPacked:r}=this.texData.get(t.dataId),s=za(t.shape,e,n);if(r||!s){const r=G().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new AC(n):new TC(n),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const r=this.texData.get(t.dataId),s=this.makeOutput(n,t.dtype),a=this.texData.get(s.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;let i=Ba(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),s}stridedSlice(t,e,n,r){const s=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.stridedSlice(t,e,n,r)));if(s)return s;const a=Ra(e,n,r);if(a.some((t=>0===t)))return Is([],a);const i=new RC(e,r,a);return this.compileAndRun(i,[t])}reverse(t,e){const n=G().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new IC(t.shape,e):new NC(t.shape,e);return this.compileAndRun(n,[t])}neg(t){const e=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.neg(t)));if(e)return e;if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,VC,t.dtype);const n=new LC(t.shape,VC);return this.compileAndRun(n,[t])}batchMatMul(t,e,n,r){const s=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],o=Math.max(t.shape[0],e.shape[0]);if((1===s||1===a)&&i>1e3){n&&(t=Na(t,[0,2,1])),r&&(e=Na(e,[0,2,1]));const s=1===a?t:t.as3D(o,i,1),u=1===a?2:1,l=1===a?e.as3D(o,1,i):e;return Oo(s,l).sum(u,!0)}const u=ar(t.dtype,e.dtype),l=new uC(t.shape,e.shape,[o,s,a],n,r);return this.compileAndRun(l,[t,e],u)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:s,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],u=r?e.shape[1]:e.shape[2],l=Math.max(t.shape[0],e.shape[0]),c=ar(t.dtype,e.dtype),h=null!=s,p=null!=i,d=a?sS(a,!0):null,f=new uC(t.shape,e.shape,[l,o,u],n,r,h,d,p),m=[t,e];return s&&m.push(s),i&&m.push(i),this.compileAndRun(f,m,c)}localResponseNormalization4D(t,e,n,r,s){const a=G().getBool("WEBGL_PACK_NORMALIZATION")?new aC(t.shape,e,n,r,s):new rC(t.shape,e,n,r,s);return this.compileAndRun(a,[t])}LRNGrad(t,e,n,r,s,a,i){const o=new sC(e.shape,r,s,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map((t=>_n(t))),r=la(t.shape,t.dtype,n);return tS(r,e)}const n=new MC(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const r=G().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new dC(t.shape,e,n):new pC(t.shape,e,n);return this.compileAndRun(r,[t])}gather(t,e,n){const r=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.gather(t,e,n)));if(r)return r;const s=new V$(t.shape,e.size,n);return this.compileAndRun(s,[t,e])}batchToSpaceND(t,e,n){l(t.rank<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const r=e.reduce(((t,e)=>t*e)),s=Hc(t.shape,e,r),a=jc(s.length,e.length),i=qc(t.shape,e,r),o=Kc(n,e.length),u=Xc(i,n,e.length);return Na(t.reshape(s),a).reshape(i).slice(o,u)}spaceToBatchND(t,e,n){l(t.rank<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const r=e.reduce(((t,e)=>t*e)),s=[[0,0]];s.push(...n);for(let n=1+e.length;n<t.shape.length;++n)s.push([0,0]);const a=t.pad(s),i=Hc(a.shape,e,r,!1),o=jc(i.length,e.length,!1),u=qc(a.shape,e,r,!1),c=Na(a.reshape(i),o);return wa(c,u)}reduce(t,e,n){const r=t.shape[0],s=t.shape[1],a=Co(s),i=Math.ceil(s/a),o=new gC({windowSize:a,inSize:s,batchSize:r,outSize:i},e),u=this.compileAndRun(o,[t],n);return 1===u.shape[1]?u:this.reduce(u,e,n)}argReduce(t,e,n=null){let r=t.shape[0],s=t.shape[1];null!=n&&(r=n.shape[0],s=n.shape[1]);const a=Co(s),i={windowSize:a,inSize:s,batchSize:r,outSize:Math.ceil(s/a)},o=new UI(i,e,null==n),u=[t];null!=n&&u.push(n);const l=this.compileAndRun(o,u,"int32");return 1===l.shape[1]?l:this.argReduce(t,e,l)}argReducePacked(t,e,n=null){const r=null!=n?n.shape:t.shape,s=Co(r[r.length-1]),a=new l$(r,s,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){ii("sum",e,t.rank);const[n,r]=si(t.shape,e),s=d(r),a=t.as2D(-1,s),i=ir(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){const n=this.tryRunOnCpuOrThrow([t],(()=>this.cpuBackend.prod(t,e)));if(n)return n;const[r,s]=si(t.shape,e),a=d(s),i=t.as2D(-1,a),o=ir(t.dtype);return this.reduce(i,"prod",o).reshape(r)}unsortedSegmentSum(t,e,n){let r=0;const s=oi([r],t.rank);let a=t;null!=s&&(a=Na(t,s),r=li(1,t.rank)[0]);const i=function(t,e,n){const r=[],s=t.length;for(let a=0;a<s;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),o=d([a.shape[r]]),u=a.as2D(-1,o),l=ir(t.dtype);let c=this.segOpCompute(u,"unsortedSegmentSum",e,l,n).reshape(i);return null!=s&&(c=Na(c,ui(s))),c}segOpCompute(t,e,n,r,s){const a=t.shape[0],i=t.shape[1],o=function(t,e){let n,r=!1;for(t<=30?(n=t,r=!0):n=R(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=R(t,n+1);return n}(i,s),u=new CC({windowSize:o,inSize:i,batchSize:a,numSegments:s},e),l=this.compileAndRun(u,[t,n],r);return l.shape[1]===s?l:(n=Fu(0,s).tile([i/o]),this.segOpCompute(l,e,n,r,s))}argMinMaxReduce(t,e,n){const r=[e];if(ii("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!G().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,s]=si(t.shape,r),a=d(s),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,r){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=${e}`);const s=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(s))-1;e++){const n=new A$(t.shape,!1,r),s=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,s),i.dispose()}if(n){const e=new A$(t.shape,n,r),s=a;a=this.compileAndRun(e,[a]),s.dispose()}return a}equal(t,e){if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new d$("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.less(t,e)));if(n)return n;if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const r=new d$("return float(a < b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}lessEqual(t,e){if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new d$("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.greater(t,e)));if(n)return n;if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const r=new d$("return float(a > b);",t.shape,e.shape);return this.compileAndRun(r,[t,e],"bool")}greaterEqual(t,e){if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new d$("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new LC(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new d$("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new d$("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const r=new SC(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],ar(e.dtype,n.dtype))}where(t){Zc("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return nS(t.shape,e)}topk(t,e,n){const r=t.dataSync();return eS(r,t.shape,t.dtype,e,n)}min(t,e){ii("min",e,t.rank);const[n,r]=si(t.shape,e),s=d(r),a=t.as2D(-1,s);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.minimum(t,e)));if(n)return n;const r=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new d$("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}mod(t,e){const n=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new d$("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){const n=this.tryRunOnCpuOrThrow([t,e],(()=>this.cpuBackend.maximum(t,e)));if(n)return n;const r=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new d$("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(r,[t,e])}all(t,e){ii("all",e,t.rank);const[n,r]=si(t.shape,e),s=d(r),a=t.as2D(-1,s);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){ii("any",e,t.rank);const[n,r]=si(t.shape,e),s=d(r),a=t.as2D(-1,s);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){const n="int32";if(G().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",n);const r=new d$("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(r,[t,e],n)}packedUnaryOp(t,e,n){const r=new JC(t.shape,e);return this.compileAndRun(r,[t],n)}packedBinaryOp(t,e,n,r,s=!1){const a=new m$(n,t.shape,e.shape,s);return this.compileAndRun(a,[t,e],r)}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>G().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}const e=t.map((t=>t.dtype)).reduce(((t,e)=>ar(t,e))),n=t.map((t=>t.shape)),r=G().getBool("WEBGL_PACK")?new VI(t[0].shape,n):new WI(t[0].shape,n);return this.compileAndRun(r,t,e)}pow(t,e){const n=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new d$("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=ar(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)}ceil(t){if(this.shouldExecuteOnCPU([t])){const e=ov(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,UC,t.dtype);const e=new LC(t.shape,UC);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t])){const e=gv(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,GC,t.dtype);const e=new LC(t.shape,GC);return this.compileAndRun(e,[t])}sign(t){const e=new LC(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new LC(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new LC(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new LC(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new LC(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t])){const e=cv(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,HC,t.dtype);const e=new LC(t.shape,HC);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t])){const e=dv(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,jC,t.dtype);const e=new LC(t.shape,jC);return this.compileAndRun(e,[t])}softmax(t,e){const n=w([e],t.shape),r=Ko(t,n),s=ai(r.shape,n),a=Xo(t,r.reshape(s)),i=this.exp(a),o=this.sum(i,n).reshape(s);return uo(i,o)}log(t){if(this.shouldExecuteOnCPU([t])){const e=xv(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new LC(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new LC(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new LC(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t])){const e=Av(this.texData.get(t.dataId).values,t.dtype);return this.makeOutput(t.shape,t.dtype,e)}const e=new LC(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new LC(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=G().getBool("WEBGL_PACK")?new JC(t.shape,KC):new LC(t.shape,BC),this.compileAndRun(e,[t])}relu6(t){let e;return e=G().getBool("WEBGL_PACK")?new JC(t.shape,XC):new LC(t.shape,PC),this.compileAndRun(e,[t])}prelu(t,e){const n=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$(f$,t.shape,e.shape):new d$(p$,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,YC,t.dtype);const e=new LC(t.shape,WC);return this.compileAndRun(e,[t])}eluDer(t,e){const n=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new d$("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new LC(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])}clip(t,e,n){let r;r=G().getBool("WEBGL_PACK_CLIP")?new y$(t.shape):new g$(t.shape);const s=r.getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,s)}abs(t){if(this.shouldExecuteOnCPU([t])&&"complex64"!==t.dtype){const e=Ww(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(G().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,zC,t.dtype);const e=new LC(t.shape,zC);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new b$(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.real),this.makeComplexComponentTensorInfo(t,e.complexTensorInfos.imag)];return this.compileAndRun(n,r)}sigmoid(t){const e=new LC(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new LC(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}asin(t){const e=new LC(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new LC(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new LC(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}sinh(t){const e=new LC(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new LC(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new LC(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new LC(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new LC(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new LC(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new LC(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new LC(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,r,s,a){const i=t.shape,o=this.texData.get(t.dataId),u=n.inChannels,c=i[0]*i[1]*i[2],h=n.outChannels,p="channelsLast"===n.dataFormat,d=(1===c||1===h)&&u>1e3,f=i[2]%2!=0&&!!o.isPacked;if(d||!G().getBool("WEBGL_LAZILY_UNPACK")||!G().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const o=p?i[0]*i[1]*i[2]:i[0]*i[2]*i[3],u=wa(t,[1,o,n.inChannels]),l=wa(e,[1,n.inChannels,n.outChannels]),c=this.fusedBatchMatMul({a:u,b:l,transposeA:false,transposeB:false,bias:r,activation:s,preluActivationWeights:a});return wa(c,n.outShape)}const m=p?i[0]*i[1]*(i[2]+1):i[0]*i[2]*(i[3]+1),g={dataId:t.dataId,shape:[1,m,n.inChannels],dtype:t.dtype},y=o.shape;o.shape=o.shape.slice(),o.shape[o.shape.length-2]++,l(DI(o.shape,g.shape),(()=>`packed reshape ${o.shape} to ${g.shape} isn't free`));const b=wa(e,[1,n.inChannels,n.outChannels]),x=this.fusedBatchMatMul({a:g,b:b,transposeA:false,transposeB:false,bias:r,activation:s,preluActivationWeights:a}),w=this.texData.get(x.dataId);return l(w.isPacked,(()=>"batchMatMul result is expected to be packed")),o.shape=y,w.shape=n.outShape,Ha().makeTensorFromDataId(x.dataId,n.outShape,x.dtype)}conv2dWithIm2Row(t,e,n,r,s,a){const{filterWidth:i,filterHeight:o,inChannels:u,outWidth:l,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*u,f=c*l,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new nC(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=r,v=null!=a,k=s?sS(s,!0):null,N=new uC(x.shape,y.shape,[1,f,n.outChannels],!0,!1,w,k,v),I=[x,y];r&&I.push(r),v&&I.push(a);const $=this.compileAndRun(N,I);return p?$.reshape([1,c,l,n.outChannels]):$.reshape([1,n.outChannels,c,l])}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,s,a);if(G().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,s,a);const i=null!=r,o=null!=a,u=s?sS(s,!1):null,l=new $$(n,i,u,o),c=[t,e];return r&&c.push(r),a&&c.push(a),this.compileAndRun(l,c)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(G().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const r=new $$(n);return this.compileAndRun(r,[t,e])}conv2dDerInput(t,e,n){const r=new w$(n);return this.compileAndRun(r,[t,e])}conv2dDerFilter(t,e,n){const r=new x$(n);return this.compileAndRun(r,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:s,preluActivationWeights:a}){const i=G().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,o=s?sS(s,i):null,u=[t,e],l=null!=r,c=null!=a;let h;return l&&u.push(r),c&&u.push(a),i?(h=new T$(n,l,o,c),this.compileAndRun(h,u)):(h=new S$(n,l,o,c),this.compileAndRun(h,u))}depthwiseConv2D(t,e,n){let r;return G().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new T$(n),this.compileAndRun(r,[t,e])):(r=new S$(n),this.compileAndRun(r,[t,e]))}depthwiseConv2DDerInput(t,e,n){const r=new I$(n);return this.compileAndRun(r,[t,e])}depthwiseConv2DDerFilter(t,e,n){const r=new N$(n);return this.compileAndRun(r,[t,e])}conv3d(t,e,n){const r=new C$(n);return this.compileAndRun(r,[t,e])}conv3dDerInput(t,e,n){const r=new k$(n);return this.compileAndRun(r,[t,e])}conv3dDerFilter(t,e,n){const r=new v$(n);return this.compileAndRun(r,[t,e])}unstack(t,e){const n=t.shape[e],r=new Array(t.rank-1);let s=0;for(let n=0;n<t.rank;n++)n!==e&&(r[s++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(r);return o}avgPool3d(t,e){const n=new mC(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const r=new h$(n);return this.compileAndRun(r,[t],e.dtype)}maxPool3d(t,e){const n=new mC(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,r){const s=new mC(r,"max",!0),a=this.compileAndRun(s,[e]),i=new oC(r),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}resizeBilinear(t,e,n,r){const s=G().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new wC(t.shape,e,n,r):new xC(t.shape,e,n,r);return this.compileAndRun(s,[t],"float32")}resizeBilinearBackprop(t,e,n){const r=new bC(t,e,n);return this.compileAndRun(r,[t])}resizeNearestNeighbor(t,e,n,r){const s=new kC(t.shape,e,n,r);return this.compileAndRun(s,[t])}resizeNearestNeighborBackprop(t,e,n){const r=new vC(t,e,n);return this.compileAndRun(r,[t])}multinomial(t,e,n,r){const s=e?t:Ju(t),a=s.shape[0],i=s.shape[1],o=new lC(a,i,n),u=o.getCustomSetupFunc(r);return this.compileAndRun(o,[s],"int32",u)}oneHot(t,e,n,r){const s=new cC(t.size,e,n,r);return this.compileAndRun(s,[t])}diag(t){const e=new M$(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,r,s,a){const i=new E$(t.shape,e.shape,r,s,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){l(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`));const r=t.shape[0],s="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=s*e,u=a*e,c=i/(e*e),h=new O$("NHWC"===n?[r,o,u,c]:[r,c,o,u],e,n);return this.compileAndRun(h,[t])}split(t,e,n){return QC(t,e,n)}scatterND(t,e,n){const{sliceRank:r,numUpdates:s,sliceSize:a,strides:i,outputSize:o}=Ta(0,t,n),u=[o/a,a],l=t.reshape([s,r]),c=e.reshape([s,a]);if(0===o)return function(t,e){return fr.makeTensorFromDataId(t.dataId,e,t.dtype)}(Is([]),n);const h=Mo(0),p=new $C(s,r,l.rank,c.rank,i,u);return this.compileAndRun(p,[c,l,h]).reshape(n)}sparseToDense(t,e,n,r){const{sliceRank:s,numUpdates:a,strides:i,outputSize:o}=Ta(0,t,n),u=new $C(a,s,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(u,[e,t,r]).reshape(n)}gatherND(t,e){const n=e.shape,r=n[n.length-1],[s,a,i,o]=Ca(t,e),u=e.reshape([a,r]),l=t.reshape([t.size/i,i]),c=new U$(r,o,[a,i]);return this.compileAndRun(c,[l,u]).reshape(s)}fill(t,e,n){if("string"===(n=n||E(e))){const r=N(n,d(t));return r.fill(e),Ha().makeTensor(r,t,n,this)}{const r=new W$(t,e),s=r.getCustomSetupFunc(e);return this.compileAndRun(r,[],n,s)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return rh(t,e,n)}makeTensorInfo(t,e,n){const r=this.write(n,t,e);return this.texData.get(r).usage=null,{dataId:r,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:r}=this.makeTensorInfo(t,e,n);return Ha().makeTensorFromDataId(r,t,e,this)}unpackTensor(t){const e=new ZC(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new hC(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[TI(t.shape),...EI(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[TI(e),...EI(e)],a=new yC(s,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,a=AI(r);let i;i=n?new F$(a):new _$(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:t}],s,null,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const a=this.makeTensorInfo(t.outputShape,n),i=this.texData.get(a.dataId);if(t.packedOutput&&(i.isPacked=!0),t.outPackingScheme===iI.DENSE){const e=dI(t.outputShape);i.texShape=e.map((t=>2*t))}if(null!=t.outTexUsage&&(i.usage=t.outTexUsage),0===d(a.shape))return i.values=k(a.dtype,0),a;const o=[],u=e.map((e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&d(e.shape)<=G().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!DI(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),o.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const l={shape:a.shape,texData:i,isUniform:!1},c=function(t,e,n){let r="";e.concat(n).forEach((t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${n}_${e}`}));const s=t.userCode;let a=t.constructor.name;return a+="_"+r+"_"+s,a}(t,u,l),h=this.getAndSaveBinary(c,(()=>function(t,e,n,r){const s=e.userCode,a=n.map(((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),i=a.map((t=>t.shapeInfo)),o={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=YI(a,o,s,e.packedInputs),l=t.createProgram(u);let c=null;const h=t.getUniformLocation(l,"NAN",!1);1===G().getNumber("WEBGL_VERSION")&&(c=t.getUniformLocation(l,"INFINITY",!1));const p={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n],s=!1;p[r]=t.getUniformLocation(l,r,s),p[`offset${r}`]=t.getUniformLocation(l,`offset${r}`,s)}return{program:e,source:u,webGLProgram:l,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,t,u,l))),p=null!=this.activeTimers;let f;if(p&&(f=this.startTimer()),function(t,e,n,r,s){eC(e.inShapeInfos,n),eC([e.outShapeInfo],[r]);const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,i[0],i[1]):t.setOutputMatrixTexture(a,i[0],i[1]),t.setProgram(e.webGLProgram),1===G().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach(((n,r)=>{const s=e.program.variableNames[r],a=e.uniformLocations[s],i=e.uniformLocations[`offset${s}`];if(null!=a)if(n.isUniform)if(d(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r)})),null!=s&&s(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,h,u,l,r),o.forEach((t=>this.disposeIntermediateTensorInfo(t))),p&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!G().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const t=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),t}return a}compileAndRun(t,e,n,r,s=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,r,s);return Ha().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!G().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=qa((()=>{if(!G().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=G().getBool("DEBUG");G().set("DEBUG",!1);const e=this.abs(Mo(1e-8)).dataSync()[0];if(G().set("DEBUG",t),e>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=e;if(null!=a)return;const l=null!=this.activeTimers;let c;l&&(c=Rn());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=G().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map(((e,n)=>n>=t.length-2?u(t[n]):t[n]))).length&&(t=[2,t[0]])),2!==t.length){const e=v(t);t=e.newShape}let r=d(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=TI(t);let n=2,s=2;return t.length&&([n,s]=EI(t)),r=e*(n/2)*(s/2),g(r).map((t=>2*t))}return g(r)}(n,o),e.texShape=h),null!=s){const t=AI(n);let a,i=h[1],u=h[0];const p=s instanceof Uint8Array;o?([i,u]=fI(h[0],h[1]),a=new P$(t,[u,i],p)):a=new B$(t,[u,i],p);const d=this.makeTensorInfo([u,i],r);this.texData.get(d.dataId).usage=p?uI.PIXELS:uI.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,u,s);const f=!0,m=this.runWebGLProgram(a,[d],r,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),e.values=null,l&&(this.uploadWaitMs+=Rn()-c)}else{const t=this.acquireTexture(h,i,r,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error(`Unknown dtype ${e}`)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*C(e)}tryRunOnCpuOrThrow(t,e){if(this.shouldExecuteOnCPU(t))try{return e()}catch(t){if(G().getBool("IS_TEST"))throw new Error("CPU forwarding failed")}return null}}function iS(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}yr()&&Ya("webgl",(()=>new aS),2);const oS={kernelName:oe,backendName:"webgl",kernelFunc:iS};function uS(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=iS({inputs:{x:r},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const u=iS({inputs:{x:s},backend:n});return n.texData.get(u.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:u},a}const lS={kernelName:Rt,backendName:"webgl",kernelFunc:uS};function cS(t){return({inputs:e,backend:n})=>{const{x:r}=e,s=n,a=new LC(r.shape,t);return s.runWebGLProgram(a,[r],r.dtype)}}function hS({opSnippet:t,packedOpSnippet:e,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const e=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,r]=e,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new d$(t,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],ar(n.dtype,r.dtype))})),a=uS({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||ar(u.dtype,l.dtype);if(c.shouldExecuteOnCPU([u,l])&&null!=s){const t=c.texData.get(u.dataId),e=c.texData.get(l.dataId),[n,r]=s(u.shape,l.shape,t.values,e.values,h),a=c.makeTensorInfo(r,h);return c.texData.get(a.dataId).values=n,a}let p;return p=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=e?new m$(e,u.shape,l.shape,n):new d$(t,u.shape,l.shape),c.runWebGLProgram(p,[u,l],h)}}const pS="return a + b;",dS=hS({opSnippet:pS,packedOpSnippet:pS,supportsComplex:!0,cpuKernelImpl:tv}),fS={kernelName:dt,backendName:"webgl",kernelFunc:dS},mS=hS({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),gS={kernelName:vt,backendName:"webgl",kernelFunc:mS};const yS={kernelName:kt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;BI(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;l(Ai(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=wi(s.shape,a,i,1,o,u);if(1===c.filterWidth&&1===c.filterHeight&&f(c.inShape,c.outShape))return iS({inputs:{x:s},backend:n});const h=new fC(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};const bS={kernelName:Nt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a}=e,i=a;BI([s,a],"avgPoolBackprop");const{filterSize:o,strides:u,pad:l}=r,c=wi(i.shape,o,u,1,l),h=new c$(c);return n.runWebGLProgram(h,[s],i.dtype)}};class xS{constructor(t,e,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],ho(t,e),ho(t,n);let i="0.0";null!=r&&(ho(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(ho(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class wS{constructor(t,e,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],ho(t,e),ho(t,n);let i="vec4(0.0)";null!=r&&(ho(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(ho(t,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const vS={kernelName:se,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,mean:s,variance:a,offset:i,scale:o}=t;l(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),l(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),l(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[r,s,a];let h=null;null!=i&&(h=i.shape,c.push(i));let p=null;null!=o&&(p=o.shape,c.push(o));const d=G().getBool("WEBGL_PACK_NORMALIZATION")?new wS(r.shape,s.shape,a.shape,h,p,u):new xS(r.shape,s.shape,a.shape,h,p,u);return e.runWebGLProgram(d,c,c[0].dtype)}},kS=hS({opSnippet:"return float(a != b);",dtype:"bool"}),NS={kernelName:Te,backendName:"webgl",kernelFunc:kS};function IS(t){const{inputs:e,backend:n}=t,{input:r}=e;return iS({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const $S={kernelName:Me,backendName:"webgl",kernelFunc:IS};const CS={kernelName:Tt,backendName:"webgl",kernelFunc:function t(e){const{inputs:n,backend:r,attrs:s}=e,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return iS({inputs:{x:a},backend:r});const e=su(a.shape),n=t({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=uS({inputs:{real:n,imag:e},backend:r});return e.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const e=IS({inputs:{input:a},backend:r}),n=t({inputs:{x:e},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(e),n}if(!I(a.dtype,i)){const t=iS({inputs:{x:a},backend:r});return{dataId:t.dataId,shape:t.shape,dtype:i}}if("int32"===i)return function(t,e){const n=new LC(t.shape,"return float(int(x));"),r=e.runWebGLProgram(n,[t],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const t=r.makeTensorInfo([],"bool",k("bool",1)),e=kS({inputs:{a:a,b:t},backend:r});return r.disposeIntermediateTensorInfo(t),e}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}};class SS{constructor(t){this.outputShape=[],this.outputShape=Gi(t,1),this.variableNames=t.map(((t,e)=>`T${e}`));const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class TS{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Gi(t,e);const n=this.outputShape,r=n.length,s=i$(r),a=HI("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map(((t,e)=>`T${e}`));const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const u=i[e],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${u} < ${o[t]}  && ${u} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${ES(i,u,e)}),\n            vec2(${ES(l,u,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${ES(i,u,d)}),\n          vec2(${ES(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map((t=>"int "+t))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function ES(t,e,n){const r=t.indexOf(e);return t.map(((t,e)=>e===r?`${t} - ${n}`:t)).join()}function AS(t){const{inputs:e,backend:n}=t,{input:r}=e;return iS({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const RS={kernelName:le,backendName:"webgl",kernelFunc:AS};function DS(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:a}=r,i=n,o=d(s.shape),u=x(a,o),c=d(u);l(o===c,(()=>`The new shape (${u}) has ${c} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const h=i.texData.get(s.dataId);return!h.isPacked||DI(s.shape,u)||null!==h.texture&&DI(h.shape,u)?(i.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function(t,e,n){const r=[TI(t.shape),...EI(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},a=[TI(e),...EI(e)],i=new yC(a,r),o=n.runWebGLProgram(i,[s],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(s,u,i)}const _S={kernelName:Be,backendName:"webgl",kernelFunc:DS};function FS(t,e,n){const r=t[0].dtype;if("complex64"===r){const r=t.map((t=>IS({inputs:{input:t},backend:n}))),s=t.map((t=>AS({inputs:{input:t},backend:n}))),a=FS(r,e,n),i=FS(s,e,n),o=uS({inputs:{real:a,imag:i},backend:n});return r.forEach((t=>n.disposeIntermediateTensorInfo(t))),s.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if(t.length>G().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(t.length/2),s=FS(t.slice(0,r),e,n),a=FS(t.slice(r),e,n),i=FS([s,a],e,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}if(G().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){const s=new TS(t.map((t=>t.shape)),e);return n.runWebGLProgram(s,t,r)}const s=Gi(t.map((t=>t.shape)),e),a=t.map((t=>DS({inputs:{x:t},attrs:{shape:[-1,d(t.shape.slice(e))]},backend:n}))),i=new SS(a.map((t=>t.shape))),o=n.runWebGLProgram(i,a,r);a.forEach((t=>n.disposeIntermediateTensorInfo(t)));const u=DS({inputs:{x:o},attrs:{shape:s},backend:n});return n.disposeIntermediateTensorInfo(o),u}const OS={kernelName:Dt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,a=w(s,e[0].shape)[0],i=Gi(e.map((t=>t.shape)),a);if(0===d(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter((t=>d(t.shape)>0));return 1===o.length?o[0]:(Ui(o.map((t=>t.shape)),a),FS(o,a,n))}},MS=cS("if (isnan(x)) return x;\n  return cos(x);\n"),LS={kernelName:Bt,backendName:"webgl",kernelFunc:MS},zS=hS({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),BS={kernelName:Kt,backendName:"webgl",kernelFunc:zS};class PS{constructor(t,e,n){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function WS(t,e,n){const r=n.texData.get(t.dataId),s=d(t.shape),a=t.shape[t.shape.length-1],i=DS({inputs:{x:t},backend:n,attrs:{shape:[s/a,a]}}).shape,o=new PS("real",i,e),u=new PS("imag",i,e),l=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:i},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:i}],c=n.runWebGLProgram(o,l,"float32"),h=n.runWebGLProgram(u,l,"float32"),p=uS({inputs:{real:c,imag:h},backend:n});n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h);const f=DS({inputs:{x:p},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(f),f}const VS={kernelName:Qt,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return WS(r,!1,n)}};class US{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const GS={kernelName:ee,backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new US(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}};class HS{constructor(t){this.variableNames=["A"];const e=jI(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class jS{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=jI(),[n,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const qS={kernelName:yn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];(o||i)&&(null==KS&&(KS=document.createElement("canvas").getContext("2d")),KS.canvas.width=u,KS.canvas.height=l,KS.drawImage(s,0,0,u,l),s=KS.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=uI.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const d=G().getBool("WEBGL_PACK")?new jS(h):new HS(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let KS;const XS={kernelName:ue,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return WS(r,!0,n)}};class YS{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(n/4),o=n%4;let u="sumValue += dot(values, ones);";if(null!=e){const t=1/e;u=`sumValue += dot(values * ${m(t)?t.toPrecision(2):t}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}function JS(t,e,n,r){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],r=Co(n);e.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return e}(t.shape);let a=t;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new YS({windowSize:u,inSize:o,batchSize:t.shape[0],outSize:l},o):new YS({windowSize:u,inSize:o,batchSize:t.shape[0],outSize:l}):new gC({windowSize:u,inSize:o,batchSize:t.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],e),h.dataId!==t.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class ZS{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=i$(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class QS{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=i$(this.rank),s=GI("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=s[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function tT(t,e,n){const r=G().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new QS(t.shape,e):new ZS(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}const eT={kernelName:ye,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{reductionIndices:s,keepDims:a}=e,i=n,o=r.shape.length,u=w(s,r.shape);let l=u;const c=oi(l,o),h=null!=c,p=i.shouldExecuteOnCPU([r]);let f=r;if(h){if(p){const t=i.texData.get(f.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=Uv(t,r.shape,r.dtype,c,e);f=i.makeTensorInfo(e,r.dtype);i.texData.get(f.dataId).values=n}else f=tT(r,c,i);l=li(l.length,o)}ii("max",l,o);const[m,g]=si(f.shape,l);let y,b=m;if(a&&(b=ai(m,u)),p){const t=kv(i.texData.get(f.dataId).values,d(g),b,r.dtype);y=i.makeTensorInfo(b,r.dtype);i.texData.get(y.dataId).values=t}else y=function(t,e,n,r){const s=d(e),a=DS({inputs:{x:t},attrs:{shape:[d(t.shape)/s,s]},backend:r}),i=JS(a,t.dtype,"max",r),o=DS({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(f,g,b,i);return h&&i.disposeIntermediateTensorInfo(f),y}};const nT={kernelName:xe,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;BI(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;l(Ai(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=wi(s.shape,a,i,1,o,u);if(1===c.filterWidth&&1===c.filterHeight&&f(c.inShape,c.outShape))return iS({inputs:{x:s},backend:n});const h=new fC(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};const rT={kernelName:we,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:a,output:i}=e,o=a;BI([a,i],"maxPoolBackprop");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=wi(o.shape,u,l,1,c,h),d=new fC(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new iC(p),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const sT={kernelName:ke,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=e,u=n;l(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const c=[1,1];l(Ai(a,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`));const h=wi(r.shape,s,a,c,i),[p,d]=function(t,e,n,r){let s=new fC(n,"max",!1);const a=r.runWebGLProgram(s,[t],"float32");return s=new fC(n,"max",!0,!0,e),[a,r.runWebGLProgram(s,[t],"float32")]}(r,o,h,u);return[p,d]}};const aT={kernelName:Ne,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{keepDims:s,axis:a}=e,i=n,o=r.shape.length,u=w(a,r.shape);let l=u;const c=oi(l,o),h=null!=c,p=i.shouldExecuteOnCPU([r]),f=[];let m=r;if(h){if(p){const t=i.texData.get(m.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=Uv(t,r.shape,r.dtype,c,e);m=i.makeTensorInfo(e,r.dtype);i.texData.get(m.dataId).values=n}else m=tT(r,c,i);f.push(m),l=li(l.length,o)}ii("sum",l,o);const[g,y]=si(m.shape,l);let b=g;s&&(b=ai(g,u));const x=function(t,e,n,r){const s=d(e),a=DS({inputs:{x:t},attrs:{shape:[d(t.shape)/s,s]},backend:r}),i=JS(a,"float32","mean",r),o=DS({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(m,y,b,i);for(const t of f)i.disposeIntermediateTensorInfo(t);return x}};class iT{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=i$(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class oT{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=i$(r),a=e.map((t=>t[0])).join(","),i=e.map(((e,n)=>e[0]+t[n])).join(","),o=HI("rc",r),u=HI("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const t=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${t}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const t=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${t}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${t}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${t}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${t}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const uT={kernelName:$e,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r}=t,{paddings:s,mode:a}=n,i=G().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new oT(r.shape,s,a):new iT(r.shape,s,a);return e.runWebGLProgram(i,[r],r.dtype)}},lT="return areal * breal - aimag * bimag;",cT="return areal * bimag + aimag * breal;";class hT{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=ho(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const pT="return a * b;";const dT={kernelName:Ce,backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n}=t,{a:r,b:s}=e,a=ar(r.dtype,s.dtype);if("complex64"===r.dtype){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),a=new hT(lT,r.shape,s.shape),i=new hT(cT,r.shape,s.shape),o=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=uS({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),[i,o]=Nv(r.shape,s.shape,t.values,e.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=G().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new m$(pT,r.shape,s.shape):new d$(pT,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}},fT={kernelName:Ee,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,u=e;return uc(u.readSync(r.dataId),u.readSync(s.dataId),a,i,o)}},mT=lc,gT={kernelName:Ae,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),{selectedIndices:p,validOutputs:d}=mT(c,h,a,i,o,u);return[p,d]}},yT=cc,bT={kernelName:Re,backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Zc("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:r,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=n,l=e,c=l.readSync(r.dataId),h=l.readSync(s.dataId),p=a,d=i,f=o,m=u,{selectedIndices:g,selectedScores:y}=yT(c,h,p,d,f,m);return[g,y]}};class xT{constructor(t,e,n,r){this.variableNames=["Image"],this.outputShape=[];const s=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[u,l]=Gc(r,s,a),c=u.toFixed(3),h=l.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const wT={kernelName:bn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:a,center:i}=e,o=n,u=new xT(r.shape,s,a,i);return o.runWebGLProgram(u,[r],r.dtype)}},vT=cS("if (isnan(x)) return x;\n  return sin(x);\n"),kT={kernelName:Xe,backendName:"webgl",kernelFunc:vT},NT={kernelName:an,backendName:"webgl",kernelFunc:cS("return x * x;")},IT="return (a - b) * (a - b);",$T=hS({opSnippet:IT,packedOpSnippet:IT}),CT={kernelName:sn,backendName:"webgl",kernelFunc:$T},ST="return a - b;",TT=hS({opSnippet:ST,packedOpSnippet:ST,supportsComplex:!0,cpuKernelImpl:Bv}),ET={kernelName:on,backendName:"webgl",kernelFunc:TT},AT=cS("return tan(x);");const RT=[fS,gS,yS,bS,vS,CS,lS,OS,LS,BS,VS,GS,qS,oS,XS,RS,eT,nT,rT,sT,aT,uT,dT,fT,gT,bT,NS,$S,_S,wT,kT,NT,ET,CT,{kernelName:un,backendName:"webgl",kernelFunc:AT},{kernelName:hn,backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{perm:s}=e,a=n,i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[s[t]];let u;if(a.shouldExecuteOnCPU([r])){const t=Uv(a.texData.get(r.dataId).values,r.shape,r.dtype,s,o);u=a.makeTensorInfo(o,r.dtype);a.texData.get(u.dataId).values=t}else u=tT(r,s,a);return u}},{kernelName:pn,backendName:"webgl",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:a}=e;BI(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=Gv(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}}];for(const t of RT)Sn(t);const DT=2*Math.PI;const _T="accordion-mp3\nacoustic_bass-mp3\nacoustic_grand_piano-mp3\nacoustic_guitar_nylon-mp3\nacoustic_guitar_steel-mp3\nagogo-mp3\nalto_sax-mp3\napplause-mp3\nbagpipe-mp3\nbanjo-mp3\nbaritone_sax-mp3\nbassoon-mp3\nbird_tweet-mp3\nblown_bottle-mp3\nbrass_section-mp3\nbreath_noise-mp3\nbright_acoustic_piano-mp3\ncelesta-mp3\ncello-mp3\nchoir_aahs-mp3\nchurch_organ-mp3\nclarinet-mp3\nclavinet-mp3\ncontrabass-mp3\ndistortion_guitar-mp3\ndrawbar_organ-mp3\ndulcimer-mp3\nelectric_bass_finger-mp3\nelectric_bass_pick-mp3\nelectric_grand_piano-mp3\nelectric_guitar_clean-mp3\nelectric_guitar_jazz-mp3\nelectric_guitar_muted-mp3\nelectric_piano_1-mp3\nelectric_piano_2-mp3\nenglish_horn-mp3\nfiddle-mp3\nflute-mp3\nfrench_horn-mp3\nfretless_bass-mp3\nfx_1_rain-mp3\nfx_2_soundtrack-mp3\nfx_3_crystal-mp3\nfx_4_atmosphere-mp3\nfx_5_brightness-mp3\nfx_6_goblins-mp3\nfx_7_echoes-mp3\nfx_8_scifi-mp3\nglockenspiel-mp3\nguitar_fret_noise-mp3\nguitar_harmonics-mp3\ngunshot-mp3\nharmonica-mp3\nharpsichord-mp3\nhelicopter-mp3\nhonkytonk_piano-mp3\nkalimba-mp3\nkoto-mp3\nlead_1_square-mp3\nlead_2_sawtooth-mp3\nlead_3_calliope-mp3\nlead_4_chiff-mp3\nlead_5_charang-mp3\nlead_6_voice-mp3\nlead_7_fifths-mp3\nlead_8_bass__lead-mp3\nmarimba-mp3\nmelodic_tom-mp3\nmusic_box-mp3\nmuted_trumpet-mp3\noboe-mp3\nocarina-mp3\norchestra_hit-mp3\norchestral_harp-mp3\noverdriven_guitar-mp3\npad_1_new_age-mp3\npad_2_warm-mp3\npad_3_polysynth-mp3\npad_4_choir-mp3\npad_5_bowed-mp3\npad_6_metallic-mp3\npad_7_halo-mp3\npad_8_sweep-mp3\npan_flute-mp3\npercussive_organ-mp3\npiccolo-mp3\npizzicato_strings-mp3\nrecorder-mp3\nreed_organ-mp3\nreverse_cymbal-mp3\nrock_organ-mp3\nseashore-mp3\nshakuhachi-mp3\nshamisen-mp3\nshanai-mp3\nsitar-mp3\nslap_bass_1-mp3\nslap_bass_2-mp3\nsoprano_sax-mp3\nsteel_drums-mp3\nstring_ensemble_1-mp3\nstring_ensemble_2-mp3\nsynth_bass_1-mp3\nsynth_bass_2-mp3\nsynth_brass_1-mp3\nsynth_brass_2-mp3\nsynth_choir-mp3\nsynth_drum-mp3\nsynth_strings_1-mp3\nsynth_strings_2-mp3\ntaiko_drum-mp3\ntango_accordion-mp3\ntelephone_ring-mp3\ntenor_sax-mp3\ntimpani-mp3\ntinkle_bell-mp3\ntremolo_strings-mp3\ntrombone-mp3\ntrumpet-mp3\ntuba-mp3\ntubular_bells-mp3\nvibraphone-mp3\nviola-mp3\nviolin-mp3\nvoice_oohs-mp3\nwhistle-mp3\nwoodblock-mp3\nxylophone-mp3".split("\n"),FT=()=>_T[Math.floor(Math.random()*_T.length)];let OT,MT,LT,zT,BT,PT,WT,VT,UT,GT=0,HT=!1,jT=!1;const qT=()=>{const t=requestAnimationFrame(qT);return VT.getByteFrequencyData(LT),t},KT=()=>{const t=BT.gain.value+.1*(GT-BT.gain.value);BT.gain.setValueAtTime(t,OT.currentTime),BT.gain.value===GT||requestAnimationFrame(KT)},XT=t=>{GT=t,KT()};const YT=(t="mp3",e=".")=>{const n=["A","Ab","B","Bb","C","D","Db","E","Eb","F","G","Gb"],r=[];for(let s=0;s<n.length;++s){const a=n[s];"A"===a&&r.push(`A0${e}${t}`);for(let n=1;n<8;++n)r.push(`${a}${n}${e}${t}`);"C"===a&&r.push(`C8${e}${t}`)}return r},JT=YT("",""),ZT=(t="alto_sax-mp3",e="./FluidR3_GM")=>{const n=`${e}/${t}`;return YT().map((t=>async function(t){const e=await fetch(t),n=await e.arrayBuffer();return await OT.decodeAudioData(n)}(`${n}/${t}`)))},QT=async(t="alto_sax-mp3",e="./FluidR3_GM",n)=>{const r={title:t},s=await Promise.all(ZT(t,e));return JT.forEach(((t,e)=>{r[t.split(".")[0]]=s[e]})),r};const tE=async t=>async function(t){return new Promise((async(e,n)=>{t=t||document.createElement("video");const r=await navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user",width:640,height:640}});t.onloadedmetadata=n=>{t.play(),t.width=t.videoWidth,t.height=t.videoHeight,console.log("Video camera",t),e(r)},t.srcObject=r}))}(t);const eE=async t=>async function(t){return new Promise((async(e,n)=>{const r=()=>{t.width=t.naturalWidth,t.height=t.naturalHeight};t.naturalWidth>0?(r(),e(t)):(t.onloaded=()=>{r(),e(t)},t.onerror=t=>n(t))}))}(t),nE=document.querySelector("canvas"),rE=nE.getContext("2d"),sE=nE.width,aE=nE.height;rE.save();const iE=(t,e=4,n="red",r=!0)=>{rE.fillStyle=n,rE.strokeStyle=n,rE.moveTo(t[0][0],t[0][1]),rE.beginPath();for(let n=0,s=t.length;n<s;n++){const s=t[n][0],a=t[n][1];rE.arc(s,a,e,0,DT),r&&rE.lineTo(s,a)}rE.fill(),r&&rE.stroke()},oE=(t,e="blue")=>{rE.fillStyle=e;for(let e=0;e<t.length;e++){const n=t[e][0],r=t[e][1],s=t[e][2],a=1+.8*Math.abs(s);rE.beginPath(),rE.arc(n,r,a,0,DT),rE.fill()}},uE=t=>{const{scaledMesh:e,annotations:n}=t,{lipsUpperInner:r,lipsLowerInner:s}=n;iE(r),iE(s),((t,e,n="yellow")=>{const r=[t,e],s=t[5],a=e[5],i=a[1]-s[1];rE.fillStyle=n,rE.beginPath(),rE.moveTo(t[0][0],t[0][1]);for(let t=0,e=r.length;t<e;t++){const e=r[t];for(let t=0,n=e.length;t<n;t++){const n=e[t][0],r=e[t][1];rE.lineTo(n,r)}}rE.fill(),rE.fillStyle="blue",rE.beginPath(),rE.arc(s[0],s[1],5,0,DT),rE.fill(),rE.beginPath(),rE.arc(a[0],a[1],5,0,DT),rE.fill(),rE.beginPath(),rE.moveTo(s[0],s[1]),rE.strokeStyle="orange",rE.fillStyle="orange",rE.lineTo(a[0],a[1]),rE.stroke(),rE.font="12px Oxanium",rE.textAlign="center",rE.fillText(`${Math.floor(i)}px`,a[0],a[1]-20)})(r,s,"rgba(255,0,0,0.5)");const{leftEyeIris:a,rightEyeIris:i}=n;oE(a),oE(i);const{leftEyeLower0:o,rightEyeLower0:u,midwayBetweenEyes:l}=n;iE(l,"green"),iE(o,"red"),iE(u,"red")},lE=document.querySelector("main"),cE=document.querySelector("video"),hE=document.querySelector("img"),pE=document.getElementById("feedback"),dE=function(t){return t*t*t};let fE,mE,gE,yE,bE=hE;const xE=async()=>{const t=FT();console.log("Loading random instrument",t),await QT(t)};nE.addEventListener("mousedown",xE),cE.addEventListener("mousedown",xE),lE.classList.add("loading"),pE.innerHTML="Initialising...<br> Please wait",async function(t){await fr.ready(),console.log("Loading models",Rf);const e=await _f(Rf.mediapipeFacemesh,t);console.log("Loaded model",e),pE.innerHTML="Loading model";const n=async(t,r)=>{const s=await async function(t){const e=await t.estimateFaces({input:bE});if(e.length>0)for(let t=0,n=e.length;t<n;t++){const n=e[t],{boundingBox:r,mesh:s,scaledMesh:a,annotations:i}=n,{leftEyeIris:o,rightEyeIris:u}=i,{leftEyeLower0:l,rightEyeLower0:c,midwayBetweenEyes:h}=i,p=o[0],d=u[0],f=h[0],m=p[2]<d[2],g=(l[0][0],c[0][0],h[0][0],.5-Math.atan(f[2],-1*f[0])/(2*Math.PI)),y=.5-Math.asin(f[1])/Math.PI,b=1;n.pitch=y,n.roll=b,n.yaw=g;const{rightCheek:x,leftCheek:w,silhouette:v}=i;iE(v,5,"rgba(255,255,0,0.5)",!0),n.lookingRight=m;const{lipsUpperInner:k,lipsLowerInner:N}=i,I=k[5],$=N[5][1]-I[1];n.mouthRange=$,n.happiness=0}return e}(e);if(s.length>0){const t=s[0];rE.drawImage(bE,0,0),((t,e="brown")=>{const{scaledMesh:n}=t;rE.fillStyle=e;for(let t=0;t<n.length;t++){const e=n[t][0],r=n[t][1],s=n[t][2],a=1+.01*Math.abs(100-s);rE.beginPath(),rE.arc(e,r,a,0,DT),rE.fill()}})(t),uE(t),((t,e)=>{const n=sE/e*2;let r,s=0;for(var a=0;a<e;a++)r=t[a],rE.fillStyle="hsla("+360*r+",50%,50%,0.8)",rE.fillRect(s,aE-r/2,n,r/2),s+=n+1})(LT,MT),r&&r(t)}else r&&r(null);t&&requestAnimationFrame((()=>n(t,r)))};return n}({maxFaces:1,shouldLoadIrisModel:!0}).then((async t=>{try{mE=await tE(cE),pE.innerHTML="Camera located...<br> Please wait",gE=await eE(hE),pE.innerHTML="Image downloaded...<br> Please wait",OT=new(window.AudioContext||window.webkitAudioContext),BT=OT.createGain(),BT.gain.value=0,zT=OT.createOscillator(),zT.type="sine",UT=OT.createDynamicsCompressor(),PT=OT.createDelay(100),WT=OT.createGain(),PT.delayTime.value=.01,WT.gain.value=.1,VT=OT.createAnalyser(),VT.minDecibels=-90,VT.maxDecibels=-10,VT.smoothingTimeConstant=.85,VT.fftSize=2048,MT=VT.fftSize,VT.fftSize=256,MT=VT.frequencyBinCount,LT=new Uint8Array(MT),zT.frequency.value=261.63,zT.connect(PT),PT.connect(WT),WT.connect(PT),PT.connect(BT),BT.connect(UT),UT.connect(VT),VT.connect(OT.destination),yE={audioContext:OT,oscillator:zT,analyser:VT,gain:BT},pE.innerHTML="Audio Available...<br> Please wait",XT(.5),fE=await QT(FT()),console.log("instrument",fE),pE.innerHTML="Samples available...<br> Please wait",console.log("Streamin",{video:cE,photo:gE,camera:mE})}catch(t){console.error("Bummer",t),pE.innerHTML="Something went wrong :(<br>"+t}bE=cE,nE.width=bE.width,nE.height=bE.height,console.error("Tensorflow",n),lE.classList.add(bE.nodeName.toLowerCase()),lE.classList.remove("loading"),pE.innerHTML="Open your mouth!";const e=[];t(bE===cE,(t=>{if(!(t&&t.faceInViewConfidence>.9))return HT&&(HT=!1,zT.disconnect()),console.error("stop audio",{playing:HT}),void(pE.innerHTML="Come back! I need to see your face!");HT||("suspended"===OT.state&&OT.resume(),zT.connect(PT),HT=!0,qT());const n=t.mouthRange/40,r=Math.abs(t.yaw),s=(Math.abs(t.pitch),i=0,(a=n)>(o=1)?o:a<i?i:a);var a,i,o;const u=dE(s);if(s>.3){const t=Math.floor(r*JT.length),n=((t,e=0,n={loop:!1})=>{const r=OT.createBufferSource();return r.buffer=t,r.loop=n.loop,r.connect(PT),r.onended=()=>{r.disconnect(),jT=!1},0==e?r.start():r.start(0,OT.currentTime-e),jT=!0,r})(fE[JT[t]],0,!1);e.push(n)}XT(u),pE.innerHTML=`PITCH:${t.pitch} YAW:${t.yaw} MOUTH:${100*s}% -> ${fE.title}`}))}))}();
//# sourceMappingURL=index.e5a19c04.js.map
