{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-936fa46e1bcea52b.js","source/audio/wam2/sampler/index.js","node_modules/@webaudiomodules/sdk/dist/index.js","node_modules/@webaudiomodules/sdk/src/WebAudioModule.js","node_modules/@webaudiomodules/sdk/src/RingBuffer.js","node_modules/@webaudiomodules/sdk/src/WamArrayRingBuffer.js","node_modules/@webaudiomodules/sdk/src/WamEnv.js","node_modules/@webaudiomodules/sdk/src/WamGroup.js","node_modules/@webaudiomodules/sdk/src/WamEventRingBuffer.js","node_modules/@webaudiomodules/sdk/src/addFunctionModule.js","node_modules/@webaudiomodules/sdk/src/WamParameter.js","node_modules/@webaudiomodules/sdk/src/WamParameterInfo.js","node_modules/@webaudiomodules/sdk/src/WamParameterInterpolator.js","node_modules/@webaudiomodules/sdk/src/WamProcessor.js","node_modules/@webaudiomodules/sdk/src/WamNode.js","node_modules/@webaudiomodules/sdk/src/apiVersion.js","node_modules/@webaudiomodules/sdk/src/initializeWamHost.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","node_modules/@webaudiomodules/sdk-parammgr/dist/index.js","node_modules/@webaudiomodules/sdk-parammgr/src/CompositeAudioNode.js","node_modules/@webaudiomodules/sdk-parammgr/src/sdk/src/addFunctionModule.js","node_modules/@webaudiomodules/sdk-parammgr/src/ParamMgrProcessor.js","node_modules/@webaudiomodules/sdk-parammgr/src/sdk/src/WamParameterInfo.js","node_modules/@webaudiomodules/sdk-parammgr/src/ParamConfigurator.js","node_modules/@webaudiomodules/sdk-parammgr/src/MgrAudioParam.js","node_modules/@webaudiomodules/sdk-parammgr/src/ParamMgrNode.js","node_modules/@webaudiomodules/sdk-parammgr/src/ParamMgrFactory.js","source/audio/wam2/sampler/sampler.wam.js","node_modules/@parcel/runtime-js/lib/runtime-20673cbfc75da33b.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","source/audio/wam2/sampler/descriptor.json"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"1689aeb8f1a97295\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n\n  // Web extension context\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { WebAudioModule } from '@webaudiomodules/sdk'\r\nimport { ParamMgrFactory } from '@webaudiomodules/sdk-parammgr'\r\nimport Sampler from './sampler.wam.js'\r\n\r\nimport descriptorJSONURL from 'url:./descriptor.json'\r\nimport descriptorJSON from './descriptor.json'\r\n// import templateURL from 'url:./template.html'\r\n\r\nconst NAME = \"sampler\"\r\n\r\n\r\nconst getBaseUrl = relativeUrl => relativeUrl.substring(0, relativeUrl.lastIndexOf('/'));\r\n\r\n\r\nexport default class SamplerPlugin extends WebAudioModule {\r\n\t\r\n\t_baseUrl = getBaseUrl(descriptorJSONURL)\r\n\t_descriptorUrl = descriptorJSONURL // `${this._baseUrl}/wam2/${NAME}/descriptor.json`\r\n\t_descriptor = descriptorJSON\r\n\t// _templateUrl = templateURL\r\n\t/**\r\n\t * Overide and intercept the descriptor file\r\n\t * @param {Object} initialState \r\n\t * @returns \r\n\t */\r\n\tasync initialize(initialState) {\r\n\t\t// we embed the JSON so no need to fetch JSON\r\n\t\t// await this._loadDescriptor()\r\n\t\t// const templateRes = await fetch(this._templateUrl)\r\n\t\t// this.templateHtmlStr = await templateRes.text()\r\n\t\tif (initialState){\r\n\t\t\t// populate state\r\n\t\t}\r\n\t\treturn super.initialize(initialState)\r\n\t}\r\n\r\n\t// The plugin redefines the async method createAudionode()\r\n\t// that must return an <Audionode>\r\n\tasync createAudioNode(options) {\r\n\t\t// const gainNode = new GainNode(this.audioContext, options)\r\n\t\t// createSamplerEngine\r\n\t\tconst sampler = new Sampler(this.audioContext, options)\r\n\t\tconst internalParamsConfig = {\r\n            gain: 1\r\n\t\t}\r\n\t\tconst paramMgrNode = await ParamMgrFactory.create(this, {\r\n\t\t\tinternalParamsConfig\r\n\t\t})\r\n\t\t\r\n\t\tsampler.setup( paramMgrNode )\r\n\r\n\t\treturn sampler\r\n\t}\r\n\t\r\n\t/**\r\n\t * Make a front end available to all apps\r\n\t * this should be a combination of parameters\r\n\t * that align with the parameters of the synthesizzer\r\n\t * \r\n\t * @returns HTMLElement\r\n\t */\r\n\tasync createGui() {\r\n\t\t// return createElement(this)\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @returns \r\n\t\r\n\tasync setState(){\r\n\t\treturn super.setState()\r\n\t}\r\n\r\n\tasync getState(){\r\n\t\treturn super.getState()\r\n\t}\r\n */\r\n}",null,"/** @typedef {import('@webaudiomodules/api').WamDescriptor} WamDescriptor */\n/** @typedef {import('@webaudiomodules/api').WamNode} WamNode */\n/** @template T @typedef {import('@webaudiomodules/api').WebAudioModule} IWebAudioModule<T> */\n\n/** @implements {IWebAudioModule<WamNode>} */\nclass WebAudioModule {\n\tstatic get isWebAudioModuleConstructor() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} groupId\n\t * @param {BaseAudioContext} audioContext\n\t * @param {any} [initialState]\n\t * @returns {Promise<IWebAudioModule<any>>}\n\t */\n\tstatic createInstance(groupId, audioContext, initialState) {\n\t\treturn new this(groupId, audioContext).initialize(initialState);\n\t}\n\n\t/** \n\t * @param {string} groupId\n\t * @param {BaseAudioContext} audioContext \n\t */\n\tconstructor(groupId, audioContext) {\n\t\tthis._groupId = groupId;\n\t\tthis._audioContext = audioContext;\n\t\tthis._initialized = false;\n\t\t/** @type {WamNode} */\n\t\tthis._audioNode = undefined;\n\t\tthis._timestamp = performance.now();\n\t\t/**\n\t\t * Url to load the plugin's GUI HTML\n\t\t * @type {string}\n\t\t */\n\t\tthis._guiModuleUrl = undefined;\n\t\t/**\n\t\t * Url to load the plugin's `descriptor.json`\n\t\t * @type {string}\n\t\t */\n\t\tthis._descriptorUrl = './descriptor.json';\n\t\t/** @type {WamDescriptor} */\n\t\tthis._descriptor = {\n\t\t\tidentifier: `com.webaudiomodule.default`,\n\t\t\tname: `WebAudioModule_${this.constructor.name}`,\n\t\t\tvendor: 'WebAudioModuleVendor',\n\t\t\tdescription: '',\n\t\t\tversion: '0.0.0',\n\t\t\tapiVersion: '2.0.0',\n\t\t\tthumbnail: '',\n\t\t\tkeywords: [],\n\t\t\tisInstrument: false,\n\t\t\twebsite: '',\n\t\t\thasAudioInput: true,\n\t\t\thasAudioOutput: true,\n\t\t\thasAutomationInput: true,\n\t\t\thasAutomationOutput: true,\n\t\t\thasMidiInput: true,\n\t\t\thasMidiOutput: true,\n\t\t\thasMpeInput: true,\n\t\t\thasMpeOutput: true,\n\t\t\thasOscInput: true,\n\t\t\thasOscOutput: true,\n\t\t\thasSysexInput: true,\n\t\t\thasSysexOutput: true,\n\t\t};\n\t}\n\n\tget isWebAudioModule() {\n\t\treturn true;\n\t}\n\n\tget groupId() { return this._groupId; }\n\n\tget moduleId() { return this.descriptor.identifier; }\n\n\tget instanceId() { return this.moduleId + this._timestamp; }\n\n\tget descriptor() { return this._descriptor; }\n\n\tget identifier() { return this.descriptor.identifier; }\n\n\tget name() { return this.descriptor.name; }\n\n\tget vendor() { return this.descriptor.vendor; }\n\n\tget audioContext() {\n\t\treturn this._audioContext;\n\t}\n\n\tget audioNode() {\n\t\tif (!this.initialized) console.warn('WAM should be initialized before getting the audioNode');\n\t\treturn this._audioNode;\n\t}\n\n\tset audioNode(node) {\n\t\tthis._audioNode = node;\n\t}\n\n\tget initialized() {\n\t\treturn this._initialized;\n\t}\n\n\tset initialized(value) {\n\t\tthis._initialized = value;\n\t}\n\n\t/**\n\t * @param {any} [initialState]\n\t * @returns {Promise<WamNode>}\n\t */\n\tasync createAudioNode(initialState) {\n\t\t// should return a subclass of WamNode\n\t\tthrow new TypeError('createAudioNode() not provided');\n\t}\n\n\t/**\n\t * @param {any} [state]\n\t * @returns {Promise<WebAudioModule>}\n\t */\n\tasync initialize(state) {\n\t\t// await this._loadDescriptor();\n\t\tif (!this._audioNode) this.audioNode = await this.createAudioNode();\n\t\tthis.initialized = true;\n\t\treturn this;\n\t}\n\n\tasync _loadGui() {\n\t\tconst url = this._guiModuleUrl;\n\t\tif (!url) throw new TypeError('Gui module not found');\n\t\t// @ts-ignore\n\t\treturn import(/* webpackIgnore: true */url);\n\t}\n\n\tasync _loadDescriptor() {\n\t\tconst url = this._descriptorUrl;\n\t\tif (!url) throw new TypeError('Descriptor not found');\n\t\tconst response = await fetch(url);\n\t\tconst descriptor = await response.json();\n\t\tObject.assign(this._descriptor, descriptor);\n\t\treturn this._descriptor;\n\t}\n\n\t/**\n\t * @returns {Promise<HTMLElement>}\n\t */\n\tasync createGui() {\n\t\tif (!this.initialized) console.warn('Plugin should be initialized before getting the gui');\n\t\t// Do not fail if no gui is present, just return undefined\n\t\tif (!this._guiModuleUrl) return undefined;\n\t\tconst { createElement } = await this._loadGui();\n\t\treturn createElement(this);\n\t}\n\n\tdestroyGui() {}\n}\n\nexport default WebAudioModule;\n","/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n/** @typedef {import('./types').TypedArrayConstructor} TypedArrayConstructor */\n/** @typedef {import('./types').TypedArray} TypedArray */\n/** @typedef {import('./types').RingBuffer} IRingBuffer */\n/** @typedef {typeof import('./types').RingBuffer} RingBufferConstructor */\n\n/**\n * @param {string} [moduleId]\n * @returns {RingBufferConstructor}\n */\nconst getRingBuffer = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * A Single Producer - Single Consumer thread-safe wait-free ring buffer.\n\t * The producer and the consumer can be on separate threads, but cannot change roles,\n\t * except with external synchronization. Adapted from https://github.com/padenot/ringbuf.js\n\t * MPL-2.0 License (see RingBuffer_LICENSE.txt)\n\t *\n\t * @implements {IRingBuffer}\n\t * @author padenot\n\t */\n\tclass RingBuffer {\n\t\t/**\n\t\t * @param {number} capacity\n\t\t * @param {TypedArrayConstructor} Type\n\t\t */\n\t\tstatic getStorageForCapacity(capacity, Type) {\n\t\t\tif (!Type.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass in a ArrayBuffer subclass');\n\t\t\t}\n\t\t\tconst bytes = 8 + (capacity + 1) * Type.BYTES_PER_ELEMENT;\n\t\t\treturn new SharedArrayBuffer(bytes);\n\t\t}\n\n\t\t/**\n\t\t * `sab` is a SharedArrayBuffer with a capacity calculated by calling\n\t\t * `getStorageForCapacity` with the desired capacity.\n\t\t *\n\t\t * @param {SharedArrayBuffer} sab\n\t\t * @param {TypedArrayConstructor} Type\n\t\t */\n\t\tconstructor(sab, Type) {\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tif (!Type.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass a concrete typed array class as second argument');\n\t\t\t}\n\n\t\t\t// Maximum usable size is 1<<32 - type.BYTES_PER_ELEMENT bytes in the ring\n\t\t\t// buffer for this version, easily changeable.\n\t\t\t// -4 for the write ptr (uint32_t offsets)\n\t\t\t// -4 for the read ptr (uint32_t offsets)\n\t\t\t// capacity counts the empty slot to distinguish between full and empty.\n\t\t\tthis._Type = Type;\n\t\t\tthis._capacity = (sab.byteLength - 8) / Type.BYTES_PER_ELEMENT;\n\t\t\tthis.buf = sab;\n\t\t\tthis.write_ptr = new Uint32Array(this.buf, 0, 1);\n\t\t\tthis.read_ptr = new Uint32Array(this.buf, 4, 1);\n\t\t\tthis.storage = new Type(this.buf, 8, this._capacity);\n\t\t}\n\n\t\t/**\n\t\t * Returns the type of the underlying ArrayBuffer for this RingBuffer. This\n\t\t * allows implementing crude type checking.\n\t\t */\n\t\tget type() {\n\t\t\treturn this._Type.name;\n\t\t}\n\n\t\t/**\n\t\t * Push bytes to the ring buffer. `elements` is a typed array of the same type\n\t\t * as passed in the ctor, to be written to the queue.\n\t\t * Returns the number of elements written to the queue.\n\t\t *\n\t\t * @param {TypedArray} elements\n\t\t */\n\t\tpush(elements) {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\tif ((wr + 1) % this._storageCapacity() === rd) {\n\t\t\t\t// full\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tconst toWrite = Math.min(this._availableWrite(rd, wr), elements.length);\n\t\t\tconst firstPart = Math.min(this._storageCapacity() - wr, toWrite);\n\t\t\tconst secondPart = toWrite - firstPart;\n\n\t\t\tthis._copy(elements, 0, this.storage, wr, firstPart);\n\t\t\tthis._copy(elements, firstPart, this.storage, 0, secondPart);\n\n\t\t\t// publish the enqueued data to the other side\n\t\t\tAtomics.store(\n\t\t\t\tthis.write_ptr,\n\t\t\t\t0,\n\t\t\t\t(wr + toWrite) % this._storageCapacity(),\n\t\t\t);\n\n\t\t\treturn toWrite;\n\t\t}\n\n\t\t/**\n\t\t * Read `elements.length` elements from the ring buffer if `elements` is a typed\n\t\t * array of the same type as passed in the ctor. If `elements` is an integer,\n\t\t * pop and discard that many elements from the ring buffer.\n\t\t * Returns the number of elements read from the queue, they are placed at the\n\t\t * beginning of the array passed as parameter if `elements` is not an integer.\n\t\t *\n\t\t * @param {TypedArray | number} elements\n\t\t */\n\t\tpop(elements) {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\tif (wr === rd) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tconst isArray = !Number.isInteger(elements);\n\t\t\t// @ts-ignore\n\t\t\tconst toRead = Math.min(this._availableRead(rd, wr), isArray ? elements.length : elements);\n\n\t\t\tif (isArray) {\n\t\t\t\tconst firstPart = Math.min(this._storageCapacity() - rd, toRead);\n\t\t\t\tconst secondPart = toRead - firstPart;\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis._copy(this.storage, rd, elements, 0, firstPart);\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis._copy(this.storage, 0, elements, firstPart, secondPart);\n\t\t\t}\n\t\t\tAtomics.store(this.read_ptr, 0, (rd + toRead) % this._storageCapacity());\n\n\t\t\treturn toRead;\n\t\t}\n\n\t\t/**\n\t\t * True if the ring buffer is empty false otherwise. This can be late on the\n\t\t * reader side: it can return true even if something has just been pushed.\n\t\t */\n\t\tget empty() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\treturn wr === rd;\n\t\t}\n\n\t\t/**\n\t\t * True if the ring buffer is full, false otherwise. This can be late on the\n\t\t * write side: it can return true when something has just been popped.\n\t\t */\n\t\tget full() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\n\t\t\treturn (wr + 1) % this._capacity !== rd;\n\t\t}\n\n\t\t/**\n\t\t * The usable capacity for the ring buffer: the number of elements that can be\n\t\t * stored.\n\t\t */\n\t\tget capacity() {\n\t\t\treturn this._capacity - 1;\n\t\t}\n\n\t\t/**\n\t\t * Number of elements available for reading. This can be late, and report less\n\t\t * elements that is actually in the queue, when something has just been\n\t\t * enqueued.\n\t\t */\n\t\tget availableRead() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\t\t\treturn this._availableRead(rd, wr);\n\t\t}\n\n\t\t/**\n\t\t * Number of elements available for writing. This can be late, and report less\n\t\t * elements that is actually available for writing, when something has just\n\t\t * been dequeued.\n\t\t */\n\t\tget availableWrite() {\n\t\t\tconst rd = Atomics.load(this.read_ptr, 0);\n\t\t\tconst wr = Atomics.load(this.write_ptr, 0);\n\t\t\treturn this._availableWrite(rd, wr);\n\t\t}\n\n\t\t// private methods //\n\n\t\t/**\n\t\t * Number of elements available for reading, given a read and write pointer..\n\t\t *\n\t\t * @param {number} rd\n\t\t * @param {number} wr\n\t\t */\n\t\t_availableRead(rd, wr) {\n\t\t\tif (wr > rd) {\n\t\t\t\treturn wr - rd;\n\t\t\t}\n\t\t\treturn wr + this._storageCapacity() - rd;\n\t\t}\n\n\t\t/**\n\t\t * Number of elements available from writing, given a read and write pointer.\n\t\t *\n\t\t * @param {number} rd\n\t\t * @param {number} wr\n\t\t */\n\t\t_availableWrite(rd, wr) {\n\t\t\tlet rv = rd - wr - 1;\n\t\t\tif (wr >= rd) {\n\t\t\t\trv += this._storageCapacity();\n\t\t\t}\n\t\t\treturn rv;\n\t\t}\n\n\t\t/**\n\t\t * The size of the storage for elements not accounting the space for the index.\n\t\t */\n\t\t_storageCapacity() {\n\t\t\treturn this._capacity;\n\t\t}\n\n\t\t/**\n\t\t * Copy `size` elements from `input`, starting at offset `offset_input`, to\n\t\t * `output`, starting at offset `offset_output`.\n\t\t *\n\t\t * @param {TypedArray} input\n\t\t * @param {number} offsetInput\n\t\t * @param {TypedArray} output\n\t\t * @param {number} offsetOutput\n\t\t * @param {number} size\n\t\t */\n\t\t_copy(input, offsetInput, output, offsetOutput, size) {\n\t\t\tfor (let i = 0; i < size; i++) {\n\t\t\t\toutput[offsetOutput + i] = input[offsetInput + i];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\t\tif (!ModuleScope.RingBuffer) ModuleScope.RingBuffer = RingBuffer;\n\t}\n\n\treturn RingBuffer;\n};\n\nexport default getRingBuffer;\n\n/* Usage in main thread:\nimport executable from 'RingBuffer.js';\nconst RingBuffer = executable();\n*/\n\n/* Usage in audio thread:\n// in main thread:\naudioWorklet.addModule('RingBuffer.js');\n// in audio thread\nconst { RingBuffer } = globalThis;\n*/\n\n/* Usage in audio thread with a build system:\n// in main thread:\nimport getRingBuffer from 'RingBuffer.js';\nconst blob = new Blob([`(${getRingBuffer.toString()})(JSON.stringify(moduleId));`], { type: 'text/javascript' });\nconst url = window.URL.createObjectURL(blob);\naudioWorklet.addModule(url);\n// in audio thread\nconst { RingBuffer } = globalThis.webAudioModules.dependencies[moduleId];\n*/\n","/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {typeof import('./types').RingBuffer} RingBufferConstructor */\n/** @typedef {import('./types').RingBuffer} RingBuffer */\n/** @typedef {import('./types').TypedArray} TypedArray */\n/** @typedef {import('./types').TypedArrayConstructor} TypedArrayConstructor */\n/** @typedef {import('./types').WamArrayRingBuffer} IWamArrayRingBuffer */\n/** @typedef {typeof import('./types').WamArrayRingBuffer} WamArrayRingBufferConstructor */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamArrayRingBufferConstructor}\n */\nconst getWamArrayRingBuffer = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @implements {IWamArrayRingBuffer}\n\t */\n\tclass WamArrayRingBuffer {\n\t\t/**\n\t\t * Default number of arrays for which memory will be allocated.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic DefaultArrayCapacity = 2;\n\n\t\t/**\n\t\t * Returns a SharedArrayBuffer large enough to safely store the\n\t\t * specified number of arrays of the specified length. Specify\n\t\t * `maxArrayCapacity` to support storing more than\n\t\t * `DefaultArrayCapacity` arrays in the buffer.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {number} arrayLength\n\t\t * @param {TypedArrayConstructor} arrayType\n\t\t * @param {number} [maxArrayCapacity=undefined]\n\t\t * @returns {SharedArrayBuffer}\n\t\t */\n\t\tstatic getStorageForEventCapacity(RingBuffer, arrayLength, arrayType, maxArrayCapacity = undefined) {\n\t\t\tif (maxArrayCapacity === undefined) maxArrayCapacity = WamArrayRingBuffer.DefaultArrayCapacity;\n\t\t\telse maxArrayCapacity = Math.max(maxArrayCapacity, WamArrayRingBuffer.DefaultArrayCapacity);\n\t\t\tif (!arrayType.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass in a ArrayBuffer subclass');\n\t\t\t}\n\t\t\tconst capacity = arrayLength * maxArrayCapacity;\n\t\t\treturn RingBuffer.getStorageForCapacity(capacity, arrayType);\n\t\t}\n\n\t\t/**\n\t\t * Provides methods for writing / reading arrays to / from a\n\t\t * RingBuffer. Specify `maxArrayCapacity` to support storing more\n\t \t * than `DefaultArrayCapacity` arrays in the buffer.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {SharedArrayBuffer} sab\n\t\t * @param {number} arrayLength\n\t\t * @param {TypedArrayConstructor} arrayType\n\t\t * @param {number} [maxArrayCapacity=undefined]\n\t\t */\n\t\tconstructor(RingBuffer, sab, arrayLength, arrayType, maxArrayCapacity = undefined) {\n\t\t\tif (!arrayType.BYTES_PER_ELEMENT) {\n\t\t\t\tthrow new Error('Pass in a ArrayBuffer subclass');\n\t\t\t}\n\n\t\t\t/** @type {number} */\n\t\t\tthis._arrayLength = arrayLength;\n\n\t\t\t/** @type {TypedArrayConstructor} */\n\t\t\tthis._arrayType = arrayType;\n\n\t\t\t/** @type {number} */\n\t\t\tthis._arrayElementSizeBytes = arrayType.BYTES_PER_ELEMENT;\n\n\t\t\t/** @type {number} */\n\t\t\tthis._arraySizeBytes = this._arrayLength * this._arrayElementSizeBytes;\n\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._sab = sab;\n\n\t\t\tif (maxArrayCapacity === undefined) maxArrayCapacity = WamArrayRingBuffer.DefaultArrayCapacity;\n\t\t\telse maxArrayCapacity = Math.max(maxArrayCapacity, WamArrayRingBuffer.DefaultArrayCapacity);\n\n\t\t\t/** @type {TypedArray} */\n\t\t\tthis._arrayArray = new arrayType(this._arrayLength);\n\n\t\t\t/** @type {RingBuffer} */\n\t\t\tthis._rb = new RingBuffer(this._sab, arrayType);\n\t\t}\n\n\t\t/**\n\t\t * Attempt to write array to the ring buffer, returning whether\n\t\t * or not it was successfully written.\n\t\t *\n\t\t * @param {TypedArray} array\n\t\t * @returns {boolean}\n\t\t */\n\t\twrite(array) {\n\t\t\tif (array.length !== this._arrayLength) return false;\n\t\t\tconst elementsAvailable = this._rb.availableWrite;\n\t\t\tif (elementsAvailable < this._arrayLength) return false;\n\n\t\t\tlet success = true;\n\t\t\tconst elementsWritten = this._rb.push(array);\n\t\t\tif (elementsWritten != this._arrayLength) success = false;\n\t\t\treturn success;\n\t\t}\n\n\t\t/**\n\t\t * Attempt to read array from the ring buffer, returning whether\n\t\t * or not it was successfully read. If `newest` is true, skips\n\t\t * all pending arrays but the most recently written one.\n\t\t *\n\t\t * @param {TypedArray} array\n\t\t * @param {boolean} newest\n\t\t * @returns {boolean}\n\t\t */\n\t\tread(array, newest) {\n\t\t\tif (array.length !== this._arrayLength) return false;\n\t\t\tconst elementsAvailable = this._rb.availableRead;\n\t\t\tif (elementsAvailable < this._arrayLength) return false;\n\n\t\t\t// skip all but most recently written array?\n\t\t\tif (newest && elementsAvailable > this._arrayLength) this._rb.pop(elementsAvailable - this._arrayLength);\n\n\t\t\tlet success = false;\n\t\t\tconst elementsRead = this._rb.pop(array);\n\t\t\tif (elementsRead === this._arrayLength) success = true;\n\t\t\treturn success;\n\t\t}\n\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\t\tif (!ModuleScope.WamArrayRingBuffer) ModuleScope.WamArrayRingBuffer = WamArrayRingBuffer;\n\t}\n\n\treturn WamArrayRingBuffer;\n};\n\nexport default getWamArrayRingBuffer;\n","/** @typedef {import('@webaudiomodules/api').WamProcessor} IWamProcessor */\n/** @typedef {import('@webaudiomodules/api').WamEnv} IWamEnv */\n/** @typedef {import('@webaudiomodules/api').WamGroup} IWamGroup */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n\n/**\n * @param {string} apiVersion\n */\nconst initializeWamEnv = (apiVersion) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor \n\t\t&& audioWorkletGlobalScope.webAudioModules) return; // already initialized\n\n\t/** @type {Map<string, any>} */\n\tconst moduleScopes = new Map();\n\n\t/** @type {Map<string, IWamGroup>} */\n\tconst groups = new Map();\n\t\n\t/**\n\t * @implements {IWamEnv}\n\t */\n\tclass WamEnv {\n\t\tconstructor() {}\n\n\t\tget apiVersion() {\n\t\t\treturn apiVersion;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} moduleId \n\t\t * @returns {Record<string, any>}\n\t\t*/\n\t\tgetModuleScope(moduleId) {\n\t\t\tif (!moduleScopes.has(moduleId)) moduleScopes.set(moduleId, {});\n\t\t\treturn moduleScopes.get(moduleId);\n\t\t}\n\n\t\t/** \n\t\t * @param {string} groupId\n\t\t * @param {string} groupKey\n\t\t */\n\t\tgetGroup(groupId, groupKey) {\n\t\t\tconst group = groups.get(groupId);\n\t\t\tif (group.validate(groupKey)) return group;\n\t\t\telse throw 'Invalid key';\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamGroup} group\n\t\t */\n\t\taddGroup(group) {\n\t\t\tif (!groups.has(group.groupId)) groups.set(group.groupId, group);\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamGroup} group\n\t\t */\n\t\tremoveGroup(group) {\n\t\t\tgroups.delete(group.groupId);\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} wam\n\t\t */\n\t\taddWam(wam) {\n\t\t\t/** @type {IWamGroup} */\n\t\t\tconst group = groups.get(wam.groupId);\n\t\t\tgroup.addWam(wam);\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} wam\n\t\t */\n\t\tremoveWam(wam) {\n\t\t\t/** @type {IWamGroup} */\n\t\t\tconst group = groups.get(wam.groupId);\n\t\t\tgroup.removeWam(wam);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} groupId\n\t\t * @param {string} fromId\n\t\t * @param {string} toId\n\t\t * @param {number} [output]\n\t\t */\n\t\tconnectEvents(groupId, fromId, toId, output = 0) {\n\t\t\t/** @type {IWamGroup} */\n\t\t\tconst group = groups.get(groupId);\n\t\t\tgroup.connectEvents(fromId, toId, output);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} groupId\n\t\t * @param {string} fromId\n\t\t * @param {string} [toId]\n\t\t * @param {number} [output]\n\t\t */\n\t\tdisconnectEvents(groupId, fromId, toId, output) {\n\t\t\t/** @type {IWamGroup} */\n\t\t\tconst group = groups.get(groupId);\n\t\t\tgroup.disconnectEvents(fromId, toId, output);\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} from\n\t\t * @param {WamEvent[]} events \n\t\t */\n\t\temitEvents(from, ...events) {\n\t\t\t/** @type {IWamGroup} */\n\t\t\tconst group = groups.get(from.groupId);\n\t\t\tgroup.emitEvents(from, ...events);\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\tif (!audioWorkletGlobalScope.webAudioModules) audioWorkletGlobalScope.webAudioModules = new WamEnv();\n\t}\n};\n\nexport default initializeWamEnv;\n","/** @typedef {import('@webaudiomodules/api').WamProcessor} IWamProcessor */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('./types').WamGroup} IWamGroup */\n\n/**\n * @param {string} groupId\n * @param {string} groupKey\n */\nconst initializeWamGroup = (groupId, groupKey) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/** @implements IWamGroup */\n\tclass WamGroup {\n\t\t/** \n\t\t * @param {string} groupId\n\t\t * @param {string} groupKey\n\t\t */\n\t\tconstructor(groupId, groupKey) {\n\t\t\t/** @type {string} */\n\t\t\tthis._groupId = groupId;\n\n\t\t\t/** @type {(key: string) => boolean} */\n\t\t\tthis._validate = (key) => {\n\t\t\t\treturn key == groupKey;\n\t\t\t}\n\n\t\t\t/** @type {Map<string, IWamProcessor>} */\n\t\t\tthis._processors = new Map();\n\n\t\t\t/** @type {Map<IWamProcessor, Set<IWamProcessor>[]>} */\n\t\t\tthis._eventGraph = new Map();\n\t\t}\n\n\t\tget groupId() {\n\t\t\treturn this._groupId;\n\t\t}\n\n\t\tget processors() {\n\t\t\treturn this._processors;\n\t\t}\n\n\t\tget eventGraph() {\n\t\t\treturn this._eventGraph;\n\t\t}\n\n\t\tvalidate(groupKey) {\n\t\t\treturn this._validate(groupKey);\n\t\t}\n\n\t\taddWam(wam) {\n\t\t\tthis._processors.set(wam.instanceId, wam);\n\t\t}\n\n\t\tremoveWam(wam) {\n\t\t\tif (this._eventGraph.has(wam)) this._eventGraph.delete(wam);\n\t\t\tthis._eventGraph.forEach((outputMap) => {\n\t\t\t\toutputMap.forEach((set) => {\n\t\t\t\t\tif (set && set.has(wam)) set.delete(wam);\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis._processors.delete(wam.instanceId);\n\t\t}\n\t\n\t\t/**\n\t\t * @param {string} fromId\n\t\t * @param {string} toId\n\t\t * @param {number} [output]\n\t\t */\n\t\tconnectEvents(fromId, toId, output) {\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst from = this._processors.get(fromId);\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst to = this._processors.get(toId);\n\n\t\t\t/** @type {Set<IWamProcessor>[]} */\n\t\t\tlet outputMap;\n\t\t\tif (this._eventGraph.has(from)) {\n\t\t\t\toutputMap = this._eventGraph.get(from);\n\t\t\t} else {\n\t\t\t\toutputMap = [];\n\t\t\t\tthis._eventGraph.set(from, outputMap);\n\t\t\t}\n\t\t\tif (outputMap[output]) {\n\t\t\t\toutputMap[output].add(to);\n\t\t\t} else {\n\t\t\t\tconst set = new Set();\n\t\t\t\tset.add(to);\n\t\t\t\toutputMap[output] = set;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} fromId\n\t\t * @param {string} [toId]\n\t\t * @param {number} [output]\n\t\t */\n\t\tdisconnectEvents(fromId, toId, output) {\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst from = this._processors.get(fromId);\n\t\t\t\n\t\t\tif (!this._eventGraph.has(from)) return;\n\t\t\tconst outputMap = this._eventGraph.get(from);\n\t\t\tif (typeof toId === 'undefined') {\n\t\t\t\toutputMap.forEach((set) => {\n\t\t\t\t\tif (set) set.clear();\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} \n\t\t\t\n\t\t\t/** @type {IWamProcessor} */\n\t\t\tconst to = this._processors.get(toId);\n\n\t\t\tif (typeof output === 'undefined') {\n\t\t\t\toutputMap.forEach((set) => {\n\t\t\t\t\tif (set) set.delete(to);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!outputMap[output]) return;\n\t\t\toutputMap[output].delete(to);\n\t\t}\n\n\t\t/**\n\t\t * @param {IWamProcessor} from\n\t\t * @param {WamEvent[]} events \n\t\t */\n\t\temitEvents(from, ...events) {\n\t\t\tif (!this._eventGraph.has(from)) return;\n\t\t\tconst downstream = this._eventGraph.get(from);\n\t\t\tdownstream.forEach((set) => {\n\t\t\t\tif (set) set.forEach((wam) => wam.scheduleEvents(...events));\n\t\t\t});\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\taudioWorkletGlobalScope.webAudioModules.addGroup(new WamGroup(groupId, groupKey));\n\t}\n};\n\nexport default initializeWamGroup;\n","/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamEventType} WamEventType */\n/** @typedef {import('@webaudiomodules/api').WamAutomationEvent} WamAutomationEvent */\n/** @typedef {import('@webaudiomodules/api').WamTransportEvent} WamTransportEvent */\n/** @typedef {import('@webaudiomodules/api').WamMidiEvent} WamMidiEvent */\n/** @typedef {import('@webaudiomodules/api').WamSysexEvent} WamSysexEvent */\n/** @typedef {import('@webaudiomodules/api').WamMpeEvent} WamMpeEvent */\n/** @typedef {import('@webaudiomodules/api').WamOscEvent} WamOscEvent */\n/** @typedef {import('@webaudiomodules/api').WamInfoEvent} WamInfoEvent */\n/** @typedef {import('@webaudiomodules/api').WamParameterData} WamParameterData */\n/** @typedef {import('@webaudiomodules/api').WamTransportData} WamTransportData */\n/** @typedef {import('@webaudiomodules/api').WamMidiData} WamMidiData */\n/** @typedef {import('@webaudiomodules/api').WamBinaryData} WamBinaryData */\n/** @typedef {import('@webaudiomodules/api').WamInfoData} WamInfoData */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {typeof import('./types').RingBuffer} RingBufferConstructor */\n/** @typedef {import('./types').RingBuffer} RingBuffer */\n/** @typedef {import('./types').TypedArrayConstructor} TypedArrayConstructor */\n/** @typedef {import('./types').WamEventRingBuffer} IWamEventRingBuffer */\n/** @typedef {typeof import('./types').WamEventRingBuffer} WamEventRingBufferConstructor */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamEventRingBufferConstructor}\n */\nconst getWamEventRingBuffer = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @implements {IWamEventRingBuffer}\n\t */\n\tclass WamEventRingBuffer {\n\n\t\t/**\n\t\t * Default number of additional bytes allocated\n\t\t * per event (to support variable-size event objects)\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic DefaultExtraBytesPerEvent = 64;\n\n\t\t/**\n\t\t * Number of bytes required for WamEventBase\n\t\t * {uint32} total event size in bytes\n\t\t * {uint8} encoded event type\n\t\t * {float64} time\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamEventBaseBytes = 4 + 1 + 8;\n\n\t\t/**\n\t\t * Number of bytes required for WamAutomationEvent\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint16} encoded parameter id\n\t\t * {float64} value\n\t\t * {uint8} normalized\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamAutomationEventBytes = WamEventRingBuffer.WamEventBaseBytes + 2 + 8 + 1;\n\n\t\t/**\n\t\t * Number of bytes required for WamTransportEvent\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint32} current bar\n\t\t * {float64} currentBarStarted\n\t\t * {float64} tempo\n\t\t * {uint8} time signature numerator\n\t\t * {uint8} time signature denominator\n\t\t * {uint8} playing flag\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamTransportEventBytes = WamEventRingBuffer.WamEventBaseBytes + 4 + 8 + 8 + 1 + 1 + 1;\n\n\t\t/**\n\t\t * Number of bytes required for WamMidiEvent or WamMpeEvent\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint8} status byte\n\t\t * {uint8} data1 byte\n\t\t * {uint8} data2 byte\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamMidiEventBytes = WamEventRingBuffer.WamEventBaseBytes + 1 + 1 + 1;\n\n\t\t/**\n\t\t * Number of bytes required for WamSysexEvent or WamOscEvent\n\t\t * (total number depends on content of message / size of byte array)\n\t\t * {WamEventBaseBytes} common event properties\n\t\t * {uint32} number of bytes in binary array\n\t\t * {uint8[]} N bytes in binary array depending on message\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tstatic WamBinaryEventBytes = WamEventRingBuffer.WamEventBaseBytes + 4; // + N\n\n\t\t/**\n\t\t * Returns a SharedArrayBuffer large enough to safely store\n\t\t * the specified number of events. Specify 'maxBytesPerEvent'\n\t\t * to support variable-size binary event types like sysex or osc.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {number} eventCapacity\n\t\t * @param {number} [maxBytesPerEvent=undefined]\n\t\t * @returns {SharedArrayBuffer}\n\t\t */\n\t\tstatic getStorageForEventCapacity(RingBuffer, eventCapacity, maxBytesPerEvent = undefined) {\n\t\t\tif (maxBytesPerEvent === undefined) maxBytesPerEvent = WamEventRingBuffer.DefaultExtraBytesPerEvent;\n\t\t\telse maxBytesPerEvent = Math.max(maxBytesPerEvent, WamEventRingBuffer.DefaultExtraBytesPerEvent);\n\t\t\tconst capacity = (Math.max(\n\t\t\t\tWamEventRingBuffer.WamAutomationEventBytes,\n\t\t\t\tWamEventRingBuffer.WamTransportEventBytes,\n\t\t\t\tWamEventRingBuffer.WamMidiEventBytes,\n\t\t\t\tWamEventRingBuffer.WamBinaryEventBytes,\n\t\t\t) + maxBytesPerEvent) * eventCapacity;\n\t\t\treturn RingBuffer.getStorageForCapacity(capacity, Uint8Array);\n\t\t}\n\n\t\t/**\n\t\t * Provides methods for encoding / decoding WamEvents to / from\n\t\t * a UInt8Array RingBuffer. Specify 'maxBytesPerEvent'\n\t\t * to support variable-size binary event types like sysex or osc.\n\t\t *\n\t\t * @param {RingBufferConstructor} RingBuffer\n\t\t * @param {SharedArrayBuffer} sab\n\t\t * @param {string[]} parameterIds\n\t\t * @param {number} [maxBytesPerEvent=undefined]\n\t\t */\n\t\tconstructor(RingBuffer, sab, parameterIds, maxBytesPerEvent = undefined) {\n\t\t\t/** @type {Record<string, number>} */\n\t\t\tthis._eventSizeBytes = {};\n\n\t\t\t/** @type {Record<string, number>} */\n\t\t\tthis._encodeEventType = {};\n\n\t\t\t/** @type {Record<number, string>} */\n\t\t\tthis._decodeEventType = {};\n\t\t\t/** @type {WamEventType[]} */\n\t\t\tconst wamEventTypes = ['wam-automation', 'wam-transport', 'wam-midi', 'wam-sysex', 'wam-mpe', 'wam-osc', 'wam-info'];\n\t\t\twamEventTypes.forEach((type, encodedType) => {\n\t\t\t\tlet byteSize = 0;\n\t\t\t\tswitch (type) {\n\t\t\t\tcase 'wam-automation': byteSize = WamEventRingBuffer.WamAutomationEventBytes; break;\n\t\t\t\tcase 'wam-transport': byteSize = WamEventRingBuffer.WamTransportEventBytes; break;\n\t\t\t\tcase 'wam-mpe':\n\t\t\t\tcase 'wam-midi': byteSize = WamEventRingBuffer.WamMidiEventBytes; break;\n\t\t\t\tcase 'wam-osc':\n\t\t\t\tcase 'wam-sysex':\n\t\t\t\tcase 'wam-info': byteSize = WamEventRingBuffer.WamBinaryEventBytes; break;\n\t\t\t\tdefault: break;\n\t\t\t\t}\n\t\t\t\tthis._eventSizeBytes[type] = byteSize;\n\t\t\t\tthis._encodeEventType[type] = encodedType;\n\t\t\t\tthis._decodeEventType[encodedType] = type;\n\t\t\t});\n\n\t\t\t/** @type {number} */\n\t\t\tthis._parameterCode = 0;\n\t\t\t/** @type {{[parameterId: string]: number}} */\n\t\t\tthis._parameterCodes = {};\n\t\t\t/** @type {{[parameterId: string]: number}} */\n\t\t\tthis._encodeParameterId = {};\n\t\t\t/** @type {{[parameterId: number]: string}} */\n\t\t\tthis._decodeParameterId = {};\n\t\t\tthis.setParameterIds(parameterIds);\n\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._sab = sab;\n\n\t\t\tif (maxBytesPerEvent === undefined) maxBytesPerEvent = WamEventRingBuffer.DefaultExtraBytesPerEvent;\n\t\t\telse maxBytesPerEvent = Math.max(maxBytesPerEvent, WamEventRingBuffer.DefaultExtraBytesPerEvent);\n\n\t\t\t/** @type {number} */\n\t\t\tthis._eventBytesAvailable = Math.max(\n\t\t\t\tWamEventRingBuffer.WamAutomationEventBytes,\n\t\t\t\tWamEventRingBuffer.WamTransportEventBytes,\n\t\t\t\tWamEventRingBuffer.WamMidiEventBytes,\n\t\t\t\tWamEventRingBuffer.WamBinaryEventBytes,\n\t\t\t) + maxBytesPerEvent;\n\t\t\t/** @type {ArrayBuffer} */\n\t\t\tthis._eventBytes = new ArrayBuffer(this._eventBytesAvailable);\n\t\t\t/** @type {DataView} */\n\t\t\tthis._eventBytesView = new DataView(this._eventBytes);\n\n\t\t\t/** @type {RingBuffer} */\n\t\t\tthis._rb = new RingBuffer(this._sab, Uint8Array);\n\n\t\t\t/** @type {Uint8Array} */\n\t\t\tthis._eventSizeArray = new Uint8Array(this._eventBytes, 0, 4);\n\n\t\t\t/** @type {DataView} */\n\t\t\tthis._eventSizeView = new DataView(this._eventBytes, 0, 4);\n\t\t}\n\n\t\t/**\n\t\t * Write common WamEvent properties to internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @param {number} byteSize total size of event in bytes\n\t\t * @param {string} type\n\t\t * @param {number} time\n\t\t * @returns {number} updated byte offset\n\t\t */\n\t\t_writeHeader(byteSize, type, time) {\n\t\t\tlet byteOffset = 0;\n\t\t\tthis._eventBytesView.setUint32(byteOffset, byteSize);\n\t\t\tbyteOffset += 4;\n\t\t\tthis._eventBytesView.setUint8(byteOffset, this._encodeEventType[type]);\n\t\t\tbyteOffset += 1;\n\t\t\tthis._eventBytesView.setFloat64(byteOffset, Number.isFinite(time) ? time : -1);\n\t\t\tbyteOffset += 8;\n\t\t\treturn byteOffset;\n\t\t}\n\n\t\t/**\n\t\t * Write WamEvent to internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @param {WamEvent} event\n\t\t * @returns {Uint8Array}\n\t\t */\n\t\t_encode(event) {\n\t\t\tlet byteOffset = 0;\n\t\t\tconst { type, time } = event;\n\t\t\tswitch (event.type) {\n\t\t\tcase 'wam-automation': {\n\t\t\t\tif (!(event.data.id in this._encodeParameterId)) break;\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize, type, time);\n\n\t\t\t\t/**\n\t\t\t\t * @type {WamAutomationEvent}\n\t\t\t\t * @property {WamAutomationData} data\n\t\t\t\t */\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst encodedParameterId = this._encodeParameterId[data.id];\n\t\t\t\tconst { value, normalized } = data;\n\n\t\t\t\tthis._eventBytesView.setUint16(byteOffset, encodedParameterId);\n\t\t\t\tbyteOffset += 2;\n\t\t\t\tthis._eventBytesView.setFloat64(byteOffset, value);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, normalized ? 1 : 0);\n\t\t\t\tbyteOffset += 1;\n\t\t\t} break;\n\t\t\tcase 'wam-transport': {\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize, type, time);\n\n\t\t\t\t/**\n\t\t\t\t * @type {WamTransportEvent}\n\t\t\t\t * @property {WamTransportData} data\n\t\t\t\t */\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst {\n\t\t\t\t\tcurrentBar, currentBarStarted, tempo, timeSigNumerator, timeSigDenominator, playing\n\t\t\t\t} = data;\n\n\t\t\t\tthis._eventBytesView.setUint32(byteOffset, currentBar);\n\t\t\t\tbyteOffset += 4;\n\t\t\t\tthis._eventBytesView.setFloat64(byteOffset, currentBarStarted);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tthis._eventBytesView.setFloat64(byteOffset, tempo);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, timeSigNumerator);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, timeSigDenominator);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tthis._eventBytesView.setUint8(byteOffset, playing ? 1 : 0);\n\t\t\t\tbyteOffset += 1;\n\t\t\t} break;\n\t\t\tcase 'wam-mpe':\n\t\t\tcase 'wam-midi': {\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize, type, time);\n\n\t\t\t\t/**\n\t\t\t\t * @type {WamMidiEvent | WamMpeEvent}\n\t\t\t\t * @property {WamMidiData} data\n\t\t\t\t */\n\t\t\t\tconst { data } = event;\n\t\t\t\tconst { bytes } = data;\n\t\t\t\tlet b = 0;\n\t\t\t\twhile (b < 3) {\n\t\t\t\t\tthis._eventBytesView.setUint8(byteOffset, bytes[b]);\n\t\t\t\t\tbyteOffset += 1;\n\t\t\t\t\tb++;\n\t\t\t\t}\n\t\t\t} break;\n\t\t\tcase 'wam-osc':\n\t\t\tcase 'wam-sysex':\n\t\t\tcase 'wam-info': {\n\t\t\t\t/** @type {Uint8Array | null} */\n\t\t\t\tlet bytes = null;\n\t\t\t\tif (event.type === 'wam-info') {\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {WamInfoEvent}\n\t\t\t\t\t * @property {WamInfoData} data\n\t\t\t\t\t */\n\t\t\t\t\tconst { data } = event;\n\t\t\t\t\tbytes = (new TextEncoder()).encode(data.instanceId);\n\t\t\t\t} else {\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {WamSysexEvent | WamOscEvent}\n\t\t\t\t\t * @property {WamBinaryData} data\n\t\t\t\t\t */\n\t\t\t\t\tconst { data } = event;\n\t\t\t\t\tbytes = data.bytes;\n\t\t\t\t}\n\t\t\t\tconst numBytes = bytes.length;\n\t\t\t\tconst byteSize = this._eventSizeBytes[type];\n\t\t\t\tbyteOffset = this._writeHeader(byteSize + numBytes, type, time);\n\n\t\t\t\tthis._eventBytesView.setUint32(byteOffset, numBytes);\n\t\t\t\tbyteOffset += 4;\n\n\t\t\t\tconst bytesRequired = byteOffset + numBytes;\n\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\tif (bytesRequired > this._eventBytesAvailable) console.error(`Event requires ${bytesRequired} bytes but only ${this._eventBytesAvailable} have been allocated!`);\n\n\t\t\t\tconst buffer = new Uint8Array(this._eventBytes, byteOffset, numBytes);\n\t\t\t\tbuffer.set(bytes);\n\t\t\t\tbyteOffset += numBytes;\n\t\t\t} break;\n\t\t\tdefault: break;\n\t\t\t}\n\t\t\treturn new Uint8Array(this._eventBytes, 0, byteOffset);\n\t\t}\n\n\t\t/**\n\t\t * Read WamEvent from internal buffer.\n\t\t *\n\t\t * @private\n\t\t * @returns {WamEvent | false} Decoded WamEvent\n\t\t */\n\t\t_decode() {\n\t\t\tlet byteOffset = 0;\n\t\t\tconst type = this._decodeEventType[this._eventBytesView.getUint8(byteOffset)];\n\t\t\tbyteOffset += 1;\n\t\t\tlet time = this._eventBytesView.getFloat64(byteOffset);\n\t\t\tif (time === -1) time = undefined;\n\t\t\tbyteOffset += 8;\n\n\t\t\tswitch (type) {\n\t\t\tcase 'wam-automation': {\n\t\t\t\tconst encodedParameterId = this._eventBytesView.getUint16(byteOffset);\n\t\t\t\tbyteOffset += 2;\n\t\t\t\tconst value = this._eventBytesView.getFloat64(byteOffset);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tconst normalized = !!this._eventBytesView.getUint8(byteOffset);\n\t\t\t\tbyteOffset += 1;\n\n\t\t\t\tif (!(encodedParameterId in this._decodeParameterId)) break;\n\t\t\t\tconst id = this._decodeParameterId[encodedParameterId];\n\t\t\t\t/** @type {WamAutomationEvent} */\n\t\t\t\tconst event = {\n\t\t\t\t\ttype,\n\t\t\t\t\ttime,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tid, value, normalized,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tcase 'wam-transport': {\n\t\t\t\tconst currentBar = this._eventBytesView.getUint32(byteOffset);\n\t\t\t\tbyteOffset += 4;\n\t\t\t\tconst currentBarStarted = this._eventBytesView.getFloat64(byteOffset);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tconst tempo = this._eventBytesView.getFloat64(byteOffset);\n\t\t\t\tbyteOffset += 8;\n\t\t\t\tconst timeSigNumerator = this._eventBytesView.getUint8(byteOffset);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tconst timeSigDenominator = this._eventBytesView.getUint8(byteOffset);\n\t\t\t\tbyteOffset += 1;\n\t\t\t\tconst playing = (this._eventBytesView.getUint8(byteOffset) == 1);\n\t\t\t\tbyteOffset += 1;\n\n\t\t\t\t/** @type {WamTransportEvent} */\n\t\t\t\tconst event = {\n\t\t\t\t\ttype,\n\t\t\t\t\ttime,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcurrentBar, currentBarStarted, tempo, timeSigNumerator, timeSigDenominator, playing\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tcase 'wam-mpe':\n\t\t\tcase 'wam-midi': {\n\t\t\t\t/** @type {[number, number, number]} */\n\t\t\t\tconst bytes = [0, 0, 0];\n\t\t\t\tlet b = 0;\n\t\t\t\twhile (b < 3) {\n\t\t\t\t\tbytes[b] = this._eventBytesView.getUint8(byteOffset);\n\t\t\t\t\tbyteOffset += 1;\n\t\t\t\t\tb++;\n\t\t\t\t}\n\n\t\t\t\t/** @type {WamMidiEvent | WamMpeEvent} */\n\t\t\t\tconst event = {\n\t\t\t\t\ttype,\n\t\t\t\t\ttime,\n\t\t\t\t\tdata: { bytes },\n\t\t\t\t};\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tcase 'wam-osc':\n\t\t\tcase 'wam-sysex':\n\t\t\tcase 'wam-info': {\n\t\t\t\tconst numBytes = this._eventBytesView.getUint32(byteOffset);\n\t\t\t\tbyteOffset += 4;\n\t\t\t\tconst bytes = new Uint8Array(numBytes);\n\t\t\t\tbytes.set(new Uint8Array(this._eventBytes, byteOffset, numBytes));\n\t\t\t\tbyteOffset += numBytes;\n\n\t\t\t\tif (type === 'wam-info') {\n\t\t\t\t\tconst instanceId = (new TextDecoder()).decode(bytes);\n\t\t\t\t\tconst data = { instanceId };\n\t\t\t\t\treturn { type, time, data };\n\t\t\t\t} else {\n\t\t\t\t\tconst data = { bytes };\n\t\t\t\t\treturn { type, time, data };\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: break;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-console\n\t\t\t// console.warn('Failed to decode event!');\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Write WamEvents to the ring buffer, returning\n\t\t * the number of events successfully written.\n\t\t *\n\t\t * @param {WamEvent[]} events\n\t\t * @returns {number}\n\t\t */\n\t\twrite(...events) {\n\t\t\tconst numEvents = events.length;\n\t\t\tlet bytesAvailable = this._rb.availableWrite;\n\t\t\tlet numSkipped = 0;\n\t\t\tlet i = 0;\n\t\t\twhile (i < numEvents) {\n\t\t\t\tconst event = events[i];\n\t\t\t\tconst bytes = this._encode(event);\n\t\t\t\tconst eventSizeBytes = bytes.byteLength;\n\n\t\t\t\tlet bytesWritten = 0;\n\t\t\t\tif (bytesAvailable >= eventSizeBytes) {\n\t\t\t\t\tif (eventSizeBytes === 0) numSkipped++;\n\t\t\t\t\telse bytesWritten = this._rb.push(bytes);\n\t\t\t\t} else break;\n\t\t\t\tbytesAvailable -= bytesWritten;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn i - numSkipped;\n\t\t}\n\n\t\t/**\n\t\t * Read WamEvents from the ring buffer, returning\n\t\t * the list of events successfully read.\n\t\t *\n\t\t * @returns {WamEvent[]}\n\t\t */\n\t\tread() {\n\t\t\tif (this._rb.empty) return [];\n\t\t\tconst events = [];\n\t\t\tlet bytesAvailable = this._rb.availableRead;\n\t\t\tlet bytesRead = 0;\n\t\t\twhile (bytesAvailable > 0) {\n\t\t\t\tbytesRead = this._rb.pop(this._eventSizeArray);\n\t\t\t\tbytesAvailable -= bytesRead;\n\t\t\t\tconst eventSizeBytes = this._eventSizeView.getUint32(0);\n\t\t\t\tconst eventBytes = new Uint8Array(this._eventBytes, 0, eventSizeBytes - 4);\n\t\t\t\tbytesRead = this._rb.pop(eventBytes);\n\t\t\t\tbytesAvailable -= bytesRead;\n\t\t\t\tconst decodedEvent = this._decode();\n\t\t\t\tif (decodedEvent) events.push(decodedEvent);\n\t\t\t}\n\t\t\treturn events;\n\t\t}\n\n\t\t/**\n\t\t * In case parameter set changes, update the internal mappings.\n\t\t * May result in some invalid automation events, which will be\n\t \t * ignored. Note that this must be called on all corresponding\n\t\t * WamEventRingBuffers on both threads.\n\t\t * @param {string[]} parameterIds\n\t\t */\n\t\tsetParameterIds(parameterIds) {\n\t\t\tthis._encodeParameterId = {};\n\t\t\tthis._decodeParameterId = {};\n\t\t\tparameterIds.forEach((parameterId) => {\n\t\t\t\tlet parameterCode = -1\n\t\t\t\tif (parameterId in this._parameterCodes) parameterCode = this._parameterCodes[parameterId];\n\t\t\t\telse {\n\t\t\t\t\tparameterCode = this._generateParameterCode();\n\t\t\t\t\tthis._parameterCodes[parameterId] = parameterCode;\n\t\t\t\t}\n\t\t\t\tthis._encodeParameterId[parameterId] = parameterCode;\n\t\t\t\tthis._decodeParameterId[parameterCode] = parameterId;\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Generates a numeric parameter code in a range suitable for\n\t\t * encoding as uint16.\n\t\t *\n\t\t * @returns {number}\n\t\t */\n\t\t_generateParameterCode() {\n\t\t\tif (this._parameterCode > 65535) throw Error('Too many parameters have been registered!');\n\t\t\treturn this._parameterCode++;\n\t\t}\n\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\t\tif (!ModuleScope.WamEventRingBuffer) ModuleScope.WamEventRingBuffer = WamEventRingBuffer;\n\t}\n\n\treturn WamEventRingBuffer;\n};\n\nexport default getWamEventRingBuffer;\n","/**\r\n * Take a function, stringify it and inject to an AudioWorklet with parameters.\r\n *\r\n * @param {AudioWorklet} audioWorklet\r\n * @param {(...args: any[]) => any} processorFunction\r\n * @param {any[]} [injection]\r\n * @returns {Promise<void>}\r\n */\r\nconst addFunctionModule = (audioWorklet, processorFunction, ...injection) => {\r\n    const text = `(${processorFunction.toString()})(${injection.map((s) => JSON.stringify(s)).join(', ')});`\r\n    const url = URL.createObjectURL(new Blob([text], { type: 'text/javascript' }));\r\n    return audioWorklet.addModule(url);\r\n}\r\n\r\nexport default addFunctionModule;\r\n","/** @typedef {import('@webaudiomodules/api').WamParameter} IWamParameter */\n/** @typedef {typeof import('@webaudiomodules/api').WamParameter} WamParameterContructor */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfo} WamParameterInfo */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterContructor}\n */\nconst getWamParameter = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/** @implements {IWamParameter} */\n\tclass WamParameter {\n\t\t/** @param {WamParameterInfo} info */\n\t\tconstructor(info) {\n\t\t\t/** @readonly @type {WamParameterInfo} */\n\t\t\tthis.info = info;\n\t\t\t/** @private @type {number} */\n\t\t\tthis._value = info.defaultValue;\n\t\t}\n\t\n\t\t/**\n\t\t * Set current (denormalized) value\n\t\t * @param {number} value\n\t\t*/\n\t\tset value(value) {\n\t\t\tthis._value = value;\n\t\t}\n\t\n\t\t/**\n\t\t * Get current (denormalized) value\n\t\t * @returns {number}\n\t\t */\n\t\tget value() {\n\t\t\treturn this._value;\n\t\t}\n\t\n\t\t/**\n\t\t * Set current value in normalized range\n\t\t * @param {number} valueNorm\n\t\t */\n\t\tset normalizedValue(valueNorm) {\n\t\t\tthis.value = this.info.denormalize(valueNorm);\n\t\t}\n\t\n\t\t/**\n\t\t * Get current value in normalized range\n\t\t * @returns {number}\n\t\t */\n\t\tget normalizedValue() {\n\t\t\treturn this.info.normalize(this.value);\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameter) ModuleScope.WamParameter = WamParameter;\n\t}\n\n\treturn WamParameter;\n};\n\nexport default getWamParameter;\n","/** @typedef {import('@webaudiomodules/api').WamParameterInfo} IWamParameterInfo */\n/** @typedef {typeof import('@webaudiomodules/api').WamParameterInfo} WamParameterInfoConstructor */\n/** @typedef {import('@webaudiomodules/api').WamParameterType} WamParameterType */\n/** @typedef {import('@webaudiomodules/api').WamParameterConfiguration} WamParameterConfiguration */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterInfoConstructor}\n */\nconst getWamParameterInfo = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @param {number} x\n\t * @param {number} e\n\t */\n\tconst normExp = (x, e) => (e === 0 ? x : x ** (1.5 ** -e));\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} e\n\t */\n\tconst denormExp = (x, e) => (e === 0 ? x : x ** (1.5 ** e));\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst normalize = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? normExp(x, e)\n\t\t\t: normExp((x - min) / (max - min) || 0, e));\n\t\n\t/**\n\t * @param {any} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst denormalize = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? denormExp(x, e)\n\t\t\t: denormExp(x, e) * (max - min) + min\n\t);\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst inRange = (x, min, max) => (x >= min && x <= max);\n\t\n\t/**\n\t * @implements {IWamParameterInfo}\n\t */\n\tclass WamParameterInfo {\n\t\t/**\n\t\t * @param {string} id\n\t\t * @param {WamParameterConfiguration} [config]\n\t\t */\n\t\tconstructor(id, config = {}) {\n\t\t\tlet {\n\t\t\t\ttype, label, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units,\n\t\t\t} = config;\n\t\t\tif (type === undefined) type = 'float';\n\t\t\tif (label === undefined) label = '';\n\t\t\tif (defaultValue === undefined) defaultValue = 0;\n\t\t\tif (choices === undefined) choices = [];\n\t\t\tif (type === 'boolean' || type === 'choice') {\n\t\t\t\tdiscreteStep = 1;\n\t\t\t\tminValue = 0;\n\t\t\t\tif (choices.length) maxValue = choices.length - 1;\n\t\t\t\telse maxValue = 1;\n\t\t\t} else {\n\t\t\t\tif (minValue === undefined) minValue = 0;\n\t\t\t\tif (maxValue === undefined) maxValue = 1;\n\t\t\t\tif (discreteStep === undefined) discreteStep = 0;\n\t\t\t\tif (exponent === undefined) exponent = 0;\n\t\t\t\tif (units === undefined) units = '';\n\t\t\t}\n\t\n\t\t\tconst errBase = `Param config error | ${id}: `;\n\t\t\tif (minValue >= maxValue) throw Error(errBase.concat('minValue must be less than maxValue'));\n\t\t\tif (!inRange(defaultValue, minValue, maxValue)) throw Error(errBase.concat('defaultValue out of range'));\n\t\t\tif (discreteStep % 1 || discreteStep < 0) {\n\t\t\t\tthrow Error(errBase.concat('discreteStep must be a non-negative integer'));\n\t\t\t} else if (discreteStep > 0 && (minValue % 1 || maxValue % 1 || defaultValue % 1)) {\n\t\t\t\tthrow Error(errBase.concat('non-zero discreteStep requires integer minValue, maxValue, and defaultValue'));\n\t\t\t}\n\t\t\tif (type === 'choice' && !choices.length) {\n\t\t\t\tthrow Error(errBase.concat('choice type parameter requires list of strings in choices'));\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t * The parameter's unique identifier.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.id = id;\n\t\n\t\t\t/**\n\t\t\t * The parameter's human-readable name.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.label = label;\n\t\n\t\t\t/**\n\t\t\t * The parameter's data type.\n\t\t\t * @readonly @type {WamParameterType}\n\t\t\t */\n\t\t\tthis.type = type;\n\t\n\t\t\t/**\n\t\t\t * The parameter's default value. Must be\n\t\t\t * within range `[minValue, maxValue]`.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.defaultValue = defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The minimum valid value of the parameter's range.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.minValue = minValue;\n\t\n\t\t\t/**\n\t\t\t * The maximum valid value of the parameter's range.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.maxValue = maxValue;\n\t\n\t\t\t/**\n\t\t\t * The distance between adjacent valid integer\n\t\t\t * values, if applicable.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.discreteStep = discreteStep;\n\t\n\t\t\t/**\n\t\t\t * The nonlinear (exponential) skew of the parameter's\n\t\t\t * range, if applicable.\n\t\t\t *  @readonly @type {number}\n\t\t\t */\n\t\t\tthis.exponent = exponent;\n\t\n\t\t\t/**\n\t\t\t * A list of human-readable choices corresponding to each\n\t\t\t * valid integer value in the parameter's range, if applicable.\n\t\t\t * @readonly @type {string[]}\n\t\t\t */\n\t\t\tthis.choices = choices;\n\t\n\t\t\t/**\n\t\t\t * A human-readable string representing the units of the\n\t\t\t * parameter's range, if applicable.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.units = units;\n\t\t}\n\t\n\t\t/**\n\t\t * Convert a value from the parameter's denormalized range\n\t\t * `[minValue, maxValue]` to normalized range `[0, 1]`.\n\t\t * @param {number} value\n\t\t */\n\t\tnormalize(value) {\n\t\t\treturn normalize(value, this.minValue, this.maxValue, this.exponent);\n\t\t}\n\t\n\t\t/**\n\t\t * Convert a value from normalized range `[0, 1]` to the\n\t\t * parameter's denormalized range `[minValue, maxValue]`.\n\t\t * @param {number} valueNorm\n\t\t */\n\t\tdenormalize(valueNorm) {\n\t\t\treturn denormalize(valueNorm, this.minValue, this.maxValue, this.exponent);\n\t\t}\n\t\n\t\t/**\n\t\t * Get a human-readable string representing the given value,\n\t\t * including units if applicable.\n\t\t * @param {number} value\n\t\t */\n\t\tvalueString(value) {\n\t\t\tif (this.choices) return this.choices[value];\n\t\t\tif (this.units !== '') return `${value} ${this.units}`;\n\t\t\treturn `${value}`;\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameterInfo) ModuleScope.WamParameterInfo = WamParameterInfo;\n\t}\n\n\treturn WamParameterInfo;\n};\n\nexport default getWamParameterInfo;\n","/** @typedef {import('@webaudiomodules/api').WamParameterInfo} WamParameterInfo */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamParameterInterpolator} IWamParameterInterpolator */\n/** @typedef {typeof import('./types').WamParameterInterpolator} WamParameterInterpolatorConstructor */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterInterpolatorConstructor}\n */\nconst getWamParameterInterpolator = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\tconst samplesPerQuantum = 128;\n\tconst nullTableKey = '0_0';\n\t\n\t/**\n\t * Provides per-sample value updates for WamParameters\n\t * with interpolation when applicable. Only one instance\n\t * should be created per WamParameter.\n\t * @implements {IWamParameterInterpolator}\n\t */\n\tclass WamParameterInterpolator {\n\t\t/**\n\t\t * Lookup tables to avoid recomputing interpolation curves. Keyed\n\t\t * by `'<samplesPerInterpolation>_<skew>'`. Not used for\n\t\t * discrete parameters.\n\t\t * @static @type {Record<string, Float32Array>}\n\t\t */\n\t\tstatic _tables;\n\t\n\t\t/**\n\t\t * List of parameter ids currently using the lookup table associated\n\t\t * with the key. Keyed by `'<samplesPerInterpolation>_<skew>'`.\n\t\t * For purging unused lookup tables. Not used for discrete parameters.\n\t\t * @static @type {Record<string, string[]>}\n\t\t */\n\t\tstatic _tableReferences;\n\t\n\t\t/**\n\t\t * @param {WamParameterInfo} info\n\t\t * @param {number} samplesPerInterpolation\n\t\t * @param {number=} skew\n\t\t */\n\t\tconstructor(info, samplesPerInterpolation, skew = 0) {\n\t\t\tif (!WamParameterInterpolator._tables) {\n\t\t\t\tWamParameterInterpolator._tables = { nullTableKey: new Float32Array(0) };\n\t\t\t\tWamParameterInterpolator._tableReferences = { nullTableKey: [] };\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t * Info object for corresponding WamParameter.\n\t\t\t * @readonly @type {WamParameterInfo}\n\t\t\t */\n\t\t\tthis.info = info;\n\t\n\t\t\t/**\n\t\t\t * Buffer storing per-sample values.\n\t\t\t * @readonly @type {Float32Array}\n\t\t\t */\n\t\t\tthis.values = new Float32Array(samplesPerQuantum);\n\t\n\t\t\t/**\n\t\t\t * Composed by concatenating `'<samplesPerInterpolation>_<skew>'`.\n\t\t\t * @private @type {string}\n\t\t\t */\n\t\t\tthis._tableKey = nullTableKey;\n\t\n\t\t\t/**\n\t\t\t * The (static) lookup table used to avoid recomputing ramps.\n\t\t\t * @private @type {Float32Array}\n\t\t\t */\n\t\t\tthis._table = WamParameterInterpolator._tables[this._tableKey];\n\t\n\t\t\t/**\n\t\t\t * Determines if interpolation will be linear / nonlinear.\n\t\t\t * Note that this is distinct from the corresponding\n\t\t\t * parameter's `exponent` value.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._skew = 2; // intentionally initialized out of range, see setSkew\n\t\n\t\t\tconst { discreteStep } = info;\n\t\n\t\t\t/**\n\t\t\t * Whether or not to perform interpolation\n\t\t\t * (false for integer parameters, true otherwise).\n\t\t\t * @readonly @private @type {boolean}\n\t\t\t */\n\t\t\tthis._discrete = !!discreteStep;\n\t\n\t\t\t/**\n\t\t\t * The interpolation period in samples.\n\t\t\t * @readonly @private @type {number}\n\t\t\t */\n\t\t\tthis._N = this._discrete ? 0 : samplesPerInterpolation;\n\t\n\t\t\t/**\n\t\t\t * The current interpolation index.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._n = 0;\n\t\n\t\t\t/**\n\t\t\t * The parameter value when interpolation starts.\n\t\t\t * @private @type {number}\n\t\t\t*/\n\t\t\tthis._startValue = info.defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The parameter value when interpolation ends.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._endValue = info.defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The most recently computed parameter value.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._currentValue = info.defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The difference between `startValue` and `endValue`.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._deltaValue = 0;\n\t\n\t\t\t/**\n\t\t\t * Allows consistent output with respect to skew setting\n\t\t\t * whether increasing or decreasing during interpolation.\n\t\t\t * @private @type {boolean}\n\t\t\t */\n\t\t\tthis._inverted = false;\n\t\n\t\t\t/**\n\t\t\t * Whether the most recently requested interpolation has completed.\n\t\t\t * @private @type {boolean}\n\t\t\t */\n\t\t\tthis._changed = true;\n\t\n\t\t\t/**\n\t\t\t * How many samples have been uniformly filled following\n\t\t\t * completion of most recently requested interpolation.\n\t\t\t * @private @type {number}\n\t\t\t */\n\t\t\tthis._filled = 0;\n\t\n\t\t\tif (!this._discrete) this.setSkew(skew);\n\t\t\telse this._skew = 0;\n\t\t\tthis.setStartValue(this._startValue);\n\t\t}\n\t\n\t\t/**\n\t\t * Utility for managing lifecycles of lookup tables.\n\t\t * @private\n\t\t * @param {string} oldKey\n\t\t */\n\t\t_removeTableReference(oldKey) {\n\t\t\tif (oldKey === nullTableKey) return;\n\t\t\tconst { id } = this.info;\n\t\t\t/** @type {string[] | undefined} */\n\t\t\tconst references = WamParameterInterpolator._tableReferences[oldKey];\n\t\t\tif (references) {\n\t\t\t\tconst index = references.indexOf(id);\n\t\t\t\tif (index !== -1) references.splice(index, 1);\n\t\t\t\t// clean up?\n\t\t\t\tif (references.length === 0) {\n\t\t\t\t\tdelete WamParameterInterpolator._tables[oldKey];\n\t\t\t\t\tdelete WamParameterInterpolator._tableReferences[oldKey];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Update interpolation curve based on skew factor in range `[-1, 1]`.\n\t\t * Setting to `0` results in linear interpolation. Positive values\n\t\t * result in convex exponential curves while negative vales result\n\t\t * in concave exponential curves.\n\t\t * @param {number} skew\n\t\t */\n\t\tsetSkew(skew) {\n\t\t\tif (this._skew === skew || this._discrete) return;\n\t\t\tif (skew < -1 || skew > 1) throw Error('skew must be in range [-1.0, 1.0]');\n\t\n\t\t\tconst newKey = [this._N, skew].join('_');\n\t\t\tconst oldKey = this._tableKey;\n\t\t\tconst { id } = this.info;\n\t\t\t// just in case...\n\t\t\tif (newKey === oldKey) return;\n\t\n\t\t\tif (WamParameterInterpolator._tables[newKey]) { // lookup table already exists\n\t\t\t\t// add new reference\n\t\t\t\t/** @type {string[] | undefined} */\n\t\t\t\tconst references = WamParameterInterpolator._tableReferences[newKey];\n\t\t\t\tif (references) references.push(id);\n\t\t\t\telse WamParameterInterpolator._tableReferences[newKey] = [id];\n\t\t\t} else { // compute new lookup table\n\t\t\t\tlet e = Math.abs(skew);\n\t\t\t\t/* eslint-disable-next-line */\n\t\t\t\te = Math.pow(3.0 - e, e * (e + 2.0));\n\t\t\t\tconst linear = e === 1.0;\n\t\t\t\tconst N = this._N;\n\t\t\t\tconst table = new Float32Array(N + 1);\n\t\t\t\tif (linear) for (let n = 0; n <= N; ++n) table[n] = (n / N);\n\t\t\t\telse for (let n = 0; n <= N; ++n) table[n] = (n / N) ** e;\n\t\n\t\t\t\tWamParameterInterpolator._tables[newKey] = table;\n\t\t\t\tWamParameterInterpolator._tableReferences[newKey] = [id];\n\t\t\t}\n\t\t\t// remove old reference\n\t\t\tthis._removeTableReference(oldKey);\n\t\t\tthis._skew = skew;\n\t\t\tthis._tableKey = newKey;\n\t\t\tthis._table = WamParameterInterpolator._tables[this._tableKey];\n\t\t}\n\t\n\t\t/**\n\t\t * Reset the interpolator to specified value, setting all per-sample\n\t\t * values immediately if `fill` is `true`. Assumes `value` is within\n\t\t * parameter's valid range `[minValue, maxValue]`;\n\t\t * @param {number} value\n\t\t * @param {boolean} fill\n\t\t */\n\t\tsetStartValue(value, fill = true) {\n\t\t\tthis._n = this._N;\n\t\t\tthis._startValue = value;\n\t\t\tthis._endValue = value;\n\t\t\tthis._currentValue = value;\n\t\t\tthis._deltaValue = 0;\n\t\t\tthis._inverted = false;\n\t\t\tif (fill) {\n\t\t\t\tthis.values.fill(value);\n\t\t\t\tthis._changed = true;\n\t\t\t\tthis._filled = this.values.length;\n\t\t\t} else {\n\t\t\t\tthis._changed = false;\n\t\t\t\tthis._filled = 0;\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Prepare to compute per-sample values interpolating to `value` on\n\t\t * next `process` call. Assumes `value` is within parameter's valid\n\t\t * range `[minValue, maxValue]`;\n\t\t * @param {number} value\n\t\t */\n\t\tsetEndValue(value) {\n\t\t\tif (value === this._endValue) return;\n\t\t\tthis._n = 0;\n\t\t\tthis._startValue = this._currentValue;\n\t\t\tthis._endValue = value;\n\t\t\tthis._deltaValue = this._endValue - this._startValue;\n\t\t\tthis._inverted = (this._deltaValue > 0 && this._skew >= 0)\n\t\t\t|| (this._deltaValue <= 0 && this._skew < 0);\n\t\t\tthis._changed = false;\n\t\t\tthis._filled = 0;\n\t\t}\n\t\n\t\t/**\n\t\t * Compute per-sample value updates in the specified range `[startSample, endSample)`,\n\t\t * interpolating if applicable. Results are stored in `values`. Assumes this will be\n\t\t * called once per parameter per processing slice in `WamProcessor.process`.\n\t\t * @param {number} startSample\n\t\t * @param {number} endSample\n\t\t */\n\t\tprocess(startSample, endSample) {\n\t\t\tif (this.done) return;\n\t\t\tconst length = endSample - startSample;\n\t\t\tlet fill = 0;\n\t\t\tconst change = this._N - this._n;\n\t\t\tif (this._discrete || !change) fill = length;\n\t\t\telse {\n\t\t\t\tif (change < length) {\n\t\t\t\t\tfill = Math.min(length - change, samplesPerQuantum);\n\t\t\t\t\tendSample -= fill;\n\t\t\t\t}\n\t\t\t\tif (endSample > startSample) { // interpolate\n\t\t\t\t\tif (this._inverted) {\n\t\t\t\t\t\tfor (let i = startSample; i < endSample; ++i) {\n\t\t\t\t\t\t\tconst tableValue = 1.0 - this._table[this._N - ++this._n];\n\t\t\t\t\t\t\tthis.values[i] = this._startValue + tableValue * this._deltaValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let i = startSample; i < endSample; ++i) {\n\t\t\t\t\t\t\tconst tableValue = this._table[++this._n];\n\t\t\t\t\t\t\tthis.values[i] = this._startValue + tableValue * this._deltaValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (fill > 0) {\n\t\t\t\t\tstartSample = endSample;\n\t\t\t\t\tendSample += fill;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fill > 0) {\n\t\t\t\t// fill any remaining slots\n\t\t\t\tthis.values.fill(this._endValue, startSample, endSample);\n\t\t\t\tthis._filled += fill;\n\t\t\t}\n\t\t\tthis._currentValue = this.values[endSample - 1];\n\t\t\tif (this._n === this._N) {\n\t\t\t\tif (!this._changed) this._changed = true;\n\t\t\t\telse if (this._filled >= this.values.length) {\n\t\t\t\t\tthis.setStartValue(this._endValue, false);\n\t\t\t\t\tthis._changed = true;\n\t\t\t\t\tthis._filled = this.values.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * Whether or not further processing is required before\n\t\t * accessing per-sample values.\n\t\t * @returns {boolean}\n\t\t */\n\t\tget done() {\n\t\t\treturn this._changed && this._filled === this.values.length;\n\t\t}\n\t\n\t\t/**\n\t\t * Whether or not interpolation is complete and internal state\n\t\t * is equal to `value`.\n\t\t * @param {number} value\n\t\t * @returns {boolean}\n\t\t */\n\t\tis(value) {\n\t\t\treturn this._endValue === value && this.done;\n\t\t}\n\t\n\t\t/**\n\t\t * Call this when no longer using the instance in order\n\t\t * to allow deletion of unused static lookup tables.\n\t\t */\n\t\tdestroy() {\n\t\t\t// clean out reference associated with this instance\n\t\t\tthis._removeTableReference(this._tableKey);\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameterInterpolator) ModuleScope.WamParameterInterpolator = WamParameterInterpolator;\n\t}\n\n\treturn WamParameterInterpolator;\n};\n\nexport default getWamParameterInterpolator;\n","/** @typedef {import('@webaudiomodules/api').WamProcessor} IWamProcessor */\n/** @typedef {typeof import('@webaudiomodules/api').WamProcessor} WamProcessorConstructor */\n/** @typedef {import('@webaudiomodules/api').WamParameter} WamParameter */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterDataMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterData} WamParameterData */\n/** @typedef {import('@webaudiomodules/api').WamParameterMap} WamParameterMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamTransportData} WamTransportData */\n/** @typedef {import('@webaudiomodules/api').WamMidiData} WamMidiData */\n/** @typedef {import('@webaudiomodules/api').WamBinaryData} WamBinaryData */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').PendingWamEvent} PendingWamEvent */\n/** @typedef {import('./types').ProcessingSlice} ProcessingSlice */\n/** @typedef {import('./types').WamParameterInterpolatorMap} WamParameterInterpolatorMap */\n/** @typedef {import('./types').WamEventRingBuffer} WamEventRingBuffer */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} moduleId\n * @returns {WamProcessorConstructor}\n */\nconst getWamProcessor = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\tconst {\n\t\tAudioWorkletProcessor,\n\t\twebAudioModules,\n\t} = audioWorkletGlobalScope;\n\n\t/** @type {WamSDKBaseModuleScope} */\n\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\tconst {\n\t\tRingBuffer,\n\t\tWamEventRingBuffer,\n\t\tWamParameter,\n\t\tWamParameterInterpolator\n\t} = ModuleScope;\n\n\t/**\n\t * @implements {IWamProcessor}\n\t */\n\tclass WamProcessor extends AudioWorkletProcessor {\n\t\t/**\n\t\t * @param {AudioWorkletNodeOptions} options\n\t\t */\n\t\tconstructor(options) {\n\t\t\tsuper();\n\t\t\tconst {\n\t\t\t\tgroupId,\n\t\t\t\tmoduleId,\n\t\t\t\tinstanceId,\n\t\t\t\tuseSab,\n\t\t\t} = options.processorOptions;\n\n\t\t\tif (!moduleId) throw Error('must provide moduleId argument in processorOptions!');\n\t\t\tif (!instanceId) throw Error('must provide instanceId argument in processorOptions!');\n\n\t\t\t/** @type {string} */\n\t\t\tthis.groupId = groupId;\n\t\t\t/** @type {string} */\n\t\t\tthis.moduleId = moduleId;\n\t\t\t/** @type {string} */\n\t\t\tthis.instanceId = instanceId;\n\t\t\t/** @type {number} */\n\t\t\tthis._samplesPerQuantum = 128;\n\t\t\t/** @type {number} */\n\t\t\tthis._compensationDelay = 0;\n\t\t\t/** @type {WamParameterInfoMap} */\n\t\t\tthis._parameterInfo = {};\n\t\t\t/** @type {WamParameterMap} */\n\t\t\tthis._parameterState = {};\n\t\t\t/** @type {WamParameterInterpolatorMap} */\n\t\t\tthis._parameterInterpolators = {};\n\t\t\t/** @type {PendingWamEvent[]} */\n\t\t\tthis._eventQueue = [];\n\t\t\t/** @type {Record<number, (...args: any[]) => any>} */\n\t\t\tthis._pendingResponses = {};\n\t\t\t/** @type {boolean} */\n\t\t\tthis._useSab = !!useSab && !!globalThis.SharedArrayBuffer;\n\t\t\t/** @type {boolean} */\n\t\t\tthis._eventSabReady = false;\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._audioToMainEventSab = null;\n\t\t\t/** @type {SharedArrayBuffer} */\n\t\t\tthis._mainToAudioEventSab = null;\n\t\t\t/** @type {WamEventRingBuffer} */\n\t\t\tthis._eventWriter = null;\n\t\t\t/** @type {WamEventRingBuffer} */\n\t\t\tthis._eventReader = null;\n\t\t\t/** @type {boolean} */\n\t\t\tthis._initialized = false;\n\t\t\t/** @type {boolean} */\n\t\t\tthis._destroyed = false;\n\n\t\t\twebAudioModules.addWam(this);\n\n\t\t\tthis.port.onmessage = this._onMessage.bind(this);\n\n\t\t\tif (this._useSab) this._configureSab();\n\t\t}\n\n\t\t/**\n\t\t * Compensation delay hint in seconds.\n\t\t * @returns {number}\n\t\t */\n\t\tgetCompensationDelay() { return this._compensationDelay; }\n\n\t\t/**\n\t\t * Schedule a WamEvent.\n\t\t * Listeners will be triggered when the event is processed.\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\tscheduleEvents(...events) {\n\t\t\tlet i = 0;\n\t\t\twhile (i < events.length) {\n\t\t\t\t// no need for ids if scheduled from audio thread\n\t\t\t\tthis._eventQueue.push({ id: 0, event: events[i] });\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Schedule events for all the downstream WAMs\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\temitEvents(...events) {\n\t\t\twebAudioModules.emitEvents(this, ...events);\n\t\t}\n\n\t\t/**\n\t\t * Clear all pending WamEvents.\n\t\t */\n\t\tclearEvents() {\n\t\t\tthis._eventQueue = [];\n\t\t}\n\n\t\t/**\n\t\t * Process a block of samples. Note that `parameters` argument is ignored.\n\t\t * @param {Float32Array[][]} inputs\n\t\t * @param {Float32Array[][]} outputs\n\t\t * @param {{[x: string]: Float32Array}} parameters\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tif (!this._initialized) return true;\n\t\t\tif (this._destroyed) return false;\n\t\t\tif (this._eventSabReady) this.scheduleEvents(...this._eventReader.read());\n\n\t\t\tconst processingSlices = this._getProcessingSlices();\n\t\t\tlet i = 0;\n\t\t\twhile (i < processingSlices.length) {\n\t\t\t\tconst { range, events } = processingSlices[i];\n\t\t\t\tconst [startSample, endSample] = range;\n\t\t\t\t// pause to process events at proper sample\n\t\t\t\tlet j = 0;\n\t\t\t\twhile (j < events.length) {\n\t\t\t\t\tthis._processEvent(events[j]);\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\t// perform parameter interpolation\n\t\t\t\tthis._interpolateParameterValues(startSample, endSample);\n\t\t\t\t// continue processing\n\t\t\t\tthis._process(startSample, endSample, inputs, outputs, parameters);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * Stop processing and remove the node from the WAM event graph.\n\t\t */\n\t\tdestroy() {\n\t\t\tthis._destroyed = true;\n\t\t\tthis.port.close();\n\t\t\twebAudioModules.removeWam(this);\n\t\t}\n\n\t\t/**\n\t\t * Override to generate map of WamParameterInfo objects.\n\t\t * @returns {WamParameterInfoMap}\n\t\t */\n\t\t_generateWamParameterInfo() { return {}; }\n\n\t\t/**\n\t\t * Post-constructor initialization method.\n\t\t */\n\t\t_initialize() {\n\t\t\tthis._parameterState = {};\n\t\t\tthis._parameterInterpolators = {};\n\t\t\tthis._parameterInfo = this._generateWamParameterInfo();\n\t\t\tObject.keys(this._parameterInfo).forEach((parameterId) => {\n\t\t\t\tconst info = this._parameterInfo[parameterId];\n\t\t\t\tthis._parameterState[parameterId] = new WamParameter(this._parameterInfo[parameterId]);\n\t\t\t\tthis._parameterInterpolators[parameterId] = new WamParameterInterpolator(info, 256);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Communicate with WamNode to configure SharedArrayBuffers.\n\t\t */\n\t\t_configureSab() {\n\t\t\tconst eventCapacity = 2 ** 10;\n\t\t\tconst parameterIds = Object.keys(this._parameterInfo);\n\t\t\tif (this._eventSabReady) {\n\t\t\t\t// if parameter set changes after initialization\n\t\t\t\tthis._eventWriter.setParameterIds(parameterIds);\n\t\t\t\tthis._eventReader.setParameterIds(parameterIds);\n\t\t\t}\n\t\t\tthis.port.postMessage({ eventSab: { eventCapacity, parameterIds } });\n\t\t}\n\n\t\t/**\n\t\t * Messages from main thread appear here.\n\t\t * @param {MessageEvent} message\n\t\t */\n\t\tasync _onMessage(message) {\n\t\t\tif (message.data.request) {\n\t\t\t\tconst {\n\t\t\t\t\tid, request, content,\n\t\t\t\t} = message.data;\n\t\t\t\tconst response = { id, response: request };\n\t\t\t\tconst requestComponents = request.split('/');\n\t\t\t\tconst verb = requestComponents[0];\n\t\t\t\tconst noun = requestComponents[1];\n\t\t\t\tresponse.content = 'error';\n\t\t\t\tif (verb === 'get') {\n\t\t\t\t\tif (noun === 'parameterInfo') {\n\t\t\t\t\t\tlet { parameterIds } = content;\n\t\t\t\t\t\tif (!parameterIds.length) parameterIds = Object.keys(this._parameterInfo);\n\t\t\t\t\t\tconst parameterInfo = {};\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\twhile (i < parameterIds.length) {\n\t\t\t\t\t\t\tconst parameterId = parameterIds[i];\n\t\t\t\t\t\t\tparameterInfo[parameterId] = this._parameterInfo[parameterId];\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresponse.content = parameterInfo;\n\t\t\t\t\t} else if (noun === 'parameterValues') {\n\t\t\t\t\t\t/*eslint-disable-next-line prefer-const */\n\t\t\t\t\t\tlet { normalized, parameterIds } = content;\n\t\t\t\t\t\tresponse.content = this._getParameterValues(normalized, parameterIds);\n\t\t\t\t\t} else if (noun === 'state') {\n\t\t\t\t\t\tresponse.content = this._getState();\n\t\t\t\t\t\t// ...additional state?\n\t\t\t\t\t} else if (noun === 'compensationDelay') {\n\t\t\t\t\t\tresponse.content = this.getCompensationDelay();\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'set') {\n\t\t\t\t\tif (noun === 'parameterValues') {\n\t\t\t\t\t\tconst { parameterValues } = content;\n\t\t\t\t\t\tthis._setParameterValues(parameterValues, true);\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t} else if (noun === 'state') {\n\t\t\t\t\t\tconst { state } = content;\n\t\t\t\t\t\tthis._setState(state);\n\t\t\t\t\t\t// ...additional state?\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'add') {\n\t\t\t\t\tif (noun === 'event') {\n\t\t\t\t\t\tconst { event } = content;\n\t\t\t\t\t\tthis._eventQueue.push({ id, event });\n\t\t\t\t\t\treturn; // defer postMessage until event is processed\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'remove') {\n\t\t\t\t\tif (noun === 'events') {\n\t\t\t\t\t\tconst ids = this._eventQueue.map((queued) => queued.id);\n\t\t\t\t\t\tthis.clearEvents();\n\t\t\t\t\t\tresponse.content = ids;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'connect') {\n\t\t\t\t\tif (noun === 'events') {\n\t\t\t\t\t\tconst { wamInstanceId, output } = content;\n\t\t\t\t\t\tthis._connectEvents(wamInstanceId, output);\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'disconnect') {\n\t\t\t\t\tif (noun === 'events') {\n\t\t\t\t\t\tconst { wamInstanceId, output } = content;\n\t\t\t\t\t\tthis._disconnectEvents(wamInstanceId, output);\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t} else if (verb === 'initialize') {\n\t\t\t\t\tif (noun === 'processor') {\n\t\t\t\t\t\tthis._initialize();\n\t\t\t\t\t\tthis._initialized = true;\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t\telse if (noun === 'eventSab') {\n\t\t\t\t\t\tconst { mainToAudioEventSab, audioToMainEventSab } = content;\n\n\t\t\t\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\t\t\t\tthis._audioToMainEventSab = audioToMainEventSab;\n\n\t\t\t\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\t\t\t\tthis._mainToAudioEventSab = mainToAudioEventSab;\n\n\t\t\t\t\t\tconst parameterIds = Object.keys(this._parameterInfo);\n\t\t\t\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\t\t\t\tthis._eventWriter = new WamEventRingBuffer(RingBuffer, this._audioToMainEventSab,\n\t\t\t\t\t\t\tparameterIds);\n\t\t\t\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\t\t\t\tthis._eventReader = new WamEventRingBuffer(RingBuffer, this._mainToAudioEventSab,\n\t\t\t\t\t\t\tparameterIds);\n\n\t\t\t\t\t\tthis._eventSabReady = true;\n\t\t\t\t\t\tdelete response.content;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.port.postMessage(response);\n\t\t\t} else if (message.data.destroy) {\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {WamTransportData} transportData\n\t\t */\n\t\t_onTransport(transportData) {\n\t\t\t// Override for custom transport handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onTransport not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamMidiData} midiData\n\t\t */\n\t\t_onMidi(midiData) {\n\t\t\t// Override for custom midi handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onMidi not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamBinaryData} sysexData\n\t\t */\n\t\t_onSysex(sysexData) {\n\t\t\t// Override for custom sysex handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onMidi not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamMidiData} mpeData\n\t\t */\n\t\t_onMpe(mpeData) {\n\t\t\t// Override for custom mpe handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onMpe not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {WamBinaryData} oscData\n\t\t */\n\t\t_onOsc(oscData) {\n\t\t\t// Override for custom osc handling\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_onOsc not implemented!');\n\t\t}\n\n\t\t/**\n\t\t * @param {any} state\n\t\t */\n\t\t_setState(state) {\n\t\t\tif (state.parameterValues) this._setParameterValues(state.parameterValues, false);\n\t\t}\n\n\t\t/**\n\t\t * @returns {any}\n\t\t */\n\t\t_getState() {\n\t\t\treturn { parameterValues: this._getParameterValues(false) };\n\t\t}\n\n\t\t/**\n\t\t * @param {boolean} normalized\n\t\t * @param {string[]=} parameterIds\n\t\t * @returns {WamParameterDataMap}\n\t\t */\n\t\t_getParameterValues(normalized, parameterIds) {\n\t\t\t/** @type {WamParameterDataMap} */\n\t\t\tconst parameterValues = {};\n\t\t\tif (!parameterIds || !parameterIds.length) parameterIds = Object.keys(this._parameterState);\n\t\t\tlet i = 0;\n\t\t\twhile (i < parameterIds.length) {\n\t\t\t\tconst id = parameterIds[i];\n\t\t\t\t/** @type {WamParameter} */\n\t\t\t\tconst parameter = this._parameterState[id];\n\t\t\t\tparameterValues[id] = {\n\t\t\t\t\tid,\n\t\t\t\t\tvalue: normalized ? parameter.normalizedValue : parameter.value,\n\t\t\t\t\tnormalized,\n\t\t\t\t};\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn parameterValues;\n\t\t}\n\n\t\t/**\n\t\t * @param {WamParameterDataMap} parameterUpdates\n\t\t * @param {boolean} interpolate\n\t\t */\n\t\t_setParameterValues(parameterUpdates, interpolate) {\n\t\t\tconst parameterIds = Object.keys(parameterUpdates);\n\t\t\tlet i = 0;\n\t\t\twhile (i < parameterIds.length) {\n\t\t\t\tthis._setParameterValue(parameterUpdates[parameterIds[i]], interpolate);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {WamParameterData} parameterUpdate\n\t\t * @param {boolean} interpolate\n\t\t */\n\t\t_setParameterValue(parameterUpdate, interpolate) {\n\t\t\tconst { id, value, normalized } = parameterUpdate;\n\t\t\t/** @type {WamParameter} */\n\t\t\tconst parameter = this._parameterState[id];\n\t\t\tif (!parameter) return;\n\t\t\tif (!normalized) parameter.value = value;\n\t\t\telse parameter.normalizedValue = value;\n\t\t\tconst interpolator = this._parameterInterpolators[id];\n\t\t\tif (interpolate) interpolator.setEndValue(parameter.value);\n\t\t\telse interpolator.setStartValue(parameter.value);\n\t\t}\n\n\t\t/**\n\t\t * @param {number} startIndex\n\t\t * @param {number} endIndex\n\t\t */\n\t\t_interpolateParameterValues(startIndex, endIndex) {\n\t\t\tconst parameterIds = Object.keys(this._parameterInterpolators);\n\t\t\tlet i = 0;\n\t\t\twhile (i < parameterIds.length) {\n\t\t\t\tthis._parameterInterpolators[parameterIds[i]].process(startIndex, endIndex);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {string} wamInstanceId\n\t\t * @param {number} [output]\n\t\t */\n\t\t_connectEvents(wamInstanceId, output) {\n\t\t\twebAudioModules.connectEvents(this.groupId, this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} [wamInstanceId]\n\t\t * @param {number} [output]\n\t\t */\n\t\t_disconnectEvents(wamInstanceId, output) {\n\t\t\tif (typeof wamInstanceId === 'undefined') {\n\t\t\t\twebAudioModules.disconnectEvents(this.groupId, this.instanceId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twebAudioModules.disconnectEvents(this.groupId, this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\t/**\n\t\t * Example implementation of custom sample accurate event scheduling.\n\t\t * @returns {ProcessingSlice[]}\n\t\t * */\n\t\t_getProcessingSlices() {\n\t\t\tconst response = 'add/event';\n\t\t\t/** @ts-ignore */\n\t\t\tconst { currentTime, sampleRate } = audioWorkletGlobalScope;\n\t\t\t/** @type {{[sampleIndex: number]: WamEvent[]}} */\n\t\t\tconst eventsBySampleIndex = {};\n\t\t\t// assumes events arrive sorted by time\n\t\t\tlet i = 0;\n\t\t\twhile (i < this._eventQueue.length) {\n\t\t\t\tconst { id, event } = this._eventQueue[i];\n\t\t\t\tconst offsetSec = event.time - currentTime;\n\t\t\t\tconst sampleIndex = offsetSec > 0 ? Math.round(offsetSec * sampleRate) : 0;\n\t\t\t\tif (sampleIndex < this._samplesPerQuantum) {\n\t\t\t\t\tif (eventsBySampleIndex[sampleIndex]) eventsBySampleIndex[sampleIndex].push(event);\n\t\t\t\t\telse eventsBySampleIndex[sampleIndex] = [event];\n\t\t\t\t\t// notify main thread\n\t\t\t\t\tif (id) this.port.postMessage({ id, response });\n\t\t\t\t\telse if (this._eventSabReady) this._eventWriter.write(event);\n\t\t\t\t\telse this.port.postMessage({ event });\n\t\t\t\t\tthis._eventQueue.shift();\n\t\t\t\t\ti = -1;\n\t\t\t\t} else break;\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\t/** @type {ProcessingSlice[]} */\n\t\t\tconst processingSlices = [];\n\t\t\tconst keys = Object.keys(eventsBySampleIndex);\n\t\t\tif (keys[0] !== '0') {\n\t\t\t\tkeys.unshift('0');\n\t\t\t\teventsBySampleIndex['0'] = [];\n\t\t\t}\n\t\t\tconst lastIndex = keys.length - 1;\n\t\t\ti = 0;\n\t\t\twhile (i < keys.length) {\n\t\t\t\tconst key = keys[i];\n\t\t\t\tconst startSample = parseInt(key);\n\t\t\t\tconst endSample = (i < lastIndex) ? parseInt(keys[i + 1]) : this._samplesPerQuantum;\n\t\t\t\tprocessingSlices.push({ range: [startSample, endSample], events: eventsBySampleIndex[key] });\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn processingSlices;\n\t\t}\n\n\t\t/** @param {WamEvent} event */\n\t\t_processEvent(event) {\n\t\t\tswitch (event.type) {\n\t\t\tcase 'wam-automation': this._setParameterValue(event.data, true); break;\n\t\t\tcase 'wam-transport': this._onTransport(event.data); break;\n\t\t\tcase 'wam-midi': this._onMidi(event.data); break;\n\t\t\tcase 'wam-sysex': this._onSysex(event.data); break;\n\t\t\tcase 'wam-mpe': this._onMpe(event.data); break;\n\t\t\tcase 'wam-osc': this._onOsc(event.data); break;\n\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Override this to implement custom DSP.\n\t\t * @param {number} startSample beginning of processing slice\n\t\t * @param {number} endSample end of processing slice\n\t\t * @param {Float32Array[][]} inputs\n\t\t * @param {Float32Array[][]} outputs\n\t\t * @param {{[x: string]: Float32Array}} parameters\n\t\t */\n\t\t_process(startSample, endSample, inputs, outputs, parameters) {\n\t\t\t// Override for custom processing\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error('_process not implemented!');\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\tif (!ModuleScope.WamProcessor) ModuleScope.WamProcessor = WamProcessor;\n\t}\n\n\treturn WamProcessor;\n};\n\nexport default getWamProcessor;\n","/** @typedef {import('@webaudiomodules/api').WamNode} IWamNode */\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterDataMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamEventType} WamEventType */\n/** @typedef {import('./types').WamEventRingBuffer} WamEventRingBuffer */\n\nimport addFunctionModule from './addFunctionModule.js';\nimport getRingBuffer from './RingBuffer.js';\nimport getWamArrayRingBuffer from './WamArrayRingBuffer.js';\nimport getWamEventRingBuffer from './WamEventRingBuffer.js';\nimport getWamParameter from './WamParameter.js';\nimport getWamParameterInfo from './WamParameterInfo.js';\nimport getWamParameterInterpolator from './WamParameterInterpolator.js';\nimport getWamProcessor from './WamProcessor.js';\n\nconst RingBuffer = getRingBuffer();\nconst WamEventRingBuffer = getWamEventRingBuffer();\n\n/**\n * @implements {IWamNode}\n */\nexport default class WamNode extends AudioWorkletNode {\n\t/**\n\t * Register scripts required for the processor. Must be called before constructor.\n\t * @param {BaseAudioContext} audioContext\n\t * @param {string} moduleId\n\t */\n\tstatic async addModules(audioContext, moduleId) {\n\t\tconst { audioWorklet } = audioContext;\n\t\tawait addFunctionModule(audioWorklet, getRingBuffer, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamEventRingBuffer, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamArrayRingBuffer, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamParameter, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamParameterInfo, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamParameterInterpolator, moduleId);\n\t\tawait addFunctionModule(audioWorklet, getWamProcessor, moduleId);\n\t}\n\n\t/**\n\t * @param {WebAudioModule} module\n\t * @param {AudioWorkletNodeOptions} options\n\t */\n\tconstructor(module, options) {\n\t\tconst { audioContext, groupId, moduleId, instanceId } = module;\n\t\toptions.processorOptions = {\n\t\t\tgroupId,\n\t\t\tmoduleId,\n\t\t\tinstanceId,\n\t\t\t...options.processorOptions,\n\t\t};\n\t\tsuper(audioContext, moduleId, options);\n\n\t\t/** @type {WebAudioModule} */\n\t\tthis.module = module;\n\t\t/** @private @type {Set<WamEventType>} */\n\t\tthis._supportedEventTypes = new Set(['wam-automation', 'wam-transport', 'wam-midi', 'wam-sysex', 'wam-mpe', 'wam-osc']);\n\t\t/** @private @type {number} */\n\t\tthis._messageId = 1;\n\t\t/** @private @type {Record<number, (...args: any[]) => any>} */\n\t\tthis._pendingResponses = {};\n\t\t/** @private @type {Record<number, () => any>} */\n\t\tthis._pendingEvents = {};\n\t\t/** @private @type {boolean} */\n\t\tthis._useSab = false; // can override this via processorOptions;\n\t\t/** @private @type {boolean} */\n\t\tthis._eventSabReady = false;\n\t\t/** @private @type {boolean} */\n\t\tthis._destroyed = false;\n\n\t\tthis.port.onmessage = this._onMessage.bind(this);\n\t}\n\n\t/** @returns {string} */\n\tget groupId() { return this.module.groupId; }\n\t/** @returns {string} */\n\tget moduleId() { return this.module.moduleId; }\n\t/** @returns {string} */\n\tget instanceId() { return this.module.instanceId; }\n\n\t/**\n\t * Get parameter info for the specified parameter ids,\n\t * or omit argument to get info for all parameters.\n\t * @param {string[]} parameterIds\n\t * @returns {Promise<WamParameterInfoMap>}\n\t */\n\tasync getParameterInfo(...parameterIds) {\n\t\tconst request = 'get/parameterInfo';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { parameterIds },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get parameter values for the specified parameter ids,\n\t * or omit argument to get values for all parameters.\n\t * @param {boolean} normalized\n\t * @param {string[]} parameterIds\n\t * @returns {Promise<WamParameterDataMap>}\n\t */\n\tasync getParameterValues(normalized, ...parameterIds) {\n\t\tconst request = 'get/parameterValues';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { normalized, parameterIds },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Set parameter values for the specified parameter ids.\n\t * @param {WamParameterDataMap} parameterValues\n\t * @returns {Promise<void>}\n\t */\n\tasync setParameterValues(parameterValues) {\n\t\tconst request = 'set/parameterValues';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { parameterValues },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns an object (such as JSON or a serialized blob)\n\t * that can be used to restore the WAM's state.\n\t * @returns {Promise<any>}\n\t */\n\tasync getState() {\n\t\tconst request = 'get/state';\n\t\t// perhaps the only info to request from processor is param state?\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({ id, request });\n\t\t});\n\t}\n\n\t/**\n\t * Use an object (such as JSON or a serialized blob)\n\t * to restore the WAM's state.\n\t * @param {any} state\n\t */\n\tasync setState(state) {\n\t\tconst request = 'set/state';\n\t\tconst id = this._generateMessageId();\n\t\t// perhaps the only info to send to processor is param state?\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { state },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Compensation delay hint in seconds.\n\t * @returns {Promise<number>}\n\t */\n\tasync getCompensationDelay() {\n\t\tconst request = 'get/compensationDelay';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({ id, request });\n\t\t});\n\t}\n\n\t/**\n\t * Register a callback function so it will be called\n\t * when matching events are processed.\n\t * @param {WamEventType} type\n\t * @param {EventListenerOrEventListenerObject | null} callback\n\t * @param {AddEventListenerOptions | boolean} options;\n\t */\n\taddEventListener(type, callback, options) {\n\t\tif (this._supportedEventTypes.has(type)) super.addEventListener(type, callback, options);\n\t}\n\n\t/**\n\t * Deregister a callback function so it will no longer\n\t * be called when matching events are processed.\n\t * @param {WamEventType} type\n\t * @param {EventListenerOrEventListenerObject | null} callback\n\t * @param {AddEventListenerOptions | boolean} options;\n\t */\n\tremoveEventListener(type, callback, options) {\n\t\tif (this._supportedEventTypes.has(type)) super.removeEventListener(type, callback, options);\n\t}\n\n\t/**\n\t * From the main thread, schedule a WamEvent.\n\t * Listeners will be triggered when the event is processed.\n\t * @param {WamEvent[]} events\n\t */\n\tscheduleEvents(...events) {\n\t\tlet i = 0;\n\t\tconst numEvents = events.length;\n\t\tif (this._eventSabReady) {\n\t\t\ti = this._eventWriter.write(...events);\n\t\t\t// fall back on message port if ring buffer gets full\n\t\t}\n\t\twhile (i < numEvents) {\n\t\t\tconst event = events[i];\n\t\t\tconst request = 'add/event';\n\t\t\tconst id = this._generateMessageId();\n\t\t\tlet processed = false;\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\t\tthis._pendingEvents[id] = () => { if (!processed) reject(); };\n\t\t\t\tthis.port.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\trequest,\n\t\t\t\t\tcontent: { event },\n\t\t\t\t});\n\t\t\t}).then((resolved) => {\n\t\t\t\tprocessed = true;\n\t\t\t\tdelete this._pendingEvents[id];\n\t\t\t\tthis._onEvent(event);\n\t\t\t}).catch((rejected) => { delete this._pendingResponses[id]; });\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/** From the main thread, clear all pending WamEvents. */\n\tasync clearEvents() {\n\t\tconst request = 'remove/events';\n\t\tconst id = this._generateMessageId();\n\t\tconst ids = Object.keys(this._pendingEvents);\n\t\tif (ids.length) {\n\t\t\treturn new Promise((/** @type {(ids: string[]) => any} */resolve) => {\n\t\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\t\tthis.port.postMessage({ id, request });\n\t\t\t}).then((clearedIds) => {\n\t\t\t\tclearedIds.forEach((clearedId) => {\n\t\t\t\t\tthis._pendingEvents[clearedId]();\n\t\t\t\t\tdelete this._pendingEvents[clearedId];\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} toId the instanceId of the destination WAM for the event stream\n\t * @param {number} [output] the event output stream of the source WAM\n\t */\n\tconnectEvents(toId, output) {\n\t\tconst request = 'connect/events';\n\t\tconst id = this._generateMessageId();\n\t\tnew Promise((resolve, reject) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { wamInstanceId: toId, output },\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} [toId] the instanceId of the destination WAM for the event stream\n\t * @param {number} [output]\n\t */\n\tdisconnectEvents(toId, output) {\n\t\tconst request = 'disconnect/events';\n\t\tconst id = this._generateMessageId();\n\t\tnew Promise((resolve, reject) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({\n\t\t\t\tid,\n\t\t\t\trequest,\n\t\t\t\tcontent: { wamInstanceId: toId, output },\n\t\t\t});\n\t\t});\n\t}\n\n\t/** Stop processing and remove the node from the graph. */\n\tdestroy() {\n\t\tif (this._audioToMainInterval) clearInterval(this._audioToMainInterval);\n\t\tthis.port.postMessage({ destroy: true });\n\t\tthis.port.close();\n\t\tthis.disconnect();\n\t\tthis._destroyed = true;\n\t}\n\n\t_generateMessageId() {\n\t\t/* eslint-disable-next-line no-plusplus */\n\t\treturn this._messageId++;\n\t}\n\n\t/**\n\t * Post-constructor (asynchronous) initialization method.\n\t */\n\tasync _initialize() {\n\t\tconst request = 'initialize/processor';\n\t\tconst id = this._generateMessageId();\n\t\treturn new Promise((resolve) => {\n\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\tthis.port.postMessage({ id, request });\n\t\t});\n\t}\n\n\t/**\n\t * Messages from audio thread\n\t * @param {MessageEvent} message\n\t * */\n\t_onMessage(message) {\n\t\tconst { data } = message;\n\t\tconst { response, event, eventSab } = data;\n\t\tif (response) {\n\t\t\tconst { id, content } = data;\n\t\t\tconst resolvePendingResponse = this._pendingResponses[id];\n\t\t\tif (resolvePendingResponse) {\n\t\t\t\tdelete this._pendingResponses[id];\n\t\t\t\tresolvePendingResponse(content);\n\t\t\t}\n\t\t\t// else console.log(`unhandled message | response: ${response} content: ${content}`);\n\t\t} else if (eventSab) {\n\t\t\tthis._useSab = true;\n\t\t\tconst { eventCapacity, parameterIds } = eventSab;\n\n\t\t\tif (this._eventSabReady) {\n\t\t\t\t// if parameter set changes after initialization\n\t\t\t\tthis._eventWriter.setParameterIds(parameterIds);\n\t\t\t\tthis._eventReader.setParameterIds(parameterIds);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\tthis._mainToAudioEventSab = WamEventRingBuffer.getStorageForEventCapacity(RingBuffer,\n\t\t\t\teventCapacity);\n\n\t\t\t/** @private @type {SharedArrayBuffer} */\n\t\t\tthis._audioToMainEventSab = WamEventRingBuffer.getStorageForEventCapacity(RingBuffer,\n\t\t\t\teventCapacity);\n\n\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\tthis._eventWriter = new WamEventRingBuffer(RingBuffer, this._mainToAudioEventSab,\n\t\t\t\tparameterIds);\n\t\t\t/** @private @type {WamEventRingBuffer} */\n\t\t\tthis._eventReader = new WamEventRingBuffer(RingBuffer, this._audioToMainEventSab,\n\t\t\t\tparameterIds);\n\n\t\t\tconst request = 'initialize/eventSab';\n\t\t\tconst id = this._generateMessageId();\n\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\tthis._pendingResponses[id] = resolve;\n\t\t\t\tthis.port.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\trequest,\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tmainToAudioEventSab: this._mainToAudioEventSab,\n\t\t\t\t\t\taudioToMainEventSab: this._audioToMainEventSab,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}).then((resolved) => {\n\t\t\t\tthis._eventSabReady = true;\n\n\t\t\t\t// periodically check for messages from audio thread\n\t\t\t\tthis._audioToMainInterval = setInterval(() => {\n\t\t\t\t\tconst events = this._eventReader.read();\n\t\t\t\t\tevents.forEach((e) => { this._onEvent(e); });\n\t\t\t\t}, 100);\n\t\t\t});\n\t\t} else if (event) this._onEvent(event);\n\t}\n\n\t_onEvent(event) {\n\t\tconst { type } = event;\n\t\tthis.dispatchEvent(new CustomEvent(type, {\n\t\t\tbubbles: true,\n\t\t\tdetail: event,\n\t\t}));\n\t}\n}\n","export default \"2.0.0-alpha.6\";\n","import apiVersion from './apiVersion.js';\r\nimport addFunctionModule from './addFunctionModule.js';\r\nimport initializeWamEnv from './WamEnv.js';\r\nimport initializeWamGroup from './WamGroup.js';\r\n\r\n/**\r\n * @param {BaseAudioContext} audioContext\r\n * @param {string} [hostGroupId]\r\n * @param {string} [hostGroupKey]\r\n * @returns {Promise<[string, string]>} [hostGroupId, hostGroupKey]\r\n */\r\nconst initializeWamHost = async (audioContext, hostGroupId = `wam-host-${performance.now().toString()}`, hostGroupKey = performance.now().toString()) => {\r\n    await addFunctionModule(audioContext.audioWorklet, initializeWamEnv, apiVersion);\r\n    await addFunctionModule(audioContext.audioWorklet, initializeWamGroup, hostGroupId, hostGroupKey);\r\n    return [hostGroupId, hostGroupKey];\r\n};\r\n\r\nexport default initializeWamHost;\r\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n",null,"/** @typedef {import('@webaudiomodules/api').WamNode} WamNode */\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n\n/**\n * @implements {WamNode}\n */\nexport default class CompositeAudioNode extends GainNode {\n\tget groupId() {\n\t\treturn this.module.groupId;\n\t}\n\n\tget moduleId() {\n\t\treturn this.module.moduleId;\n\t}\n\n\tget instanceId() {\n\t\treturn this.module.instanceId;\n\t}\n\n\tget module() {\n\t\treturn this._wamNode.module;\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['addEventListener']>} args\n\t */\n\taddEventListener(...args) {\n\t\treturn this._wamNode.addEventListener(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['removeEventListener']>} args\n\t */\n\tremoveEventListener(...args) {\n\t\treturn this._wamNode.removeEventListener(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['dispatchEvent']>} args\n\t */\n    dispatchEvent(...args) {\n\t\treturn this._wamNode.dispatchEvent(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['getParameterInfo']>} args\n\t */\n\tgetParameterInfo(...args) {\n\t\treturn this._wamNode.getParameterInfo(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['getParameterValues']>} args\n\t */\n\tgetParameterValues(...args) {\n\t\treturn this._wamNode.getParameterValues(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['setParameterValues']>} args\n\t */\n\tsetParameterValues(...args) {\n\t\treturn this._wamNode.setParameterValues(...args);\n\t}\n\n\tgetState() {\n\t\treturn this._wamNode.getState();\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['setState']>} args\n\t */\n\tsetState(...args) {\n\t\treturn this._wamNode.setState(...args);\n\t}\n\n\tgetCompensationDelay() {\n\t\treturn this._wamNode.getCompensationDelay();\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['scheduleEvents']>} args\n\t */\n\tscheduleEvents(...args) {\n\t\treturn this._wamNode.scheduleEvents(...args);\n\t}\n\n\tclearEvents() {\n\t\treturn this._wamNode.clearEvents();\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['connectEvents']>} args\n\t */\n\tconnectEvents(...args) {\n\t\treturn this._wamNode.connectEvents(...args);\n\t}\n\n\t/**\n\t * @param {Parameters<WamNode['disconnectEvents']>} args\n\t */\n\tdisconnectEvents(...args) {\n\t\treturn this._wamNode.disconnectEvents(...args);\n\t}\n\n\tdestroy() {\n\t\treturn this._wamNode.destroy();\n\t}\n\n\t/**\n\t * @type {AudioNode}\n\t */\n\t_output = undefined;\n\n\t/**\n\t * @type {WamNode}\n\t */\n\t_wamNode = undefined;\n\n\tset channelCount(count) {\n\t\tif (this._output) this._output.channelCount = count;\n\t\telse super.channelCount = count;\n\t}\n\n\tget channelCount() {\n\t\tif (this._output) return this._output.channelCount;\n\t\treturn super.channelCount;\n\t}\n\n\tset channelCountMode(mode) {\n\t\tif (this._output) this._output.channelCountMode = mode;\n\t\telse super.channelCountMode = mode;\n\t}\n\n\tget channelCountMode() {\n\t\tif (this._output) return this._output.channelCountMode;\n\t\treturn super.channelCountMode;\n\t}\n\n\tset channelInterpretation(interpretation) {\n\t\tif (this._output) this._output.channelInterpretation = interpretation;\n\t\telse super.channelInterpretation = interpretation;\n\t}\n\n\tget channelInterpretation() {\n\t\tif (this._output) return this._output.channelInterpretation;\n\t\treturn super.channelInterpretation;\n\t}\n\n\tget numberOfInputs() {\n\t\treturn super.numberOfInputs;\n\t}\n\n\tget numberOfOutputs() {\n\t\tif (this._output) return this._output.numberOfOutputs;\n\t\treturn super.numberOfOutputs;\n\t}\n\n\tget gain() {\n\t\treturn undefined;\n\t}\n\n\tconnect(...args) {\n\t\t// @ts-ignore\n\t\tif (this._output && this._output !== this) return this._output.connect(...args);\n\t\t// @ts-ignore\n\t\treturn super.connect(...args);\n\t}\n\n\tdisconnect(...args) {\n\t\t// @ts-ignore\n\t\tif (this._output && this._output !== this) return this._output.disconnect(...args);\n\t\t// @ts-ignore\n\t\treturn super.disconnect(...args);\n\t}\n}\n","/**\r\n * Take a function, stringify it and inject to an AudioWorklet with parameters.\r\n *\r\n * @param {AudioWorklet} audioWorklet\r\n * @param {(...args: any[]) => any} processorFunction\r\n * @param {any[]} [injection]\r\n * @returns {Promise<void>}\r\n */\r\nconst addFunctionModule = (audioWorklet, processorFunction, ...injection) => {\r\n    const text = `(${processorFunction.toString()})(${injection.map((s) => JSON.stringify(s)).join(', ')});`\r\n    const url = URL.createObjectURL(new Blob([text], { type: 'text/javascript' }));\r\n    return audioWorklet.addModule(url);\r\n}\r\n\r\nexport default addFunctionModule;\r\n","/** @typedef {import('@webaudiomodules/api').WamProcessor} WamProcessor */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterValueMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('./types').ParamMgrOptions} ParamMgrProcessorOptions */\n/** @typedef {import('./TypedAudioWorklet').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./TypedAudioWorklet').TypedAudioWorkletProcessor} AudioWorkletProcessor */\n/** @template M @typedef {import('./types').MessagePortRequest<M>} MessagePortRequest */\n/** @template M @typedef {import('./types').MessagePortResponse<M>} MessagePortResponse */\n/** @typedef {import('./types').ParamMgrCallFromProcessor} ParamMgrCallFromProcessor */\n/** @typedef {import('./types').ParamMgrCallToProcessor} ParamMgrCallToProcessor */\n/** @typedef {import('./types').ParamMgrAudioWorkletOptions} ParamMgrAudioWorkletOptions */\n/** @typedef {import('./types').ParametersMapping} ParametersMapping */\n/** @typedef {import('./types').WamParamMgrSDKBaseModuleScope} WamParamMgrSDKBaseModuleScope */\n\n/**\n * Main function to stringify as a worklet.\n *\n * @param {string} moduleId processor identifier\n * @param {WamParameterInfoMap} paramsConfig parameterDescriptors\n */\nconst processor = (moduleId, paramsConfig) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\tconst {\n\t\tAudioWorkletProcessor,\n\t\tregisterProcessor,\n\t\twebAudioModules,\n\t} = audioWorkletGlobalScope;\n\n\t/** @type {WamParamMgrSDKBaseModuleScope} */\n\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\n\tconst supportSharedArrayBuffer = !!globalThis.SharedArrayBuffer;\n\tconst SharedArrayBuffer = globalThis.SharedArrayBuffer || globalThis.ArrayBuffer;\n\tconst normExp = (x, e) => (e === 0 ? x : x ** (1.5 ** -e));\n\tconst normalizeE = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? normExp(x, e)\n\t\t\t: normExp((x - min) / (max - min) || 0, e));\n\tconst normalize = (x, min, max) => (min === 0 && max === 1 ? x : (x - min) / (max - min) || 0);\n\tconst denormalize = (x, min, max) => (min === 0 && max === 1 ? x : x * (max - min) + min);\n\tconst mapValue = (x, eMin, eMax, sMin, sMax, tMin, tMax) => (\n\t\tdenormalize(\n\t\t\tnormalize(\n\t\t\t\tnormalize(\n\t\t\t\t\tMath.min(sMax, Math.max(sMin, x)),\n\t\t\t\t\teMin,\n\t\t\t\t\teMax,\n\t\t\t\t),\n\t\t\t\tnormalize(sMin, eMin, eMax),\n\t\t\t\tnormalize(sMax, eMin, eMax),\n\t\t\t),\n\t\t\ttMin,\n\t\t\ttMax,\n\t\t)\n\t);\n\n\t/**\n\t * @typedef {MessagePortRequest<ParamMgrCallToProcessor> & MessagePortResponse<ParamMgrCallFromProcessor>} MsgIn\n\t * @typedef {MessagePortResponse<ParamMgrCallToProcessor> & MessagePortRequest<ParamMgrCallFromProcessor>} MsgOut\n\t */\n\t/**\n\t * `ParamMgrNode`'s `AudioWorkletProcessor`\n\t *\n\t * @extends {AudioWorkletProcessor<MsgIn, MsgOut>}\n\t * @implements {WamProcessor}\n\t * @implements {ParamMgrCallToProcessor}\n\t */\n\tclass ParamMgrProcessor extends AudioWorkletProcessor {\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn Object.entries(paramsConfig).map(([name, { defaultValue, minValue, maxValue }]) => ({\n\t\t\t\tname,\n\t\t\t\tdefaultValue,\n\t\t\t\tminValue,\n\t\t\t\tmaxValue,\n\t\t\t}));\n\t\t}\n\n\t\t/**\n\t\t * @param {ParamMgrProcessorOptions} options\n\t\t */\n\t\tconstructor(options) {\n\t\t\tsuper();\n\t\t\tthis.destroyed = false;\n\t\t\tthis.supportSharedArrayBuffer = supportSharedArrayBuffer;\n\t\t\tconst {\n\t\t\t\tparamsMapping,\n\t\t\t\tinternalParamsMinValues,\n\t\t\t\tinternalParams,\n\t\t\t\tgroupId,\n\t\t\t\tinstanceId,\n\t\t\t} = options.processorOptions;\n\t\t\tthis.groupId = groupId;\n\t\t\tthis.moduleId = moduleId;\n\t\t\tthis.instanceId = instanceId;\n\t\t\tthis.internalParamsMinValues = internalParamsMinValues;\n\t\t\tthis.paramsConfig = paramsConfig;\n\t\t\tthis.paramsMapping = paramsMapping;\n\t\t\t/** @type {Record<string, number>} */\n\t\t\tthis.paramsValues = {};\n\t\t\tObject.entries(paramsConfig).forEach(([name, { defaultValue }]) => {\n\t\t\t\tthis.paramsValues[name] = defaultValue;\n\t\t\t});\n\t\t\tthis.internalParams = internalParams;\n\t\t\tthis.internalParamsCount = this.internalParams.length;\n\t\t\tthis.buffer = new SharedArrayBuffer((this.internalParamsCount + 1) * Float32Array.BYTES_PER_ELEMENT);\n\t\t\tthis.$lock = new Int32Array(this.buffer, 0, 1);\n\t\t\tthis.$internalParamsBuffer = new Float32Array(this.buffer, 4, this.internalParamsCount);\n\t\t\t/** @type {WamEvent[]} */\n\t\t\tthis.eventQueue = [];\n\n\t\t\t/** @type {(event: WamEvent) => any} */\n\t\t\tthis.handleEvent = null;\n\n\t\t\taudioWorkletGlobalScope.webAudioModules.addWam(this);\n\t\t\tif (!ModuleScope.paramMgrProcessors) ModuleScope.paramMgrProcessors = {};\n\t\t\tModuleScope.paramMgrProcessors[this.instanceId] = this;\n\n\t\t\tthis.messagePortRequestId = -1;\n\t\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\t\tconst resolves = {};\n\t\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\t\tconst rejects = {};\n\t\t\t/**\n\t\t\t * @param {keyof ParamMgrCallFromProcessor} call\n\t\t\t * @param {any} args\n\t\t\t */\n\t\t\tthis.call = (call, ...args) => new Promise((resolve, reject) => {\n\t\t\t\tconst id = this.messagePortRequestId--;\n\t\t\t\tresolves[id] = resolve;\n\t\t\t\trejects[id] = reject;\n\t\t\t\tthis.port.postMessage({ id, call, args });\n\t\t\t});\n\t\t\tthis.handleMessage = ({ data }) => {\n\t\t\t\tconst { id, call, args, value, error } = data;\n\t\t\t\tif (call) {\n\t\t\t\t\t/** @type {any} */\n\t\t\t\t\tconst r = { id };\n\t\t\t\t\ttry {\n\t\t\t\t\t\tr.value = this[call](...args);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tr.error = e;\n\t\t\t\t\t}\n\t\t\t\t\tthis.port.postMessage(r);\n\t\t\t\t} else {\n\t\t\t\t\tif (error) rejects[id]?.(error);\n\t\t\t\t\telse resolves[id]?.(value);\n\t\t\t\t\tdelete resolves[id];\n\t\t\t\t\tdelete rejects[id];\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.port.start();\n\t\t\tthis.port.addEventListener('message', this.handleMessage);\n\t\t}\n\n\t\t/**\n\t\t * @param {ParametersMapping} mapping\n\t\t */\n\t\tsetParamsMapping(mapping) {\n\t\t\tthis.paramsMapping = mapping;\n\t\t}\n\n\t\tgetBuffer() {\n\t\t\treturn { lock: this.$lock, paramsBuffer: this.$internalParamsBuffer };\n\t\t}\n\n\t\tgetCompensationDelay() {\n\t\t\treturn 128;\n\t\t}\n\n\t\t/**\n\t\t * @param {string[]} parameterIdQuery\n\t\t */\n\t\tgetParameterInfo(...parameterIdQuery) {\n\t\t\tif (parameterIdQuery.length === 0) parameterIdQuery = Object.keys(this.paramsConfig);\n\t\t\t/** @type {WamParameterInfoMap} */\n\t\t\tconst parameterInfo = {};\n\t\t\tparameterIdQuery.forEach((parameterId) => {\n\t\t\t\tparameterInfo[parameterId] = this.paramsConfig[parameterId];\n\t\t\t});\n\t\t\treturn parameterInfo;\n\t\t}\n\n\t\t/**\n\t\t * @param {boolean} [normalized]\n\t\t * @param {string[]} parameterIdQuery\n\t\t */\n\t\tgetParameterValues(normalized, ...parameterIdQuery) {\n\t\t\tif (parameterIdQuery.length === 0) parameterIdQuery = Object.keys(this.paramsConfig);\n\t\t\t/** @type {WamParameterValueMap} */\n\t\t\tconst parameterValues = {};\n\t\t\tparameterIdQuery.forEach((parameterId) => {\n\t\t\t\tif (!(parameterId in this.paramsValues)) return;\n\t\t\t\tconst { minValue, maxValue, exponent } = this.paramsConfig[parameterId];\n\t\t\t\tconst value = this.paramsValues[parameterId];\n\t\t\t\tparameterValues[parameterId] = {\n\t\t\t\t\tid: parameterId,\n\t\t\t\t\tvalue: normalized ? normalizeE(value, minValue, maxValue, exponent) : value,\n\t\t\t\t\tnormalized,\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn parameterValues;\n\t\t}\n\n\t\t/**\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\tscheduleEvents(...events) {\n\t\t\tthis.eventQueue.push(...events);\n\t\t\tconst { currentTime } = audioWorkletGlobalScope;\n\t\t\tthis.eventQueue.sort((a, b) => (a.time || currentTime) - (b.time || currentTime));\n\t\t}\n\n\t\t/**\n\t\t * @param {WamEvent[]} events\n\t\t */\n\t\temitEvents(...events) {\n\t\t\twebAudioModules.emitEvents(this, ...events);\n\t\t}\n\n\t\tclearEvents() {\n\t\t\tthis.eventQueue = [];\n\t\t}\n\n\t\tlock() {\n\t\t\tif (globalThis.Atomics) Atomics.store(this.$lock, 0, 1);\n\t\t}\n\n\t\tunlock() {\n\t\t\tif (globalThis.Atomics) Atomics.store(this.$lock, 0, 0);\n\t\t}\n\n\t\t/**\n\t\t * Main process\n\t\t *\n\t\t * @param {Float32Array[][]} inputs\n\t\t * @param {Float32Array[][]} outputs\n\t\t * @param {Record<string, Float32Array>} parameters\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tif (this.destroyed) return false;\n\t\t\tconst outputOffset = 1;\n\t\t\tthis.lock();\n\t\t\tObject.entries(this.paramsConfig).forEach(([name, { minValue, maxValue }]) => {\n\t\t\t\tconst raw = parameters[name];\n\t\t\t\tif (name in this.paramsValues) this.paramsValues[name] = raw[raw.length - 1]; // Store to local temporary\n\t\t\t\tif (!this.paramsMapping[name]) return; // No need to output\n\t\t\t\tObject.entries(this.paramsMapping[name]).forEach(([targetName, targetMapping]) => {\n\t\t\t\t\tconst j = this.internalParams.indexOf(targetName);\n\t\t\t\t\tif (j === -1) return;\n\t\t\t\t\tconst intrinsicValue = this.internalParamsMinValues[j]; // Output will be added to target intrinsicValue\n\t\t\t\t\tconst { sourceRange, targetRange } = targetMapping;\n\t\t\t\t\tconst [sMin, sMax] = sourceRange;\n\t\t\t\t\tconst [tMin, tMax] = targetRange;\n\t\t\t\t\tlet out;\n\t\t\t\t\tif (minValue !== tMin || maxValue !== tMax\n\t\t\t\t\t\t\t|| minValue !== sMin || maxValue !== sMax) { // need to calculate with mapping\n\t\t\t\t\t\tout = raw.map((v) => {\n\t\t\t\t\t\t\tconst mappedValue = mapValue(v, minValue, maxValue, sMin, sMax, tMin, tMax);\n\t\t\t\t\t\t\treturn mappedValue - intrinsicValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (intrinsicValue) { // need to correct with intrinsicValue\n\t\t\t\t\t\tout = raw.map((v) => v - intrinsicValue);\n\t\t\t\t\t} else { // No need to modify\n\t\t\t\t\t\tout = raw;\n\t\t\t\t\t}\n\t\t\t\t\tif (out.length === 1) outputs[j + outputOffset][0].fill(out[0]);\n\t\t\t\t\telse outputs[j + outputOffset][0].set(out);\n\t\t\t\t\tthis.$internalParamsBuffer[j] = out[0];\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.unlock();\n\t\t\tif (!this.supportSharedArrayBuffer) {\n\t\t\t\tthis.call('setBuffer', { lock: this.$lock, paramsBuffer: this.$internalParamsBuffer });\n\t\t\t}\n\t\t\tconst { currentTime } = audioWorkletGlobalScope;\n\t\t\tlet $event;\n\t\t\tfor ($event = 0; $event < this.eventQueue.length; $event++) {\n\t\t\t\tconst event = this.eventQueue[$event];\n\t\t\t\tif (event.time && event.time > currentTime) break;\n\t\t\t\tif (typeof this.handleEvent === 'function') this.handleEvent(event);\n\t\t\t\tthis.call('dispatchWamEvent', event);\n\t\t\t}\n\t\t\tif ($event) this.eventQueue.splice(0, $event);\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\n\t\t * @param {string} wamInstanceId\n\t\t * @param {number} [output]\n\t\t */\n\t\tconnectEvents(wamInstanceId, output) {\n\t\t\twebAudioModules.connectEvents(this.groupId, this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\t/**\n\t\t * @param {string} [wamInstanceId]\n\t\t * @param {number} [output]\n\t\t */\n\t\tdisconnectEvents(wamInstanceId, output) {\n\t\t\tif (typeof wamInstanceId === 'undefined') {\n\t\t\t\twebAudioModules.disconnectEvents(this.groupId, this.instanceId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twebAudioModules.disconnectEvents(this.groupId, this.instanceId, wamInstanceId, output);\n\t\t}\n\n\t\tdestroy() {\n\t\t\taudioWorkletGlobalScope.webAudioModules.removeWam(this);\n\t\t\tif (ModuleScope.paramMgrProcessors) delete ModuleScope.paramMgrProcessors[this.instanceId];\n\t\t\tthis.destroyed = true;\n\t\t\tthis.port.close();\n\t\t}\n\t}\n\ttry {\n\t\tregisterProcessor(moduleId, ParamMgrProcessor);\n\t} catch (error) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn(error);\n\t}\n};\nexport default processor;\n","/** @typedef {import('@webaudiomodules/api').WamParameterInfo} IWamParameterInfo */\n/** @typedef {typeof import('@webaudiomodules/api').WamParameterInfo} WamParameterInfoConstructor */\n/** @typedef {import('@webaudiomodules/api').WamParameterType} WamParameterType */\n/** @typedef {import('@webaudiomodules/api').WamParameterConfiguration} WamParameterConfiguration */\n/** @typedef {import('@webaudiomodules/api').AudioWorkletGlobalScope} AudioWorkletGlobalScope */\n/** @typedef {import('./types').WamSDKBaseModuleScope} WamSDKBaseModuleScope */\n\n/**\n * @param {string} [moduleId]\n * @returns {WamParameterInfoConstructor}\n */\nconst getWamParameterInfo = (moduleId) => {\n\t/** @type {AudioWorkletGlobalScope} */\n\t// @ts-ignore\n\tconst audioWorkletGlobalScope = globalThis;\n\n\t/**\n\t * @param {number} x\n\t * @param {number} e\n\t */\n\tconst normExp = (x, e) => (e === 0 ? x : x ** (1.5 ** -e));\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} e\n\t */\n\tconst denormExp = (x, e) => (e === 0 ? x : x ** (1.5 ** e));\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst normalize = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? normExp(x, e)\n\t\t\t: normExp((x - min) / (max - min) || 0, e));\n\t\n\t/**\n\t * @param {any} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst denormalize = (x, min, max, e = 0) => (\n\t\tmin === 0 && max === 1\n\t\t\t? denormExp(x, e)\n\t\t\t: denormExp(x, e) * (max - min) + min\n\t);\n\t\n\t/**\n\t * @param {number} x\n\t * @param {number} min\n\t * @param {number} max\n\t */\n\tconst inRange = (x, min, max) => (x >= min && x <= max);\n\t\n\t/**\n\t * @implements {IWamParameterInfo}\n\t */\n\tclass WamParameterInfo {\n\t\t/**\n\t\t * @param {string} id\n\t\t * @param {WamParameterConfiguration} [config]\n\t\t */\n\t\tconstructor(id, config = {}) {\n\t\t\tlet {\n\t\t\t\ttype, label, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units,\n\t\t\t} = config;\n\t\t\tif (type === undefined) type = 'float';\n\t\t\tif (label === undefined) label = '';\n\t\t\tif (defaultValue === undefined) defaultValue = 0;\n\t\t\tif (choices === undefined) choices = [];\n\t\t\tif (type === 'boolean' || type === 'choice') {\n\t\t\t\tdiscreteStep = 1;\n\t\t\t\tminValue = 0;\n\t\t\t\tif (choices.length) maxValue = choices.length - 1;\n\t\t\t\telse maxValue = 1;\n\t\t\t} else {\n\t\t\t\tif (minValue === undefined) minValue = 0;\n\t\t\t\tif (maxValue === undefined) maxValue = 1;\n\t\t\t\tif (discreteStep === undefined) discreteStep = 0;\n\t\t\t\tif (exponent === undefined) exponent = 0;\n\t\t\t\tif (units === undefined) units = '';\n\t\t\t}\n\t\n\t\t\tconst errBase = `Param config error | ${id}: `;\n\t\t\tif (minValue >= maxValue) throw Error(errBase.concat('minValue must be less than maxValue'));\n\t\t\tif (!inRange(defaultValue, minValue, maxValue)) throw Error(errBase.concat('defaultValue out of range'));\n\t\t\tif (discreteStep % 1 || discreteStep < 0) {\n\t\t\t\tthrow Error(errBase.concat('discreteStep must be a non-negative integer'));\n\t\t\t} else if (discreteStep > 0 && (minValue % 1 || maxValue % 1 || defaultValue % 1)) {\n\t\t\t\tthrow Error(errBase.concat('non-zero discreteStep requires integer minValue, maxValue, and defaultValue'));\n\t\t\t}\n\t\t\tif (type === 'choice' && !choices.length) {\n\t\t\t\tthrow Error(errBase.concat('choice type parameter requires list of strings in choices'));\n\t\t\t}\n\t\n\t\t\t/**\n\t\t\t * The parameter's unique identifier.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.id = id;\n\t\n\t\t\t/**\n\t\t\t * The parameter's human-readable name.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.label = label;\n\t\n\t\t\t/**\n\t\t\t * The parameter's data type.\n\t\t\t * @readonly @type {WamParameterType}\n\t\t\t */\n\t\t\tthis.type = type;\n\t\n\t\t\t/**\n\t\t\t * The parameter's default value. Must be\n\t\t\t * within range `[minValue, maxValue]`.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.defaultValue = defaultValue;\n\t\n\t\t\t/**\n\t\t\t * The minimum valid value of the parameter's range.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.minValue = minValue;\n\t\n\t\t\t/**\n\t\t\t * The maximum valid value of the parameter's range.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.maxValue = maxValue;\n\t\n\t\t\t/**\n\t\t\t * The distance between adjacent valid integer\n\t\t\t * values, if applicable.\n\t\t\t * @readonly @type {number}\n\t\t\t */\n\t\t\tthis.discreteStep = discreteStep;\n\t\n\t\t\t/**\n\t\t\t * The nonlinear (exponential) skew of the parameter's\n\t\t\t * range, if applicable.\n\t\t\t *  @readonly @type {number}\n\t\t\t */\n\t\t\tthis.exponent = exponent;\n\t\n\t\t\t/**\n\t\t\t * A list of human-readable choices corresponding to each\n\t\t\t * valid integer value in the parameter's range, if applicable.\n\t\t\t * @readonly @type {string[]}\n\t\t\t */\n\t\t\tthis.choices = choices;\n\t\n\t\t\t/**\n\t\t\t * A human-readable string representing the units of the\n\t\t\t * parameter's range, if applicable.\n\t\t\t * @readonly @type {string}\n\t\t\t */\n\t\t\tthis.units = units;\n\t\t}\n\t\n\t\t/**\n\t\t * Convert a value from the parameter's denormalized range\n\t\t * `[minValue, maxValue]` to normalized range `[0, 1]`.\n\t\t * @param {number} value\n\t\t */\n\t\tnormalize(value) {\n\t\t\treturn normalize(value, this.minValue, this.maxValue, this.exponent);\n\t\t}\n\t\n\t\t/**\n\t\t * Convert a value from normalized range `[0, 1]` to the\n\t\t * parameter's denormalized range `[minValue, maxValue]`.\n\t\t * @param {number} valueNorm\n\t\t */\n\t\tdenormalize(valueNorm) {\n\t\t\treturn denormalize(valueNorm, this.minValue, this.maxValue, this.exponent);\n\t\t}\n\t\n\t\t/**\n\t\t * Get a human-readable string representing the given value,\n\t\t * including units if applicable.\n\t\t * @param {number} value\n\t\t */\n\t\tvalueString(value) {\n\t\t\tif (this.choices) return this.choices[value];\n\t\t\tif (this.units !== '') return `${value} ${this.units}`;\n\t\t\treturn `${value}`;\n\t\t}\n\t}\n\n\tif (audioWorkletGlobalScope.AudioWorkletProcessor) {\n\t\t/** @type {WamSDKBaseModuleScope} */\n\t\tconst ModuleScope = audioWorkletGlobalScope.webAudioModules.getModuleScope(moduleId);\n\t\n\t\tif (!ModuleScope.WamParameterInfo) ModuleScope.WamParameterInfo = WamParameterInfo;\n\t}\n\n\treturn WamParameterInfo;\n};\n\nexport default getWamParameterInfo;\n","/** @typedef {import('@webaudiomodules/api').WamParameterConfiguration} WamParameterConfiguration */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfoMap} WamParameterInfoMap */\n/** @typedef {import('./types').ParametersMapping} ParametersMapping */\n/** @typedef {import('./types').InternalParametersDescriptor} InternalParametersDescriptor */\n/** @typedef {import('./types').ParametersMappingConfiguratorOptions} ParametersMappingConfiguratorOptions */\n\nimport getWamParameterInfo from './sdk/src/WamParameterInfo.js';\n\nconst WamParameterInfo = getWamParameterInfo();\n\nexport default class ParamMappingConfigurator {\n\t/**\n\t * @param {ParametersMappingConfiguratorOptions} [options = {}]\n\t */\n\tconstructor(options = {}) {\n\t\tconst { paramsConfig, paramsMapping, internalParamsConfig } = options;\n\t\tthis._paramsConfig = paramsConfig;\n\t\tthis._paramsMapping = paramsMapping;\n\t\tthis._internalParamsConfig = internalParamsConfig;\n\t}\n\n\t/**\n\t * @private\n\t * @type {Record<string, WamParameterConfiguration>}\n\t */\n\t_paramsConfig = undefined;\n\n\t/**\n\t * Auto-completed `paramsConfig`:\n\t *\n\t * if no `paramsConfig` is defined while initializing, this will be be filled from the internalParamsConfig;\n\t *\n\t * if a parameter is not fully configured, the incompleted properties will have the same value as in the internalParamsConfig.\n\t *\n\t * @type {WamParameterInfoMap}\n\t */\n\tget paramsConfig() {\n\t\tconst { internalParamsConfig } = this;\n\t\treturn Object.entries(this._paramsConfig || internalParamsConfig)\n\t\t\t.reduce((configs, [id, config]) => {\n\t\t\t\tconst internalParam = internalParamsConfig[id];\n\t\t\t\tconfigs[id] = new WamParameterInfo(id, {\n\t\t\t\t\t...config,\n\t\t\t\t\tlabel: config.label ?? id,\n\t\t\t\t\tdefaultValue: config.defaultValue ?? internalParam?.defaultValue,\n\t\t\t\t\tminValue: config.minValue ?? internalParam?.minValue,\n\t\t\t\t\tmaxValue: config.maxValue ?? internalParam?.maxValue,\n\t\t\t\t});\n\t\t\t\treturn configs;\n\t\t\t}, {});\n\t}\n\n\t/**\n\t * @private\n\t * @type {InternalParametersDescriptor}\n\t */\n\t_internalParamsConfig = undefined;\n\n\t/**\n\t * Auto-completed configuration of the `internalParamsConfig`\n\t *\n\t * Internal Parameters Config contains all the automatable parameters' information.\n\t *\n\t * An automatable parameter could be a `WebAudio` `AudioParam`\n\t * or a config with an `onChange` callback that will be called while the value has been changed.\n\t *\n\t * @type {InternalParametersDescriptor}\n\t */\n\tget internalParamsConfig() {\n\t\treturn Object.entries(this._internalParamsConfig || {})\n\t\t\t.reduce((configs, [name, config]) => {\n\t\t\t\tif (config instanceof AudioParam) configs[name] = config;\n\t\t\t\telse {\n\t\t\t\t\tconst defaultConfig = {\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\t\tautomationRate: 30,\n\t\t\t\t\t};\n\t\t\t\t\tconfigs[name] = { ...defaultConfig, ...config };\n\t\t\t\t}\n\t\t\t\treturn configs;\n\t\t\t}, {});\n\t}\n\n\t/**\n\t * @private\n\t * @type {ParametersMapping}\n\t */\n\t_paramsMapping = {}\n\n\t/**\n\t * Auto-completed `paramsMapping`,\n\t * the mapping can be omitted while initialized,\n\t * but is useful when an exposed param (in the `paramsConfig`) should automate\n\t * several internal params (in the `internalParamsConfig`) or has a different range there.\n\t *\n\t * If a parameter is present in both `paramsConfig` and `internalParamsConfig` (or the `paramsConfig` is not configured),\n\t * a map of this parameter will be there automatically, if not declared explicitly.\n\t *\n\t * @type {ParametersMapping}\n\t */\n\tget paramsMapping() {\n\t\tconst declared = this._paramsMapping || {};\n\t\tconst externalParams = this.paramsConfig;\n\t\tconst internalParams = this.internalParamsConfig;\n\t\treturn Object.entries(externalParams)\n\t\t\t.reduce((mapping, [name, { minValue, maxValue }]) => {\n\t\t\t\tconst sourceRange = [minValue, maxValue];\n\t\t\t\tconst defaultMapping = { sourceRange, targetRange: [...sourceRange] };\n\t\t\t\tif (declared[name]) {\n\t\t\t\t\tconst declaredTargets = Object.entries(declared[name])\n\t\t\t\t\t\t.reduce((targets, [targetName, targetMapping]) => {\n\t\t\t\t\t\t\tif (internalParams[targetName]) {\n\t\t\t\t\t\t\t\ttargets[targetName] = { ...defaultMapping, ...targetMapping };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn targets;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\tmapping[name] = declaredTargets;\n\t\t\t\t} else if (internalParams[name]) {\n\t\t\t\t\tmapping[name] = { [name]: { ...defaultMapping } };\n\t\t\t\t}\n\t\t\t\treturn mapping;\n\t\t\t}, {});\n\t}\n}\n","/** @typedef {import('@webaudiomodules/api').WamParameter} WamParameter */\n/** @typedef {import('@webaudiomodules/api').WamParameterInfo} WamParameterInfo */\n\n/**\n * @extends {AudioParam}\n * @implements {WamParameter}\n */\nexport default class MgrAudioParam extends AudioParam {\n\tget exponent() {\n\t\treturn this.info.exponent;\n\t}\n\n\t/**\n\t * @type {WamParameterInfo}\n\t */\n\t_info = undefined;\n\n\tget info() {\n\t\treturn this._info;\n\t}\n\n\tset info(info) {\n\t\tthis._info = info;\n\t}\n\n\tset normalizedValue(valueIn) {\n\t\tthis.value = this.info.denormalize(valueIn);\n\t}\n\n\tget normalizedValue() {\n\t\treturn this.info.normalize(this.value);\n\t}\n\n\tsetValueAtTime(value, startTime) {\n\t\treturn super.setValueAtTime(value, startTime);\n\t}\n\n\tsetNormalizedValueAtTime(valueIn, startTime) {\n\t\tconst value = this.info.denormalize(valueIn);\n\t\treturn this.setValueAtTime(value, startTime);\n\t}\n\n\tlinearRampToValueAtTime(value, endTime) {\n\t\treturn super.linearRampToValueAtTime(value, endTime);\n\t}\n\n\tlinearRampToNormalizedValueAtTime(valueIn, endTime) {\n\t\tconst value = this.info.denormalize(valueIn);\n\t\treturn this.linearRampToValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToValueAtTime(value, endTime) {\n\t\treturn super.exponentialRampToValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToNormalizedValueAtTime(valueIn, endTime) {\n\t\tconst value = this.info.denormalize(valueIn);\n\t\treturn this.exponentialRampToValueAtTime(value, endTime);\n\t}\n\n\tsetTargetAtTime(target, startTime, timeConstant) {\n\t\treturn super.setTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetNormalizedTargetAtTime(targetIn, startTime, timeConstant) {\n\t\tconst target = this.info.denormalize(targetIn);\n\t\treturn this.setTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetValueCurveAtTime(values, startTime, duration) {\n\t\treturn super.setValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tsetNormalizedValueCurveAtTime(valuesIn, startTime, duration) {\n\t\tconst values = Array.from(valuesIn).map((v) => this.info.denormalize(v));\n\t\treturn this.setValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tcancelScheduledParamValues(cancelTime) {\n\t\treturn super.cancelScheduledValues(cancelTime);\n\t}\n\n\tcancelAndHoldParamAtTime(cancelTime) {\n\t\treturn super.cancelAndHoldAtTime(cancelTime);\n\t}\n}\n","import MgrAudioParam from './MgrAudioParam.js';\n\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n/** @typedef {import('@webaudiomodules/api').WamNode} WamNode */\n/** @typedef {import('@webaudiomodules/api').WamParameterDataMap} WamParameterValueMap */\n/** @typedef {import('@webaudiomodules/api').WamEvent} WamEvent */\n/** @typedef {import('@webaudiomodules/api').WamAutomationEvent} WamAutomationEvent */\n/** @typedef {import('./types').ParamMgrOptions} ParamMgrOptions */\n/** @typedef {import('./types').ParamMgrCallFromProcessor} ParamMgrCallFromProcessor */\n/** @typedef {import('./types').ParamMgrCallToProcessor} ParamMgrCallToProcessor */\n/** @typedef {import('./types').ParamMgrNodeMsgIn} ParamMgrNodeMsgIn */\n/** @typedef {import('./types').ParamMgrNodeMsgOut} ParamMgrNodeMsgOut */\n/** @typedef {import('./types').ParamMgrNode} IParamMgrNode */\n\n/** @type {typeof import('./TypedAudioWorklet').TypedAudioWorkletNode} */\n// @ts-ignore\nconst AudioWorkletNode = globalThis.AudioWorkletNode;\n\n/**\n * @extends {AudioWorkletNode<ParamMgrNodeMsgIn, ParamMgrNodeMsgOut>}\n * @implements {IParamMgrNode}\n */\nexport default class ParamMgrNode extends AudioWorkletNode {\n\t/**\n     * @param {WebAudioModule} module\n     * @param {ParamMgrOptions} options\n     */\n\tconstructor(module, options) {\n\t\tsuper(module.audioContext, module.moduleId, {\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 1 + options.processorOptions.internalParams.length,\n\t\t\tparameterData: options.parameterData,\n\t\t\tprocessorOptions: options.processorOptions,\n\t\t});\n\t\tconst { processorOptions, internalParamsConfig } = options;\n\t\tthis.initialized = false;\n\t\tthis.module = module;\n\t\tthis.instanceId = options.processorOptions.instanceId;\n\t\tthis.groupId = options.processorOptions.groupId;\n\t\tthis.paramsConfig = processorOptions.paramsConfig;\n\t\tthis.internalParams = processorOptions.internalParams;\n\t\tthis.internalParamsConfig = internalParamsConfig;\n\t\tthis.$prevParamsBuffer = new Float32Array(this.internalParams.length);\n\t\tthis.paramsUpdateCheckFn = [];\n\t\tthis.paramsUpdateCheckFnRef = [];\n\t\tthis.messageRequestId = 0;\n\n\t\tObject.entries(this.getParams()).forEach(([name, param]) => {\n\t\t\tObject.setPrototypeOf(param, MgrAudioParam.prototype);\n\t\t\tparam._info = this.paramsConfig[name];\n\t\t});\n\n\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\tconst resolves = {};\n\t\t/** @type {Record<number, ((...args: any[]) => any)>} */\n\t\tconst rejects = {};\n\t\t/**\n\t\t * @param {keyof ParamMgrCallToProcessor} call\n\t\t * @param {any} args\n\t\t */\n\t\tthis.call = (call, ...args) => {\n\t\t\tconst id = this.messageRequestId;\n\t\t\tthis.messageRequestId += 1;\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolves[id] = resolve;\n\t\t\t\trejects[id] = reject;\n\t\t\t\tthis.port.postMessage({ id, call, args });\n\t\t\t});\n\t\t};\n\t\tthis.handleMessage = ({ data }) => {\n\t\t\tconst { id, call, args, value, error } = data;\n\t\t\tif (call) {\n\t\t\t\t/** @type {any} */\n\t\t\t\tconst r = { id };\n\t\t\t\ttry {\n\t\t\t\t\tr.value = this[call](...args);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tr.error = e;\n\t\t\t\t}\n\t\t\t\tthis.port.postMessage(r);\n\t\t\t} else {\n                if (error) rejects[id]?.(error);\n                else resolves[id]?.(value);\n                delete resolves[id];\n                delete rejects[id];\n\t\t\t}\n\t\t};\n\t\tthis.port.start();\n\t\tthis.port.addEventListener('message', this.handleMessage);\n\t}\n\n\t/**\n\t * @returns {ReadonlyMap<string, MgrAudioParam>}\n\t */\n\tget parameters() {\n\t\t// @ts-ignore\n\t\treturn super.parameters;\n\t}\n\n\tget moduleId() {\n\t\treturn this.module.moduleId;\n\t}\n\n\tasync initialize() {\n\t\t/** @type {ReturnType<ParamMgrCallToProcessor['getBuffer']>} */\n\t\tconst response = await this.call('getBuffer');\n\t\tconst { lock, paramsBuffer } = response;\n\t\tthis.$lock = lock;\n\t\tthis.$paramsBuffer = paramsBuffer;\n\t\tconst offset = 1;\n\t\tObject.entries(this.internalParamsConfig).forEach(([name, config], i) => {\n\t\t\tif (this.context.state === 'suspended') this.$paramsBuffer[i] = config.defaultValue;\n\t\t\tif (config instanceof AudioParam) {\n\t\t\t\ttry {\n\t\t\t\t\tconfig.automationRate = 'a-rate';\n\t\t\t\t// eslint-disable-next-line no-empty\n\t\t\t\t} catch {\n\t\t\t\t} finally {\n\t\t\t\t\tconfig.value = Math.max(0, config.minValue);\n\t\t\t\t\tthis.connect(config, offset + i);\n\t\t\t\t}\n\t\t\t} else if (config instanceof AudioNode) {\n\t\t\t\tthis.connect(config, offset + i);\n\t\t\t} else {\n\t\t\t\tthis.requestDispatchIParamChange(name);\n\t\t\t}\n\t\t});\n\t\tthis.connect(this.module.audioContext.destination, 0, 0);\n\t\tthis.initialized = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {ReturnType<ParamMgrCallToProcessor['getBuffer']>} buffer\n\t */\n\tsetBuffer({ lock, paramsBuffer }) {\n\t\tthis.$lock = lock;\n\t\tthis.$paramsBuffer = paramsBuffer;\n\t}\n\n\tsetParamsMapping(paramsMapping) {\n\t\treturn this.call('setParamsMapping', paramsMapping);\n\t}\n\n\tgetCompensationDelay() {\n\t\treturn this.call('getCompensationDelay');\n\t}\n\n\tgetParameterInfo(...parameterIdQuery) {\n\t\treturn this.call('getParameterInfo', ...parameterIdQuery);\n\t}\n\n\tgetParameterValues(normalized, ...parameterIdQuery) {\n\t\treturn this.call('getParameterValues', normalized, ...parameterIdQuery);\n\t}\n\n\t/**\n\t * @param {WamAutomationEvent} event\n\t */\n\tscheduleAutomation(event) {\n\t\tconst time = event.time || this.context.currentTime;\n\t\tconst { id, normalized, value } = event.data;\n\t\tconst audioParam = this.getParam(id);\n\t\tif (!audioParam) return;\n\t\tif (audioParam.info.type === 'float') {\n\t\t\tif (normalized) audioParam.linearRampToNormalizedValueAtTime(value, time);\n\t\t\telse audioParam.linearRampToValueAtTime(value, time);\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\tif (normalized) audioParam.setNormalizedValueAtTime(value, time);\n\t\t\telse audioParam.setValueAtTime(value, time);\n\t\t}\n\t}\n\n\t/**\n\t * @param {WamEvent[]} events\n\t */\n\tscheduleEvents(...events) {\n\t\tevents.forEach((event) => {\n\t\t\tif (event.type === 'wam-automation') {\n\t\t\t\tthis.scheduleAutomation(event);\n\t\t\t}\n\t\t});\n\t\tthis.call('scheduleEvents', ...events);\n\t}\n\n\t/**\n\t * @param {WamEvent[]} events\n\t */\n\temitEvents(...events) {\n\t\tthis.call('emitEvents', ...events);\n\t}\n\n\tclearEvents() {\n\t\tthis.call('clearEvents');\n\t}\n\n\t/**\n\t * @param {WamEvent} event\n\t */\n\tdispatchWamEvent(event) {\n\t\tif (event.type === 'wam-automation') {\n\t\t\tthis.scheduleAutomation(event);\n\t\t} else {\n\t\t\tthis.dispatchEvent(new CustomEvent(event.type, { detail: event }));\n\t\t}\n\t}\n\n\t/**\n\t * @param {WamParameterValueMap} parameterValues\n\t */\n\tasync setParameterValues(parameterValues) {\n\t\tObject.keys(parameterValues).forEach((parameterId) => {\n\t\t\tconst parameterUpdate = parameterValues[parameterId];\n\t\t\tconst parameter = this.parameters.get(parameterId);\n\t\t\tif (!parameter) return;\n\t\t\tif (!parameterUpdate.normalized) parameter.value = parameterUpdate.value;\n\t\t\telse parameter.normalizedValue = parameterUpdate.value;\n\t\t});\n\t}\n\n\tasync getState() {\n\t\treturn this.getParamsValues();\n\t}\n\n\tasync setState(state) {\n\t\tthis.setParamsValues(state);\n\t}\n\n\tconvertTimeToFrame(time) {\n\t\treturn Math.round(time * this.context.sampleRate);\n\t}\n\n\tconvertFrameToTime(frame) {\n\t\treturn frame / this.context.sampleRate;\n\t}\n\n\t/**\n\t * @param {string} name\n\t */\n\trequestDispatchIParamChange = (name) => {\n\t\tconst config = this.internalParamsConfig[name];\n\t\tif (!('onChange' in config)) return;\n\t\tconst { automationRate, onChange } = config;\n\t\tif (typeof automationRate !== 'number' || !automationRate) return;\n\t\tconst interval = 1000 / automationRate;\n\t\tconst i = this.internalParams.indexOf(name);\n\t\tif (i === -1) return;\n\t\tif (i >= this.internalParams.length) return;\n\t\tif (typeof this.paramsUpdateCheckFnRef[i] === 'number') {\n\t\t\twindow.clearTimeout(this.paramsUpdateCheckFnRef[i]);\n\t\t}\n\n\t\tthis.paramsUpdateCheckFn[i] = () => {\n\t\t\tconst prev = this.$prevParamsBuffer[i];\n\t\t\tconst cur = this.$paramsBuffer[i];\n\t\t\tif (cur !== prev) {\n\t\t\t\tonChange(cur, prev);\n\t\t\t\tthis.$prevParamsBuffer[i] = cur;\n\t\t\t}\n\t\t\tthis.paramsUpdateCheckFnRef[i] = window.setTimeout(this.paramsUpdateCheckFn[i], interval);\n\t\t};\n\t\tthis.paramsUpdateCheckFn[i]();\n\t}\n\n\t/**\n\t * @param {string} name\n\t */\n\tgetIParamIndex(name) {\n\t\tconst i = this.internalParams.indexOf(name);\n\t\treturn i === -1 ? null : i;\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @param {AudioParam | AudioNode} dest\n\t * @param {number} index\n\t */\n\tconnectIParam(name, dest, index) {\n\t\tconst offset = 1;\n\t\tconst i = this.getIParamIndex(name);\n\t\tif (i !== null) {\n\t\t\tif (dest instanceof AudioNode) {\n\t\t\t\tif (typeof index === 'number') this.connect(dest, offset + i, index);\n\t\t\t\telse this.connect(dest, offset + i);\n\t\t\t} else {\n\t\t\t\tthis.connect(dest, offset + i);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name\n\t * @param {AudioParam | AudioNode} dest\n\t * @param {number} index\n\t */\n\tdisconnectIParam(name, dest, index) {\n\t\tconst offset = 1;\n\t\tconst i = this.getIParamIndex(name);\n\t\tif (i !== null) {\n\t\t\tif (dest instanceof AudioNode) {\n\t\t\t\tif (typeof index === 'number') this.disconnect(dest, offset + i, index);\n\t\t\t\telse this.disconnect(dest, offset + i);\n\t\t\t} else {\n\t\t\t\tthis.disconnect(dest, offset + i);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetIParamValue(name) {\n\t\tconst i = this.getIParamIndex(name);\n\t\treturn i !== null ? this.$paramsBuffer[i] : null;\n\t}\n\n\tgetIParamsValues() {\n\t\t/** @type {Record<string, number>} */\n\t\tconst values = {};\n\t\tthis.internalParams.forEach((name, i) => {\n\t\t\tvalues[name] = this.$paramsBuffer[i];\n\t\t});\n\t\treturn values;\n\t}\n\n\tgetParam(name) {\n\t\treturn this.parameters.get(name) || null;\n\t}\n\n\tgetParams() {\n\t\t// @ts-ignore\n\t\treturn Object.fromEntries(this.parameters);\n\t}\n\n\tgetParamValue(name) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.value;\n\t}\n\n\tsetParamValue(name, value) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return;\n\t\tparam.value = value;\n\t}\n\n\tgetParamsValues() {\n\t\t/** @type {Record<string, number>} */\n\t\tconst values = {};\n\t\tthis.parameters.forEach((v, k) => {\n\t\t\tvalues[k] = v.value;\n\t\t});\n\t\treturn values;\n\t}\n\n\t/**\n\t * @param {Record<string, number>} values\n\t */\n\tsetParamsValues(values) {\n\t\tif (!values) return;\n\t\tObject.entries(values).forEach(([k, v]) => {\n\t\t\tthis.setParamValue(k, v);\n\t\t});\n\t}\n\n\tgetNormalizedParamValue(name) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.normalizedValue;\n\t}\n\n\tsetNormalizedParamValue(name, value) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return;\n\t\tparam.normalizedValue = value;\n\t}\n\n\tgetNormalizedParamsValues() {\n\t\tconst values = {};\n\t\tthis.parameters.forEach((v, k) => {\n\t\t\tvalues[k] = this.getNormalizedParamValue(k);\n\t\t});\n\t\treturn values;\n\t}\n\n\tsetNormalizedParamsValues(values) {\n\t\tif (!values) return;\n\t\tObject.entries(values).forEach(([k, v]) => {\n\t\t\tthis.setNormalizedParamValue(k, v);\n\t\t});\n\t}\n\n\tsetParamValueAtTime(name, value, startTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setValueAtTime(value, startTime);\n\t}\n\n\tsetNormalizedParamValueAtTime(name, value, startTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setNormalizedValueAtTime(value, startTime);\n\t}\n\n\tlinearRampToParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.linearRampToValueAtTime(value, endTime);\n\t}\n\n\tlinearRampToNormalizedParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.linearRampToNormalizedValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.exponentialRampToValueAtTime(value, endTime);\n\t}\n\n\texponentialRampToNormalizedParamValueAtTime(name, value, endTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.exponentialRampToNormalizedValueAtTime(value, endTime);\n\t}\n\n\tsetParamTargetAtTime(name, target, startTime, timeConstant) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetNormalizedParamTargetAtTime(name, target, startTime, timeConstant) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setNormalizedTargetAtTime(target, startTime, timeConstant);\n\t}\n\n\tsetParamValueCurveAtTime(name, values, startTime, duration) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tsetNormalizedParamValueCurveAtTime(name, values, startTime, duration) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.setNormalizedValueCurveAtTime(values, startTime, duration);\n\t}\n\n\tcancelScheduledParamValues(name, cancelTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.cancelScheduledValues(cancelTime);\n\t}\n\n\tcancelAndHoldParamAtTime(name, cancelTime) {\n\t\tconst param = this.parameters.get(name);\n\t\tif (!param) return null;\n\t\treturn param.cancelAndHoldAtTime(cancelTime);\n\t}\n\n\t/**\n\t * @param {string} toId\n\t * @param {number} [output]\n\t */\n\tconnectEvents(toId, output) {\n\t\tthis.call('connectEvents', toId, output);\n\t}\n\n\t/**\n\t * @param {string} [toId]\n\t * @param {number} [output]\n\t */\n\tdisconnectEvents(toId, output) {\n\t\tthis.call('disconnectEvents', toId, output);\n\t}\n\n\tasync destroy() {\n\t\tthis.disconnect();\n\t\tthis.paramsUpdateCheckFnRef.forEach((ref) => {\n\t\t\tif (typeof ref === 'number') window.clearTimeout(ref);\n\t\t});\n\t\tawait this.call('destroy');\n\t\tthis.port.close();\n\t}\n}\n","import addFunctionModule from './sdk/src/addFunctionModule.js';\nimport processor from './ParamMgrProcessor.js';\nimport ParamMappingConfigurator from './ParamConfigurator.js';\nimport ParamMgrNode from './ParamMgrNode.js';\n/** @typedef {import('@webaudiomodules/api').WebAudioModule} WebAudioModule */\n/** @typedef {import('./types').ParametersMappingConfiguratorOptions} ParametersMappingConfiguratorOptions */\n/** @typedef {import('./types').ParamMgrOptions} ParamMgrOptions */\n/** @typedef {import('./types').AudioWorkletRegister} AudioWorkletRegister */\n\nexport default class ParamMgrFactory {\n\t/**\n\t * @param {WebAudioModule} module\n\t * @param {ParametersMappingConfiguratorOptions} [optionsIn = {}]\n\t */\n\tstatic async create(module, optionsIn = {}) {\n\t\tconst { audioContext, moduleId } = module;\n\t\tconst instanceId = optionsIn.instanceId || module.instanceId;\n\t\tconst groupId = optionsIn.groupId || module.groupId;\n\t\tconst { paramsConfig, paramsMapping, internalParamsConfig } = new ParamMappingConfigurator(optionsIn);\n\t\tconst initialParamsValue = Object.entries(paramsConfig)\n\t\t\t.reduce((currentParams, [name, { defaultValue }]) => {\n\t\t\t\tcurrentParams[name] = defaultValue;\n\t\t\t\treturn currentParams;\n\t\t\t}, {});\n\t\tconst serializableParamsConfig = Object.entries(paramsConfig)\n\t\t\t.reduce((currentParams, [name, { id, label, type, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units }]) => {\n\t\t\t\tcurrentParams[name] = { id, label, type, defaultValue, minValue, maxValue, discreteStep, exponent, choices, units };\n\t\t\t\treturn currentParams;\n\t\t\t}, {});\n\t\tawait addFunctionModule(audioContext.audioWorklet, processor, moduleId, serializableParamsConfig);\n\t\t/** @type {ParamMgrOptions} */\n\t\tconst options = {\n\t\t\tinternalParamsConfig,\n\t\t\tparameterData: initialParamsValue,\n\t\t\tprocessorOptions: {\n\t\t\t\tparamsConfig,\n\t\t\t\tparamsMapping,\n\t\t\t\tinternalParamsMinValues: Object.values(internalParamsConfig)\n\t\t\t\t\t.map((config) => Math.max(0, config?.minValue || 0)),\n\t\t\t\tinternalParams: Object.keys(internalParamsConfig),\n\t\t\t\tgroupId,\n\t\t\t\tinstanceId,\n\t\t\t\tmoduleId,\n\t\t\t},\n\t\t};\n\t\tconst node = new ParamMgrNode(module, options);\n\t\tawait node.initialize();\n\t\treturn node;\n\t}\n}\n","// import CompositeAudioNode from '@webaudiomodules/sdk/'\r\nimport { CompositeAudioNode, ParamMgrNode } from '@webaudiomodules/sdk-parammgr'\r\n\r\nexport class MIDI {\r\n\tstatic NOTE_ON = 0x90;\r\n\tstatic NOTE_OFF = 0x80;\r\n\tstatic CC = 0xB0;\r\n}\r\n\r\nexport default class SamplerPlugin extends CompositeAudioNode {\r\n\t\r\n\t/**\r\n\t * @type {ParamMgrNode}\r\n\t */\r\n\t_wamNode = undefined\r\n\r\n\tisEnabled = true\r\n\r\n\tpack = undefined\r\n\r\n\taudioBuffers = new Map()\r\n\tsamples = new Map()\r\n\r\n\tget paramMgr() {\r\n\t\treturn this._wamNode\r\n\t}\r\n\r\n\tset status(value) {\r\n\r\n\t\t// nothing to update\r\n\t\tif (this.isEnabled === value)\r\n\t\t{ \r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.isEnabled = value\r\n\r\n\t\tif (this.isEnabled) {\r\n\t\t\tconsole.log('BYPASS MODE OFF FX RUNNING');\r\n\t\t\tthis.wetGainNode.gain.linearRampToValueAtTime(1, this.context.currentTime + 0.5)\r\n\t\t\tthis.dryGainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.5)\r\n\t\t\t// this.delayNode.gain.linearRampToValueAtTime(1200, this.context.currentTime + 0.5)\r\n\t\t} else {\r\n\t\t\tconsole.log('BYPASS MODE ON');\r\n\t\t\tthis.wetGainNode.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.5)\r\n\t\t\tthis.dryGainNode.gain.linearRampToValueAtTime(1, this.context.currentTime + 0.5)\r\n\t\t\t// this.delayNode.gain.linearRampToValueAtTime(0, this.context.currentTime + 0.5)\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor(context, options) {\r\n\t\tsuper(context, options)\r\n\t\tthis.createNodes()\r\n\t}\r\n\r\n\t// // The plugin redefines the async method createAudionode()\r\n\t// // that must return an <Audionode>\r\n\t// async createAudioNode(options) {\r\n\t// \treturn this.wetGainNode\r\n\t// }\r\n\r\n\t/**\r\n\t * Mandatory\r\n\t * @param {ParamMgrNode} wamNode\r\n\t */\t\t\r\n\tsetup(paramMgr) {\r\n\r\n        paramMgr.addEventListener('wam-midi', (e) => this.processMIDIEvents([{event: e.detail.data.bytes, time: 0}]))\r\n\r\n\t\tthis._wamNode = paramMgr\r\n\t\tthis.connectNodes()\r\n\t\tthis._output = this.outputNode\r\n\t\tconsole.log('sampler.wam CONSTRUCTOR SETUP', { thiswamNode:this._wamNode })\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param {ScheduledMIDIEvent[]} midiEvents - ScheduledMIDIEvents\r\n\t */\r\n\tprocessMIDIEvents(midiEvents) {\r\n\t\tmidiEvents.forEach (message => {\r\n            if (message.event[0] == MIDI.NOTE_ON) \r\n\t\t\t{\r\n                const midiNote = message.event[1]\r\n                const velocity = message.event[2]\r\n                if (velocity)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.noteOn(midiNote, message.time)\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.noteOff(midiNote, message.time)\r\n\t\t\t\t}\r\n\r\n            } else if (message.event[0] == MIDI.NOTE_OFF) {\r\n\r\n                const midiNote = message.event[1]\r\n                this.noteOff(midiNote, message.time)\r\n            }\r\n\t\t})\r\n    }\r\n\r\n\tasync noteOn(noteNumber, velocity=1){\r\n\t\tconsole.log(\"SAMPLER : NOTE ON\", {noteNumber, velocity}, this)\r\n\t}\r\n\r\n\t// FIXME: Fade out the gate\r\n\tasync noteOff(noteNumber, velocity=0){\r\n\t\t// this.volume = velocity\r\n\t\tconsole.log(\"note off\", {noteNumber, velocity}, this )\r\n\t}\r\n\r\n\t/**\r\n\t * mandatory, will create default input and output\r\n\t */\r\n\tcreateNodes() {\r\n\t\tthis.outputNode = this.context.createGain()\r\n\t\tthis.dryGainNode = this.context.createGain()\r\n\t\tthis.wetGainNode = this.context.createGain()\r\n\t\tthis.delayNode = this.context.createDelay( 0.05 )\r\n\t\tthis.feedbackGainNode = this.context.createGain()\r\n\t}\r\n\r\n\tconnectNodes() {\r\n\r\n\t\tsuper.connect(this.wetGainNode)\r\n\t\tsuper.connect(this.dryGainNode)\r\n\r\n\t\tthis.wetGainNode.gain.value = 0.5\r\n\t\tthis.wetGainNode.connect(this.delayNode)\r\n\r\n\t\tthis.delayNode.delayTime.value = 0.05\r\n\t\tthis.delayNode.connect(this.feedbackGainNode)\r\n\r\n\t\tthis.feedbackGainNode.gain.value = 0.6\r\n\t\t// this.feedbackGainNode.connect(this.delayNode)\r\n\t\tthis.feedbackGainNode.connect(this.wetGainNode)\r\n\r\n\t\tthis.wetGainNode.connect(this.outputNode)\r\n\t\tthis.dryGainNode.connect(this.outputNode)\r\n\t}\r\n\r\n\tasync loadAudioArrayBuffer(path ){\r\n\t\tconst response = await fetch(path)\r\n\t\treturn await response.arrayBuffer()\r\n\t}\r\n\r\n\t/**\r\n\t * We cache all audioBuffer data for re-use later or until\r\n\t * we flushData()\r\n\t * \r\n\t * @param {String} path - to audio file mp3/wav/ogg etc\r\n\t * @param {Boolean} replaceExisting - forget cache and reload fresh\r\n\t * @returns \r\n\t */\r\n\tasync loadAudio(path, replaceExisting=false ){\r\n\r\n\t\tconst existing = this.audioBuffers.get(path)\r\n\t\t\r\n\t\tif (!replaceExisting && ( existing !== undefined ))\r\n\t\t{\r\n\t\t\treturn existing\r\n\t\t}\r\n\r\n\t\tconst arrayBuffer = await this.loadAudioArrayBuffer( path )\r\n\t\tconst audioBuffer = await this.context.decodeAudioData(arrayBuffer)\r\n\t\t\r\n\t\tthis.audioBuffers.set( path, audioBuffer )\r\n\r\n\t\treturn audioBuffer\r\n\t}\r\n\t\r\n\tfetchAudioBuffer( audioBuffer, replaceExisting=true ){\r\n\t\t\r\n\t\tconst existingAudioBuffer = this.samples.get(audioBuffer)\r\n\r\n\t\tif (!replaceExisting && ( existingAudioBuffer !== undefined ))\r\n\t\t{\r\n\t\t\texistingAudioBuffer.stop()\r\n\t\t\treturn existingAudioBuffer\r\n\t\t}\r\n\r\n\t\t// FIXME: Re-use one buffer source per sample?\r\n\t\tconst trackSource = this.context.createBufferSource()\r\n\t\t\r\n\t\t// const disconnectTrack = (error) => {\r\n\t\t// \ttrackSource.disconnect()\r\n\t\t// \tactive = false\r\n\t\t// \treturn error ? false : true\r\n\t\t// }\t\r\n\t\t// trackSource.onended = disconnectTrack\r\n\t\t// trackSource.onerror = disconnectTrack\r\n\t\ttrackSource.connect( this.wetGainNode )\r\n\r\n\t\ttrackSource.buffer = audioBuffer\r\n\t\t\r\n\t\tthis.samples.set( audioBuffer, trackSource )\r\n\r\n\t\treturn trackSource\r\n\t}\r\n\r\n\t// play( await loadAudio(path) , 50 )\r\n\tasync play(audioBuffer, offset=0, velocity=128, options={ loop:false } ){\r\n\r\n\t\t// FIXME: Re-use one buffer source per sample?\r\n\t\tlet trackSource = this.fetchAudioBuffer( audioBuffer )\r\n\t\t\r\n\t\ttrackSource.loop = options.loop || false\r\n\r\n\t\tif (this.context.state === 'suspended') \r\n\t\t{\r\n\t\t\tawait this.context.resume()\r\n\t\t}\r\n\t\t\r\n\t\tif (offset == 0) \r\n\t\t{\r\n\t\t\ttrackSource.start( 0 )\r\n\t\t//offset = context.currentTime\r\n\t\t} else {\r\n\t\t\ttrackSource.start(0, this.context.currentTime - offset)\r\n\t\t}\r\n\t}\r\n\t\r\n/*\r\n\t// MANDATORY : redefine these methods\r\n\t// eslint-disable-next-line class-methods-use-this\r\n\tgetParamValue(name) {\r\n\t\treturn this._wamNode.getParamValue(name)\r\n\t}\r\n\r\n\tsetParamValue(name, value) {\r\n\t\treturn this._wamNode.setParamValue(name, value)\r\n\t}\r\n\r\n\tgetParamsValues() {\r\n\t\treturn this._wamNode.getParamsValues()\r\n\t}\r\n\r\n\tsetParamsValues(values) {\r\n\t\treturn this._wamNode.setParamsValues(values)\r\n\t}\r\n\t*/\r\n} \r\n\r\nexport const createSamplerEngine = (audioContext, descriptor, options) => new SamplerPlugin(audioContext, options)","module.exports = require('./helpers/bundle-url').getBundleURL('1VY28') + \"descriptor.1f16be45.js\" + \"?\" + Date.now();","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","{\r\n    \"name\": \"Sampler\",\r\n\t\"identifier\": \"com.designerzen.sampler\",\r\n    \"vendor\": \"designerzen\",\r\n    \"description\": \"Simple Sample Player\",\r\n    \"version\": \"1.0.0\",\r\n    \"apiVersion\": \"2.0.0\",\r\n    \"thumbnail\": \"screenshot.png\",\r\n    \"keywords\": [\"sampler\"],\r\n   \t\"website\": \"https://interface.place\",\r\n    \"isInstrument\": true,\r\n\t\"hasMidiInput\": true,\r\n    \"hasAudioInput\": false,\r\n\t\"hasAudioOutput\": true\r\n}"],"names":["WamParameterInfo"],"version":3,"file":"sampler.f1a97295.js.map","sourceRoot":"/__parcel_source_root/"}