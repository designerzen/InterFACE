{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-3ceed028ef43e95d.js","source/index.js","source/location-handler.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","source/dom/load-progress.js","source/version.js","source/i18n.js","source/settings.js","source/audio/instruments.js","source/audio/midi/general-midi.js","source/palette.js","source/maths/easing.js","source/pwa/pwa.js","node_modules/@parcel/runtime-js/lib/runtime-0cb82af653d5dca1.js","node_modules/@parcel/runtime-js/lib/helpers/browser/js-loader.js","node_modules/@parcel/runtime-js/lib/helpers/cacheLoader.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-6808677cef59919d.js","source/store.js","source/utils.js","source/dom/errors.js","source/dom/button.js","source/dom/tooltips.js","source/models/info.js","source/hardware/mouse.js","source/capabilities.js","source/audio/midi/midi-out.js","node_modules/webmidi/dist/cjs/webmidi.cjs.min.js","node_modules/webmidi/node_modules/djipevents/src/djipevents.js","node_modules/webmidi/src/Enumerations.js","node_modules/webmidi/src/Note.js","node_modules/webmidi/src/Utilities.js","node_modules/webmidi/src/OutputChannel.js","node_modules/webmidi/src/Output.js","node_modules/webmidi/src/Forwarder.js","node_modules/webmidi/src/InputChannel.js","node_modules/webmidi/src/Message.js","node_modules/webmidi/src/Input.js","node_modules/webmidi/src/WebMidi.js","node_modules/process/browser.js","source/attractor.js","node_modules/@parcel/runtime-js/lib/runtime-a703681db3d1a77f.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"c6625cd32675afee\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // Web extension context\n\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n\n  var supportsSourceURL = false;\n\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  } // $FlowFixMe\n\n\n  ws.onmessage = async function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update\n\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n\n        await hmrApplyUpdates(assets);\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else fullReload();\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n\n      return new Promise((resolve, reject) => {\n        var _document$head;\n\n        script.onload = () => resolve(script);\n\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      } // $FlowFixMe\n\n\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push(...p);\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import { getReferer, getRefererHostname, forceSecure } from './location-handler'\r\nimport { setLoadProgress } from './dom/load-progress'\r\nimport { VERSION } from './version'\r\nimport { getBrowserLocales } from './i18n'\r\nimport { getDomainDefaults } from './settings'\r\nimport { showChangelog, installOrUpdate, uninstall } from './pwa/pwa'\r\nimport { createStore} from './store'\r\nimport { showError} from './dom/errors'\r\nimport { setToast } from './dom/tooltips'\r\nimport { MOUSE_HELD, MOUSE_TAP, addMouseTapAndHoldEvents} from './hardware/mouse'\r\nimport Capabilities from './capabilities'\r\nimport Attractor from './attractor'\r\n\r\nconst LTD = getRefererHostname().split('.').pop()\r\nconst IS_DEVELOPMENT_MODE = process.env.NODE_ENV === \"development\"\r\nconst body = document.documentElement\r\nconst debugMode = IS_DEVELOPMENT_MODE || new URLSearchParams(window.location.search).has(\"debug\") \r\n\r\n// if on http flip to https and exit\r\nforceSecure(IS_DEVELOPMENT_MODE)\r\n\r\nconst capabilities = new Capabilities()\r\n// TODO: \r\n// ESCAPE - no cameras found on system?\r\n// ESCAPE - no GPU?\r\n\r\n// start loading / updating...\r\nbody.classList.add(\"loading\", IS_DEVELOPMENT_MODE ? \"debug\" : LTD )\r\n\r\n// FIXME: show updates button\r\nconst showUpgradeDialog = () => {\t\r\n\tconst updateButton = document.getElementById(\"button-update\")\r\n\tconst changes = showChangelog( document.getElementById(\"changelog\") )\r\n\tdocument.getElementById(\"pwa\").setAttribute(\"open\", true)\r\n\tupdateButton.setAttribute(\"hidden\", false)\r\n}\r\n\r\nconst start = () => {\r\n\r\n\t// if we have a specific referer, we can change the options accordingly\r\n\t// allow different domains to show different styles / options / configs\r\n\t// current domains that point this way include :\r\n\t// interface.place\r\n\t// interface.lol\t<- defaults to simple 'kid' mode\r\n\t// interface.band\t<- defaults to duet mode\r\n\t// const referer = getReferer()\r\n\tconst defaultOptions = getDomainDefaults( LTD ) \r\n\tconst language = getBrowserLocales()[0]\r\n\tconst store = createStore()\r\n\r\n\timport('./interface.js').then( async ({createInterface}) => {\r\n\r\n\t\tlet halfLoaded = false\r\n\t\tconst title = document.title\r\n\t\ttry{\r\n\t\t\tconst application = await createInterface( defaultOptions, store, capabilities, language, (loadProgress, message) => {\r\n\t\t\t\tif (loadProgress === 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!halfLoaded)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thalfLoaded = true\r\n\t\t\t\t\t\tsetLoadProgress(0.99, \" \")\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsetLoadProgress(1, \"Ready!\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdocument.title = title\t\r\n\t\t\t\t}else{\r\n\t\t\t\t\tsetLoadProgress( loadProgress, message )\r\n\t\t\t\t\tdocument.title = title + \" - \" + Math.ceil(loadProgress * 100) +  \"%\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tconst automator = application.setAutomator( new Attractor(application) )\r\n\t\t\t// console.log(\"Attract mode!\", {automator, application})\r\n\t\t\r\n\t\t\t// let installation = null\r\n\t\t\t// // at any point we can now trigger the installation\r\n\t\t\t// if (installation)\r\n\t\t\t// {\r\n\t\t\t// \ttry{\r\n\t\t\t// \t\tconst destination = document.getElementById(\"shared-controls\")\r\n\t\t\t// \t\tconst needsInstall = await installation( destination )\t\t\r\n\t\t\t\t\t\r\n\t\t\t// \t\tcanBeInstalled = needsInstall\r\n\t\t\t\t\t\r\n\t\t\t// \t}catch(error){\r\n\t\r\n\t\t\t// \t\tbody.classList.add(\"installation-unavailable\")\r\n\t\t\t// \t\tconsole.error(\"Install/Update issue\", error)\r\n\t\t\t// \t}\r\n\t\t\t\t\r\n\t\t\t// }else{\r\n\t\t\t// \t// console.log(\"Loaded Webpage\")\r\n\t\t\t// }\r\n\t\r\n\t\t\t// const Attractor = await import('./attractor.js')\r\n\t\t\t// For automatic stuff...\r\n\t\t\t// const attractMode = new Attractor( application )\r\n\t\r\n\t\t\t// Show hackers message to debuggers\r\n\t\t\tif (application.debug)\r\n\t\t\t{\r\n\t\t\t\tconsole.log(`InterFACE Version ${VERSION} from ${getReferer()} in ${language} used ${application.count} times, last time was ${Math.ceil(application.timeElapsedSinceLastPlay/1000)} seconds ago`, {application} )\t\r\n\t\t\t\t// console.log(`Loaded App ${VERSION} ${needsInstall ? \"Installable\" : needsUpdate ? \"Update Available\" : \"\"}` )\t\r\n\t\t\t}\r\n\r\n\t\t}catch(error){\r\n\r\n\t\t\t// body.classList.add(\"failed\")\r\n\t\t\t//uninstall()\r\n\t\t\tshowError( error, \"Oh no! Try a hard refresh (CTRL-SHIFT-R)\" )\r\n\t\t\tconsole.error(\"Ultimate failure - remove loading - add error class?\")\r\n\t\t}\r\n\t})\r\n}\r\n\r\n// import {installer} from './install'\r\n// import {update}  from './update.js'\r\n// const test = async ()=>{\r\n// \tconst {installer} = await import('./install.js')\r\n// \tconst {update} = await import('./update.js')\r\n// \tconst destination = document.getElementById(\"shared-controls\")\r\n// \tconst install = await installer(true)\r\n// \tconst needsInstall = await install( destination )\t\t\r\n// \tconst needsUpdate = await update()\r\n// }\r\n// test()\r\n\r\n// PWA Install / Update / Load from cache\r\n// needs to be run early on ideally and in a seperate thread\r\n// loads in the relevant data to determine if the app needs to be \r\n// updated if installed or installed if uninstalled\r\nconst versionElement = document.getElementById(\"version\")\r\nconst runningVersion = versionElement.innerText\r\n\r\ninstallOrUpdate(debugMode, runningVersion).then( state => {\r\n\r\n\t// this is the amount of time to run before we \"check\" for things\r\n\t// const TIME_BEFORE_REFRESH = 24 * 60 * 60 * 1000\r\n\tif (debugMode){\r\n\r\n\t\tconsole.info( \"PWA\", state.log, {state} )\r\n\t}\r\n\r\n\t// add custom classes to elements so that we can \r\n\t// show a bit more useful feedback about the status of the web app\r\n\t// and whether it is installed / has updates available etc...\r\n\t// TODO: Add an update button!?\r\n\t\r\n\t// previousVersion, currentVersion,\r\n\t// isInstallable, isFirstRun, isRunningAsApp, install:(), updatesAvailable, updating, updated, update:()\r\n\r\n\t// add some useful classes to <body> element for styling\r\n\tbody.classList.toggle( \"updates-available\", state.hasUpdates )\r\n\tbody.classList.toggle( \"first-run\", state.isFirstRun )\r\n\tbody.classList.toggle( \"installable\", state.isInstallable )\r\n\tbody.classList.toggle( \"installed\", state.isRunningAsApp )\r\n\t\r\n\tif (state.isInstallable)\r\n\t{\r\n\t\t// hook into button and show...\r\n\t\tconst installButton = document.getElementById(\"button-install\")\r\n\t\tinstallButton.addEventListener(\"click\", async (event) => {\r\n\t\t\t\r\n\t\t\tconst installed = await state.install(installButton)\r\n\t\t\tconsole.log( \"installed\", installed.success, {installed} )\r\n\t\t\tsetToast( installed.success ? \"Installed to HomeScreen\" : \"You can always install again in the future\" )\r\n\t\t} )\r\n\r\n\t\tinstallButton.hidden = false\r\n\r\n\t}else if(state.updatesAvailable){\r\n\r\n\t\tshowUpgradeDialog()\r\n\t}\r\n\r\n\t//setToast( canBeInstalled ? \"You can install this as an app...<br>Click install when prompted!\" : \"\" )\r\n\t\r\n}).catch ( error =>{ \r\n\r\n\tconsole.error(\"PWA\",error) \r\n\t\r\n}).finally( p => {\r\n\r\n\tstart()\r\n\r\n}).catch( error =>{\r\n\r\n\t// uninstall() ?\r\n\tconsole.error(\"FATAL ERROR ;(\", error)\r\n})\r\n\r\n\r\n\r\nconst versionButton = document.getElementById( \"version\" )\r\naddMouseTapAndHoldEvents( versionButton )\r\nversionButton.addEventListener( MOUSE_TAP, event => {\r\n\t// allow pass through to github\r\n} )\r\n\r\nversionButton.addEventListener( MOUSE_HELD, event => {\r\n\t// Show dialog for upgrade?\r\n\tshowUpgradeDialog()\r\n} )\r\n","/**\r\n *  Convert a URL query value into a JS data type by inferring the type\r\n * @param {Any} JavaScript data type (eg. String, Number, Boolean, Array, Object)\r\n */\r\nconst guessType = value => {\r\n\r\n\tif (typeof value === \"string\")\r\n\t{\r\n\t\tconst lower = value.toLowerCase()\r\n\t\t// check for bool and such\r\n\t\tif (lower === \"true\" || lower === \"1\") {\r\n\t\t\treturn true\r\n\t\t} else if (lower === \"false\"|| lower === \"0\") {\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn value\r\n\r\n\t}else if (Array.isArray(value)){\r\n\t\t// Array convert the array to a string?\r\n\t\t// convert booleans from 1 / 0 ?\r\n\t\treturn value.toString()\r\n\r\n    } else {\r\n\r\n\t\treturn data\r\n\t}\r\n}\r\n\r\n/**\r\n *  Convert a string into a JS data type by inferring the type\r\n * @param {Any} JavaScript data type (eg. String, Number, Boolean, Array, Object)\r\n */\r\nexport const parseType = value => {\r\n\r\n\t// check to see if the string is also an array...\r\n\tif (typeof value === \"string\")\r\n\t{\r\n\t\tif (!isNaN(parseFloat(value))) {\r\n\t\t\treturn parseFloat(value)\r\n\t\t} else if (value.toLowerCase() === \"true\") {\r\n\t\t\treturn true\r\n\t\t} else if (value === \"false\") {\r\n\t\t\treturn false\r\n\t\t}else if (value.indexOf(',') >= 0){\r\n\t\t\t// this is a comma seperated list array...\r\n\t\t\treturn convertIntegerArrayToBooleans( value.split(\",\") )\r\n\t\t} else {\r\n\t\t\treturn value\r\n\t\t}\r\n\r\n\t}else if (Array.isArray(value)){\r\n\t\t// Array convert the array to a string?\r\n\t\t// convert booleans from 1 / 0 ?\r\n\t\treturn value.toString()\r\n    } else {\r\n\t\t// God only knows\r\n        return value\r\n    }\r\n}\r\n\r\n/**\r\n *  Fetch the current URL query as an object\r\n * @returns {URLSearchParams} URL States\r\n */\r\n const fetchStateFromURL = () => {\r\n\treturn new URLSearchParams(window.location.search)\r\n}\r\n\r\n/**\r\n * This takes a snapshot of the url and takes and queries\r\n * then it will take apart and create an object\r\n * and return a merged subset\r\n * @returns {Object} URL State Object \r\n */\r\nexport const getLocationSettings = (defaultOptions) => {{\r\n\tconst urlParams = fetchStateFromURL()\r\n\tconst locationOptions = Object.assign( {}, defaultOptions )\r\n\tfor (const [key, value] of urlParams) \r\n\t{\r\n\t\t// NB. ensure we data type these\r\n\t\tlocationOptions[key] = guessType(value)\t\r\n\t\t// console.log(`${key}:${value}`)\r\n\t}\r\n\t//console.log(`query:${locationOptions}`)\r\n\treturn locationOptions\r\n}}\r\n\r\n/**\r\n * This takes a state and creates a URL query string\r\n * @returns {String} Query String with current state\r\n */\r\nexport const createQueryString = options => {\r\n\treturn new URLSearchParams(options).toString()\r\n}\r\n\r\n/**\r\n * This takes a snapshot of the url and queries\r\n * then it will take apart and create an object\r\n * and return a merged subset\r\n * @returns {String} URL with current state\r\n */\r\n export const getShareLink = (options) => {\r\n\treturn window.location + createQueryString(options)\r\n}\r\n\r\n/**\r\n * This attempts to determine where the user came from\r\n * and to create class names that can create custom versions\r\n * so long as they maintin their urls (ie. not use shortlinks)\r\n * @returns {String} Refering URL\r\n */\r\nexport const getReferer = () => {\r\n\tconst ref = document.referrer\r\n\t// check against our list\r\n\treturn ref || document.location || 'interface.place'\r\n}\r\n\r\n/**\r\n * This attempts to determine which domain the user came from\r\n * @returns {String} Refering hostname\r\n */\r\nexport const getRefererHostname = () => {\r\n\tconst referrer = new URL( getReferer() )\r\n\t// now strip out everything but the location\r\n\t// check against our list\r\n\treturn referrer.hostname\r\n}\r\n\r\n/**\r\n * Reload the current page with the current state or\r\n * optionally a new state to be merged\r\n * @param {Object} options New state to set on reload\r\n */\r\nexport const refresh = options => {\r\n\tif (options){\r\n\t\taddToHistory(options)\r\n\t}\r\n\twindow.location.reload()\r\n}\r\n\r\n/**\r\n * Reloads current page in secure mode (as cameras need a certificate)\r\n */\r\n export const forceSecure = (debug=false) => {\r\n\tif (!debug && location.hostname !== \"localhost\" && location.protocol !== 'https:')\r\n\t{\r\n\t\tlocation.protocol = 'https:'\r\n\t}\r\n\treturn false\r\n}\r\n\r\n/**\r\n * Changes options in the URL so that state survives refreshes\r\n * @param {Object} options New state to set on location\r\n * @param {String} title Optional history title\r\n */\r\nexport const addToHistory = (options, title=\"\") => {\r\n\tconst url = new URL(window.location)\r\n\tfor (let i in options){\r\n\t\tconst option = options[i]\r\n\t\turl.searchParams.set(i, option)\r\n\t\t//console.log(\"History\", {out, options, title, url} )\r\n\t}\r\n\t//\r\n\tconst out = window.history.pushState(options, title, url)\r\n\t//console.log(\"History\", {out, options, title, url} )\r\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","\r\nconst doc = document\r\n\r\nlet loadMeter = 0\r\nlet loadMessageIndex = 0\r\n\r\nconst LOAD_MESSAGES = [\r\n\t\"Please wait, this can take<br>up to 6 minutes to load!\", \r\n\t\"Lots of data is required so this can take a long time\", \r\n\t\"Still Loading! Still may take a few minutes yet!\", \r\n\t\"Almost done! Just hang on in there!\"\r\n]\r\n\r\nconst BE_PATIENT_MESSAGES = [\r\n\t\"Loading.\",\r\n\t\"Loading..\",\r\n\t\"Loading...\"\r\n]\r\n\r\nconst progressMessage = doc.querySelector('label[for=\"progress-bar\"]')\r\nconst progressBar = doc.querySelector('progress')\r\n\r\nexport const setLoadProgress = (progress, message) => {\r\n\r\n\tconst rounded = parseInt(progress)\r\n\tconst percentage = rounded * 100\r\n\tconst hasProgressed = loadMeter !== rounded\r\n\tif (hasProgressed)\r\n\t{\r\n\t\tloadMeter = rounded\r\n\t}\r\n\t\r\n\tprogressBar.style.setProperty(\"--progress\", loadMeter )\r\n\tprogressBar.setAttribute(\"value\", loadMeter )\r\n\r\n\tif (rounded === 0 ){\r\n\r\n\t\tmessage = LOAD_MESSAGES[ 0 ]\t\r\n\r\n\t} else if (message && message.length) {\r\n\t\t// use message but break lines?\r\n\t\t// append percentage\r\n\t\tmessage += \" \" + percentage + \"%\"\r\n\t}else{\r\n\t\t// get prescripted from list...\r\n\t\tmessage = LOAD_MESSAGES[ Math.ceil(progress * (LOAD_MESSAGES.length-1)) ]\t\r\n\t\tmessage += \" \" + percentage + \"%\"\r\n\t}\r\n\t//console.log(\"load\", {progress, message} , Math.ceil(progress * LOAD_MESSAGES.length), LOAD_MESSAGES)\r\n\t\r\n\tif (progressMessage.innerHTML !== message)\r\n\t{\r\n\t\t// only change label text not the input field too?\r\n\t\tprogressMessage.innerHTML = message\r\n\r\n\t}else if (hasProgressed){\r\n\r\n\t\t// add an extra message if it hasn't actually progressed?\r\n\t\tprogressMessage.innerHTML = message + \" \" + BE_PATIENT_MESSAGES[loadMessageIndex++%BE_PATIENT_MESSAGES.length-1]\t\r\n\t}\r\n}\r\n\r\nexport const getLoadProgress = () => loadMeter\r\n","export const VERSION=\"0.8.21\";\rexport const DATE=1657029024493;","export const trimLocaleCode = locale => locale.split(/-|_/)[0]\r\n\r\nexport const getBrowserLocales = (options = {}) => {\r\n\t\r\n\tconst defaultOptions = {\r\n\t  languageCodeOnly: false,\r\n\t  fallback:'en-GB'\r\n\t}\r\n\r\n\tconst settings = Object.assign( {}, defaultOptions, options )\r\n\tconst browserLocales = navigator.languages === undefined ? [navigator.language] : navigator.languages\r\n  \r\n\t// we could assume english here but hey\r\n\tif (!browserLocales) \r\n\t{\r\n\t  return settings.fallback ? [settings.fallback] : undefined\r\n\t}\r\n  \r\n\treturn browserLocales.map(locale => {\r\n\t  const trimmedLocale = locale.trim()\r\n\t  return settings.languageCodeOnly ? trimLocaleCode(trimmedLocale) : trimmedLocale\r\n\t})\r\n  }\r\n\r\n  // TODO: Load pot files","import { INSTRUMENT_PACK_FATBOY, INSTRUMENT_PACK_FM, INSTRUMENT_PACK_MUSYNGKITE } from './audio/instruments'\r\nimport { DEFAULT_COLOURS } from './palette'\r\nimport { easeInSine, easeOutSine , easeInCubic, easeOutCubic, linear, easeOutQuad} from \"./maths/easing\"\r\n\r\nconst isDevelopmentMode = process.env.NODE_ENV === \"development\"\r\n\r\n// https://www.midi.org/specifications-old/item/manufacturer-id-numbers\r\nexport const MIDI_ID = \"00H 21H 71H\"\r\n\r\nexport const DEFAULT_TENSORFLOW_OPTIONS = {\r\n\t\r\n\t// or 'tfjs' (mediapipe is far smoother)\r\n\truntime: 'mediapipe', \r\n\r\n\t// location of actual ML model\r\n\t// solutionPath: 'https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh',\r\n\r\n\t// maxFaces - The maximum number of faces detected in the input. Should be set to the minimum number for performance. Defaults to 10.\r\n\tmaxFaces:1,\r\n\t\r\n\t// Whether to load the MediaPipe iris detection model (an additional 2.6 MB of weights). The MediaPipe iris detection model provides (1) an additional 10 keypoints outlining the irises and (2) improved eye region keypoints enabling blink detection. Defaults to true.\r\n\tshouldLoadIrisModel:true,\r\n\t\r\n\t// Minimum detection Confidence - Threshold for discarding a prediction. \r\n\t// [0 - 1] for a face to be considered detected\r\n    // detectionConfidence: 0.9,\r\n    \r\n    // Minimum confidence [0 - 1] for the landmark tracker to be considered detected\r\n    // Higher values are more robust at the expense of higher latency\r\n    // minTrackingConfidence: 0.5\r\n\r\n\t// maxContinuousChecks - How many frames to go without running the bounding box detector. Only relevant if maxFaces > 1. Defaults to 5.\r\n\t// iouThreshold - A float representing the threshold for deciding whether boxes overlap too much in non-maximum suppression. Must be between [0, 1]. Defaults to 0.3. A score of 0 means no overlapping faces will be detected, whereas a score closer to 1 means the model will attempt to detect completely overlapping faces.\r\n\t// scoreThreshold - A threshold for deciding when to remove boxes based on score in non-maximum suppression. Defaults to 0.75. Increase this score in order to reduce false positives (detects fewer faces).\r\n\t// modelUrl - Optional param for specifying a custom facemesh model url or a tf.io.IOHandler object.\r\n\t// irisModelUrl - Optional param for specifying a custom iris model url or a tf.io.IOHandler object.\r\n}\r\n\r\nexport const DEFAULT_OPTIONS = {\r\n\t// this allows us to show some extra options if set to true...\r\n\tadvancedMode:true,\r\n\t// initially show the settings panel\r\n\tshowSettings:false,\r\n\t// play a constant beat\r\n\tmetronome:false,\r\n\t// play music at same time\r\n\tbackingTrack:false,\r\n\r\n\t// clear the canvas on every frame\r\n\t// also doubles as a video hider\r\n\tclear:false,\r\n\t// draw video onto canvas every frame (transparent doesn't have to be true then)\r\n\t// clear will always take precedence\r\n\tsynch:true,\r\n\t// start in MTV disco mode\r\n\tdisco:false,\r\n\r\n\r\n\t// AR mode (without this - just video stream or blank)\r\n\toverlays:true,\r\n\r\n\t// show face overlays\r\n\tmasks:true,\r\n\t// show eye tracking\r\n\teyes:true,\r\n\t// synchronise the beats with metronome\r\n\tquantise:true,\r\n\t// show the person's texts above them\r\n\ttext:true,\r\n\t// audio visualiser is actually helpful to play\r\n\tspectrogram:true,\r\n\t// read out important instructions\r\n\tspeak:true,\r\n\t\r\n\t// show debug texts\r\n\tdebug:isDevelopmentMode,\r\n\t// cancel audio playback (not midi)\r\n\tmuted:false,\r\n\t// dual person mode (required reload)\r\n\tduet:false,\r\n\t// stereo panning with eyes\r\n\tstereo:true,\r\n\r\n\t// midi channel (0/\"all\" means send to all)\r\n\tmidiChannel:\"all\",\r\n\t// saved BPM that can be shared?\r\n\tbpm:200,\r\n\t\r\n\t// hide menu if mouse outside of screen...\r\n\tautoHide:!isDevelopmentMode,\r\n\r\n\t// load a midi track automatically on app start\r\n\tloadMIDIPerformance:isDevelopmentMode,\r\n\r\n\t// allow game pads such as the xbox controller to do cool\r\n\t// stuff as a modifier for the audio\r\n\tuseGamePad:true,\r\n\t\r\n\t// choice of different models to use\r\n\tmodel:\"face\",\r\n\t// sample set\r\n\tinstrumentPack:INSTRUMENT_PACK_FATBOY,\r\n\tinstrumentPacks:[INSTRUMENT_PACK_FATBOY, INSTRUMENT_PACK_FM, INSTRUMENT_PACK_MUSYNGKITE].join(\",\"),\r\n\t// global mode that get's passed into person too\r\n\tphotoSensitive: window.matchMedia && window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches || false\r\n}\r\n\r\n// For kid friendly versions with big eyes, no scary overlays and \r\n// simpler buttons and fewer controls and settings\r\nexport const KIDS_OPTIONS = {\r\n\t...DEFAULT_OPTIONS ,\r\n\tadvancedMode:false,\r\n\ttext:false,\r\n\tmasks:false,\r\n}\r\n\r\n// simpler buttons and fewer controls and settings\r\nexport const BODY_OPTIONS = {\r\n\t...DEFAULT_OPTIONS ,\r\n\t// model:'hand'\r\n\tbackingTrack:true\r\n}\r\n\r\n// simpler buttons and fewer controls and settings\r\nexport const DANCE_OPTIONS = {\r\n\t...DEFAULT_OPTIONS ,\r\n\t// model:'hand'\r\n\tinstrumentPack:INSTRUMENT_PACK_MUSYNGKITE,\r\n\tinstrumentPacks:[INSTRUMENT_PACK_MUSYNGKITE].join(\",\")\r\n}\r\n\r\n\r\n// NB. These must align with the button names\r\n// \t\tin the DOM when the app is launched\r\nexport const NAMES = ['a','b','c','d'].map( m => `person-${m}` )\r\n\r\nexport const getFactoryDefaults = ( options=DEFAULT_OPTIONS ) => Object.assign( {}, options )\r\n\r\nexport const getDomainDefaults = (name) => {\r\n\r\n\tswitch(name.toLowerCase())\r\n\t{\r\n\t\t// localhost 127.0.0.(1)\r\n\t\t// case 'localhost': \r\n\t\t// case '1': return getFactoryDefaults(KIDS_OPTIONS)\r\n\t\t\r\n\t\tcase 'lol': return getFactoryDefaults(KIDS_OPTIONS)\r\n\t\tcase 'band': return getFactoryDefaults()\r\n\t\tcase 'dance': return getFactoryDefaults(DANCE_OPTIONS)\r\n\t\t// defaults to interface.place\r\n\t\tdefault: return getFactoryDefaults()\r\n\t}\r\n}\r\n\r\n\r\nexport const DEFAULT_PERSON_OPTIONS = {\r\n\t...DEFAULT_COLOURS,\r\n\r\n\t// Passed to the delay node\r\n\t// NB. There is a global delay too remember\r\n\tuseDelay:false,\r\n\tdelayTime: 0.14,\r\n\tdelayLength: 10,\r\n\r\n\t// left / right ear stereo panning\r\n\tstereoPan:true,\r\n\r\n\tsendMIDI:true,\r\n\r\n\t// if you want the axis to be switched\r\n\tswapControls:false,\r\n\r\n\t// if the user has epilepsy, set to true\r\n\tphotoSensitive:false,\r\n\r\n\t// force draw face mesh\r\n\tdrawMesh:false,\r\n\t// force draw face blob nodes\r\n\tdrawNodes:true,\r\n\t// alternate between mesh and blobs depending on mouth\r\n\t// NB. The two above will override this behaviour\r\n\tmeshOnSing:false,\r\n\r\n\t// all the above can be disabled!\r\n\tdrawMask:true,\r\n\r\n\t// draw these parts over the mesh...\r\n\tdrawMouth:true,\r\n\t// kid mode turns eyes googly!\r\n\tdrawEyes:true,\r\n\r\n\t// ratios of size of eye\r\n\t// white bit\r\n\tscleraRadius:1,\r\n\t// blue bit\r\n\tirisRadius:0.8,\r\n\t// black bit\r\n\tpupilRadius:0.3,\r\n\t// frank sidebottom angle\r\n\teyeRatio:0.8,\r\n\r\n\t// mouse hold for clicking in seconds 0.5 and more feels weird\r\n\tmouseHoldDuration:0.6,\r\n\r\n\t// if both eyes are closed for X ms do something...\r\n\teyeShutHolddDuration:3500, // ms\r\n\r\n\t// how much feedback to apply to the feedback node\r\n\tfeedback:0.1,\r\n\r\n\t// to adjust the angle that the head has to roll...\r\n\t// larger means less movement required\r\n\trollSensitivity:1.2,\r\n\r\n\t// to adjust the amount of pitching (head rocking)\r\n\t// depending on how complicated the piece is the octaves\r\n\t// can also be shifted between a certain range...\r\n\tpitchSensitivity:1,\r\n\r\n\t// size of the mouth to signal activity\r\n\tmouthCutOff:0.2,\r\n\r\n\t// size of the mouth to signal silence\r\n\tmouthSilence:0.05,\r\n\r\n\t// volume smooth rate = smaller means faster fades?\r\n\tvolumeRate:0.7,\r\n\r\n\t// Samples to use for the audio engine INSTRUMENT_PACKS[0]\r\n\t//instrumentPack:INSTRUMENT_PACK_MUSYNGKITE,\r\n\tinstrumentPack:INSTRUMENT_PACK_MUSYNGKITE,\r\n\r\n\t// this is the amount of decimal places used to smooth the mouth\r\n\t// the higher the number the less smooth the output is\r\n\t// 1 or 2 should be more than enough\r\n\tprecision:3,\r\n\r\n\t// set this to one of the interpolation methods above\r\n\t// IN means that it starts off slowly (prefered)\r\n\tease:easeInSine // easeInSine // linear\r\n}\r\n\r\n\r\n","import { GENERAL_MIDI_INSTRUMENTS, FAMILY_DICTIONARY } from \"./midi/general-midi\"\r\n// '𝄞',\r\nexport const MUSICAL_NOTES = ['♫','𝅗𝅥','𝅘𝅥','𝅘𝅥𝅮','𝅘𝅥𝅯','𝅘𝅥𝅰','𝅘𝅥𝅱','𝅘𝅥𝅲']\r\n\r\nexport const INSTRUMENT_PACK_FM = \"FluidR3_GM\"\r\nexport const INSTRUMENT_PACK_FATBOY = \"FatBoy\"\r\nexport const INSTRUMENT_PACK_MUSYNGKITE = \"MusyngKite\"\r\nexport const INSTRUMENT_PACKS = [INSTRUMENT_PACK_FM, INSTRUMENT_PACK_FATBOY]\r\n\r\n// NB. These are actually General MIDI instrument names\r\n// but we can't use them as certain folders are misnamed\r\nexport const DEFAULT_FOLDERS = [\r\n\t\"acoustic_grand_piano\",\r\n\t\"bright_acoustic_piano\",\r\n\t\"electric_grand_piano\",\r\n\t\"honkytonk_piano\",\r\n\t\"electric_piano_1\",\r\n\t\"electric_piano_2\",\r\n\t\"harpsichord\",\r\n\t\"clavinet\",\r\n\t\"celesta\",\r\n\t\"glockenspiel\",\r\n\t\"music_box\",\r\n\t\"vibraphone\",\r\n\t\"marimba\",\r\n\t\"xylophone\",\r\n\t\"tubular_bells\",\r\n\t\"dulcimer\",\r\n\t\"drawbar_organ\",\r\n\t\"percussive_organ\",\r\n\t\"rock_organ\",\r\n\t\"church_organ\",\r\n\t\"reed_organ\",\r\n\t\"accordion\",\r\n\t\"harmonica\",\r\n\t\"tango_accordion\",\r\n\t\"acoustic_guitar_nylon\",\r\n\t\"acoustic_guitar_steel\",\r\n\t\"electric_guitar_jazz\",\r\n\t\"electric_guitar_clean\",\r\n\t\"electric_guitar_muted\",\r\n\t\"overdriven_guitar\",\r\n\t\"distortion_guitar\",\r\n\t\"guitar_harmonics\",\r\n\t\"acoustic_bass\",\r\n\t\"electric_bass_finger\",\r\n\t\"electric_bass_pick\",\r\n\t\"fretless_bass\",\r\n\t\"slap_bass_1\",\r\n\t\"slap_bass_2\",\r\n\t\"synth_bass_1\",\r\n\t\"synth_bass_2\",\r\n\t\"violin\",\r\n\t\"viola\",\r\n\t\"cello\",\r\n\t\"contrabass\",\r\n\t\"tremolo_strings\",\r\n\t\"pizzicato_strings\",\r\n\t\"orchestral_harp\",\r\n\t\"timpani\",\r\n\t\"string_ensemble_1\",\r\n\t\"string_ensemble_2\",\r\n\t\"synth_strings_1\",\r\n\t\"synth_strings_2\",\r\n\t\"choir_aahs\",\r\n\t\"voice_oohs\",\r\n\t\"synth_choir\",\r\n\t\"orchestra_hit\",\r\n\t\"trumpet\",\r\n\t\"trombone\",\r\n\t\"tuba\",\r\n\t\"muted_trumpet\",\r\n\t\"french_horn\",\r\n\t\"brass_section\",\r\n\t\"synth_brass_1\",\r\n\t\"synth_brass_2\",\r\n\t\"soprano_sax\",\r\n\t\"alto_sax\",\r\n\t\"tenor_sax\",\r\n\t\"baritone_sax\",\r\n\t\"oboe\",\r\n\t\"english_horn\",\r\n\t\"bassoon\",\r\n\t\"clarinet\",\r\n\t\"piccolo\",\r\n\t\"flute\",\r\n\t\"recorder\",\r\n\t\"pan_flute\",\r\n\t\"blown_bottle\",\r\n\t\"shakuhachi\",\r\n\t\"whistle\",\r\n\t\"ocarina\",\r\n\t\"lead_1_square\",\r\n\t\"lead_2_sawtooth\",\r\n\t\"lead_3_calliope\",\r\n\t\"lead_4_chiff\",\r\n\t\"lead_5_charang\",\r\n\t\"lead_6_voice\",\r\n\t\"lead_7_fifths\",\r\n\t\"lead_8_bass__lead\",\r\n\t\"pad_1_new_age\",\r\n\t\"pad_2_warm\",\r\n\t\"pad_3_polysynth\",\r\n\t\"pad_4_choir\",\r\n\t\"pad_5_bowed\",\r\n\t\"pad_6_metallic\",\r\n\t\"pad_7_halo\",\r\n\t\"pad_8_sweep\",\r\n\t\"fx_1_rain\",\r\n\t\"fx_2_soundtrack\",\r\n\t\"fx_3_crystal\",\r\n\t\"fx_4_atmosphere\",\r\n\t\"fx_5_brightness\",\r\n\t\"fx_6_goblins\",\r\n\t\"fx_7_echoes\",\r\n\t\"fx_8_scifi\",\r\n\t\"sitar\",\r\n\t\"banjo\",\r\n\t\"shamisen\",\r\n\t\"koto\",\r\n\t\"kalimba\",\r\n\t\"bagpipe\",\r\n\t\"fiddle\",\r\n\t\"shanai\",\r\n\t\"tinkle_bell\",\r\n\t\"agogo\",\r\n\t\"steel_drums\",\r\n\t\"woodblock\",\r\n\t\"taiko_drum\",\r\n\t\"melodic_tom\",\r\n\t\"synth_drum\",\r\n\t\"reverse_cymbal\",\r\n\t\"guitar_fret_noise\",\r\n\t\"breath_noise\",\r\n\t\"seashore\",\r\n\t\"bird_tweet\",\r\n\t\"telephone_ring\",\r\n\t\"helicopter\",\r\n\t\"applause\",\r\n\t\"gunshot\"\r\n]\r\n\r\n// actual instrument folder names\r\nexport let instrumentFolders = DEFAULT_FOLDERS.map( instrumentFolder => instrumentFolder+`-mp3`)\r\n// nice names for the above\r\nexport let instrumentNames = instrumentFolders.map( (instrument, index) => GENERAL_MIDI_INSTRUMENTS[index] )\r\n\r\n// combine those 2 together\r\nconst TITLE_DICTIONARY = {}\r\ninstrumentFolders.forEach( (name,index) => TITLE_DICTIONARY[name] = instrumentNames[index] )\r\n\r\n\r\n\r\n\r\n/**\r\n * Fetch a random instrument name\r\n * @returns {String} Instrument Name\r\n */\r\n export const getRandomInstrument = () => instrumentFolders[ Math.floor( Math.random() * instrumentFolders.length ) ]\r\n\r\n\r\n/**\r\n * Find the family for this instrument\r\n * @param {String} instrumentName - name of the instrument\r\n * @returns \r\n */\r\nexport const getInstrumentFamily = instrumentName => FAMILY_DICTIONARY[instrumentName]\r\n\r\n/**\r\n * \r\n * @param {*} instrumentName \r\n * @returns \r\n */\r\nexport const getInstrumentTitle = instrumentName => TITLE_DICTIONARY[instrumentName]\r\n\r\n\r\n/**\r\n * Create an Object of all instruments and folders -\r\n * useful for debugging and understanding connections\r\n * but also used in the side bar for each user\r\n * @returns \r\n */\r\nexport const createInstruments = () => DEFAULT_FOLDERS.map( (folder, index) => {\r\n\t\tconst name = GENERAL_MIDI_INSTRUMENTS[index]\r\n\t\tconst family = FAMILY_DICTIONARY[name]\r\n\t\tconst location = instrumentFolders[index]\r\n\t\treturn {\r\n\t\t\tfolder,\r\n\t\t\tname,\r\n\t\t\tfamily,\r\n\t\t\tlocation\r\n\t\t}\r\n\t}\r\n)\r\n\r\n// TODO: Which of these are loops?\r\n// export const LOOPS = []\r\n// export const SINGLE_SHOTS = []\r\n\r\nexport const instrumentCache = {}\r\nexport const fetchInstrument = (name) =>{\r\n\t\r\n\t// FIXME: Create if it doesn't exist?\r\n\treturn instrumentCache[name]\r\n}\r\n\r\nexport const storeInstrument = (name,data) => {\r\n\tinstrumentCache[name] = data\r\n}\r\n\r\nconst createPack = (packs, format=\"mp3\") => {\r\n\treturn packs.map( (instrument, i) => {\r\n\t\tconst formatted = `${instrument}-${format}`\r\n\t\tinstrumentFolders[i] =formatted\r\n\t\t// FIXME: May not always align...\r\n\t\tinstrumentNames[i] = GENERAL_MIDI_INSTRUMENTS[i]\r\n\t\treturn formatted\r\n\t})\r\n}\r\n\r\n/**\r\n * Load an Data pack from specified JSON file\r\n * @param {String} packName \r\n * @returns \r\n */\r\n// This is a way to load in a collection of files from json\r\nexport const loadInstrumentDataPack = async ( packName='musyng.json', format=\"mp3\" ) => {\r\n\tconst url = `./assets/audio/${packName}`\r\n\ttry{\r\n\t\tconst request = await fetch( url )\r\n\t\tconst packs = await request.json()\r\n\t\treturn createPack( packs, format )\r\n\t}catch(error){\r\n\t\treturn []\r\n\t}\t\r\n}\r\n\r\n// FIXME: Remove this!\r\nexport const getFolderNameForInstrument = name => {\r\n\tlet index = instrumentFolders.indexOf(name)\r\n\tif (index === -1){\r\n\t\tindex = instrumentNames.indexOf(name)\r\n\t}\r\n\treturn instrumentFolders[index]\r\n}","// [General MIDI Instrument Patch Map](https://www.midi.org/specifications/item/gm-level-1-sound-set)\r\n// [General MIDI Instrument Patch Map](http://cs.uccs.edu/~cs525/midi/midi.html)\r\n/*\r\nGeneral MIDI Level 1 Instrument Families\r\n\r\nThe General MIDI Level 1 instrument sounds are grouped by families.\r\nIn each family are 8 specific instruments.\r\n\r\nPC# \tFamily Name\r\n1-8 \tPiano\r\n9-16 \tChromatic Percussion\r\n17-24 \tOrgan\r\n25-32 \tGuitar\r\n33-40 \tBass\r\n41-48 \tStrings\r\n49-56 \tEnsemble\r\n57-64 \tBrass\r\n65-72 \tReed\r\n73-80 \tPipe\r\n81-88 \tSynth Lead\r\n89-96 \tSynth Pad\r\n97-104 \tSynth Effects\r\n105-112 Ethnic\r\n113-120 Percussive\r\n121-128 Sound Effects\r\n\r\nOn MIDI Channel 10, each MIDI Note number (\"Key#\") corresponds to a different drum sound, as shown below.\r\nGM-compatible instruments must have the sounds on the keys shown here.\r\n\r\nWhile many current instruments also have additional sounds above or below the range show here,\r\nand may even have additional \"kits\" with variations of these sounds, only these sounds are supported\r\nby General MIDI Level 1 devices.\r\n\r\n*/\r\nexport const GENERAL_MIDI_INSTRUMENTS = [\r\n\t\"acoustic grand piano\",\r\n\t\"bright acoustic piano\",\r\n\t\"electric grand piano\",\r\n\t\"honky-tonk piano\",\r\n\t\"electric piano 1\",\r\n\t\"electric piano 2\",\r\n\t\"harpsichord\",\r\n\t\"clavi\",\r\n\t\"celesta\",\r\n\t\"glockenspiel\",\r\n\t\"music box\",\r\n\t\"vibraphone\",\r\n\t\"marimba\",\r\n\t\"xylophone\",\r\n\t\"tubular bells\",\r\n\t\"dulcimer\",\r\n\t\"drawbar organ\",\r\n\t\"percussive organ\",\r\n\t\"rock organ\",\r\n\t\"church organ\",\r\n\t\"reed organ\",\r\n\t\"accordion\",\r\n\t\"harmonica\",\r\n\t\"tango accordion\",\r\n\t\"acoustic guitar (nylon)\",\r\n\t\"acoustic guitar (steel)\",\r\n\t\"electric guitar (jazz)\",\r\n\t\"electric guitar (clean)\",\r\n\t\"electric guitar (muted)\",\r\n\t\"overdriven guitar\",\r\n\t\"distortion guitar\",\r\n\t\"guitar harmonics\",\r\n\t\"acoustic bass\",\r\n\t\"electric bass (finger)\",\r\n\t\"electric bass (pick)\",\r\n\t\"fretless bass\",\r\n\t\"slap bass 1\",\r\n\t\"slap bass 2\",\r\n\t\"synth bass 1\",\r\n\t\"synth bass 2\",\r\n\t\"violin\",\r\n\t\"viola\",\r\n\t\"cello\",\r\n\t\"contrabass\",\r\n\t\"tremolo strings\",\r\n\t\"pizzicato strings\",\r\n\t\"orchestral harp\",\r\n\t\"timpani\",\r\n\t\"string ensemble 1\",\r\n\t\"string ensemble 2\",\r\n\t\"synthstrings 1\",\r\n\t\"synthstrings 2\",\r\n\t\"choir aahs\",\r\n\t\"voice oohs\",\r\n\t\"synth voice\",\r\n\t\"orchestra hit\",\r\n\t\"trumpet\",\r\n\t\"trombone\",\r\n\t\"tuba\",\r\n\t\"muted trumpet\",\r\n\t\"french horn\",\r\n\t\"brass section\",\r\n\t\"synthbrass 1\",\r\n\t\"synthbrass 2\",\r\n\t\"soprano sax\",\r\n\t\"alto sax\",\r\n\t\"tenor sax\",\r\n\t\"baritone sax\",\r\n\t\"oboe\",\r\n\t\"english horn\",\r\n\t\"bassoon\",\r\n\t\"clarinet\",\r\n\t\"piccolo\",\r\n\t\"flute\",\r\n\t\"recorder\",\r\n\t\"pan flute\",\r\n\t\"blown bottle\",\r\n\t\"shakuhachi\",\r\n\t\"whistle\",\r\n\t\"ocarina\",\r\n\t\"lead 1 (square)\",\r\n\t\"lead 2 (sawtooth)\",\r\n\t\"lead 3 (calliope)\",\r\n\t\"lead 4 (chiff)\",\r\n\t\"lead 5 (charang)\",\r\n\t\"lead 6 (voice)\",\r\n\t\"lead 7 (fifths)\",\r\n\t\"lead 8 (bass + lead)\",\r\n\t\"pad 1 (new age)\",\r\n\t\"pad 2 (warm)\",\r\n\t\"pad 3 (polysynth)\",\r\n\t\"pad 4 (choir)\",\r\n\t\"pad 5 (bowed)\",\r\n\t\"pad 6 (metallic)\",\r\n\t\"pad 7 (halo)\",\r\n\t\"pad 8 (sweep)\",\r\n\t\"fx 1 (rain)\",\r\n\t\"fx 2 (soundtrack)\",\r\n\t\"fx 3 (crystal)\",\r\n\t\"fx 4 (atmosphere)\",\r\n\t\"fx 5 (brightness)\",\r\n\t\"fx 6 (goblins)\",\r\n\t\"fx 7 (echoes)\",\r\n\t\"fx 8 (sci-fi)\",\r\n\t\"sitar\",\r\n\t\"banjo\",\r\n\t\"shamisen\",\r\n\t\"koto\",\r\n\t\"kalimba\",\r\n\t\"bag pipe\",\r\n\t\"fiddle\",\r\n\t\"shanai\",\r\n\t\"tinkle bell\",\r\n\t\"agogo\",\r\n\t\"steel drums\",\r\n\t\"woodblock\",\r\n\t\"taiko drum\",\r\n\t\"melodic tom\",\r\n\t\"synth drum\",\r\n\t\"reverse cymbal\",\r\n\t\"guitar fret noise\",\r\n\t\"breath noise\",\r\n\t\"seashore\",\r\n\t\"bird tweet\",\r\n\t\"telephone ring\",\r\n\t\"helicopter\",\r\n\t\"applause\",\r\n\t\"gunshot\",\r\n]\r\n\r\nexport const GENERAL_MIDI_INSTRUMENT_FAMILY_NAMES = [\r\n\t\"piano\",\r\n\t\"chromatic percussion\",\r\n\t\"organ\",\r\n\t\"guitar\",\r\n\t\"bass\",\r\n\t\"strings\",\r\n\t\"ensemble\",\r\n\t\"brass\",\r\n\t\"reed\",\r\n\t\"pipe\",\r\n\t\"synth lead\",\r\n\t\"synth pad\",\r\n\t\"synth effects\",\r\n\t\"ethnic\",\r\n\t\"percussive\",\r\n\t\"sound effects\",\r\n]\r\n\r\nexport const GENERAL_MIDI_INSTRUMENT_FAMILY_IDS = {\r\n\t0: \"piano\",\r\n\t7: \"chromatic percussion\",\r\n\t12: \"organ\",\r\n\t25: \"guitar\",\r\n\t33: \"bass\",\r\n\t41: \"strings\",\r\n\t49: \"ensemble\",\r\n\t57: \"brass\",\r\n\t65: \"reed\",\r\n\t69: \"pipe\",\r\n\t81: \"synth lead\",\r\n\t89: \"synth pad\",\r\n\t97: \"synth effects\",\r\n\t// some rasict shit right here akin to \"world\" music\r\n\t105: \"ethnic\",\r\n\t113: \"percussive\",\r\n\t123: \"sound effects\"\r\n}\r\n\r\nexport const GENERAL_MIDI_FAMILIES = new Map()\r\n\r\n// This creates a Map of instument arrays\r\nexport const GENERAL_MIDI_INSTRUMENT_FAMILIES = {}\r\n\r\nexport const FAMILY_DICTIONARY = {}\r\nlet latch = GENERAL_MIDI_INSTRUMENT_FAMILY_IDS[0]\r\nGENERAL_MIDI_INSTRUMENTS.forEach( (instrument, index) => {\r\n\t\r\n\tif (GENERAL_MIDI_INSTRUMENT_FAMILY_IDS[index])\r\n\t{\r\n\t\tlatch = GENERAL_MIDI_INSTRUMENT_FAMILY_IDS[index]\r\n\t}\r\n\t// GENERAL_MIDI_INSTRUMENT_FAMILY_IDS[index]\r\n\tGENERAL_MIDI_FAMILIES.set( latch, [...(GENERAL_MIDI_FAMILIES.get(latch) || []), instrument] )\r\n\tFAMILY_DICTIONARY[instrument] = latch\r\n})\r\n\r\n\r\nexport const DrumKitByPatchID = {\r\n\t 0: \"standard kit\",\r\n\t 8: \"room kit\",\r\n\t16: \"power kit\",\r\n\t24: \"electronic kit\",\r\n\t25: \"tr-808 kit\",\r\n\t32: \"jazz kit\",\r\n\t40: \"brush kit\",\r\n\t48: \"orchestra kit\",\r\n\t56: \"sound fx kit\",\r\n}\r\n\r\n/*\r\n\r\nChannel 10 Drum sounds (overwrites the noteNumber)\r\n\r\nDrum Sound - 35\r\nAcoustic Bass Drum - 36\r\nBass Drum 1 - 37\r\nSide Stick 38 \r\nAcoustic Snare - 39\r\nHand Clap 40\r\nElectric Snare 41\r\nLow Floor Tom 42\r\nClosed Hi Hat 43\r\nHigh Floor Tom 44\r\nPedal Hi-Hat 45\r\nLow Tom 46\r\nOpen Hi-Hat 47\r\nLow-Mid Tom 48\r\nHi-Mid Tom 49\r\nCrash Cymbal 1 50\r\nHigh Tom 51\r\nRide Cymbal 1 52\r\nChinese Cymbal 53\r\nRide Bell 54\r\nTambourine 55\r\nSplash Cymbal 56\r\nCowbell 57\r\nCrash Cymbal 2 58\r\nVibraslap 59\r\nRide Cymbal 2 60\r\nHi Bongo 61\r\nLow Bongo 62\r\nMute Hi Conga 63\r\nOpen Hi Conga 64\r\nLow Conga 65\r\nHigh Timbale 66\r\nLow Timbale 67\r\nHigh Agogo 68\r\nLow Agogo 69\r\nCabasa 70\r\nMaracas 71\r\nShort Whistle \r\n72\r\nLong Whistle \r\n73\r\nShort Guiro \r\n74\r\nLong Guiro \r\n75\r\nClaves\r\n76\r\nHi Wood Block\r\n77\r\nLow Wood Block\r\n78\r\nMute Cuica\r\n79\r\nOpen Cuica\r\n80\r\nMute Triangle\r\n81\r\nOpen Triangle\r\n*/","const PALETTE = {\r\n\twhite:\"hsl(22, 28%, 87%)\",\r\n\tdark:\"hsl(30, 6%, 14%)\",\r\n\tgrey:\"hsl(11, 6%, 50%)\",\r\n\tcream:\"hsl(27, 30%, 45%)\",\r\n\tbrown:\"hsl(23, 22%, 30%)\",\r\n\tblue:\"hsl(196, 18%, 33%)\",\r\n\tgreen:\"hsl(56, 18%, 33%)\",\r\n\tyellow:\"hsl(56, 18%, 33%)\",\r\n\torange:\"hsl(28, 69%, 38%)\",\r\n\tred:\"hsl(9, 58%, 35%)\"\r\n}\r\n\r\nexport const DEFAULT_COLOURS = {\r\n\t// 0->hueRange\r\n\thue:90,\r\n\t// percentages\r\n\tsaturation:80,\r\n\t// used to create white mode / black mode and greyscale modes\r\n\tluminosity:50,\r\n\t// 0->360\r\n\thueRange:360,\r\n\t// dots hue? still used?\r\n\tdots:60,\r\n\tmouth:'rgba(255,0,0,0.5)',\r\n\tmouthClosed:'rgba(255,0,0,0.2)',\r\n\tlipsUpperInner:'pink',\r\n\tlipsLowerInner:'pink',\r\n\tmidwayBetweenEyes:'blue',\r\n\tleftEyeLower0:'red',\r\n\trightEyeLower0:'red',\r\n\tleftEyeIris:'yellow',\r\n\trightEyeIris:'yellow',\r\n}\r\n\r\n// Dami kim special mode\r\nexport const DAMI_KIM_COLOURS = { ...DEFAULT_COLOURS }\r\n\r\n// Simpler colour scheme\r\nexport const PASTEL_COLOURS = { ... DEFAULT_COLOURS }\r\n\r\nexport default PALETTE","// Based on https://gist.github.com/gre/1650294\r\n\r\n// No easing, no acceleration\r\nexport const linear = t => t\r\n\r\n// Slight acceleration from zero to full speed\r\nexport const easeInSine = t  => -1 * Math.cos( t * ( Math.PI / 2 ) ) + 1\r\n\r\n// Slight deceleration at the end\r\nexport function easeOutSine( t ) {\r\n    return Math.sin( t * ( Math.PI / 2 ) )\r\n}\r\n\r\n// Slight acceleration at beginning and slight deceleration at end\r\nexport function easeInOutSine( t ) {\r\n    return -0.5 * ( Math.cos( Math.PI * t ) - 1 )\r\n}\r\n\r\n// Accelerating from zero velocity\r\nexport function easeInQuad( t ) {\r\n    return t * t\r\n}\r\n\r\n// Decelerating to zero velocity\r\nexport function easeOutQuad( t ) {\r\n    return t * ( 2 - t )\r\n}\r\n\r\n// Acceleration until halfway, then deceleration\r\nexport function easeInOutQuad( t ) {\r\n    return t < 0.5 ? 2 * t * t : - 1 + ( 4 - 2 * t ) * t\r\n}\r\n\r\n// Accelerating from zero velocity\r\nexport function easeInCubic( t ) {\r\n    return t * t * t\r\n}\r\n\r\n// Decelerating to zero velocity\r\nexport function easeOutCubic( t ) {\r\n    const t1 = t - 1\r\n    return t1 * t1 * t1 + 1\r\n}\r\n\r\n// Acceleration until halfway, then deceleration\r\nexport function easeInOutCubic( t ) {\r\n    return t < 0.5 ? 4 * t * t * t : ( t - 1 ) * ( 2 * t - 2 ) * ( 2 * t - 2 ) + 1\r\n}\r\n\r\n// Accelerating from zero velocity\r\nexport function easeInQuart( t ) {\r\n    return t * t * t * t\r\n}\r\n\r\n// Decelerating to zero velocity\r\nexport function easeOutQuart( t ) {\r\n    const t1 = t - 1\r\n    return 1 - t1 * t1 * t1 * t1\r\n}\r\n\r\n// Acceleration until halfway, then deceleration\r\nexport function easeInOutQuart( t ) {\r\n    const t1 = t - 1\r\n    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1\r\n}\r\n\r\n// Accelerating from zero velocity\r\nexport function easeInQuint( t ) {\r\n    return t * t * t * t * t\r\n}\r\n\r\n// Decelerating to zero velocity\r\nexport function easeOutQuint( t ) {\r\n    const t1 = t - 1\r\n    return 1 + t1 * t1 * t1 * t1 * t1\r\n}\r\n\r\n// Acceleration until halfway, then deceleration\r\nexport function easeInOutQuint( t ) {\r\n    const t1 = t - 1\r\n    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * t1 * t1 * t1 * t1 * t1\r\n}\r\n\r\n// Accelerate exponentially until finish\r\nexport function easeInExpo( t ) {\r\n\r\n    if( t === 0 ) {\r\n        return 0\r\n    }\r\n\r\n    return Math.pow( 2, 10 * ( t - 1 ) )\r\n\r\n}\r\n\r\n// Initial exponential acceleration slowing to stop\r\nexport function easeOutExpo( t ) {\r\n\r\n    if( t === 1 ) {\r\n        return 1\r\n    }\r\n\r\n    return ( -Math.pow( 2, -10 * t ) + 1 )\r\n\r\n}\r\n\r\n// Exponential acceleration and deceleration\r\nexport function easeInOutExpo( t ) {\r\n    \r\n    if( t === 0 || t === 1 ) {\r\n        return t\r\n    }\r\n\r\n    const scaledTime = t * 2\r\n    const scaledTime1 = scaledTime - 1\r\n\r\n    if( scaledTime < 1 ) {\r\n        return 0.5 * Math.pow( 2, 10 * ( scaledTime1 ) )\r\n    }\r\n\r\n    return 0.5 * ( -Math.pow( 2, -10 * scaledTime1 ) + 2 )\r\n\r\n}\r\n\r\n// Increasing velocity until stop\r\nexport function easeInCirc( t ) {\r\n\r\n    const scaledTime = t / 1\r\n    return -1 * ( Math.sqrt( 1 - scaledTime * t ) - 1 )\r\n\r\n}\r\n\r\n// Start fast, decreasing velocity until stop\r\nexport function easeOutCirc( t ) {\r\n\r\n    const t1 = t - 1\r\n    return Math.sqrt( 1 - t1 * t1 )\r\n\r\n}\r\n\r\n// Fast increase in velocity, fast decrease in velocity\r\nexport function easeInOutCirc( t ) {\r\n\r\n    const scaledTime = t * 2\r\n    const scaledTime1 = scaledTime - 2\r\n\r\n    if( scaledTime < 1 ) {\r\n        return -0.5 * ( Math.sqrt( 1 - scaledTime * scaledTime ) - 1 )\r\n    }\r\n\r\n    return 0.5 * ( Math.sqrt( 1 - scaledTime1 * scaledTime1 ) + 1 )\r\n\r\n}\r\n\r\n// Slow movement backwards then fast snap to finish\r\nexport function easeInBack( t, magnitude = 1.70158 ) {\r\n\r\n    return t * t * ( ( magnitude + 1 ) * t - magnitude )\r\n\r\n}\r\n\r\n// Fast snap to backwards point then slow resolve to finish\r\nexport function easeOutBack( t, magnitude = 1.70158 ) {\r\n\r\n    const scaledTime = ( t / 1 ) - 1\r\n    \r\n    return (\r\n        scaledTime * scaledTime * ( ( magnitude + 1 ) * scaledTime + magnitude )\r\n    ) + 1\r\n\r\n}\r\n\r\n// Slow movement backwards, fast snap to past finish, slow resolve to finish\r\nexport function easeInOutBack( t, magnitude = 1.70158 ) {\r\n\r\n    const scaledTime = t * 2\r\n    const scaledTime2 = scaledTime - 2\r\n\r\n    const s = magnitude * 1.525\r\n\r\n    if( scaledTime < 1) {\r\n\r\n        return 0.5 * scaledTime * scaledTime * (\r\n            ( ( s + 1 ) * scaledTime ) - s\r\n        )\r\n\r\n    }\r\n\r\n    return 0.5 * (\r\n        scaledTime2 * scaledTime2 * ( ( s + 1 ) * scaledTime2 + s ) + 2\r\n    )\r\n\r\n}\r\n// Bounces slowly then quickly to finish\r\nexport function easeInElastic( t, magnitude = 0.7 ) {\r\n\r\n    if( t === 0 || t === 1 ) {\r\n        return t\r\n    }\r\n\r\n    const scaledTime = t / 1\r\n    const scaledTime1 = scaledTime - 1\r\n\r\n    const p = 1 - magnitude\r\n    const s = p / ( 2 * Math.PI ) * Math.asin( 1 )\r\n\r\n    return -(\r\n        Math.pow( 2, 10 * scaledTime1 ) *\r\n        Math.sin( ( scaledTime1 - s ) * ( 2 * Math.PI ) / p )\r\n    )\r\n\r\n}\r\n\r\n// Fast acceleration, bounces to zero\r\nexport function easeOutElastic( t, magnitude = 0.7 ) {\r\n\r\n    const p = 1 - magnitude\r\n    const scaledTime = t * 2\r\n\r\n    if( t === 0 || t === 1 ) {\r\n        return t\r\n    }\r\n\r\n    const s = p / ( 2 * Math.PI ) * Math.asin( 1 )\r\n    return (\r\n        Math.pow( 2, -10 * scaledTime ) *\r\n        Math.sin( ( scaledTime - s ) * ( 2 * Math.PI ) / p )\r\n    ) + 1\r\n\r\n}\r\n\r\n// Slow start and end, two bounces sandwich a fast motion\r\nexport function easeInOutElastic( t, magnitude = 0.65 ) {\r\n\r\n    const p = 1 - magnitude\r\n\r\n    if( t === 0 || t === 1 ) {\r\n        return t\r\n    }\r\n\r\n    const scaledTime = t * 2\r\n    const scaledTime1 = scaledTime - 1\r\n    \r\n    const s = p / ( 2 * Math.PI ) * Math.asin( 1 )\r\n\r\n    if( scaledTime < 1 ) {\r\n        return -0.5 * (\r\n            Math.pow( 2, 10 * scaledTime1 ) *\r\n            Math.sin( ( scaledTime1 - s ) * ( 2 * Math.PI ) / p )\r\n        )\r\n    }\r\n\r\n    return (\r\n        Math.pow( 2, -10 * scaledTime1 ) *\r\n        Math.sin( ( scaledTime1 - s ) * ( 2 * Math.PI ) / p ) * 0.5\r\n    ) + 1\r\n\r\n}\r\n\r\n// Bounce to completion\r\nexport function easeOutBounce( t ) {\r\n\r\n    const scaledTime = t / 1\r\n\r\n    if( scaledTime < ( 1 / 2.75 ) ) {\r\n\r\n        return 7.5625 * scaledTime * scaledTime\r\n\r\n    } else if( scaledTime < ( 2 / 2.75 ) ) {\r\n\r\n        const scaledTime2 = scaledTime - ( 1.5 / 2.75 )\r\n        return ( 7.5625 * scaledTime2 * scaledTime2 ) + 0.75\r\n\r\n    } else if( scaledTime < ( 2.5 / 2.75 ) ) {\r\n\r\n        const scaledTime2 = scaledTime - ( 2.25 / 2.75 )\r\n        return ( 7.5625 * scaledTime2 * scaledTime2 ) + 0.9375\r\n\r\n    } else {\r\n\r\n        const scaledTime2 = scaledTime - ( 2.625 / 2.75 )\r\n        return ( 7.5625 * scaledTime2 * scaledTime2 ) + 0.984375\r\n\r\n    }\r\n\r\n}\r\n\r\n// Bounce increasing in velocity until completion\r\nexport function easeInBounce( t ) {\r\n    return 1 - easeOutBounce( 1 - t )\r\n}\r\n\r\n// Bounce in and bounce out\r\nexport function easeInOutBounce( t ) {\r\n\r\n    if( t < 0.5 ) {\r\n\r\n        return easeInBounce( t * 2 ) * 0.5\r\n        \r\n    }\r\n\r\n    return ( easeOutBounce( ( t * 2 ) - 1 ) * 0.5 ) + 0.5\r\n\r\n}","// checkForUpdates()\r\n// await checkForUpdates() => { currentVersion:0.0.1, newVersion:0.0.2, updateAvailable:true } \r\n\r\n// Fix some issues with early browsers\r\n// import './servicewaiting.polyfill'\r\n\r\nimport { VERSION } from '../version'\r\n// import serviceWorkerPath from \"url:../service-worker.js\"\r\n\r\n// console.error({serviceWorkerPath, manifestPath})\r\n\r\n// ? made CloudFlare barf up the ServiceWorker so meh!\r\nconst URL_SEPERATOR = \"#\"\r\n\r\nconst NAME = \"ploppypantspwaispoo\"\r\n\r\nlet deferredPrompt\r\n\r\n// flags\r\nconst PWA_TYPES = [ \"standalone\", \"fullscreen\",  \"minimal-ui\" ]\r\n\r\n// Determine as much functionality as possible\r\nconst isInWebAppiOS = \"standalone\" in navigator ? window.navigator.standalone === true : matchMedia(\"(display-mode: standalone)\").matches\r\n// as there are other modes that are active as pwa such as fullscreen\r\nconst displayMode = PWA_TYPES.filter( displayMode => window.matchMedia( `(display-mode:${displayMode})` ).matches )\r\nconst isInWebAppChrome = PWA_TYPES.includes( displayMode )\r\n\r\n// const isInWebAppChrome = [\"fullscreen\", \"standalone\", \"minimal-ui\"].some( displayMode => window.matchMedia( `(display-mode:${displayMode})` ).matches )\r\n// const isInWebAppChrome = window.matchMedia('(display-mode: standalone)').matches\r\n\r\n// handle iOS specifically\r\n// this includes the regular iPad and the iPad pro but not macOS\r\nconst isIOS =\r\n\tnavigator.userAgent.includes(\"iPhone\") || navigator.userAgent.includes(\"iPad\") ||\r\n\t(navigator.userAgent.includes(\"Macintosh\") && navigator.maxTouchPoints && navigator.maxTouchPoints > 2)\r\n\r\n// is this an APK TWA android app?\r\nconst isTWAAndroid = document.referrer.includes('android-app://')\r\n// check to see if it is in the microsoft store pwas format\r\nconst isMicrosoftStore = Array.isArray( navigator.userAgent.match(/MSAppHost/i) )\r\n\r\n// if this is the first ever run or if this is the cache has been cleared...\r\nconst isFirstRun = navigator.serviceWorker.controller === null\r\n// Is the user online or offline?\r\nconst isOnline = navigator.onLine \r\n\r\n// 1. Check WebBrowser to see if PWA mode is available (not all browsers have it!)\r\n// \t\tcheck for beforeinstallprompt support\r\n// \t\t- if available then continue\r\nexport const isSupportingBrowser = window.hasOwnProperty(\"BeforeInstallPromptEvent\")\r\n\r\n// 2. Check if the app was JUST installed (previously before refresh)\r\n// was installed on the last refresh\r\n// - if so then quit\r\nconst wasJustInstalled = new URLSearchParams(window.location.search).installing || false\r\n\r\n// 3. Check to see if the app has already been installed!\r\n//\t\t- if it has continue to UPDATE step\r\n//\t\t- if it has not, continue to INSTALL step\r\n// is this runnning as an App on the device? PWA / TWA / MSStore \r\nconst isRunningAsApp = isInWebAppiOS || isInWebAppChrome || isTWAAndroid || isMicrosoftStore || false\r\n\r\n// 4. If Installed check for updates\r\n\r\n\r\n\r\n\r\n\r\nconst platform = {\r\n\tios:isIOS,\r\n\tandroid:isTWAAndroid,\r\n\tmicrosoft:isMicrosoftStore,\r\n\tpwa:isRunningAsApp,\r\n\toffline:!isOnline,\r\n\tdisplayMode\r\n}\r\n\r\n\r\n\r\n// The process goes like this...\r\n\r\n// FIXME: show change log if just installed and silently exit!\r\nconst setJustBeenInstalled = (cookieSecret=NAME) =>{\r\n\t// checks a few things... query string for \"installing=true\"\r\n\tconst urlParams = new URLSearchParams(window.location.search)\r\n\turlParams.installing = true\r\n\r\n\tlocalStorage.setItem(cookieSecret,{\r\n\t\tinstalling:true,\r\n\t\tversion:VERSION\r\n\t})\r\n}\r\n\r\n\r\n\r\n// INSTALL PATH\r\n// - set localstorage flag for version and for date installed as well as if it has JUST been installed (gets cleared after first refresh)\r\n\r\n\r\n// UPDATE PATH\r\n\r\nlet installed\r\n// TODO: Lazy load from install\r\nconst showInstallPrompt = (installButton, prompt) => new Promise( async (resolve,reject)=>{\r\n\r\n\tif (!prompt)\r\n\t{\r\n\t\treturn reject()\r\n\t}\r\n\r\n\twindow.addEventListener(\"appinstalled\", evt => {\r\n\t\t\r\n\t\t//console.log(\"appinstalled fired\", evt)\r\n\t\tresolve({\r\n\t\t\tsuccess:true,\r\n\t\t\tlog:\"Your PWA has been installed\"\r\n\t\t})\r\n\r\n\t}, {once:true})\r\n\r\n\t// show the actual prompt\r\n\tprompt.prompt()\r\n\t\r\n\t// disable the install button to prevent repress\r\n\tinstallButton.disabled = true\r\n\t\r\n\t// wait for the user to click a button...\r\n\tconst choiceResult = await prompt.userChoice\r\n\t\r\n\t// user clicked...\r\n\tif (choiceResult.outcome === \"accepted\") \r\n\t{\r\n\t\tconst urlParams = new URLSearchParams(window.location.search)\r\n\t\turlParams.installing = true\r\n\t\t// set?\r\n\r\n\t\tinstalled = true\r\n\t\tinstallButton.hidden = true\r\n\t\t//prompt = null\r\n\r\n\t\t// this should trigger the above event!\r\n\t\t\r\n\t} else {\r\n\r\n\t\tinstallButton.disabled = false\r\n\t\tinstalled = false\r\n\t\tresolve({\r\n\t\t\tsuccess:false,\r\n\t\t\tlog:\"User chose to not install\"\r\n\t\t})\r\n\t\t//reject(\"User chose to not install\")\r\n\t}\r\n})\r\n\r\n// Force uninstall (if pushed out a dodgy version for example)\r\nexport const uninstall = () => {\r\n\tnavigator.serviceWorker.getRegistrations()\r\n\t\t.then( registrations => { \r\n\t\t\tfor(let registration of registrations) \r\n\t\t\t{ \r\n\t\t\t\tregistration.unregister()\r\n\t\t\t\t.then(()=>self.clients.matchAll())\r\n\t\t\t\t.then(clients => { \r\n\t\t\t\t\tclients.forEach(client => { \r\n\t\t\t\t\t\tif (client.url && \"navigate\" in client){ \r\n\t\t\t\t\t\t\tclient.navigate(client.url)\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t})\r\n}\r\n\r\nexport const showChangelog = async ( domElement ) =>{\r\n\tconst {injectChangeLog, fetchChangesAsText} = await import('./changes.js')\r\n\tconst changes = await fetchChangesAsText('changelog')\r\n\tinjectChangeLog( domElement )\r\n\treturn changes\r\n}\r\n\r\nlet isInstallable = false\r\nlet updating = false\r\nlet updatesAvailable = false\r\nlet updated = false\r\nlet newVersionAvailable = false\r\n\r\n// versioning\r\nconst currentVersion = VERSION\r\nlet previousVersion\r\n\r\n// progressive web app variant\r\n// this simply loads and installs the service worker\r\nexport const installOrUpdate = async(debug=false, currentlyRunningVersion='' ) => {\r\n\r\n\tlet log = []\r\n\tlet output = {}\r\n\r\n\t// 1. Check browser allows PWAs\r\n\tif (!isSupportingBrowser)\r\n\t{\r\n\t\tthrow Error(\"Browser does not support PWA installation\")\r\n\t\t//return false\r\n\t}\r\n\r\n\t// 2. check to see if it is already installed and running as a PWA\r\n\tif (isRunningAsApp)\r\n\t{\r\n\t\tlog.push(`PWA ${VERSION} Installed, checking for updates`, {deferredPrompt, isFirstRun, isInWebAppiOS, isInWebAppChrome } )\r\n\r\n\t}else{\r\n\r\n\t\t// check to see if the service worker is running...\r\n\t\tif (isFirstRun)\r\n\t\t{\r\n\t\t\t// totally clean setup\r\n\t\t\tlog.push(`PWA ${VERSION} AVAILABLE WWW / PWA`, {deferredPrompt, isFirstRun, first:navigator.serviceWorker.controller } )\r\n\t\t}else if (wasJustInstalled){\r\n\t\t\t// recently installed\r\n\t\t\tlog.push(`PWA ${VERSION} was JUST installed` )\r\n\t\t}else{\r\n\t\t\t// check to see if the service worker is running...\r\n\t\t\tlog.push(`WWW ${VERSION}`, {deferredPrompt, isFirstRun, first:navigator.serviceWorker.controller } )\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst registration = await navigator.serviceWorker.getRegistration()\r\n\r\n\t// ===================================================\r\n\t// INSTALLATION OF SERVICE WORKER MEANS IT WAS JUST INSTALLED \r\n\t// check if installing...\r\n\tif (registration && registration.installing)\r\n\t{\r\n\t\t// if the feature exists, we can work out how heavy the app is\r\n\t\tif (navigator.storage)\r\n\t\t{\r\n\t\t\tconst storageData = await navigator.storage.estimate()\r\n\t\t\tconsole.log(\"Checking for installed storage space\", storageData )\r\n\t\t}\r\n\t}\r\n\r\n\t// FIXME: Check if we are installing the app!\r\n\r\n\r\n\t// INSTALL UPDATES ===================================================\r\n\t// Updates - the app does not need to be installed to have updates!\r\n\t// updates simply means that the service-worker has changed since last time\r\n\t// and that there are new assets that need to be cached and downloaded.\r\n\t// 1. Check to see if it is installed as a service worker\r\n\tif (registration)\r\n\t{\r\n\t\t// if there is an active SW it means that this isn't the first\r\n\t\t// time that the app has run and that there maybe updates to this\r\n\t\t// service worker that will be noticed when the new service worker\r\n\t\t// is registered below...\r\n\t\tconst activeWorker = registration.active\r\n\t\tconst previousServiceWorkerURL = new URL(activeWorker.scriptURL)\r\n\t\t\r\n\t\tpreviousVersion = previousServiceWorkerURL.search.split(\"=\")[1] || currentlyRunningVersion\r\n\t\tnewVersionAvailable = previousVersion !== VERSION\r\n\t\t\r\n\t\t// \"installing\" - the install event has fired, but not yet complete\r\n\t\t// \"installed\"  - install complete\r\n\t\t// \"activating\" - the activate event has fired, but not yet complete\r\n\t\t// \"activated\"  - fully active\r\n\t\t// \"redundant\"  - discarded. Either failed install, or it's been\r\n\t\t//                replaced by a newer version\r\n\t\tconst activatedState = activeWorker.state\r\n\r\n\t\tlog.push(\"PREVIOUS SW URL\", `${previousServiceWorkerURL}` )\r\n\t\tlog.push(\"EXPECTED VERSION\", `${VERSION}` )\r\n\t\tlog.push(\"SW Reg v\", `${previousVersion} -> ${currentVersion}`, {updatesAvailable, previousVersion, registration, activatedState, activeWorker, previousServiceWorkerURL } )\r\n\t\tlog.push(`SW State ${activatedState}` )\r\n\t\t\t\r\n\t\t// As in our service worker we have the self.skipWaiting() command set up\r\n\t\t// the update should automatically install in the background \r\n\t\t// FOR USE AFTER RELOAD - for the time being the previous Service-Worker is used\r\n\t\tregistration.addEventListener('updatefound', async () => {\r\n\r\n\t\t\tconst installingWorker = registration.installing\r\n\t\t\t\r\n\t\t\t// check this version installed and the updated version????\r\n\t\t\tlog.push(\"Update found\", {registration, installWorker: installingWorker, activeWorker, previousServiceWorkerURL } )\r\n\t\t\tupdating = true\r\n\r\n\t\t\t// show \"install update\" buton?\r\n\t\t\t//log.push( {changes,waiting: installWorker.waiting, controller: navigator.serviceWorker.controller  } )\r\n\t\t\t\r\n\t\t\t// if there is already a service-worker registered and running as the controller...\r\n\t\t\t// as well as a worker \"waiting\" to be installed... resolve immediately?\r\n\t\t\tif (installingWorker && installingWorker.waiting && navigator.serviceWorker.controller) \r\n\t\t\t{\r\n\t\t\t\t// FIXME: \r\n\t\t\t\t//newWorker = reg.waiting\r\n\t\t\t\tlog.push( \"sanity check\", {installWorker: installingWorker, nav:navigator.serviceWorker.controller} )\r\n\t\t\t}\r\n\r\n\t\t\tif (installingWorker)\r\n\t\t\t{\r\n\t\t\t\tinstallingWorker.addEventListener('statechange', () => {\r\n\r\n\t\t\t\t\tswitch (installingWorker.state) {\r\n\t\t\t\t\t\tcase 'installed':\r\n\t\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t\t// New Service-Worker has replaced the old one!\r\n\t\t\t\t\t\t\t\t// new update available!\r\n\t\t\t\t\t\t\t\tupdatesAvailable = true\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t// no update available\r\n\t\t\t\t\t\t\t\tupdatesAvailable = false\r\n\t\t\t\t\t\t\t\tlog.push(\"update\", installingWorker.state, {registration, installWorker: installingWorker} )\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlog.push(\"update installed expected truth\", navigator.serviceWorker.controller, {registration, installWorker: installingWorker} )\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (installingWorker.state === 'installed') \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// FIXME: unregister old one???\r\n\t\r\n\t\t\t\t\t\t// TODO: Auto reload???\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\t\t// if (navigator.storage) \r\n\t\t\t// {\r\n\t\t\t// \tconst storageData = await navigator.storage.estimate()\r\n\t\t\t// }\r\n\r\n\t\t}, {once:true})\r\n\r\n\t}else{\r\n\t\t// no service worker installed yet?\r\n\t\tlog.push(\"PWA NO service worker registered\" )\r\n\t}\r\n\r\n\t//log.push(\"PWA registering service worker...\" )\r\n\r\n\t// as there is no previously one registered, we \r\n\r\n\t// This \"installs\" the app into the local app cache but does\r\n\t// not create the icon on the homescreen or desktop\r\n\t// NB. By appending the Version as an GET var we can specify which version this matches\r\n\tconst hashedSWURL = `../service-worker.js#v=${VERSION}`\r\n\tlet serviceWorker = await navigator.serviceWorker.register(hashedSWURL)\r\n\tlog.push(\"Service worker with #\",hashedSWURL, serviceWorker)\r\n\r\n\tif (!serviceWorker)\r\n\t{\r\n\t\tconst querySWURL = `../service-worker.js?v=${VERSION}`\r\n\t\tserviceWorker = await navigator.serviceWorker.register(querySWURL)\t\t\r\n\t\tlog.push(\"Service worker with ?\",querySWURL, serviceWorker)\r\n\t}\r\n\r\n\t// annoying really but we leave this in just for parcel to force copy it\r\n\tif (!serviceWorker)\r\n\t{\r\n\t\tserviceWorker = await navigator.serviceWorker.register( new URL('../service-worker.js', import.meta.url) , {type: 'module'} )\t\r\n\t\t// serviceWorker = await navigator.serviceWorker.register(\"../service-worker.js\")\t\r\n\t\tlog.push(\"Service worker falling back to default :*(\", serviceWorker)\r\n\t\t\t\r\n\t}\r\n\t\r\n\t// at this point, if the service worker is a different version,\r\n\t// the update method above begins\r\n\r\n\tif (isFirstRun)\r\n\t{\r\n\t\tlog.push(\"PWA FRESH service worker registering\", {serviceWorker} )\r\n\r\n\t}else{\r\n\t\tlog.push(\"PWA registering service worker\", {serviceWorker} )\r\n\t}\r\n\r\n\t// INSTALLABLE!\r\n\t// app is running as a PWA so we don't have to show the install button ever! \r\n\t// if not installed we can also show an install button\r\n\tif (!isRunningAsApp)\r\n\t{\r\n\t\t// get install stuff prepared...\r\n\t\t// check if prompt is available else wait...\r\n\t\tif (!deferredPrompt)\r\n\t\t{\r\n\t\t\t// if this is not installable it will hang forever here\r\n\t\t\tdeferredPrompt = await interceptPrompt()\r\n\t\t\tisInstallable = true\r\n\t\t\tlog.push(\"Waiting prompts\", deferredPrompt )\r\n\t\t}\r\n\r\n\t\t// this could be simplified?\r\n\t\t// const shouldShowInstall = () => relatedApps.length < 1 && (deferredPrompt ?? isIOS) && (deferredPrompt && (\"standalone\" in navigator && navigator.standalone === false) || (installed === false))\r\n\t}\r\n\r\n\toutput = {\r\n\r\n\t\tlog,\r\n\r\n\t\tonline: isOnline,\r\n\t\toffline:!isOnline,\r\n\r\n\t\tpreviousVersion, currentVersion,\r\n\t\t\r\n\t\tisInstallable, isFirstRun, isRunningAsApp, \r\n\t\r\n\t\t// \r\n\t\thasUpdates: updatesAvailable && !isFirstRun,\r\n\r\n\t\t// FIXME\r\n\t\tisInstalled:isRunningAsApp,\r\n\r\n\t\t// Show the installer if not installed?\r\n\t\t// NB. THIS MUST BE TIES INTO A USER INTERACTION\r\n\t\tinstall:(button)=> showInstallPrompt( button, deferredPrompt ),\r\n\r\n\t\tprompt:deferredPrompt,\r\n\r\n\t\tupdatesAvailable, updating, updated, \r\n\t\tnewVersionAvailable,\r\n\r\n\r\n\t\t// requestAddToHomescreen \r\n\t\t// The actual update / reload script for if user wants new version now!\r\n\t\tupdate:()=>{\r\n\t\t\tregistration.waiting.postMessage({ type: 'SKIP_WAITING' })\r\n\t\t\twindow.location.reload()\r\n\t\t},\r\n\t\t...platform\r\n\t}\r\n\r\n\t// // Updates are available so change the setup\r\n\t// if (updatesAvailable)\r\n\t// {\r\n\t// \tconst changes = await showChangelog()\r\n\t// \toutput.changes = changes\r\n\t// }\r\n\t\r\n\t// first thing first, load in our PWA utilities and manifestand changelog and stuff...\r\n\t\r\n\t//try{\r\n\t\t\t\r\n\t\t// const {isAppInstalled, installer} = await import('./install.js')\r\n\t\t// const isInstalled = isAppInstalled()\r\n\t\t// installation = await installer(true)\r\n\r\n\t\t// console.log(\"PWA test 1\", {isInstalled,installation,log,debug})\r\n\t\t\r\n\t\t// console.log(\"PWA test 2\", {installation})\r\n\t\r\n\t\t// Update checks\r\n\t\t// const {updateApp, addUpdateListener} = await import('./update.js')\r\n\r\n\t\t// console.log(\"PWA test loaded update apps\", {updateApp, addUpdateListener})\r\n\t\t\r\n\t\t// // now check for any updates!\r\n\t\t// addUpdateListener()\r\n\r\n\r\n\t\t// may as well disrupt the load if an update is available!\r\n\t\t// as we reload the thing anyways!\r\n\t\t// const {updater, updateAvailable} = await updateApp()\r\n\t\t// const updates = await updateApp()\r\n\r\n\t\t// console.log(\"PWA test 4\", {updates})\r\n\t\r\n\t\t// console.log(\"PWA test 5\", {updateApp})\r\n\r\n\t\t// if (updateAvailable)\r\n\t\t// {\r\n\t\t// \t// allow user to update!\r\n\t\t// \t// showUpdateButton(document.getElementById(\"shared-controls\"), updater) \r\n\t\t// \t// setToast(\"An Update is available! Press update to install it\" )\r\n\t\t\t\r\n\t\t// }else{\r\n\r\n\t\t// \t// FIXME: show changelog???\r\n\t\t// \tconst {injectChangeLog, fetchChangesAsText} = await import('./changes.js')\r\n\t\t// \t// fetchChangesAsText('changelog')\r\n\t\t// \tlog += fetchChangesAsText()\r\n\t\t// }\r\n\r\n\t\t// console.log(\"installer\", { updateAvailable,updater, updateAvailable, installer, installation})\r\n\t\r\n\t// }catch(error){\r\n\r\n\t// \tconsole.error(\"PWA\", error)\r\n\t// }\r\n\r\n\tif (debug)\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\treturn output\r\n}\r\n\r\n\r\n// Prevent the install app popup appearing\r\nconst interceptPrompt = () => new Promise( (resolve,reject) => {\r\n\t\r\n\tif (!isSupportingBrowser)\r\n\t{\r\n\t\treturn reject(\"Unsupported Browser\")\r\n\t}\r\n\r\n\tif (deferredPrompt)\r\n\t{\r\n\t\treturn resolve( deferredPrompt )\r\n\t}\r\n\r\n\t// Intercept install prompt catch install prompt and prevent it showing immediately\r\n\t// you can run deferredPrompt.prompt() to start it again\r\n\twindow.addEventListener(\"beforeinstallprompt\", event => {\r\n\t\t\t\r\n\t\tevent.preventDefault() \r\n\t\tresolve( event )\r\n\r\n\t}, {once:true})\t\t\r\n})\r\n\r\n// No need to watch if already installed\r\nif (!isRunningAsApp)\r\n{\r\n\tinterceptPrompt().then( prompt => deferredPrompt = prompt )\r\n}\r\n\r\n","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('h1ZFd') + \"changes.a7179ccd.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('3MFIV'));","\"use strict\";\n\nvar cacheLoader = require('../cacheLoader');\n\nmodule.exports = cacheLoader(function (bundle) {\n  return new Promise(function (resolve, reject) {\n    // Don't insert the same script twice (e.g. if it was already in the HTML)\n    var existingScripts = document.getElementsByTagName('script');\n\n    if ([].concat(existingScripts).some(function isCurrentBundle(script) {\n      return script.src === bundle;\n    })) {\n      resolve();\n      return;\n    }\n\n    var preloadLink = document.createElement('link');\n    preloadLink.href = bundle;\n    preloadLink.rel = 'preload';\n    preloadLink.as = 'script';\n    document.head.appendChild(preloadLink);\n    var script = document.createElement('script');\n    script.async = true;\n    script.type = 'text/javascript';\n    script.charset = 'utf-8';\n    script.src = bundle;\n\n    script.onerror = function (e) {\n      var error = new TypeError(\"Failed to fetch dynamically imported module: \".concat(bundle, \". Error: \").concat(e.message));\n      script.onerror = script.onload = null;\n      script.remove();\n      reject(error);\n    };\n\n    script.onload = function () {\n      script.onerror = script.onload = null;\n      resolve();\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n});","\"use strict\";\n\nvar cachedBundles = {};\nvar cachedPreloads = {};\nvar cachedPrefetches = {};\n\nfunction getCache(type) {\n  switch (type) {\n    case 'preload':\n      return cachedPreloads;\n\n    case 'prefetch':\n      return cachedPrefetches;\n\n    default:\n      return cachedBundles;\n  }\n}\n\nmodule.exports = function (loader, type) {\n  return function (bundle) {\n    var cache = getCache(type);\n\n    if (cache[bundle]) {\n      return cache[bundle];\n    }\n\n    return cache[bundle] = loader.apply(null, arguments).catch(function (e) {\n      delete cache[bundle];\n      throw e;\n    });\n  };\n};","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('h1ZFd') + \"service-worker.js\" + \"?\" + Date.now();","import {debounce} from './utils'\r\n\r\n/**\r\n * little local storage wrapper for storing cached objects\r\n * @param {String} name Unique name for the store cache\r\n * @returns {Array<Function>} Store controls\r\n */\r\nexport const createStore = (name=\"InterFACE\") => {\r\n\tconst storage = localStorage.getItem(name)\r\n\tconst data = Object.assign({}, JSON.parse(storage) )\r\n\tconst save = debounce( updates => {\r\n\t\tconst encoded = JSON.stringify(updates)\r\n\t\tlocalStorage.setItem(name, encoded )\r\n\t}, 20 )\r\n\r\n\treturn {\r\n\t\tsave,\r\n\t\thas:key =>{\r\n\t\t\treturn data[key] ? true : false\r\n\t\t},\r\n\t\tremoveItem:key =>{\r\n\t\t\tdelete data[key] \r\n\t\t\tsave(data)\r\n\t\t},\r\n\t\tgetItem:key =>{\r\n\t\t\treturn data[key] \r\n\t\t},\r\n\t\tsetItem:(key,value)=>{\r\n\t\t\tdata[key] = Object.assign( {}, data[key], value )\r\n\t\t\t// save to local\r\n\t\t\tsave(data)\r\n\t\t\t\r\n\t\t\treturn data\r\n\t\t},\r\n\t}\r\n}\r\n\r\n","export const convertOptionToObject = items => items.reduce( (accumulator, current) => {\r\n\tconst c = current.split(\":\")\r\n\taccumulator[c[0]] = parseFloat(c[1])\r\n\treturn accumulator\r\n}, {})\r\n\r\nexport const debounce = (callback, wait) => {\r\n\tlet timerId\r\n\t\r\n\treturn (...args) => {\r\n\t\t//console.error(args, \"debounce\", arguments)\r\n\t  clearTimeout(timerId)\r\n\t  timerId = setTimeout(() => callback(...args), wait)\r\n\t  return timerId\r\n\t}\r\n}\r\n\r\n\r\n// DECODE UTILITIES\r\n\r\n\r\n/*\r\nBase64 / binary data / UTF-8 strings utilities\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding\r\nhttps://github.com/audiojs/audio-loader/blob/master/lib/base64.js\r\n*/\r\nexport const b64ToUint6 = nChr => {\r\n\treturn nChr > 64 && nChr < 91 ? nChr - 65\r\n\t  : nChr > 96 && nChr < 123 ? nChr - 71\r\n\t  : nChr > 47 && nChr < 58 ? nChr + 4\r\n\t  : nChr === 43 ? 62\r\n\t  : nChr === 47 ? 63\r\n\t  : 0\r\n}\r\n\r\n/**\r\n * Base64 string to array encoding \r\n * @param {Uint6} nUint6 \r\n * @returns \r\n */\r\nexport const uint6ToB64 = nUint6 => {\r\n\treturn nUint6 < 26 ? nUint6 + 65\r\n\t  : nUint6 < 52 ? nUint6 + 71\r\n\t  : nUint6 < 62 ? nUint6 - 4\r\n\t  : nUint6 === 62 ? 43\r\n\t  : nUint6 === 63 ? 47\r\n\t  : 65\r\n}\r\n\r\n/**\r\n * Decode Base64 to Uint8Array\r\n * @param {sBase64} sBase64 \r\n * @param {nBlocksSize} nBlocksSize \r\n * @returns Uint8Array\r\n */\r\nexport const decodeBase64 = (sBase64, nBlocksSize) => {\r\n\tconst sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, '')\r\n\tconst nInLen = sB64Enc.length\r\n\tconst nOutLen = nBlocksSize\r\n\t  ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize\r\n\t  : nInLen * 3 + 1 >> 2\r\n\r\n\tconst taBytes = new Uint8Array(nOutLen)\r\n  \r\n\tfor (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) \r\n\t{\r\n\t  nMod4 = nInIdx & 3\r\n\t  nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4\r\n\t  if (nMod4 === 3 || nInLen - nInIdx === 1) \r\n\t  {\r\n\t\tfor (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) \r\n\t\t{\r\n\t\t  taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255\r\n\t\t}\r\n\t\tnUint24 = 0\r\n\t  }\r\n\t}\r\n\treturn taBytes\r\n}\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const base64DecToArr = (sBase64, nBlocksSize) => {\r\n\r\n  var\r\n    sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"), nInLen = sB64Enc.length,\r\n    nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2, taBytes = new Uint8Array(nOutLen);\r\n\r\n  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n    nMod4 = nInIdx & 3;\r\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 6 * (3 - nMod4);\r\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n      }\r\n      nUint24 = 0;\r\n\r\n    }\r\n  }\r\n\r\n  return taBytes;\r\n}\r\n\r\n\r\nexport const base64EncArr = (aBytes) => {\r\n\r\n  let nMod3 = 2, sB64Enc = \"\"\r\n  for (var nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) \r\n  {\r\n    nMod3 = nIdx % 3\r\n    if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) \r\n\t{ \r\n\t\tsB64Enc += \"\\r\\n\" \r\n\t}\r\n    nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24)\r\n    if (nMod3 === 2 || aBytes.length - nIdx === 1) \r\n\t{\r\n      sB64Enc += String.fromCodePoint(uint6ToB64(nUint24 >>> 18 & 63), uint6ToB64(nUint24 >>> 12 & 63), uint6ToB64(nUint24 >>> 6 & 63), uint6ToB64(nUint24 & 63))\r\n      nUint24 = 0\r\n    }\r\n  }\r\n\r\n  return sB64Enc.substr(0, sB64Enc.length - 2 + nMod3) + (nMod3 === 2 ? '' : nMod3 === 1 ? '=' : '==');\r\n}\r\n\r\n/**\r\n * UTF-8 array to JS string and vice versa \r\n */\r\nexport const UTF8ArrToStr = (aBytes) => {\r\n  let sView = \"\"\r\n  for (var nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) \r\n  {\r\n    nPart = aBytes[nIdx]\r\n    sView += String.fromCodePoint(\r\n      nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\r\n        /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\r\n        (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n      : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\r\n        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n      : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\r\n        (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n      : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\r\n        (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n      : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\r\n        (nPart - 192 << 6) + aBytes[++nIdx] - 128\r\n      : /* nPart < 127 ? */ /* one byte */\r\n        nPart\r\n    )\r\n  }\r\n  return sView\r\n}\r\n\r\n/**\r\n * \r\n * @param {*} sDOMStr \r\n * @returns \r\n */\r\nexport const strToUTF8Arr = (sDOMStr) => {\r\n\r\n  var aBytes, nChr, nStrLen = sDOMStr.length, nArrLen = 0\r\n\r\n  /* mapping... */\r\n\r\n  for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) \r\n  {\r\n    nChr = sDOMStr.codePointAt(nMapIdx)\r\n\r\n    if (nChr > 65536) {\r\n      nMapIdx++\r\n    }\r\n\r\n    nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6\r\n  }\r\n\r\n  aBytes = new Uint8Array(nArrLen)\r\n\r\n  /* transcription... */\r\n  for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) \r\n  {\r\n    nChr = sDOMStr.codePointAt(nChrIdx)\r\n    if (nChr < 128) {\r\n      /* one byte */\r\n      aBytes[nIdx++] = nChr\r\n    } else if (nChr < 0x800) {\r\n      /* two bytes */\r\n      aBytes[nIdx++] = 192 + (nChr >>> 6)\r\n      aBytes[nIdx++] = 128 + (nChr & 63)\r\n    } else if (nChr < 0x10000) {\r\n      /* three bytes */\r\n      aBytes[nIdx++] = 224 + (nChr >>> 12)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr & 63)\r\n    } else if (nChr < 0x200000) {\r\n      /* four bytes */\r\n      aBytes[nIdx++] = 240 + (nChr >>> 18)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 12 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr & 63);\r\n      nChrIdx++\r\n    } else if (nChr < 0x4000000) {\r\n      /* five bytes */\r\n      aBytes[nIdx++] = 248 + (nChr >>> 24)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 18 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 12 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr & 63)\r\n      nChrIdx++\r\n    } else /* if (nChr <= 0x7fffffff) */ {\r\n      /* six bytes */\r\n      aBytes[nIdx++] = 252 + (nChr >>> 30)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 24 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 18 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 12 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr >>> 6 & 63)\r\n      aBytes[nIdx++] = 128 + (nChr & 63)\r\n      nChrIdx++\r\n    }\r\n  }\r\n  return aBytes\r\n}\r\n\r\n\r\nexport const toBytes = (number, byteCount) => {\r\n\tconst bytes = new Array(byteCount)\r\n\tfor (let i = byteCount - 1; i >= 0; i--) \r\n\t{\r\n\t\tbytes[i] = number & 255\r\n\t\tnumber >>= 8\r\n\t}\r\n\treturn bytes\r\n}\r\n\r\nexport const toVarLenBytes = (number) => {\r\n\tconst bytes = []\r\n\tlet last = true\r\n\tdo {\r\n\t\tconst partial_value = number & 127\r\n\t\tnumber >>= 7\r\n\t\tif (last) {\r\n\t\t\t// first bit is off for last byte\r\n\t\t\tbytes.unshift(partial_value)\r\n\t\t\tlast = false\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// set first bit on for all other bytes\r\n\t\t\tbytes.unshift(partial_value | 128)\r\n\t\t}\r\n\t} while (number > 0)\r\n\treturn bytes\r\n}\r\n\r\n\r\n/* Array of bytes to Base64 string decoding */\r\n\r\n// export const b64ToUint6 = (nChr) => {\r\n// \treturn nChr > 64 && nChr < 91 ?\r\n// \t\tnChr - 65\r\n// \t  : nChr > 96 && nChr < 123 ?\r\n// \t\tnChr - 71\r\n// \t  : nChr > 47 && nChr < 58 ?\r\n// \t\tnChr + 4\r\n// \t  : nChr === 43 ?\r\n// \t\t62\r\n// \t  : nChr === 47 ?\r\n// \t\t63\r\n// \t  :\r\n// \t\t0;\r\n//   }  \r\n\r\n/**\r\n * \r\nconst a2b = (a) => {\r\n\tlet b, c, d, e = {}, f = 0, g = 0, h = \"\", i = String.fromCharCode, j = a.length\r\n\tfor (b = 0; 64 > b; b++){\r\n\t\te[\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(b)] = b\r\n\t}\r\n\tfor (c = 0; j > c; c++){\r\n\t\tfor (b = e[a.charAt(c)], f = (f << 6) + b, g += 6; g >= 8; ) {\r\n\t\t\t((d = 255 & f >>> (g -= 8)) || j - 2 > c) && (h += i(d))\r\n\t\t}\r\n\t}\r\n\treturn h\r\n}\r\n */","\r\nimport { showReloadButton } from '../dom/button'\r\n\r\nexport const showError = (error, solution, fatal=false) => {\r\n \r\n\tconst body = document.documentElement\r\n\tbody.classList.add(\"failure\")\r\n\tbody.classList.remove(\"loading\")\r\n\r\n\tdocument.getElementById(\"feedback\").appendChild( showReloadButton(true) )\r\n\t\t\t\r\n\tconsole.error(\"Could not load\", error )\r\n\tconsole.warn( \"Consider:\", solution )\r\n \r\n\t// play lemmings sound effect...\r\n\tlet audio = new Audio()\r\n\taudio.src = \"/assets/audio/lemmings.wav\"\r\n\taudio.play()\r\n\t// if fatal then we can't continue so show reload button?\r\n}","import { addTooltip } from './tooltips'\r\nimport { VERSION } from '../version'\r\nimport {formattedDate} from '../models/info'\r\nimport {addMouseTapAndHoldEvents, MOUSE_HELD, MOUSE_HOLDING, MOUSE_TAP} from '../hardware/mouse'\r\n\r\nexport const setButton = (buttonNameOrElement, callback, eventType=\"mousedown\", preventDefault=false ) => {\r\n\tconst element = typeof buttonNameOrElement === \"string\" ? document.getElementById(buttonNameOrElement) : buttonNameOrElement\r\n\t// check to see that the button hasn't got the display:none!\r\n\tif (element)\r\n\t{\r\n\t\t// element.addEventListener(\"click\", (event) => {\r\n\t\t// click was too unresponsive so lets use touch / mousedown\r\n\t\telement.addEventListener(eventType, (event) => {\r\n\t\t\tif (preventDefault){\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t}\r\n\t\t\tcallback && callback({element, event})\r\n\t\t})\r\n\t\treturn element\r\n\t}\r\n\t\r\n\treturn null\r\n}\r\n\r\nexport const setPressureButton = (buttonNameOrElement, tapCallback, holdCallback, holdingCallback ) => {\r\n\tconst element = typeof buttonNameOrElement === \"string\" ? document.getElementById(buttonNameOrElement) : buttonNameOrElement\r\n\tif (element)\r\n\t{\r\n\t\taddMouseTapAndHoldEvents( element )\r\n\t\telement.addEventListener( MOUSE_TAP, event => {\r\n\t\t\ttapCallback && tapCallback(event)\r\n\t\t} )\r\n\r\n\t\telement.addEventListener( MOUSE_HOLDING, event => {\r\n\t\t\tholdingCallback && holdingCallback(event)\r\n\t\t} )\r\n\r\n\t\telement.addEventListener( MOUSE_HELD, event => {\r\n\t\t\tholdCallback && holdCallback(event)\r\n\t\t} )\r\n\t\treturn element\r\n\t}\r\n\treturn null\r\n}\r\n\r\n\r\n\r\n/**\r\n * Create a clickable button with label and tooltip\r\n * @param {String} label \r\n * @param {String} tip \r\n * @param {String} classes \r\n */\r\nexport const createButton = (label, tip, classes='' ) => {\r\n\tconst button = document.createElement('button')\r\n\tbutton.classList.add(classes)\r\n\tbutton.setAttribute(\"type\", \"button\" )\r\n\tbutton.setAttribute(\"aria-label\", tip )\r\n\tbutton.innerHTML = label\r\n\taddTooltip(button)\r\n\treturn button\r\n}\r\n\r\n/**\r\n * For when an update has taken or a failure has occurred\r\n * this simply adds a CTA with a reload button\r\n */\r\nexport const showReloadButton = (reset) => {\r\n\tconst button = createButton(\"Try again! Reload and reset\", \"Reload this application!\", \"reload-app\" )\r\n\tbutton.addEventListener( \"click\", event => {\r\n\t\t// remove any potential options that could cause issue?\r\n\t\tif (reset){\r\n\t\t\thistory.replaceState( null, null, \"?\" )\r\n\t\t}\r\n\t\twindow.location.reload() \r\n\t})\r\n\tbutton.id = \"button-reload\"\r\n\treturn button\r\n}\r\n\r\nexport const createInstallButton = (manifestData) => {\r\n\t// show install button or update button???\r\n\tconst tip = `Click to install ${manifestData.short_name} V-${VERSION.replaceAll(\".\",\"-\")}<br>Date:${formattedDate}`\r\n\tconst button = createButton(\"Install\", tip, \"install-app\" )\r\n\tbutton.id = \"button-install\"\r\n\tbutton.style.setProperty(\"--logo\",`url(${ manifestData.icons[0].src })`)\r\n\treturn button\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////\r\n// TODO: This is rubbish, what was I thinking?\r\n////////////////////////////////////////////////////////////////////\r\nexport const showUpdateButton = (domElement, action) => {\r\n\tconst button = createButton(\"Update\", `Update to new version`, \"update-available\" )\r\n\tbutton.id = \"button-update\"\r\n\tbutton.addEventListener('click', ()=>action() )\r\n\t// reveal update button?\r\n\t//domElement.appendChild(button)\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////\r\n// a simple midi buttnon with states\r\n// just set the state with the return\r\n////////////////////////////////////////////////////////////////////\r\nexport const setupMIDIButton = (buttonMIDI, callback) => {\r\n\t\r\n\tlet midiEnabled = false\r\n\r\n\tconst onStartRequested = async (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tcallback && callback()\r\n\t\tmidiEnabled = true\r\n\t\t//buttonMIDI.removeEventListener('mousedown', onStartRequested)\r\n\t\treturn false\r\n\t}\r\n\r\n\tbuttonMIDI.addEventListener('mousedown', onStartRequested, { once: true })\r\n\t\r\n\treturn {\r\n\t\tsetText:text=>buttonMIDI.innerHTML = text,\r\n\t\tsetLabel:text=>buttonMIDI.setAttribute(\"aria-label\",text)\r\n\t}\r\n}","\r\n/**\r\n * Create a tooltip and bind it to the element\r\n * @param {HTMLElement} element DOM element to bind to\r\n * @param {Number} revealRate typing rate in characters per second\r\n * @param {Number} clearRate clear word after x ms\r\n * @returns {Function} method with 2 arguments to set the tip message\r\n */\r\n const createTip =  (element, revealRate=6, clearRate=550) => {\r\n\t\r\n\tlet previousMessage = ''\r\n\tlet interval = null\r\n\tlet frame = null\r\n\r\n\tlet isAnimating = false\r\n\tlet hasCompleted = false\r\n\r\n\treturn element ? (message, letterRate=revealRate ) => {\r\n\t\r\n\t\t// prevent hiding \r\n\t\tclearInterval( interval )\r\n\t\t\r\n\t\t// check to see if it has changed...\r\n\t\tif (message === previousMessage)\r\n\t\t{\r\n\t\t\t// or do we just show it all???\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\t// write the message letter by letter\r\n\t\tfunction write ( index=0, speed=1, returnVisit=false){\r\n\r\n\t\t\t// if (!returnVisit){\r\n\t\t\t// \tconsole.log( index, \"isAnimating\", {interval}, letterRate, \"tip\", {message, previousMessage} )\r\n\t\t\t// }\r\n\t\t\tcancelAnimationFrame( frame )\r\n\r\n\t\t\tconst revealingMessage = message.slice(0, index)\r\n\t\t\t\t\r\n\t\t\tconst isWriting = index < message.length \r\n\r\n\t\t\t//console.log( \"draw\",isWriting, message, index, message.length )\r\n\r\n\t\t\tif (isWriting)\r\n\t\t\t{\r\n\t\t\t\t//console.log( index,  message.length, \"wrting\", {interval}, {message, previousMessage} )\r\n\t\t\t\t// ok, so we have a new message and immediately we overwrite the previous message\r\n\t\t\t\telement.innerHTML = revealingMessage\r\n\t\t\t\t//write( index + speed, speed, true )\r\n\t\t\t\tisAnimating = true\r\n\t\t\t\tframe = requestAnimationFrame(()=>write( index + speed, speed, true ))\r\n\t\t\t\r\n\t\t\t}else{\t\t\t\r\n\r\n\t\t\t\t// ended!\r\n\t\t\t\tisAnimating = false\r\n\t\t\t\telement.innerHTML = message\r\n\t\t\t\t// console.log( index,  message.length, \"wrte end\", {interval}, {message, previousMessage} )\r\n\r\n\t\t\t\t// clear the previous interval after x chars read\r\n\t\t\t\tconst after = clearRate * message.length\r\n\t\t\t\t// and then hide this after x seconds...\r\n\t\t\t\tinterval = setTimeout(()=>{\t\t\t\r\n\t\t\t\t\telement.innerHTML = ''\r\n\t\t\t\t\thasCompleted = true\r\n\t\t\t\t}, after)\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\r\n\t\t// if the letterRate is 0, then we just show the message\r\n\t\tif (letterRate < 1 )\r\n\t\t{\t\r\n\t\t\twrite( message.length, 10 )\r\n\t\t}else{\r\n\r\n\t\t\tif (isAnimating){\r\n\t\t\t\t// just animate the new characters\r\n\t\t\t\twrite( previousMessage.length, letterRate)\r\n\t\t\t   \t//write( 0, letterRate)\r\n\t\t   }else{\r\n\r\n\t\t\t\t// ended!?\r\n\t\t\t   write( 0, letterRate)\r\n\t\t   }\r\n\t\t}\r\n\r\n\t\t\r\n\t\tpreviousMessage = message\r\n\r\n\t} : null\r\n}\r\n\r\n\r\n/**\r\n * Create a method that controls the toast element remotely\r\n * @param {HTMLElement} controls DOM element to search within\r\n * @param {String} query query selector for finding the elements to bind to\r\n */\r\nconst toastElement = document.getElementById(\"toast\")\r\n// export const setToast = bindTextElement( toastElement, 20, 900, true )\r\nexport const setToast = createTip( toastElement )\r\n\r\nconst tooltips = new Map()\r\n\r\nconst setToolTipPosition = (target) => {\r\n\ttoastElement.setAttribute(\r\n\t\t\"style\", \r\n\t\t`--left: ${target.offsetLeft}; \r\n\t\t --top: ${target.offsetTop};`\r\n\t)\r\n}\r\n\r\n/**\r\n * adds a single tooltip to an element where hovering will reveal new info\r\n * @param {HTMLElement} controls DOM element to search within\r\n * @param {String} query query selector for finding the elements to bind to\r\n */\r\nexport const addTooltip = element => { \r\n\tconst callback = event => {\r\n\t\tconst toolTip = event.target.getAttribute(\"aria-label\") || event.target.innerHTML\r\n\t\tif (event.target.nodeName === \"BUTTON\"){\r\n\r\n\t\t\tsetToolTipPosition(event.target)\r\n\t\t}else{\r\n\t\t\tsetToolTipPosition(event.target.parentElement)\r\n\t\t}\r\n\t\tsetToast(toolTip)\r\n\t}\r\n\telement.addEventListener(\"mouseover\", callback)\r\n\ttooltips.set( element, callback )\r\n}\r\n\r\n/**\r\n * Undoes the above\r\n * @param {*} element \r\n */\r\nexport const removeTooltip = element => { \r\n\tconst callback = tooltips.get( element )\r\n\tif (callback)\r\n\t{\r\n\t\telement.removeEventListener(\"mouseover\", callback)\r\n\t\ttooltips.delete(element)\r\n\t}\r\n}\r\n\r\n/**\r\n * adds tooltips to all elements that match the query\r\n * @param {HTMLElement} controls DOM element to search within\r\n * @param {String} query query selector for finding the elements to bind to\r\n */\r\nexport const addToolTips = (controls, query=\"button, select, input\") => {\r\n\t\r\n\t// do a query here to catch all buttons?\r\n\tconst buttons = controls.querySelectorAll(query)\r\n\t\r\n\t// const fragment = doc.createDocumentFragment() \r\n\t// fragment.appendChild(doc.createElement('fieldset'))\r\n\t// const fragment = doc.createElement('fieldset')\r\n\t// fragment.innerHTML = setupInstrumentForm()\r\n\t// add to dom\r\n\t// controls.appendChild( fragment )\r\n\r\n\t// intercept any hover events...\r\n\tbuttons.forEach( button => addTooltip(button) )\r\n}","import {VERSION, DATE} from '../version'\r\n\r\nconst releaseDate = new Date(DATE)\r\nconst dateOptions = {\r\n\thour12 : true,\r\n\thour:  \"numeric\",\r\n\tminute:  \"numeric\",\r\n }\r\nexport const formattedDate = `${releaseDate.getDate()}/${releaseDate.getMonth()+1}/${releaseDate.getFullYear()} ${ releaseDate.toLocaleTimeString(\"en-GB\",dateOptions) }`\r\n","// watch for global mouse moves...\r\n// watch for mouse holding\r\nconst now = () => performance.now() || Date.now()\r\n\r\nexport const MOUSE_HELD = \"mouse_held\"\r\nexport const MOUSE_HOLDING = \"mouse_holding\"\r\nexport const MOUSE_TAP = \"mouse_tap\"\r\n\r\n/**\r\n * hook in to see how the user treats an element...\r\n * how long did they click for or if after x seconds \r\n * has the user held itt down still?\r\n * @param {HTMLElement} button - button to watch for changes\r\n * @param {Boolean} onlySendHoldOnMouseUp - dispatch the hold event only when moused up\r\n * @param {Number} holdTime - milliseconds before it is considered a hold\r\n * @returns \r\n */\r\nexport const addMouseTapAndHoldEvents = ( button, onlySendHoldOnMouseUp=false, holdTime=800 ) => {\r\n\r\n\tlet mouseDownAt = -1\r\n\t// FIXME: Immediately test to see if this actually *is* false???\r\n\tlet isMouseOver = false\r\n\tlet isMouseDown = false\r\n\tlet isMouseHeld = false\r\n\t\r\n\t// fetch dom element\r\n\tconst dispatch = (name, detail={}) => {\r\n\t\tbutton.dispatchEvent( \r\n\t\t\tnew CustomEvent( name, { detail } )\r\n\t\t)\r\n\t}\r\n\r\n\t// test to see how long we are help down for?\r\n\tconst waitPatiently = () => {\r\n\r\n\t\t// we have lost focus\r\n\t\tif ( isMouseOver && isMouseDown )\r\n\t\t{\r\n\t\t\tconst elapsed = now() - mouseDownAt\t\r\n\t\t\r\n\t\t\tif ( elapsed < holdTime )\r\n\t\t\t{\r\n\t\t\t\t// BEFORE HOLDING TIME... ignore?\r\n\t\t\t\tconst remaining = 1 - elapsed / holdTime\r\n\t\t\t\tconst percentageRemaining = 100 - Math.ceil(remaining*100)\r\n\t\t\t\t\r\n\t\t\t\tdispatch( MOUSE_HOLDING, {elapsed, isMouseOver, remaining, percentageRemaining } )\r\n\t\t\t\t\r\n\t\t\t\trequestAnimationFrame( waitPatiently )\r\n\r\n\t\t\t}else{\r\n\t\t\t\tisMouseHeld = true\r\n\r\n\t\t\t\t// HELD long enough\r\n\t\t\t\tif (!onlySendHoldOnMouseUp)\r\n\t\t\t\t{\r\n\t\t\t\t\tdispatch( MOUSE_HELD, {elapsed, isMouseOver} )\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// FIXME\r\n\t\t\t\t// mouseDownAt = -1\r\n\t\t\t}\r\n\t\t} \r\n\t}\r\n\r\n\tconst onMouseUp = event => {\r\n\r\n\t\tevent.preventDefault()\r\n\t\tif (!isMouseDown )\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// should this trigger something else depending on time?\r\n\t\tconst elapsed = now() - mouseDownAt\t\r\n\t\r\n\t\tif ( elapsed < holdTime )\r\n\t\t{\r\n\t\t\tdispatch( MOUSE_TAP, {elapsed, isMouseOver} )\r\n\t\t}else if (isMouseHeld && onlySendHoldOnMouseUp){\r\n\t\t\t\r\n\t\t\tdispatch( MOUSE_HELD, {elapsed, isMouseOver} )\r\n\t\t}\r\n\r\n\t\t//console.log(\"mouseDownFor\", elapsed )\r\n\r\n\t\t// CALLBACKS\r\n\t\t// dispatch( MOUSE_HELD, {elapsed, isMouseOver} )\r\n\t\r\n\t\t// and reset\r\n\t\tmouseDownAt = -1\r\n\t\tisMouseDown = false\r\n\t\tdocument.removeEventListener(\"mouse\", onMouseUp )\r\n\t}\r\n\r\n\t// BUTTON has been pressed!\r\n\tbutton.addEventListener( 'mousedown', event => {\r\n\r\n\t\tmouseDownAt = now()\r\n\t\tisMouseDown = true\r\n\t\tisMouseHeld = false\r\n\t\twaitPatiently()\r\n\t\t\r\n\t\t// TODO: add in document listener in case mouse out and back up?\r\n\t\tevent.preventDefault()\r\n\r\n\t\t// watch for any mouse up\r\n\t\tdocument.addEventListener(\"mouseup\", onMouseUp , false)\r\n\t})\r\n\r\n\t// FIXME: Is mouse out useful here?\r\n\t//button.addEventListener( 'mouseup', onMouseUp, false)\r\n\t\r\n\tbutton.addEventListener( 'mouseover', event => {\r\n\t\tisMouseOver = true\r\n\t})\r\n\t\r\n\tbutton.addEventListener( 'mouseout', event => {\r\n\t\tisMouseOver = false\r\n\t})\r\n\r\n\t// return some controls or destroy?\r\n\treturn button\r\n}\r\n\r\nconst coords = { x:0, y:0 }\r\n\r\nexport const getMouseCoords = () => coords\r\n\r\nexport const watchMouseCoords = (element, callback ) => {\r\n\telement.addEventListener('mousemove', event => {\r\n\t\tcoords.x = event.pageX || event.clientX\r\n\t\tcoords.y = event.pageY || event.clientY\r\n\t\tcallback && callback( coords )\r\n\t}, false )\r\n}\r\n\r\n\t// window.addEventListener('wheel' , event => {\r\n\t\t\r\n\t// \treturn\r\n\r\n\t// \tlet d = event.detail\r\n\t// \tconst w =  event.deltaY || event.wheelDelta\r\n\t// \tlet n = 225\r\n\t// \tlet n1 = n-1\r\n\t// \tlet f\r\n\r\n\t// \t// Normalize delta\r\n\t// \td = d ? w && (f = w/d) ? d/f : -d/1.35 : w/120\r\n\t// \t// Quadratic scale if |d| > 1\r\n\t// \td = d < 1 ? d < -1 ? (-Math.pow(d, 2) - n1) / n : d : (Math.pow(d, 2) + n1) / n\r\n\t// \t// Delta *should* not be greater than 2...\r\n\t// \tconst wheel = Math.min(Math.max(d / 2, -1), 1) * 0.1\r\n\t// \tconst volume = getVolume()\r\n\t// \t//const result = setMasterVolume(volume + wheel)\r\n\r\n\t// \tconsole.log(\"mouse wheel\",{ wheel, volume, result}, event)\t\r\n\t// })\r\n","/**\r\n * Checks to see if all of the things we need for\r\n * this to work are available such as camera, midi etc\r\n */\r\nimport {testForMIDI} from './audio/midi/midi-out'\r\nconst hasTouchEvents = () => {\r\n\ttry{ document.createEvent(\"TouchEvent\"); return true; }\r\n\tcatch(e){ return false; }\r\n}\r\n\r\nconst hasFileHandler = () => 'launchQueue' in window && 'files' in LaunchParams.prototype\r\n\r\nexport default class Capabilities {\r\n\r\n\t// required = {\r\n\t// \tcamera:false\r\n\t// }\r\n\r\n\t// optional = {\r\n\t// \tmidi:false\r\n\t// }\r\n\r\n\tfileHandlerAvailable = hasFileHandler()\r\n\tcameraAvailble = navigator.getUserMedia !== undefined\r\n\twebMIDIAvailable = false\r\n\r\n\ttouchScreen = hasTouchEvents()\r\n\tmouse = !window.matchMedia( \"(hover: none)\" ).matches\r\n\r\n\t/**\r\n\t * returns {Boolean} is this machine capable of running this app?\r\n\t */\r\n\tget willWork(){\r\n\t\treturn this.cameraAvailble\r\n\t}\r\n\r\n\tconstructor(){\r\n\t\tthis.webMIDIAvailable = testForMIDI()\r\n\t}\r\n}","\r\n// import WebMidi, { InputEventNoteon, InputEventNoteoff } from \"webmidi\"\r\nimport {WebMidi} from \"webmidi\"\r\n\r\n// https://mpe.js.org/#Installation\r\n// import mpeInstrument from 'mpe'\r\n\r\n// we load in the relevant lib...\r\nlet mpeEnabled = false\r\n\r\n// TODO: Load lib from local\r\n\r\n// Define `instrument` as an instance of `mpeInstrument`\r\n// const instrument = mpeInstrument()\r\n\r\n// Request MIDI device access from the Web MIDI API\r\n// navigator.requestMIDIAccess().then(access => {\r\n//   // Iterate over the list of inputs returned\r\n//   access.inputs.forEach(midiInput => {\r\n//     // Send 'midimessage' events to the mpe.js `instrument` instance\r\n//     midiInput.addEventListener(\r\n//       'midimessage',\r\n//       (event) => instrument.processMidiMessage(event.data)\r\n//     )\r\n//   })\r\n// })\r\n\r\n/**\r\n * Check to see if MIDI is available on this platform\r\n * @returns {Boolean} true if MIDI is available\r\n */\r\nexport const testForMIDI = () => navigator.requestMIDIAccess === undefined? false : true\r\n\r\n/**\r\n * Initialise and connect to MIDI Hardware\r\n * @param {Function} connectedCallback - method to call when connected\r\n * @param {Function} disconnectedCallback - method to call when disconnected\r\n * @returns \r\n */\r\nexport const setupMIDI = (connectedCallback, disconnectedCallback) => new Promise ( (resolve,reject) => {\r\n\t\r\n\tWebMidi.enable().then( ports => {\r\n\r\n\t\t//console.log(\"WebMidi enabled!\", ports, ports.outputs[0] , WebMidi.outputs[0], WebMidi.outputs[0] === ports.outputs[0] )\r\n\t\t\r\n\t\t// I / O change\r\n\t\t// console.log(WebMidi.inputs)\r\n\t\t// console.log(WebMidi.outputs)\r\n\t\tWebMidi.addListener(\"connected\", function(e) {\r\n\t\t\t//console.log(e);\r\n\t\t\r\n\t\t\t// Check for MIDI Clock events\r\n\t\t\t// WebMidi.inputs[0].addListener(\"controlchange\", e => {\r\n\t\t\t// \tconsole.log(`Received 'controlchange' message.`, e);\r\n\t\t\t// })\r\n\t\t\t\r\n\t\t\tconnectedCallback && connectedCallback(e)\t\r\n\t\t})\r\n\t\t  \r\n\t\t  // Reacting when a device becomes unavailable\r\n\t\tWebMidi.addListener(\"disconnected\", function(e) {\r\n\t\t\t//console.log(e);\r\n\t\t\tdisconnectedCallback && disconnectedCallback()\r\n\t\t})\r\n\t\r\n\t\tresolve(WebMidi)\r\n\t\t\r\n\t\t// Display the current time\r\n\t\t//   console.log(WebMidi.time)\r\n\t\t\r\n\t\t// Retrieving an output port/device using its id, name or index\r\n\t\t// midiChannel = WebMidi.getOutputById(\"123456789\")\r\n\t\t// midiChannel = WebMidi.getOutputByName(\"Axiom Pro 25 Ext Out\")\r\n\t\t// midiChannel = WebMidi.outputs[0]\r\n\r\n\t\t// if (midiChannel)\r\n\t\t// {\r\n\t\t// \t// Play a note on all channels of the selected output\r\n\t\t// \tmidiChannel.playNote(\"C3\");\r\n\r\n\t\t// \t// Play a note on channel 3\r\n\t\t// \tmidiChannel.playNote(\"Gb4\", 3);\r\n\r\n\t\t// \t// Play a chord on all available channels\r\n\t\t// \tmidiChannel.playNote([\"C3\", \"D#3\", \"G3\"]);\r\n\r\n\t\t// \t// Play a chord on channel 7\r\n\t\t// \tmidiChannel.playNote([\"C3\", \"D#3\", \"G3\"], 7);\r\n\r\n\t\t// \t// Play a note at full velocity on all channels)\r\n\t\t// \tmidiChannel.playNote(\"F#-1\", \"all\", {velocity: 1});\r\n\r\n\t\t// \t// Play a note on channel 16 in 2 seconds (relative time)\r\n\t\t// \tmidiChannel.playNote(\"F5\", 16, {time: \"+2000\"});\r\n\r\n\t\t// \t// Play a note on channel 1 at an absolute time in the future\r\n\t\t// \tmidiChannel.playNote(\"F5\", 16, {time: WebMidi.time + 3000});\r\n\r\n\t\t// \t// Play a note for a duration of 2 seconds (will send a note off message in 2 seconds). Also use\r\n\t\t// \t// a low attack velocity\r\n\t\t// \tmidiChannel.playNote(\"Gb2\", 10, {duration: 2000, velocity: 0.25});\r\n\r\n\t\t// \t// Stop a playing note on all channels\r\n\t\t// \tmidiChannel.stopNote(\"C-1\");\r\n\r\n\t\t// \t// Stopping a playing note on channel 11\r\n\t\t// \tmidiChannel.stopNote(\"F3\", 11);\r\n\r\n\t\t// \t// Stop a playing note on channel 11 and use a high release velocity\r\n\t\t// \tmidiChannel.stopNote(\"G8\", 11, {velocity: 0.9});\r\n\r\n\t\t// \t// Stopping a playing note in 2.5 seconds\r\n\t\t// \tmidiChannel.stopNote(\"Bb2\", 11, {time: \"+2500\"});\r\n\r\n\t\t// \t// Send polyphonic aftertouch message to channel 8\r\n\t\t// \tmidiChannel.sendKeyAftertouch(\"C#3\", 8, 0.25);\r\n\r\n\t\t// \t// Send pitch bend (between -1 and 1) to channel 12\r\n\t\t// \tmidiChannel.sendPitchBend(-1, 12);\r\n\r\n\t\t// \t// You can chain most method calls\r\n\t\t// \tmidiChannel.playNote(\"G5\", 12)\r\n\t\t// \t\t.sendPitchBend(-0.5, 12, {time: 400}) // After 400 ms.\r\n\t\t// \t\t.sendPitchBend(0.5, 12, {time: 800})  // After 800 ms.\r\n\t\t// \t\t.stopNote(\"G5\", 12, {time: 1200});    // After 1.2 s.\r\n\r\n\t\t// }\r\n\r\n\t}).catch(error=> reject(error))\r\n\r\n})",null,"/**\n * The `EventEmitter` class provides methods to implement the _observable_ design pattern. This\n * pattern allows one to _register_ a function to execute when a specific event is _emitted_ by the\n * emitter.\n *\n * It is intended to be an abstract class meant to be extended by (or mixed into) other objects.\n */\nexport class EventEmitter {\n\n  /**\n   * Creates a new `EventEmitter`object.\n   *\n   * @param {boolean} [eventsSuspended=false] Whether the `EventEmitter` is initially in a suspended\n   * state (i.e. not executing callbacks).\n   */\n  constructor(eventsSuspended = false) {\n\n    /**\n     * An object containing a property for each event with at least one registered listener. Each\n     * event property contains an array of all the [`Listener`]{@link Listener} objects registered\n     * for the event.\n     *\n     * @type {Object}\n     * @readonly\n     */\n    this.eventMap = {};\n\n    /**\n     * Whether or not the execution of callbacks is currently suspended for this emitter.\n     *\n     * @type {boolean}\n     */\n    this.eventsSuspended = eventsSuspended == true ? true : false;\n\n  }\n\n  /**\n   * The callback function is executed when the associated event is triggered via [`emit()`](#emit).\n   * The [`emit()`](#emit) method relays all additional arguments it received to the callback\n   * functions. Since [`emit()`](#emit) can be passed a variable number of arguments, it is up to\n   * the developer to make sure the arguments match those of the associated callback. In addition,\n   * the callback also separately receives all the arguments present in the listener's\n   * [`arguments`](Listener#arguments) property. This makes it easy to pass data from where the\n   * listener is added to where the listener is executed.\n   *\n   * @callback EventEmitter~callback\n   * @param {...*} [args] A variable number of arguments matching the ones (if any) that were passed\n   * to the [`emit()`](#emit) method (except, the first one) followed by the arguments found in the\n   * listener's [`arguments`](Listener#arguments) array.\n   */\n\n  /**\n   * Adds a listener for the specified event. It returns the [`Listener`]{@link Listener} object\n   * that was created and attached to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link #ANY_EVENT} as the first parameter. Note that a global\n   * listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to.\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs.\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The value of `this` in the callback function.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addListener(event, callback, options = {}) {\n\n    if (\n      (typeof event === \"string\" && event.length < 1) ||\n      (event instanceof String && event.length < 1) ||\n      (typeof event !== \"string\" && !(event instanceof String) && event !== EventEmitter.ANY_EVENT)\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (typeof callback !== \"function\") throw new TypeError(\"The callback must be a function.\");\n\n    const listener = new Listener(event, this, callback, options);\n\n    if (!this.eventMap[event]) this.eventMap[event] = [];\n\n    if (options.prepend) {\n      this.eventMap[event].unshift(listener);\n    } else {\n      this.eventMap[event].push(listener);\n    }\n\n    return listener;\n\n  }\n\n  /**\n   * Adds a one-time listener for the specified event. The listener will be executed once and then\n   * destroyed. It returns the [`Listener`]{@link Listener} object that was created and attached\n   * to the event.\n   *\n   * To attach a global listener that will be triggered for any events, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter. Note that a\n   * global listener will also be triggered by non-registered events.\n   *\n   * @param {string|Symbol} event The event to listen to\n   * @param {EventEmitter~callback} callback The callback function to execute when the event occurs\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=this] The context to invoke the callback function in.\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus executed first.\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`]{@link Listener#arguments}\n   * property of the [`Listener`]{@link Listener} object and can be retrieved or modified as\n   * desired.\n   *\n   * @returns {Listener} The newly created [`Listener`]{@link Listener} object.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {TypeError} The `callback` parameter must be a function.\n   */\n  addOneTimeListener(event, callback, options = {}) {\n    options.remaining = 1;\n    this.addListener(event, callback, options);\n  }\n\n  /**\n   * Identifier to use when adding or removing a listener that should be triggered when any events\n   * occur.\n   *\n   * @type {Symbol}\n   */\n  static get ANY_EVENT() {\n    return Symbol.for(\"Any event\");\n  }\n\n  /**\n   * Returns `true` if the specified event has at least one registered listener. If no event is\n   * specified, the method returns `true` if any event has at least one listener registered (this\n   * includes global listeners registered to\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * Note: to specifically check for global listeners added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}, use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} [event=(any event)] The event to check\n   * @param {function|Listener} [callback=(any callback)] The actual function that was added to the\n   * event or the {@link Listener} object returned by `addListener()`.\n   * @returns {boolean}\n   */\n  hasListener(event, callback) {\n\n    if (event === undefined) {\n\n      // Check for ANY_EVENT\n      if (\n        this.eventMap[EventEmitter.ANY_EVENT] && this.eventMap[EventEmitter.ANY_EVENT].length > 0\n      ) {\n        return true;\n      }\n\n      // Check for any regular events\n      return Object.entries(this.eventMap).some(([, value]) => {\n        return value.length > 0;\n      });\n\n    } else {\n\n      if (this.eventMap[event] && this.eventMap[event].length > 0) {\n\n        if (callback instanceof Listener) {\n          let result = this.eventMap[event].filter(listener => listener === callback);\n          return result.length > 0;\n        } else if (typeof callback === \"function\") {\n          let result = this.eventMap[event].filter(listener => listener.callback === callback);\n          return result.length > 0;\n        } else if (callback != undefined) {\n          return false;\n        }\n\n        return true;\n\n      } else {\n        return false;\n      }\n\n\n    }\n\n  }\n\n  /**\n   * An array of all the unique event names for which the emitter has at least one registered\n   * listener.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  get eventNames() {\n    return Object.keys(this.eventMap);\n  }\n\n  /**\n   * Returns an array of all the [`Listener`]{@link Listener} objects that have been registered for\n   * a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) are not returned for \"regular\"\n   * events. To get the list of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event to get listeners for.\n   * @returns {Listener[]} An array of [`Listener`]{@link Listener} objects.\n   */\n  getListeners(event) {\n    return this.eventMap[event] || [];\n  }\n\n  /**\n   * Suspends execution of all callbacks functions registered for the specified event type.\n   *\n   * You can suspend execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `suspendEvent()`. Beware that this\n   * will not suspend all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem counter-intuitive\n   * at first glance, it allows the selective suspension of global listeners while leaving other\n   * listeners alone. If you truly want to suspends all callbacks for a specific\n   * [`EventEmitter`]{@link EventEmitter}, simply set its `eventsSuspended` property to `true`.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to suspend\n   * execution of all callback functions.\n   */\n  suspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = true;\n    });\n  }\n\n  /**\n   * Resumes execution of all suspended callback functions registered for the specified event type.\n   *\n   * You can resume execution of callbacks registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} by passing\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} to `unsuspendEvent()`. Beware that\n   * this will not resume all callbacks but only those registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}. While this may seem\n   * counter-intuitive, it allows the selective unsuspension of global listeners while leaving other\n   * callbacks alone.\n   *\n   * @param {string|Symbol} event The event name (or `EventEmitter.ANY_EVENT`) for which to resume\n   * execution of all callback functions.\n   */\n  unsuspendEvent(event) {\n    this.getListeners(event).forEach(listener => {\n      listener.suspended = false;\n    });\n  }\n\n  /**\n   * Returns the number of listeners registered for a specific event.\n   *\n   * Please note that global events (those added with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}) do not count towards the remaining\n   * number for a \"regular\" event. To get the number of global listeners, specifically use\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the parameter.\n   *\n   * @param {string|Symbol} event The event which is usually a string but can also be the special\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} symbol.\n   * @returns {number} An integer representing the number of listeners registered for the specified\n   * event.\n   */\n  getListenerCount(event) {\n    return this.getListeners(event).length;\n  }\n\n  /**\n   * Executes the callback function of all the [`Listener`]{@link Listener} objects registered for\n   * a given event. The callback functions are passed the additional arguments passed to `emit()`\n   * (if any) followed by the arguments present in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object (if any).\n   *\n   * If the [`eventsSuspended`]{@link #eventsSuspended} property is `true` or the\n   * [`Listener.suspended`]{@link Listener#suspended} property is `true`, the callback functions\n   * will not be executed.\n   *\n   * This function returns an array containing the return values of each of the callbacks.\n   *\n   * It should be noted that the regular listeners are triggered first followed by the global\n   * listeners (those added with [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}).\n   *\n   * @param {string} event The event\n   * @param {...*} args Arbitrary number of arguments to pass along to the callback functions\n   *\n   * @returns {Array} An array containing the return value of each of the executed listener\n   * functions.\n   *\n   * @throws {TypeError} The `event` parameter must be a string.\n   */\n  emit(event, ...args) {\n\n    if (typeof event !== \"string\" && !(event instanceof String)) {\n      throw new TypeError(\"The 'event' parameter must be a string.\");\n    }\n\n    if (this.eventsSuspended) return;\n\n    // We collect return values from all listeners here\n    let results = [];\n\n    // We must make sure that we do not have undefined otherwise concat() will add an undefined\n    // entry in the array.\n    let listeners = this.eventMap[EventEmitter.ANY_EVENT] || [];\n    if (this.eventMap[event]) listeners = listeners.concat(this.eventMap[event]);\n\n    listeners.forEach(listener => {\n\n      // This is the per-listener suspension check\n      if (listener.suspended) return;\n\n      let params = [...args];\n      if (Array.isArray(listener.arguments)) params = params.concat(listener.arguments);\n\n      if (listener.remaining > 0) {\n        results.push(listener.callback.apply(listener.context, params));\n        listener.count++;\n      }\n\n      if (--listener.remaining < 1) listener.remove();\n\n    });\n\n    return results;\n\n  }\n\n  /**\n   * Removes all the listeners that match the specified criterias. If no parameters are passed, all\n   * listeners will be removed. If only the `event` parameter is passed, all listeners for that\n   * event will be removed. You can remove global listeners by using\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} as the first parameter.\n   *\n   * To use more granular options, you must at least define the `event`. Then, you can specify the\n   * callback to match or one or more of the additional options.\n   *\n   * @param {string} [event] The event name.\n   * @param {EventEmitter~callback} [callback] Only remove the listeners that match this exact\n   * callback function.\n   * @param {Object} [options]\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, callback, options = {}) {\n\n    if (event === undefined) {\n      this.eventMap = {};\n      return;\n    } else if (!this.eventMap[event]) {\n      return;\n    }\n\n    // Find listeners that do not match the criterias (those are the ones we will keep)\n    let listeners = this.eventMap[event].filter(listener => {\n\n      return (callback && listener.callback !== callback) ||\n        (options.remaining && options.remaining !== listener.remaining) ||\n        (options.context && options.context !== listener.context);\n\n    });\n\n    if (listeners.length) {\n      this.eventMap[event] = listeners;\n    } else {\n      delete this.eventMap[event];\n    }\n\n  }\n\n  /**\n   * The `waitFor()` method is an async function which returns a promise. The promise is fulfilled\n   * when the specified event occurs. The event can be a regular event or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} (if you want to resolve as soon as any\n   * event is emitted).\n   *\n   * If the `duration` option is set, the promise will only be fulfilled if the event is emitted\n   * within the specified duration. If the event has not been fulfilled after the specified\n   * duration, the promise is rejected. This makes it super easy to wait for an event and timeout\n   * after a certain time if the event is not triggered.\n   *\n   * @param {string|Symbol} event The event to wait for\n   * @param {Object} [options={}]\n   * @param {number} [options.duration=Infinity] The number of milliseconds to wait before the\n   * promise is automatically rejected.\n   */\n  async waitFor(event, options = {}) {\n\n    options.duration = parseInt(options.duration);\n    if (isNaN(options.duration) || options.duration <= 0) options.duration = Infinity;\n\n    return new Promise((resolve, reject) => {\n\n      let timeout;\n\n      let listener = this.addListener(event, () => {\n        clearTimeout(timeout);\n        resolve();\n      }, {remaining: 1});\n\n      if (options.duration !== Infinity) {\n        timeout = setTimeout(() => {\n          listener.remove();\n          reject(\"The duration expired before the event was emitted.\");\n        }, options.duration);\n      }\n\n    });\n\n  }\n\n  /**\n   * The number of unique events that have registered listeners.\n   *\n   * Note: this excludes global events registered with\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT} because they are not tied to a\n   * specific event.\n   *\n   * @type {number}\n   * @readonly\n   */\n  get eventCount() {\n    return Object.keys(this.eventMap).length;\n  }\n\n}\n\n/**\n * The `Listener` class represents a single event listener object. Such objects keep all relevant\n * contextual information such as the event being listened to, the object the listener was attached\n * to, the callback function and so on.\n *\n */\nexport class Listener {\n\n  /**\n   * Creates a new `Listener` object\n   *\n   * @param {string|Symbol} event The event being listened to\n   * @param {EventEmitter} target The [`EventEmitter`]{@link EventEmitter} object that the listener\n   * is attached to.\n   * @param {EventEmitter~callback} callback The function to call when the listener is triggered\n   * @param {Object} [options={}]\n   * @param {Object} [options.context=target] The context to invoke the listener in (a.k.a. the\n   * value of `this` inside the callback function).\n   * @param {number} [options.remaining=Infinity] The remaining number of times after which the\n   * callback should automatically be removed.\n   * @param {array} [options.arguments] An array of arguments that will be passed separately to the\n   * callback function upon execution. The array is stored in the [`arguments`]{@link #arguments}\n   * property and can be retrieved or modified as desired.\n   *\n   * @throws {TypeError} The `event` parameter must be a string or\n   * [`EventEmitter.ANY_EVENT`]{@link EventEmitter#ANY_EVENT}.\n   * @throws {ReferenceError} The `target` parameter is mandatory.\n   * @throws {TypeError} The `callback` must be a function.\n   */\n  constructor(event, target, callback, options = {}) {\n\n    if (\n      typeof event !== \"string\" &&\n      !(event instanceof String) &&\n      event !== EventEmitter.ANY_EVENT\n    ) {\n      throw new TypeError(\"The 'event' parameter must be a string or EventEmitter.ANY_EVENT.\");\n    }\n\n    if (!target) {\n      throw new ReferenceError(\"The 'target' parameter is mandatory.\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new TypeError(\"The 'callback' must be a function.\");\n    }\n\n    // Convert single value argument to array\n    if (options.arguments !== undefined && !Array.isArray(options.arguments)) {\n      options.arguments = [options.arguments];\n    }\n\n    // Define default options and merge declared options into them,\n    options = Object.assign({\n      context: target,\n      remaining: Infinity,\n      arguments: undefined,\n      duration: Infinity,\n    }, options);\n\n    // Make sure it is eventually deleted if a duration is supplied\n    if (options.duration !== Infinity) {\n      setTimeout(() => this.remove(), options.duration);\n    }\n\n    /**\n     * An array of arguments to pass to the callback function upon execution.\n     * @type {array}\n     */\n    this.arguments = options.arguments;\n\n    /**\n     * The callback function to execute.\n     * @type {Function}\n     */\n    this.callback = callback;\n\n    /**\n     * The context to execute the callback function in (a.k.a. the value of `this` inside the\n     * callback function)\n     * @type {Object}\n     */\n    this.context = options.context;\n\n    /**\n     * The number of times the listener function was executed.\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * The event name.\n     * @type {string}\n     */\n    this.event = event;\n\n    /**\n     * The remaining number of times after which the callback should automatically be removed.\n     * @type {number}\n     */\n    this.remaining = parseInt(options.remaining) >= 1 ? parseInt(options.remaining) : Infinity;\n\n    /**\n     * Whether this listener is currently suspended or not.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    /**\n     * The object that the event is attached to (or that emitted the event).\n     * @type {EventEmitter}\n     */\n    this.target = target;\n\n  }\n\n  /**\n   * Removes the listener from its target.\n   */\n  remove() {\n    this.target.removeListener(\n      this.event,\n      this.callback,\n      {context: this.context, remaining: this.remaining}\n    );\n  }\n\n}\n","/**\n * The `Enumerations` class contains enumerations and arrays of elements used throughout the\n * library. All properties are static and should be referenced using the class name. For example:\n * `Enumerations.MIDI_CHANNEL_MESSAGES`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Enumerations {\n\n  /**\n   * Enumeration of all MIDI channel message names and their associated 4-bit numerical value:\n   *\n   * | Message Name        | Hexadecimal | Decimal |\n   * |---------------------|-------------|---------|\n   * | `noteoff`           | 0x8         | 8       |\n   * | `noteon`            | 0x9         | 9       |\n   * | `keyaftertouch`     | 0xA         | 10      |\n   * | `controlchange`     | 0xB         | 11      |\n   * | `programchange`     | 0xC         | 12      |\n   * | `channelaftertouch` | 0xD         | 13      |\n   * | `pitchbend`         | 0xE         | 14      |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MESSAGES() {\n\n    return {\n      noteoff: 0x8,           // 8\n      noteon: 0x9,            // 9\n      keyaftertouch: 0xA,     // 10\n      controlchange: 0xB,     // 11\n      programchange: 0xC,     // 12\n      channelaftertouch: 0xD, // 13\n      pitchbend: 0xE          // 14\n    };\n\n  }\n\n  /**\n   * A simple array of the 16 valid MIDI channel numbers (`1` to `16`):\n   *\n   * @type {number[]}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_NUMBERS() {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n  }\n\n  /**\n   * Enumeration of all MIDI channel mode message names and their associated numerical value:\n   *\n   *\n   * | Message Name          | Hexadecimal | Decimal |\n   * |-----------------------|-------------|---------|\n   * | `allsoundoff`         | 0x78        | 120     |\n   * | `resetallcontrollers` | 0x79        | 121     |\n   * | `localcontrol`        | 0x7A        | 122     |\n   * | `allnotesoff`         | 0x7B        | 123     |\n   * | `omnimodeoff`         | 0x7C        | 124     |\n   * | `omnimodeon`          | 0x7D        | 125     |\n   * | `monomodeon`          | 0x7E        | 126     |\n   * | `polymodeon`          | 0x7F        | 127     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    return {\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n    };\n\n  }\n\n  /**\n   * Enumeration of all control change messages identifying the control function associated to its\n   * control number.\n   *\n   * Not all numbers have a preassigned control function. For those that don't, the control function\n   * is identified as the word \"controller\" followed by the number (e.g. `controller123`).\n   *\n   * | Control Function               | Control Number |\n   * |--------------------------------|----------------|\n   * | `bankselectcoarse`             | 0              |\n   * | `modulationwheelcoarse`        | 1              |\n   * | `breathcontrollercoarse`       | 2              |\n   * | `controller3`                  | 3              |\n   * | `footcontrollercoarse`         | 4              |\n   * | `portamentotimecoarse`         | 5              |\n   * | `dataentrycoarse`              | 6              |\n   * | `volumecoarse`                 | 7              |\n   * | `balancecoarse`                | 8              |\n   * | `controller9`                  | 9              |\n   * | `pancoarse`                    | 10             |\n   * | `expressioncoarse`             | 11             |\n   * | `effectcontrol1coarse`         | 12             |\n   * | `effectcontrol2coarse`         | 13             |\n   * | `controller14`                 | 14             |\n   * | `controller15`                 | 15             |\n   * | `generalpurposeslider1`        | 16             |\n   * | `generalpurposeslider2`        | 17             |\n   * | `generalpurposeslider3`        | 18             |\n   * | `generalpurposeslider4`        | 19             |\n   * | `controller20`                 | 20             |\n   * | `controller21`                 | 21             |\n   * | `controller22`                 | 22             |\n   * | `controller23`                 | 23             |\n   * | `controller24`                 | 24             |\n   * | `controller25`                 | 25             |\n   * | `controller26`                 | 26             |\n   * | `controller27`                 | 27             |\n   * | `controller28`                 | 28             |\n   * | `controller29`                 | 29             |\n   * | `controller30`                 | 30             |\n   * | `controller31`                 | 31             |\n   * | `bankselectfine`               | 32             |\n   * | `modulationwheelfine`          | 33             |\n   * | `breathcontrollerfine`         | 34             |\n   * | `controller35`                 | 35             |\n   * | `footcontrollerfine`           | 36             |\n   * | `portamentotimefine`           | 37             |\n   * | `dataentryfine`                | 38             |\n   * | `volumefine`                   | 39             |\n   * | `balancefine`                  | 40             |\n   * | `controller41`                 | 41             |\n   * | `panfine`                      | 42             |\n   * | `expressionfine`               | 43             |\n   * | `effectcontrol1fine`           | 44             |\n   * | `effectcontrol2fine`           | 45             |\n   * | `controller46`                 | 46             |\n   * | `controller47`                 | 47             |\n   * | `controller48`                 | 48             |\n   * | `controller49`                 | 49             |\n   * | `controller50`                 | 50             |\n   * | `controller51`                 | 51             |\n   * | `controller52`                 | 52             |\n   * | `controller53`                 | 53             |\n   * | `controller54`                 | 54             |\n   * | `controller55`                 | 55             |\n   * | `controller56`                 | 56             |\n   * | `controller57`                 | 57             |\n   * | `controller58`                 | 58             |\n   * | `controller59`                 | 59             |\n   * | `controller60`                 | 60             |\n   * | `controller61`                 | 61             |\n   * | `controller62`                 | 62             |\n   * | `controller63`                 | 63             |\n   * | `holdpedal`                    | 64             |\n   * | `portamento`                   | 65             |\n   * | `sustenutopedal`               | 66             |\n   * | `softpedal`                    | 67             |\n   * | `legatopedal`                  | 68             |\n   * | `hold2pedal`                   | 69             |\n   * | `soundvariation`               | 70             |\n   * | `resonance`                    | 71             |\n   * | `soundreleasetime`             | 72             |\n   * | `soundattacktime`              | 73             |\n   * | `brightness`                   | 74             |\n   * | `soundcontrol6`                | 75             |\n   * | `soundcontrol7`                | 76             |\n   * | `soundcontrol8`                | 77             |\n   * | `soundcontrol9`                | 78             |\n   * | `soundcontrol10`               | 79             |\n   * | `generalpurposebutton1`        | 80             |\n   * | `generalpurposebutton2`        | 81             |\n   * | `generalpurposebutton3`        | 82             |\n   * | `generalpurposebutton4`        | 83             |\n   * | `controller84`                 | 84             |\n   * | `controller85`                 | 85             |\n   * | `controller86`                 | 86             |\n   * | `controller87`                 | 87             |\n   * | `controller88`                 | 88             |\n   * | `controller89`                 | 89             |\n   * | `controller90`                 | 90             |\n   * | `reverblevel`                  | 91             |\n   * | `tremololevel`                 | 92             |\n   * | `choruslevel`                  | 93             |\n   * | `celestelevel`                 | 94             |\n   * | `phaserlevel`                  | 95             |\n   * | `databuttonincrement`          | 96             |\n   * | `databuttondecrement`          | 97             |\n   * | `nonregisteredparametercoarse` | 98             |\n   * | `nonregisteredparameterfine`   | 99             |\n   * | `registeredparametercoarse`    | 100            |\n   * | `registeredparameterfine`      | 101            |\n   * | `controller102`                | 102            |\n   * | `controller103`                | 103            |\n   * | `controller104`                | 104            |\n   * | `controller105`                | 105            |\n   * | `controller106`                | 106            |\n   * | `controller107`                | 107            |\n   * | `controller108`                | 108            |\n   * | `controller109`                | 109            |\n   * | `controller110`                | 110            |\n   * | `controller111`                | 111            |\n   * | `controller112`                | 112            |\n   * | `controller113`                | 113            |\n   * | `controller114`                | 114            |\n   * | `controller115`                | 115            |\n   * | `controller116`                | 116            |\n   * | `controller117`                | 117            |\n   * | `controller118`                | 118            |\n   * | `controller119`                | 119            |\n   * | `allsoundoff`                  | 120            |\n   * | `resetallcontrollers`          | 121            |\n   * | `localcontrol`                 | 122            |\n   * | `allnotesoff`                  | 123            |\n   * | `omnimodeoff`                  | 124            |\n   * | `omnimodeon`                   | 125            |\n   * | `monomodeon`                   | 126            |\n   * | `polymodeon`                   | 127            |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    return {\n\n      bankselectcoarse: 0,\n      modulationwheelcoarse: 1,\n      breathcontrollercoarse: 2,\n      controller3: 3,\n      footcontrollercoarse: 4,\n      portamentotimecoarse: 5,\n      dataentrycoarse: 6,\n      volumecoarse: 7,\n      balancecoarse: 8,\n      controller9: 9,\n      pancoarse: 10,\n      expressioncoarse: 11,\n      effectcontrol1coarse: 12,\n      effectcontrol2coarse: 13,\n      controller14: 14,\n      controller15: 15,\n      generalpurposeslider1: 16,\n      generalpurposeslider2: 17,\n      generalpurposeslider3: 18,\n      generalpurposeslider4: 19,\n      controller20: 20,\n      controller21: 21,\n      controller22: 22,\n      controller23: 23,\n      controller24: 24,\n      controller25: 25,\n      controller26: 26,\n      controller27: 27,\n      controller28: 28,\n      controller29: 29,\n      controller30: 30,\n      controller31: 31,\n      bankselectfine: 32,\n      modulationwheelfine: 33,\n      breathcontrollerfine: 34,\n      controller35: 35,\n      footcontrollerfine: 36,\n      portamentotimefine: 37,\n      dataentryfine: 38,\n      volumefine: 39,\n      balancefine: 40,\n      controller41: 41,\n      panfine: 42,\n      expressionfine: 43,\n      effectcontrol1fine: 44,\n      effectcontrol2fine: 45,\n      controller46: 46,\n      controller47: 47,\n      controller48: 48,\n      controller49: 49,\n      controller50: 50,\n      controller51: 51,\n      controller52: 52,\n      controller53: 53,\n      controller54: 54,\n      controller55: 55,\n      controller56: 56,\n      controller57: 57,\n      controller58: 58,\n      controller59: 59,\n      controller60: 60,\n      controller61: 61,\n      controller62: 62,\n      controller63: 63,\n      holdpedal: 64,\n      portamento: 65,\n      sustenutopedal: 66,\n      softpedal: 67,\n      legatopedal: 68,\n      hold2pedal: 69,\n      soundvariation: 70,\n      resonance: 71,\n      soundreleasetime: 72,\n      soundattacktime: 73,\n      brightness: 74,\n      soundcontrol6: 75,\n      soundcontrol7: 76,\n      soundcontrol8: 77,\n      soundcontrol9: 78,\n      soundcontrol10: 79,\n      generalpurposebutton1: 80,\n      generalpurposebutton2: 81,\n      generalpurposebutton3: 82,\n      generalpurposebutton4: 83,\n      controller84: 84,\n      controller85: 85,\n      controller86: 86,\n      controller87: 87,\n      controller88: 88,\n      controller89: 89,\n      controller90: 90,\n      reverblevel: 91,\n      tremololevel: 92,\n      choruslevel: 93,\n      celestelevel: 94,\n      phaserlevel: 95,\n      databuttonincrement: 96,\n      databuttondecrement: 97,\n      nonregisteredparametercoarse: 98,\n      nonregisteredparameterfine: 99,\n      registeredparametercoarse: 100,\n      registeredparameterfine: 101,\n      controller102: 102,\n      controller103: 103,\n      controller104: 104,\n      controller105: 105,\n      controller106: 106,\n      controller107: 107,\n      controller108: 108,\n      controller109: 109,\n      controller110: 110,\n      controller111: 111,\n      controller112: 112,\n      controller113: 113,\n      controller114: 114,\n      controller115: 115,\n      controller116: 116,\n      controller117: 117,\n      controller118: 118,\n      controller119: 119,\n      allsoundoff: 120,\n      resetallcontrollers: 121,\n      localcontrol: 122,\n      allnotesoff: 123,\n      omnimodeoff: 124,\n      omnimodeon: 125,\n      monomodeon: 126,\n      polymodeon: 127\n\n    };\n\n  }\n\n  /**\n   * Enumeration of all MIDI registered parameters and their associated pair of numerical values.\n   * MIDI registered parameters extend the original list of control change messages. Currently,\n   * there are only a limited number of them:\n   *\n   *\n   * | Control Function             | [LSB, MSB]   |\n   * |------------------------------|--------------|\n   * | `pitchbendrange`             | [0x00, 0x00] |\n   * | `channelfinetuning`          | [0x00, 0x01] |\n   * | `channelcoarsetuning`        | [0x00, 0x02] |\n   * | `tuningprogram`              | [0x00, 0x03] |\n   * | `tuningbank`                 | [0x00, 0x04] |\n   * | `modulationrange`            | [0x00, 0x05] |\n   * | `azimuthangle`               | [0x3D, 0x00] |\n   * | `elevationangle`             | [0x3D, 0x01] |\n   * | `gain`                       | [0x3D, 0x02] |\n   * | `distanceratio`              | [0x3D, 0x03] |\n   * | `maximumdistance`            | [0x3D, 0x04] |\n   * | `maximumdistancegain`        | [0x3D, 0x05] |\n   * | `referencedistanceratio`     | [0x3D, 0x06] |\n   * | `panspreadangle`             | [0x3D, 0x07] |\n   * | `rollangle`                  | [0x3D, 0x08] |\n   *\n   * @enum {Object.<string, number[]>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_REGISTERED_PARAMETERS() {\n\n    return {\n      pitchbendrange: [0x00, 0x00],\n      channelfinetuning: [0x00, 0x01],\n      channelcoarsetuning: [0x00, 0x02],\n      tuningprogram: [0x00, 0x03],\n      tuningbank: [0x00, 0x04],\n\n      modulationrange: [0x00, 0x05],\n      azimuthangle: [0x3D, 0x00],\n      elevationangle: [0x3D, 0x01],\n      gain: [0x3D, 0x02],\n      distanceratio: [0x3D, 0x03],\n      maximumdistance: [0x3D, 0x04],\n      maximumdistancegain: [0x3D, 0x05],\n      referencedistanceratio: [0x3D, 0x06],\n      panspreadangle: [0x3D, 0x07],\n      rollangle: [0x3D, 0x08]\n    };\n\n  }\n\n  /**\n   * Enumeration of all valid MIDI system messages and matching numerical values. WebMidi.js also\n   * uses two additional custom messages.\n   *\n   * **System Common Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `sysex`                | 0xF0        |  240    |\n   * | `timecode`             | 0xF1        |  241    |\n   * | `songposition`         | 0xF2        |  242    |\n   * | `songselect`           | 0xF3        |  243    |\n   * | `tunerequest`          | 0xF6        |  246    |\n   * | `sysexend`             | 0xF7        |  247    |\n   *\n   * The `sysexend` message is never actually received. It simply ends a sysex stream.\n   *\n   * **System Real-Time Messages**\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `clock`                | 0xF8        |  248    |\n   * | `start`                | 0xFA        |  250    |\n   * | `continue`             | 0xFB        |  251    |\n   * | `stop`                 | 0xFC        |  252    |\n   * | `activesensing`        | 0xFE        |  254    |\n   * | `reset`                | 0xFF        |  255    |\n   *\n   * Values 249 and 253 are relayed by the\n   * [Web MIDI API](https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API) but they do not\n   * serve any specific purpose. The\n   * [MIDI 1.0 spec](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n   * simply states that they are undefined/reserved.\n   *\n   * **Custom WebMidi.js Messages**\n   *\n   * These two messages are mostly for internal use. They are not MIDI messages and cannot be sent\n   * or forwarded.\n   *\n   * | Function               | Hexadecimal | Decimal |\n   * |------------------------|-------------|---------|\n   * | `midimessage`          |             |  0      |\n   * | `unknownsystemmessage` |             |  -1     |\n   *\n   * @enum {Object.<string, number>}\n   * @readonly\n   * @static\n   */\n  static get MIDI_SYSTEM_MESSAGES() {\n\n    return {\n\n      // System common messages\n      sysex: 0xF0,            // 240\n      timecode: 0xF1,         // 241\n      songposition: 0xF2,     // 242\n      songselect: 0xF3,       // 243\n      tunerequest: 0xF6,      // 246\n      tuningrequest: 0xF6,    // for backwards-compatibility (deprecated in version 3.0)\n      sysexend: 0xF7,         // 247 (never actually received - simply ends a sysex)\n\n      // System real-time messages\n      clock: 0xF8,            // 248\n      start: 0xFA,            // 250\n      continue: 0xFB,         // 251\n      stop: 0xFC,             // 252\n      activesensing: 0xFE,    // 254\n      reset: 0xFF,            // 255\n\n      // Custom WebMidi.js messages\n      midimessage: 0,\n      unknownsystemmessage: -1\n\n    };\n\n  }\n\n  /**\n   * Array of channel-specific event names that can be listened for. This includes channel mode\n   * events and RPN/NRPN events.\n   *\n   * @type {string[]}\n   * @readonly\n   */\n  static get CHANNEL_EVENTS() {\n\n    return [\n\n      // MIDI channel message events\n      \"noteoff\",\n      \"controlchange\",\n      \"noteon\",\n      \"keyaftertouch\",\n      \"programchange\",\n      \"channelaftertouch\",\n      \"pitchbend\",\n\n      // MIDI channel mode events\n      \"allnotesoff\",\n      \"allsoundoff\",\n      \"localcontrol\",\n      \"monomode\",\n      \"omnimode\",\n      \"resetallcontrollers\",\n\n      // RPN/NRPN events\n      \"nrpn\",\n      \"nrpn-dataentrycoarse\",\n      \"nrpn-dataentryfine\",\n      \"nrpn-databuttonincrement\",\n      \"nrpn-databuttondecrement\",\n      \"rpn\",\n      \"rpn-dataentrycoarse\",\n      \"rpn-dataentryfine\",\n      \"rpn-databuttonincrement\",\n      \"rpn-databuttondecrement\"\n\n    ];\n  }\n\n}\n","import {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Note` class represents a single musical note such as `\"D3\"`, `\"G#4\"`, `\"F-1\"`, `\"Gb7\"`, etc.\n *\n * `Note` objects can be played back on a single channel by calling\n * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same\n * output, by calling [`Output.playNote()`]{@link Output#playNote}.\n *\n * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.\n * These can be changed by passing in the appropriate option. It is also possible to set a\n * system-wide default for attack and release velocities by using the\n * [`WebMidi.defaults`](WebMidi#defaults) property.\n *\n * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and\n * [`rawRelease`](#rawRelease) to both get and set the values.\n *\n * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped\n * when the duration has elapsed by sending a `\"noteoff\"` event. By default, the duration is set to\n * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a\n * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},\n * [`Output.stopNote()`]{@link Output#stopNote} or similar.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Note {\n\n  /**\n   * Creates a `Note` object.\n   *\n   * @param value {string|number} The value used to create the note. If an identifier string is used,\n   * it must start with the note letter, optionally followed by an accidental and followed by the\n   * octave number (`\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`, etc.). If a number is used, it must be an\n   * integer between 0 and 127. In this case, middle C is considered to be C4 (note number 60).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should be\n   * explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @throws {Error} Invalid note identifier\n   * @throws {RangeError} Invalid name value\n   * @throws {RangeError} Invalid accidental value\n   * @throws {RangeError} Invalid octave value\n   * @throws {RangeError} Invalid duration value\n   * @throws {RangeError} Invalid attack value\n   * @throws {RangeError} Invalid release value\n   */\n  constructor(value, options = {}) {\n\n    // Assign property defaults\n    this.duration = WebMidi.defaults.note.duration;\n    this.attack = WebMidi.defaults.note.attack;\n    this.release = WebMidi.defaults.note.release;\n\n    // Assign property values from options (validation occurs in setter)\n    if (options.duration != undefined) this.duration = options.duration;\n    if (options.attack != undefined) this.attack = options.attack;\n    if (options.rawAttack != undefined) this.attack = Utilities.from7bitToFloat(options.rawAttack);\n    if (options.release != undefined) this.release = options.release;\n    if (options.rawRelease != undefined) {\n      this.release = Utilities.from7bitToFloat(options.rawRelease);\n    }\n\n    // Assign note depending on the way it was specified (name or number)\n    if (Number.isInteger(value)) {\n      this.identifier = Utilities.toNoteIdentifier(value);\n    } else {\n      this.identifier = value;\n    }\n\n  }\n\n  /**\n   * The name, optional accidental and octave of the note, as a string.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get identifier() {\n    return this._name + (this._accidental || \"\") + this._octave;\n  }\n  set identifier(value) {\n\n    const fragments = Utilities.getNoteDetails(value);\n\n    if (WebMidi.validation) {\n      if (!value) throw new Error(\"Invalid note identifier\");\n    }\n\n    this._name = fragments.name;\n    this._accidental = fragments.accidental;\n    this._octave = fragments.octave;\n\n  }\n\n  /**\n   * The name (letter) of the note\n   * @type {string}\n   * @since 3.0.0\n   */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n\n    if (WebMidi.validation) {\n      value = value.toUpperCase();\n      if (![\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"].includes(value)) {\n        throw new Error(\"Invalid name value\");\n      }\n    }\n\n    this._name = value;\n\n  }\n\n  /**\n   * The accidental (#, ##, b or bb) of the note.\n   * @type {string}\n   * @since 3.0.0\n   */\n  get accidental() {\n    return this._accidental;\n  }\n  set accidental(value) {\n\n    if (WebMidi.validation) {\n      value = value.toLowerCase();\n      if (![\"#\", \"##\", \"b\", \"bb\"].includes(value)) throw new Error(\"Invalid accidental value\");\n    }\n\n    this._accidental = value;\n\n  }\n\n  /**\n   * The octave of the note.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get octave() {\n    return this._octave;\n  }\n  set octave(value) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new Error(\"Invalid octave value\");\n    }\n\n    this._octave = value;\n\n  }\n\n  /**\n   * The duration of the note as a positive decimal number representing the number of milliseconds\n   * that the note should play for.\n   *\n   * @type {number}\n   * @since 3.0.0\n   */\n  get duration() {\n    return this._duration;\n  }\n  set duration(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || value === null || value < 0) {\n        throw new RangeError(\"Invalid duration value.\");\n      }\n    }\n\n    this._duration = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get attack() {\n    return this._attack;\n  }\n  set attack(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid attack value.\");\n      }\n    }\n\n    this._attack = value;\n\n  }\n\n  /**\n   * The release velocity of the note as an integer between 0 and 1.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get release() {\n    return this._release;\n  }\n  set release(value) {\n\n    if (WebMidi.validation) {\n      value = parseFloat(value);\n      if (isNaN(value) || !(value >= 0 && value <= 1)) {\n        throw new RangeError(\"Invalid release value.\");\n      }\n    }\n\n    this._release = value;\n\n  }\n\n  /**\n   * The attack velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawAttack() {\n    return Utilities.fromFloatTo7Bit(this._attack);\n  }\n  set rawAttack(value) {\n    this._attack = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The release velocity of the note as a positive integer between 0 and 127.\n   * @type {number}\n   * @since 3.0.0\n   */\n  get rawRelease() {\n    return Utilities.fromFloatTo7Bit(this._release);\n  }\n  set rawRelease(value) {\n    this._release = Utilities.from7bitToFloat(value);\n  }\n\n  /**\n   * The MIDI number of the note (`0` - `127`). This number is derived from the note identifier\n   * using C4 as a reference for middle C.\n   *\n   * @type {number}\n   * @readonly\n   * @since 3.0.0\n   */\n  get number() {\n    return Utilities.toNoteNumber(this.identifier);\n  }\n\n  /**\n   * Returns a MIDI note number offset by octave and/or semitone. If the calculated value is less\n   * than 0, 0 will be returned. If the calculated value is more than 127, 127 will be returned. If\n   * an invalid value is supplied, 0 will be used.\n   *\n   * @param [octaveOffset] {number} An integer to offset the note number by octave.\n   * @param [semitoneOffset] {number} An integer to offset the note number by semitone.\n   * @returns {number} An integer between 0 and 127\n   */\n  getOffsetNumber(octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(this.number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n}\n","import {Note} from \"./Note.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Utilities` class contains general-purpose utility methods. All methods are static and\n * should be called using the class name. For example: `Utilities.getNoteDetails(\"C4\")`.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Utilities {\n\n  /**\n   * Returns a MIDI note number matching the identifier passed in the form of a string. The\n   * identifier must include the octave number. The identifier also optionally include a sharp (#),\n   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid\n   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.\n   *\n   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number\n   * 60) as per the scientific pitch notation standard.\n   *\n   * The resulting note number can be offset by using the `octaveOffset` parameter.\n   *\n   * @param identifier {string} The identifier in the form of a letter, followed by an optional \"#\",\n   * \"##\", \"b\" or \"bb\" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,\n   * Abb4, B##6, etc.\n   *\n   * @param {number} [octaveOffset=0] A integer to offset the octave by.\n   *\n   * @returns {number} The MIDI note number (an integer between 0 and 127).\n   *\n   * @throws RangeError Invalid 'octaveOffset' value\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteNumber(identifier, octaveOffset = 0) {\n\n    // Validation\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid 'octaveOffset' value\");\n    if (typeof identifier !== \"string\") identifier = \"\";\n\n    const fragments = this.getNoteDetails(identifier);\n    if (!fragments) throw new TypeError(\"Invalid note identifier\");\n\n    const notes = { C: 0, D: 2, E: 4, F: 5, G: 7, A: 9, B: 11 };\n    let result = (fragments.octave + 1 + octaveOffset) * 12;\n    result += notes[fragments.name];\n\n    if (fragments.accidental) {\n      if (fragments.accidental.startsWith(\"b\")) {\n        result -= fragments.accidental.length;\n      } else {\n        result += fragments.accidental.length;\n      }\n    }\n\n    if (result < 0 || result > 127) throw new RangeError(\"Invalid octaveOffset value\");\n\n    return result;\n\n  }\n\n  /**\n   * Given a proper note identifier (`C#4`, `Gb-1`, etc.) or a valid MIDI note number (0-127), this\n   * method returns an object containing broken down details about the specified note (uppercase\n   * letter, accidental and octave).\n   *\n   * When a number is specified, the translation to note is done using a value of 60 for middle C\n   * (C4 = middle C).\n   *\n   * @param value {string|number} A note identifier A  atring (\"C#4\", \"Gb-1\", etc.) or a MIDI note\n   * number (0-127).\n   *\n   * @returns {{accidental: string, identifier: string, name: string, octave: number }}\n   *\n   * @throws TypeError Invalid note identifier\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static getNoteDetails(value) {\n\n    if (Number.isInteger(value)) value = this.toNoteIdentifier(value);\n\n    const matches = value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\\d+)$/i);\n    if (!matches) throw new TypeError(\"Invalid note identifier\");\n\n    const name = matches[1].toUpperCase();\n    const octave = parseInt(matches[3]);\n    let accidental = matches[2].toLowerCase();\n    accidental = accidental === \"\" ? undefined : accidental;\n\n    const fragments = {\n      accidental: accidental,\n      identifier: name + (accidental || \"\") + octave,\n      name: name,\n      octave: octave\n    };\n\n    return fragments;\n\n  }\n\n  /**\n   * Returns a sanitized array of valid MIDI channel numbers (1-16). The parameter should be a\n   * single integer or an array of integers.\n   *\n   * For backwards-compatibility, passing `undefined` as a parameter to this method results in all\n   * channels being returned (1-16). Otherwise, parameters that cannot successfully be parsed to\n   * integers between 1 and 16 are silently ignored.\n   *\n   * @param [channel] {number|number[]} An integer or an array of integers to parse as channel\n   * numbers.\n   *\n   * @returns {number[]} An array of 0 or more valid MIDI channel numbers.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static sanitizeChannels(channel) {\n\n    let channels;\n\n    if (this.validation) {\n\n      if (channel === \"all\") { // backwards-compatibility\n        channels = [\"all\"];\n      } else if (channel === \"none\") { // backwards-compatibility\n        return [];\n      }\n\n    }\n\n    if (!Array.isArray(channel)) {\n      channels = [channel];\n    } else {\n      channels = channel;\n    }\n\n    // In order to preserve backwards-compatibility, we let this assignment as it is.\n    if (channels.indexOf(\"all\") > -1) {\n      channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n    }\n\n    return channels\n      .map(function(ch) {\n        return parseInt(ch);\n      })\n      .filter(function(ch) {\n        return (ch >= 1 && ch <= 16);\n      });\n\n  }\n\n  /**\n   * Returns a valid timestamp, relative to the navigation start of the document, derived from the\n   * `time` parameter. If the parameter is a string starting with the \"+\" sign and followed by a\n   * number, the resulting timestamp will be the sum of the current timestamp plus that number. If\n   * the parameter is a positive number, it will be returned as is. Otherwise, false will be\n   * returned.\n   *\n   * @param [time] {number|string} The time string (e.g. `\"+2000\"`) or number to parse\n   * @return {number|false} A positive number or `false` (if the time cannot be converted)\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toTimestamp(time) {\n\n    let value = false;\n\n    const parsed = parseFloat(time);\n    if (isNaN(parsed)) return false;\n\n    if (typeof time === \"string\" && time.substring(0, 1) === \"+\") {\n      if (parsed >= 0) value = WebMidi.time + parsed;\n    } else {\n      if (parsed >= 0) value = parsed;\n    }\n\n    return value;\n\n  }\n\n  /**\n   * Returns a valid MIDI note number (0-127) given the specified input. The input usually is a\n   * string containing a note identifier (`\"C3\"`, `\"F#4\"`, `\"D-2\"`, `\"G8\"`, etc.). If an integer\n   * between 0 and 127 is passed, it will simply be returned as is (for convenience). Other strings\n   * will be parsed for integer value, if possible.\n   *\n   * If the input is an identifier, the resulting note number is offset by the `octaveOffset`\n   * parameter. For example, if you pass in \"C4\" (note number 60) and the `octaveOffset` value is\n   * -2, the resulting MIDI note number will be 36.\n   *\n   * @param input {string|number} A string or number to extract the MIDI note number from.\n   * @param octaveOffset {number} An integer to offset the octave by\n   *\n   * @returns {number|false} A valid MIDI note number (0-127) or `false` if the input could not\n   * successfully be parsed to a note number.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static guessNoteNumber(input, octaveOffset) {\n\n    // Validate and, if necessary, assign default\n    octaveOffset = parseInt(octaveOffset) || 0;\n\n    let output = false;\n\n    // Check input type\n    if (Number.isInteger(input) && input >= 0 && input <= 127) {        // uint\n      output = parseInt(input);\n    } else if (parseInt(input) >= 0 && parseInt(input) <= 127) {        // float or uint as string\n      output = parseInt(input);\n    } else if (typeof input === \"string\" || input instanceof String) {  // string\n      try {\n        output = this.toNoteNumber(input.trim(), octaveOffset);\n      } catch (e) {\n        return false;\n      }\n    }\n\n    return output;\n\n  }\n\n  /**\n   * Returns an identifier string representing a note name (with optional accidental) followed by an\n   * octave number. The octave can be offset by using the `octaveOffset` parameter.\n   *\n   * @param {number} number The MIDI note number to convert to a note identifier\n   * @param {number} octaveOffset An offset to apply to the resulting octave\n   *\n   * @returns {string}\n   *\n   * @throws RangeError Invalid note number\n   * @throws RangeError Invalid octaveOffset value\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static toNoteIdentifier(number, octaveOffset) {\n\n    number = parseInt(number);\n    if (isNaN(number) || number < 0 || number > 127) throw new RangeError(\"Invalid note number\");\n\n    octaveOffset = octaveOffset == undefined ? 0 : parseInt(octaveOffset);\n    if (isNaN(octaveOffset)) throw new RangeError(\"Invalid octaveOffset value\");\n\n    const notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n    const octave = Math.floor(number / 12 - 1) + octaveOffset;\n    return notes[number % 12] + octave.toString();\n\n  }\n\n  /**\n   * Converts the `input` parameter to a valid [`Note`]{@link Note} object. The input usually is an\n   * unsigned integer (0-127) or a note identifier (`\"C4\"`, `\"G#5\"`, etc.). If the input is a\n   * [`Note`]{@link Note} object, it will be returned as is.\n   *\n   * If the input is a note number or identifier, it is possible to specify options by providing the\n   * `options` parameter.\n   *\n   * @param [input] {number|string|Note}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note}\n   *\n   * @throws TypeError The input could not be parsed to a note\n   *\n   * @since version 3.0.0\n   * @static\n   */\n  static buildNote(input, options= {}) {\n\n    options.octaveOffset = parseInt(options.octaveOffset) || 0;\n\n    // If it's already a Note, we're done\n    if (input instanceof Note) return input;\n\n    let number = this.guessNoteNumber(input, options.octaveOffset);\n\n    if (number === false) { // We use a comparison b/c the note can be 0 (which equates to false)\n      throw new TypeError(`The input could not be parsed as a note (${input})`);\n    }\n\n    // If we got here, we have a proper note number. Before creating the new note, we strip out\n    // 'octaveOffset' because it has already been factored in when calling guessNoteNumber().\n    options.octaveOffset = undefined;\n    return new Note(number, options);\n\n  }\n\n  /**\n   * Converts an input value, which can be an unsigned integer (0-127), a note identifier, a\n   * [`Note`]{@link Note}  object or an array of the previous types, to an array of\n   * [`Note`]{@link Note}  objects.\n   *\n   * [`Note`]{@link Note}  objects are returned as is. For note numbers and identifiers, a\n   * [`Note`]{@link Note} object is created with the options specified. An error will be thrown when\n   * encountering invalid input.\n   *\n   * Note: if both the `attack` and `rawAttack` options are specified, the later has priority. The\n   * same goes for `release` and `rawRelease`.\n   *\n   * @param [notes] {number|string|Note|number[]|string[]|Note[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the note should\n   * be explicitly stopped.\n   *\n   * @param {number} [options.attack=0.5] The note's attack velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawAttack` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.release=0.5] The note's release velocity as a float between 0 and 1. If\n   * you wish to use an integer between 0 and 127, use the `rawRelease` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawAttack=64] The note's attack velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `attack` and `rawAttack` are specified, the latter has precedence.\n   *\n   * @param {number} [options.rawRelease=64] The note's release velocity as an integer between 0 and\n   * 127. If you wish to use a float between 0 and 1, use the `release` option instead. If both\n   * `release` and `rawRelease` are specified, the latter has precedence.\n   *\n   * @param {number} [options.octaveOffset=0] An integer to offset the octave by. **This is only\n   * used when the input value is a note identifier.**\n   *\n   * @returns {Note[]}\n   *\n   * @throws TypeError An element could not be parsed as a note.\n   *\n   * @since 3.0.0\n   * @static\n   */\n  static buildNoteArray(notes, options = {}) {\n\n    let result = [];\n    if (!Array.isArray(notes)) notes = [notes];\n\n    notes.forEach(note => {\n      result.push(this.buildNote(note, options));\n    });\n\n    return result;\n\n  }\n\n  /**\n   * Returns a number between 0 and 1 representing the ratio of the input value divided by 127 (7\n   * bit). The returned value is restricted between 0 and 1 even if the input is greater than 127 or\n   * smaller than 0.\n   *\n   * Passing `Infinity` will return `1` and passing `-Infinity` will return `0`. Otherwise, when the\n   * input value cannot be converted to an integer, the method returns 0.\n   *\n   * @param value {number} A positive integer between 0 and 127 (inclusive)\n   * @returns {number} A number between 0 and 1 (inclusive)\n   * @static\n   */\n  static from7bitToFloat(value) {\n    if (value === Infinity) value = 127;\n    value = parseInt(value) || 0;\n    return Math.min(Math.max(value / 127, 0), 1);\n  }\n\n  /**\n   * Returns an integer between 0 and 127 which is the result of multiplying the input value by\n   * 127. The input value should be a number between 0 and 1 (inclusively). The returned value is\n   * restricted between 0 and 127 even if the input is greater than 1 or smaller than 0.\n   *\n   * Passing `Infinity` will return `127` and passing `-Infinity` will return `0`. Otherwise, when\n   * the input value cannot be converted to a number, the method returns 0.\n   *\n   * @param value {number} A positive float between 0 and 1 (inclusive)\n   * @returns {number} A number between 0 and 127 (inclusive)\n   * @static\n   */\n  static fromFloatTo7Bit(value) {\n    if (value === Infinity) value = 1;\n    value = parseFloat(value) || 0;\n    return Math.min(Math.max(Math.round(value * 127), 0), 127);\n  }\n\n  /**\n   * Combines and converts MSB and LSB values (0-127) to a float between 0 and 1. The returned value\n   * is within between 0 and 1 even if the result is greater than 1 or smaller than 0.\n   *\n   * @param msb {number} The most significant byte as a integer between 0 and 127.\n   * @param [lsb=0] {number} The least significant byte as a integer between 0 and 127.\n   * @returns {number} A float between 0 and 1.\n   */\n  static fromMsbLsbToFloat(msb, lsb = 0) {\n\n    if (WebMidi.validation) {\n      msb = Math.min(Math.max(parseInt(msb) || 0, 0), 127);\n      lsb = Math.min(Math.max(parseInt(lsb) || 0, 0), 127);\n    }\n\n    const value = ((msb << 7) + lsb) / 16383;\n    return Math.min(Math.max(value, 0), 1);\n\n  }\n\n  /**\n   * Extracts 7bit MSB and LSB values from the supplied float.\n   *\n   * @param value {number} A float between 0 and 1\n   * @returns {{lsb: number, msb: number}}\n   */\n  static fromFloatToMsbLsb(value) {\n\n    if (WebMidi.validation) {\n      value = Math.min(Math.max(parseFloat(value) || 0, 0), 1);\n    }\n\n    const multiplied = Math.round(value * 16383);\n\n    return {\n      msb: multiplied >> 7,\n      lsb: multiplied & 0x7F\n    };\n\n  }\n\n  /**\n   * Returns the supplied MIDI note number offset by the requested octave and semitone values. If\n   * the calculated value is less than 0, 0 will be returned. If the calculated value is more than\n   * 127, 127 will be returned. If an invalid offset value is supplied, 0 will be used.\n   *\n   * @param number {number} The MIDI note to offset as an integer between 0 and 127.\n   * @param octaveOffset {number} An integer to offset the note by (in octave)\n   * @param octaveOffset {number} An integer to offset the note by (in semitones)\n   * @returns {number} An integer between 0 and 127\n   *\n   * @throws {Error} Invalid note number\n   * @static\n   */\n  static offsetNumber(number, octaveOffset = 0, semitoneOffset = 0) {\n\n    if (WebMidi.validation) {\n      number = parseInt(number);\n      if (isNaN(number)) throw new Error(\"Invalid note number\");\n      octaveOffset = parseInt(octaveOffset) || 0;\n      semitoneOffset = parseInt(semitoneOffset) || 0;\n    }\n\n    return Math.min(Math.max(number + (octaveOffset * 12) + semitoneOffset, 0), 127);\n\n  }\n\n  /**\n   * Returns the name of the first property of the supplied object whose value is equal to the one\n   * supplied. If nothing is found, `undefined` is returned.\n   *\n   * @param object {object} The object to look for the property in.\n   * @param value {*} Any value that can be expected to be found in the object's properties.\n   * @returns {string|undefined} The name of the matching property or `undefined` if nothing is\n   * found.\n   * @static\n   */\n  static getPropertyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n  }\n\n  /**\n   * Returns the name of a control change message matching the specified number (0-127). Some valid\n   * control change numbers do not have a specific name or purpose assigned in the MIDI\n   * [spec](https://midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2).\n   * In these cases, the method returns `controllerXXX` (where XXX is the number).\n   *\n   * @param {number} number An integer (0-127) representing the control change message\n   * @returns {string|undefined} The matching control change name or `undefined` if no match was\n   * found.\n   *\n   * @static\n   */\n  static getCcNameByNumber(number) {\n    return Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES, number);\n  }\n\n  /**\n   * Returns the channel mode name matching the specified number. If no match is found, the function\n   * returns `false`.\n   *\n   * @param {number} number An integer representing the channel mode message (120-127)\n   * @returns {string|false} The name of the matching channel mode or `false` if no match could be\n   * found.\n   *\n   * @since 2.0.0\n   */\n  static getChannelModeByNumber(number) {\n\n    if ( !(number >= 120 && number <= 127) ) return false;\n\n    for (let cm in Enumerations.MIDI_CHANNEL_MODE_MESSAGES) {\n\n      if (\n        Enumerations.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm) &&\n        number === Enumerations.MIDI_CHANNEL_MODE_MESSAGES[cm]\n      ) {\n        return cm;\n      }\n\n    }\n\n    return false;\n\n  }\n\n  /**\n   * Indicates whether the execution environment is Node.js (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isNode() {\n    return typeof process !== \"undefined\" &&\n      process.versions != null &&\n      process.versions.node != null;\n  }\n\n  /**\n   * Indicates whether the execution environment is a browser (`true`) or not (`false`)\n   * @type {boolean}\n   */\n  static get isBrowser() {\n    return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are\n * provided by an [`Output`](Output) port which, itself, is made available by a device. The\n * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `OutputChannel` objects can be found inside the parent output's\n * [`channels`]{@link Output#channels} property.\n *\n * @param {Output} output The [`Output`](Output) this channel belongs to.\n * @param {number} number The MIDI channel number (`1` - `16`).\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class OutputChannel extends EventEmitter {\n\n  /**\n   * Creates an `OutputChannel` object.\n   *\n   * @param {Output} output The [`Output`](Output) this channel belongs to.\n   * @param {number} number The MIDI channel number (`1` - `16`).\n   */\n  constructor(output, number) {\n\n    super();\n\n    /**\n     * @type {Output}\n     * @private\n     */\n    this._output = output;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Unlinks the MIDI subsystem, removes all listeners attached to the channel and nulls the channel\n   * number. This method is mostly for internal use. It has not been prefixed with an underscore\n   * since it is called by other objects such as the `Output` object.\n   *\n   * @private\n   */\n  destroy() {\n    this._output = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this.removeListener();\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8-bit unsigned integers (`0` - `225`),\n   * a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} A `Message` object, an array of 8-bit unsigned\n   * integers or a `Uint8Array` object (not available in Node.js) containing the message bytes.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @throws {RangeError} Data bytes must be integers between 0 and 255.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  send(message, options = {time: 0}) {\n    this.output.send(message, options);\n    return this;\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message at the scheduled time. This is a key-specific\n   * aftertouch. For a channel-wide aftertouch message, use\n   * [`sendChannelAftertouch()`]{@link #sendChannelAftertouch}.\n   *\n   * @param target {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * When using a note identifier, the octave value will be offset by the local\n   * [`octaveOffset`](#octaveOffset) and by\n   * [`Output.octaveOffset`](Output#octaveOffset) and [`WebMidi.octaveOffset`](WebMidi#octaveOffset)\n   * (if those values are not `0`). When using a key number, `octaveOffset` values are ignored.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure is defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid key aftertouch value.\n   */\n  sendKeyAftertouch(target, pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy support\n      if (options.useRawValue) options.rawValue = options.useRawValue;\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid key aftertouch value.\");\n      }\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\"Key aftertouch raw value must be an integer between 0 and 127.\");\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Key aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    // Normalize pressure to integer\n    if (!options.rawValue) pressure = Utilities.fromFloatTo7Bit(pressure);\n\n    // Plot total offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    // Make sure we are dealing with an array\n    if (!Array.isArray(target)) target = [target];\n\n    Utilities.buildNoteArray(target).forEach(n => {\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.keyaftertouch << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          pressure\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **control change** message to the channel at the scheduled time. The control\n   * change message to send can be specified numerically (`0` to `127`) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`databuttonincrement`          |\n   * | 97     |`databuttondecrement`          |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * As you can see above, not all control change message have a matching name. This does not mean\n   * you cannot use the others. It simply means you will need to use their number\n   * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are\n   * usually reserved for *channel mode* messages. See\n   * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.\n   *\n   * To view a detailed list of all available **control change** messages, please consult \"Table 3 -\n   * Control Change Messages\" from the [MIDI Messages](\n   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)\n   * specification.\n   *\n   * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1\n   * (`modulationwheelcoarse`) can be accompanied by a second control change message for\n   * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB\n   * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the\n   * second parameter.\n   *\n   * @param {number|string} controller The MIDI controller name or number (`0` - `127`).\n   *\n   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array\n   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second\n   * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first\n   * controller)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   * @throws {TypeError} The value array must have a length of 2.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   * @since 3.0.0\n   */\n  sendControlChange(controller, value, options = {}) {\n\n    if (typeof controller === \"string\") {\n      controller = Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[controller];\n    }\n\n    if (!Array.isArray(value)) value = [value];\n\n    if (WebMidi.validation) {\n\n      if (controller === undefined) {\n        throw new TypeError(\n          \"Control change must be identified with a valid name or an integer between 0 and 127.\"\n        );\n      }\n\n      if (!Number.isInteger(controller) || !(controller >= 0 && controller <= 127)) {\n        throw new TypeError(\"Control change number must be an integer between 0 and 127.\");\n      }\n\n      value = value.map(item => {\n        const output = Math.min(Math.max(parseInt(item), 0), 127);\n        if (isNaN(output)) throw new TypeError(\"Values must be integers between 0 and 127\");\n        return output;\n      });\n\n      if (value.length === 2 && controller >= 32) {\n        throw new TypeError(\"To use a value array, the controller must be between 0 and 31\");\n      }\n\n    }\n\n    value.forEach((item, index) => {\n\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n          controller + (index * 32),\n          value[index]\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Selects a MIDI non-registered parameter so it is affected by upcoming data entry, data\n   * increment and data decrement messages.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes that identify\n   * the registered parameter. The NRPN MSB (99 or 0x63) is a position 0. The NRPN LSB (98 or 0x62)\n   * is at position 1.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectNonRegisteredParameter(parameter, options = {}) {\n\n    // parameter[0] = Math.floor(parameter[0]);\n    // if (!(parameter[0] >= 0 && parameter[0] <= 127)) {\n    //   throw new RangeError(\"The control63 value must be between 0 and 127.\");\n    // }\n    //\n    // parameter[1] = Math.floor(parameter[1]);\n    // if (!(parameter[1] >= 0 && parameter[1] <= 127)) {\n    //   throw new RangeError(\"The control62 value must be between 0 and 127.\");\n    // }\n\n    this.sendControlChange(0x63, parameter[0], options);\n    this.sendControlChange(0x62, parameter[1], options);\n\n    return this;\n\n  }\n\n  /**\n   * Deselects the currently active MIDI registered parameter so it is no longer affected by data\n   * entry, data increment and data decrement messages.\n   *\n   * Current best practice recommends doing that after each call to\n   * [_setCurrentParameter()]{@link #_setCurrentParameter}.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Deselects the currently active MIDI non-registered parameter so it is no longer affected by\n   * data entry, data increment and data decrement messages.\n   *\n   * @private\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _deselectNonRegisteredParameter(options = {}) {\n    this.sendControlChange(0x65, 0x7F, options);\n    this.sendControlChange(0x64, 0x7F, options);\n    return this;\n  }\n\n  /**\n   * Selects a MIDI registered parameter so it is affected by upcoming data entry, data increment\n   * and data decrement messages.\n   *\n   * @private\n   *\n   * @param parameter {number[]} A two-position array of integers specifying the two control bytes\n   * (0x65, 0x64) that identify the registered parameter. The integers must be between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _selectRegisteredParameter(parameter, options = {}) {\n    this.sendControlChange(0x65, parameter[0], options);\n    this.sendControlChange(0x64, parameter[1], options);\n    return this;\n  }\n\n  /**\n   * Sets the value of the currently selected MIDI registered parameter.\n   *\n   * @private\n   *\n   * @param data {number|number[]}\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time] If `time` is a string prefixed with `\"+\"` and followed by\n   * a number, the message will be delayed by that many milliseconds. If the value is a number, the\n   * operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  _setCurrentParameter(data, options = {}) {\n\n    data = [].concat(data);\n\n    // MSB\n    // data[0] = parseInt(data[0]);\n    // if (!isNaN(data[0]) && data[0] >= 0 && data[0] <= 127) {\n    this.sendControlChange(0x06, data[0], options);\n    // } else {\n    //   throw new RangeError(\"The msb value must be between 0 and 127.\");\n    // }\n\n    if (data.length < 2) return this;\n\n    // LSB\n    // data[1] = parseInt(data[1]);\n\n    // if (!isNaN(data[1]) && data[1] >= 0 && data[1] <= 127) {\n    this.sendControlChange(0x26, data[1], options);\n    // } else {\n    //   throw new RangeError(\"The lsb value must be between 0 and 127.\");\n    // }\n\n    return this;\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.MIDI_REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x61, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this function:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified registered parameter is invalid.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (!Array.isArray(parameter)) parameter = Enumerations.MIDI_REGISTERED_PARAMETERS[parameter];\n\n    if (WebMidi.validation) {\n\n      if (parameter === undefined) {\n        throw new TypeError(\"The specified registered parameter is invalid.\");\n      }\n\n      let valid = false;\n\n      Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach(p => {\n        if (\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][0] === parameter[0] &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[p][1] === parameter[1]\n        ) {\n          valid = true;\n        }\n      });\n\n      if (!valid) throw new TypeError(\"The specified registered parameter is invalid.\");\n\n    }\n\n    this._selectRegisteredParameter(parameter, options);\n    this.sendControlChange(0x60, 0, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Plays a note or an array of notes on the channel. The first parameter is the note to play. It\n   * can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes. If a\n   * `duration` is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message\n   * to end the note after said duration. If no `duration` is set, the note will simply play until\n   * a matching **note off** message is sent with [`stopNote()`]{@link OutputChannel#stopNote} or\n   * [`sendNoteOff()`]{@link OutputChannel#sendNoteOff}.\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`), a [`Note`]{@link Note} object or an array of the previous types. When using a\n   * note identifier, the octave range must be between `-1` and `9`. The lowest note is `C-1` (MIDI\n   * note number `0`) and the highest note is `G9` (MIDI note number `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number} [options.duration] A positive decimal number larger than `0` representing the\n   * number of milliseconds to wait before sending a **note off** message. If invalid or left\n   * undefined, only a **note on** message will be sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  playNote(note, options = {}) {\n\n    // Send note on and, optionally, note off message (if duration is a positive number)\n    this.sendNoteOn(note, options);\n\n    // https://stackoverflow.com/questions/600763#answer-601877\n    if (options.duration > 0 && isFinite(String(options.duration).trim() || NaN)) {\n\n      let noteOffOptions = {\n        time: (Utilities.toTimestamp(options.time) || WebMidi.time) + options.duration,\n        release: options.release,\n        rawRelease: options.rawRelease,\n      };\n\n      this.sendNoteOff(note, noteOffOptions);\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified notes on the channel. The first parameter is the\n   * note. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note name, followed by the octave (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the release velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note name, octave\n   * range must be between -1 and 9. The lowest note is C-1 (MIDI note number 0) and the highest\n   * note is G9 (MIDI note number 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOff(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (\n        options.rawRelease != undefined &&\n        !(options.rawRelease >= 0 && options.rawRelease <= 127)\n      ) {\n        throw new RangeError(\"The 'rawRelease' option must be an integer between 0 and 127\");\n      }\n\n      if (options.release != undefined && !(options.release >= 0 && options.release <= 1)) {\n        throw new RangeError(\"The 'release' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawRelease = options.velocity;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.\");\n      }\n      if (options.velocity) {\n        options.release = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawRelease != undefined) {\n      nVelocity = options.rawRelease;\n    } else {\n      if (!isNaN(options.release)) nVelocity = Math.round(options.release * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawRelease: parseInt(nVelocity)}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.noteoff << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawRelease,\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number. The first parameter is the\n   * note to stop. It can be a single value or an array of the following valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options = {}) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Sends a **note on** message for the specified note(s) on the channel. The first parameter is\n   * the note. It can be a single value or an array of the following valid values:\n   *\n   *  - A [`Note`]{@link Note} object\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *\n   *  When passing a [`Note`]{@link Note}object or a note name, the `octaveOffset` will be applied.\n   *  This is not the case when using a note number. In this case, we assume you know exactly which\n   *  MIDI note number should be sent out.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the attack velocity defined in the\n   * [`Note`]{@link Note} objects has precedence over the one specified via the method's `options`\n   * parameter. Also, the `duration` is ignored. If you want to also send a **note off** message,\n   * use the [`playNote()`]{@link #playNote} method instead.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (options.rawAttack != undefined && !(options.rawAttack >= 0 && options.rawAttack <= 127)) {\n        throw new RangeError(\"The 'rawAttack' option must be an integer between 0 and 127\");\n      }\n\n      if (options.attack != undefined && !(options.attack >= 0 && options.attack <= 1)) {\n        throw new RangeError(\"The 'attack' option must be an number between 0 and 1\");\n      }\n\n      // Legacy compatibility warnings\n      if (options.rawVelocity) {\n        options.rawAttack = options.velocity;\n        options.rawRelease = options.release;\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.\");\n      }\n      if (options.velocity) {\n        options.attack = options.velocity;\n        console.warn(\"The 'velocity' option is deprecated. Use 'attack' instead.\");\n      }\n\n    }\n\n    let nVelocity = 64;\n\n    if (options.rawAttack != undefined) {\n      nVelocity = options.rawAttack;\n    } else {\n      if (!isNaN(options.attack)) nVelocity = Math.round(options.attack * 127);\n    }\n\n    // Plot total octave offset\n    const offset = WebMidi.octaveOffset + this.output.octaveOffset + this.octaveOffset;\n\n    Utilities.buildNoteArray(note, {rawAttack: nVelocity}).forEach(n => {\n      this.send(\n        [\n          (Enumerations.MIDI_CHANNEL_MESSAGES.noteon << 4) + (this.number - 1),\n          n.getOffsetNumber(offset),\n          n.rawAttack\n        ],\n        {time: Utilities.toTimestamp(options.time)}\n      );\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message. The channel mode message to send can be specified\n   * numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * **Note**: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should be noted that, per the MIDI specification, only `localcontrol` and `monomodeon` may\n   * require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between `120` and `127`) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between `0` - `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendChannelMode(command, value = 0, options = {}) {\n\n    // Normalize command to integer\n    if (typeof command === \"string\") command = Enumerations.MIDI_CHANNEL_MODE_MESSAGES[command];\n\n    if (WebMidi.validation) {\n\n      if (command === undefined) {\n        throw new TypeError(\"Invalid channel mode message name or number.\");\n      }\n\n      if (isNaN(command) || !(command >= 120 && command <= 127)) {\n        throw new TypeError(\"Invalid channel mode message number.\");\n      }\n\n      if (isNaN(parseInt(value)) || value < 0 || value > 127) {\n        throw new RangeError(\"Value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.controlchange << 4) + (this.number - 1),\n        command,\n        value\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to `\"on\"` or `\"off\"`. MIDI's OMNI mode causes the instrument to respond to\n   * messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state=true] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendOmniMode(state, options = {}) {\n\n    if (state === undefined || state) {\n      this.sendChannelMode(\"omnimodeon\", 0, options);\n    } else {\n      this.sendChannelMode(\"omnimodeoff\", 0, options);\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message. For key-specific aftertouch, you should instead\n   * use [`sendKeyAftertouch()`]{@link #sendKeyAftertouch}.\n   *\n   * @param [pressure] {number} The pressure level (between `0` and `1`). If the `rawValue` option\n   * is set to `true`, the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   * @throws RangeError Invalid channel aftertouch value.\n   */\n  sendChannelAftertouch(pressure, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (isNaN(parseFloat(pressure))) {\n        throw new RangeError(\"Invalid channel aftertouch value.\");\n      }\n\n      if (options.rawValue) {\n        if (!(pressure >= 0 && pressure <= 127 && Number.isInteger(pressure))) {\n          throw new RangeError(\n            \"Channel aftertouch raw value must be an integer between 0 and 127.\")\n          ;\n        }\n      } else {\n        if (!(pressure >= 0 && pressure <= 1)) {\n          throw new RangeError(\"Channel aftertouch value must be a float between 0 and 1.\");\n        }\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.channelaftertouch << 4) + (this.number - 1),\n        Math.round(pressure * 127)\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **master tuning** message. The value is decimal and must be larger than -65 semitones\n   * and smaller than 64 semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendMasterTuning(value, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n\n    value = parseFloat(value) || 0.0;\n\n    if (WebMidi.validation) {\n\n      if (!(value > -65 && value < 64)) {\n        throw new RangeError(\n          \"The value must be a decimal number larger than -65 and smaller than 64.\"\n        );\n      }\n\n    }\n\n    let coarse = Math.floor(value) + 64;\n    let fine = value - Math.floor(value);\n\n    // Calculate MSB and LSB for fine adjustment (14bit resolution)\n    fine = Math.round((fine + 1) / 2 * 16383);\n    let msb = (fine >> 7) & 0x7F;\n    let lsb = fine & 0x7F;\n\n    this.sendRpnValue(\"channelcoarsetuning\", coarse, options);\n    this.sendRpnValue(\"channelfinetuning\", [msb, lsb], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to adjust the depth of the modulation wheel's range.\n   * The range can be specified with the `semitones` parameter, the `cents` parameter or by\n   * specifying both parameters at the same time.\n   *\n   * @param {number} semitones The desired adjustment value in semitones (integer between 0 and\n   * 127).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    // @todo allow passing value as msb/lsb pair (the same as pitch bend range)\n    // when passing a single argument, semitones and cents shoud be combined\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!(cents == undefined) && (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127))) {\n        throw new RangeError(\"If specified, the cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    // Default value for cents\n    if (!(cents >= 0 && cents <= 127)) cents = 0;\n\n    this.sendRpnValue(\"modulationrange\", [semitones, cents], options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter (NRPN) to the specified value. The NRPN is selected by passing\n   * in a two-position array specifying the values of the two control bytes. The value is specified\n   * by passing in a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (1, 8). Therefore, to set the **vibrato rate** value to **123** you\n   * would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (2, 63), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was 10, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].channels[0].sendNrpnValue([2, 63], [0, 10]);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param nrpn {number[]} A two-position array specifying the two control bytes (0x63,\n   * 0x62) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendNrpnValue(nrpn, data, options = {}) {\n\n    data = [].concat(data);\n\n    if (WebMidi.validation) {\n\n      if (!Array.isArray(nrpn) || !Number.isInteger(nrpn[0]) || !Number.isInteger(nrpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(nrpn[0] >= 0 && nrpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the NRPN must be between 0 and 127.\");\n      }\n\n      if (!(nrpn[1] >= 0 && nrpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the NRPN must be between 0 and 127.\");\n      }\n\n      data.forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the NRPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectNonRegisteredParameter(nrpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectNonRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message at the scheduled time. The resulting bend is relative to\n   * the pitch bend range that has been defined. The range can be set with\n   * [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of -1 will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} [value] The intensity of the bend (between -1.0 and 1.0). A value of\n   * zero means no bend. If the `rawValue` option is set to `true`, the intensity of the bend can be\n   * defined by either using a single integer between 0 and 127 (MSB) or an array of two integers\n   * between 0 and 127 representing, respectively, the MSB (most significant byte) and the LSB\n   * (least significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value\n   * lower than `64` bends downwards while a value higher than `64` bends upwards. The LSB is\n   * expressed in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between -1.0 and 1.0 (default) or as raw integer between 0 and 127 (or\n   * an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBend(value, options = {}) {\n\n    // @todo standardize the way msb/lsb are passed in\n\n    if (WebMidi.validation) {\n\n      if (options.rawValue && Array.isArray(value)) {\n\n        if (!(value[0] >= 0 && value[0] <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n        if (!(value[1] >= 0 && value[1] <= 127)) {\n          throw new RangeError(\"The pitch bend LSB must be an integer between 0 and 127.\");\n        }\n\n      } else if (options.rawValue && !Array.isArray(value)) {\n\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      } else {\n\n        if (isNaN(value) || value === null) {\n          throw new RangeError(\"Invalid pitch bend value.\");\n        }\n\n        if (!(value >= -1 && value <= 1)) {\n          throw new RangeError(\"The pitch bend MSB must be an integer between 0 and 127.\");\n        }\n\n      }\n\n    }\n\n    let msb = 0;\n    let lsb = 0;\n\n    // Calculate MSB and LSB for both scenarios\n    if (options.rawValue && Array.isArray(value)) {\n      msb = value[0];\n      lsb = value[1];\n    } else if (options.rawValue && !Array.isArray(value)) {\n      msb = value;\n    } else {\n      const result = Utilities.fromFloatToMsbLsb((value + 1) / 2); // b/c value is -1 to 1\n      msb = result.msb;\n      lsb = result.lsb;\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.pitchbend << 4) + (this.number - 1),\n        lsb,\n        msb\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **pitch bend range** message at the scheduled time to adjust the range used by the\n   * pitch bend lever. The range is specified by using the `semitones` and `cents` parameters. For\n   * example, setting the `semitones` parameter to `12` means that the pitch bend range will be 12\n   * semitones above and below the nominal pitch.\n   *\n   * @param semitones {number} The desired adjustment value in semitones (between 0 and 127). While\n   * nothing imposes that in the specification, it is very common for manufacturers to limit the\n   * range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The semitones value must be an integer between 0 and 127.\n   * @throws {RangeError} The cents value must be an integer between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPitchBendRange(semitones, cents, options = {}) {\n\n    // @todo use single value as parameter or pair of msb/lsb\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(semitones) || !(semitones >= 0 && semitones <= 127)) {\n        throw new RangeError(\"The semitones value must be an integer between 0 and 127.\");\n      }\n\n      if (!Number.isInteger(cents) || !(cents >= 0 && cents <= 127)) {\n        throw new RangeError(\"The cents value must be an integer between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"pitchbendrange\", [semitones, cents], options);\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message at the scheduled time.\n   *\n   * @param [program=1] {number} The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   *\n   */\n  sendProgramChange(program, options = {}) {\n\n    program = parseInt(program) || 0;\n\n    if (WebMidi.validation) {\n\n      if (!(program >= 0 && program <= 127)) {\n        throw new RangeError(\"The program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.send(\n      [\n        (Enumerations.MIDI_CHANNEL_MESSAGES.programchange << 4) + (this.number - 1),\n        program\n      ],\n      {time: Utilities.toTimestamp(options.time)}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from 0 to 127.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the **Tuning Program** and **Tuning Bank** parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param rpn {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendRpnValue(rpn, data, options = {}) {\n\n    if (!Array.isArray(rpn)) rpn = Enumerations.MIDI_REGISTERED_PARAMETERS[rpn];\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(rpn[0]) || !Number.isInteger(rpn[1])) {\n        throw new TypeError(\"The specified NRPN is invalid.\");\n      }\n\n      if (!(rpn[0] >= 0 && rpn[0] <= 127)) {\n        throw new RangeError(\"The first byte of the RPN must be between 0 and 127.\");\n      }\n\n      if (!(rpn[1] >= 0 && rpn[1] <= 127)) {\n        throw new RangeError(\"The second byte of the RPN must be between 0 and 127.\");\n      }\n\n      [].concat(data).forEach(value => {\n        if (!(value >= 0 && value <= 127)) {\n          throw new RangeError(\"The data bytes of the RPN must be between 0 and 127.\");\n        }\n      });\n\n    }\n\n    this._selectRegisteredParameter(rpn, options);\n    this._setCurrentParameter(data, options);\n    this._deselectRegisteredParameter(options);\n\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningBank(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning bank number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningbank\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (WebMidi.validation) {\n\n      if (!Number.isInteger(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The tuning program number must be between 0 and 127.\");\n      }\n\n    }\n\n    this.sendRpnValue(\"tuningprogram\", value, options);\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendLocalControl(state, options = {}) {\n    if (state) {\n      return this.sendChannelMode(\"localcontrol\", 127, options);\n    } else {\n      return this.sendChannelMode(\"localcontrol\", 0, options);\n    }\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`sendAllSoundOff()`]{@link #sendAllSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllNotesOff(options = {}) {\n    return this.sendChannelMode(\"allnotesoff\", 0, options);\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendAllSoundOff(options = {}) {\n    return this.sendChannelMode(\"allsoundoff\", 0, options);\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendResetAllControllers(options = {}) {\n    return this.sendChannelMode(\"resetallcontrollers\", 0, options);\n  }\n\n  /**\n   * Sets the polyphonic mode. In `\"poly\"` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `\"mono\"` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param {string} [mode=poly] The mode to use: `\"mono\"` or `\"poly\"`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.\n   */\n  sendPolyphonicMode(mode, options = {}) {\n    if (mode === \"mono\") {\n      return this.sendChannelMode(\"monomodeon\", 0, options);\n    } else {\n      return this.sendChannelMode(\"polymodeon\", 0, options);\n    }\n  }\n\n  /**\n   * An integer to offset the reported octave of outgoing note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) and with the parent value defined in\n   * [`Output.octaveOffset`]{@link Output#octaveOffset}.\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The parent [`Output`]{@link Output} this channel belongs to.\n   * @type {Output}\n   * @since 3.0\n   */\n  get output() {\n    return this._output;\n  }\n\n  /**\n   * This channel's MIDI number (`1` - `16`).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {OutputChannel} from \"./OutputChannel.js\";\nimport {Enumerations, Message, WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\n\n/**\n * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).\n * A port is made available by a MIDI device. A MIDI device can advertise several input and output\n * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)\n * property.\n *\n * The `Output` object is automatically instantiated by the library according to the host's MIDI\n * subsystem and should not be directly instantiated.\n *\n * You can access all available `Output` objects by referring to the\n * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as\n * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or\n * [`WebMidi.getOutputById()`](WebMidi#getOutputById).\n *\n * @fires Output#opened\n * @fires Output#disconnected\n * @fires Output#closed\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Output extends EventEmitter {\n\n  /**\n   * Creates an `Output` object.\n   *\n   * @param {MIDIOutput} midiOutput [`MIDIOutput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIOutput)\n   * object as provided by the MIDI subsystem.\n   */\n  constructor(midiOutput) {\n\n    super();\n\n    /**\n     * A reference to the `MIDIOutput` object\n     * @type {MIDIOutput}\n     * @private\n     */\n    this._midiOutput = midiOutput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`OutputChannel`]{@link OutputChannel} objects available provided by\n     * this `Output`. The channels are numbered 1 through 16.\n     *\n     * @type {OutputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new OutputChannel(this, i);\n\n    this._midiOutput.onstatechange = this._onStateChange.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Output`. All listeners are removed, all channels are destroyed and the MIDI\n   * subsystem is unlinked.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._midiOutput.onstatechange = null;\n    await this.close();\n    this._midiOutput = null;\n  }\n\n  /**\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the {@link Output} has been opened by calling the\n       * [open()]{@link Output#open} method.\n       *\n       * @event Output#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"opened\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was opened\n       */\n      event.type = \"opened\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the {@link Output} has been closed by calling the\n       * [close()]{@link Output#close} method.\n       *\n       * @event Output#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"closed\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {Output} port The port that was closed\n       */\n      event.type = \"closed\";\n      event.target = this;\n      event.port = event.target; // for consistency\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the {@link Output} becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Output#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp0 when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `\"disconnected\"`\n       * @property {Output} target The object to which the listener was originally added (`Output`).\n       * @property {object} port Object with properties describing the {@link Output} that was\n       * disconnected. This is not the actual `Output` as it is no longer available.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught:\", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Opens the output for usage. When the library is enabled, all ports are automatically opened.\n   * This method is only useful for ports that have been manually closed.\n   *\n   * @returns {Promise<Output>} The promise is fulfilled with the `Output` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when calling `send()` on the `MIDIOutput`.\n    // We do it explicitly so that 'connected' events are dispatched immediately and we are ready to\n    // send.\n    try {\n      await this._midiOutput.open();\n      return Promise.resolve(this);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n  }\n\n  /**\n   * Closes the output connection. When an output is closed, it cannot be used to send MIDI messages\n   * until the output is opened again by calling [`open()`]{@link #open}. You can check\n   * the connection status by looking at the [`connection`]{@link #connection} property.\n   *\n   * @returns {Promise<void>}\n   */\n  async close() {\n\n    // We close the port. This triggers a 'statechange' event which we listen to to re-trigger the\n    // 'closed' event.\n    if (this._midiOutput) {\n      await this._midiOutput.close();\n    } else {\n      await Promise.resolve();\n    }\n\n  }\n\n  /**\n   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be\n   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a\n   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}\n   * object or a [`Message`](Message) object.\n   *\n   * It is usually not necessary to use this method directly as you can use one of the simpler\n   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),\n   * [`sendControlChange()`](#sendControlChange), etc.\n   *\n   * Details on the format of MIDI messages are available in the summary of\n   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}\n   * from the MIDI Manufacturers Association.\n   *\n   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`\n   * object (not available in Node.js) containing the message bytes or a `Message` object.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @license Apache-2.0\n   */\n  send(message, options = {time: 0}, legacy = 0) {\n\n    // If a Message object is passed in we extract the message data (the jzz plugin used on Node.js\n    // does not support using Uint8Array).\n    if (message instanceof Message) {\n      message = Utilities.isNode ? message.data : message.rawData;\n    }\n\n    // If the data is a Uint8Array and we are on Node, we must convert it to array so it works with\n    // the jzz module.\n    if (message instanceof Uint8Array && Utilities.isNode) {\n      message = Array.from(message);\n    }\n\n    // Validation\n    if (WebMidi.validation) {\n\n      // If message is neither an array nor a Uint8Array, then we are in legacy mode\n      if (!Array.isArray(message) && !(message instanceof Uint8Array)) {\n        message = [message];\n        if (Array.isArray(options)) message = message.concat(options);\n        options = isNaN(legacy) ? {time: 0} : {time: legacy};\n      }\n\n      if (!(parseInt(message[0]) >= 128 && parseInt(message[0]) <= 255)) {\n        throw new RangeError(\"The first byte (status) must be an integer between 128 and 255.\");\n      }\n\n      message.slice(1).forEach(value => {\n        value = parseInt(value);\n        if (!(value >= 0 && value <= 255)) {\n          throw new RangeError(\"Data bytes must be integers between 0 and 255.\");\n        }\n      });\n\n      if (!options) options = {time: 0};\n\n    }\n\n    // Send message and return `Output` for chaining\n    this._midiOutput.send(message, Utilities.toTimestamp(options.time));\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI [**system exclusive**]{@link\n    * https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages}\n   * (*sysex*) message. There are two categories of system exclusive messages: manufacturer-specific\n   * messages and universal messages. Universal messages are further divided into three subtypes:\n   *\n   *   * Universal non-commercial (for research and testing): `0x7D`\n   *   * Universal non-realtime: `0x7E`\n   *   * Universal realtime: `0x7F`\n   *\n   * The method's first parameter (`identification`) identifies the type of message. If the value of\n   * `identification` is `0x7D` (125), `0x7E` (126) or `0x7F` (127), the message will be identified\n   * as a **universal non-commercial**, **universal non-realtime** or **universal realtime** message\n   * (respectively).\n   *\n   * If the `identification` value is an array or an integer between 0 and 124, it will be used to\n   * identify the manufacturer targeted by the message. The *MIDI Manufacturers Association*\n   * maintains a full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * The `data` parameter should only contain the data of the message. When sending out the actual\n   * MIDI message, WEBMIDI.js will automatically prepend the data with the **sysex byte** (`0xF0`)\n   * and the identification byte(s). It will also automatically terminate the message with the\n   * **sysex end byte** (`0xF7`).\n   *\n   * To use the `sendSysex()` method, system exclusive message support must have been enabled. To\n   * do so, you must set the `sysex` option to `true` when calling\n   * [`WebMidi.enable()`]{@link WebMidi#enable}:\n   *\n   * ```js\n   * WebMidi.enable({sysex: true})\n   *   .then(() => console.log(\"System exclusive messages are enabled\");\n   * ```\n   *\n   * ##### Examples of manufacturer-specific system exclusive messages\n   *\n   * If you want to send a sysex message to a Korg device connected to the first output, you would\n   * use the following code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x42, [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   * In this case `0x42` is the ID of the manufacturer (Korg) and `[0x1, 0x2, 0x3, 0x4, 0x5]` is the\n   * data being sent.\n   *\n   * The parameters can be specified using any number notation (decimal, hex, binary, etc.).\n   * Therefore, the code above is equivalent to this code:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(66, [1, 2, 3, 4, 5]);\n   * ```\n   *\n   * Some manufacturers are identified using 3 bytes. In this case, you would use a 3-position array\n   * as the first parameter. For example, to send the same sysex message to a\n   * *Native Instruments* device:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex([0x00, 0x21, 0x09], [0x1, 0x2, 0x3, 0x4, 0x5]);\n   * ```\n   *\n   * There is no limit for the length of the data array. However, it is generally suggested to keep\n   * system exclusive messages to 64Kb or less.\n   *\n   * ##### Example of universal system exclusive message\n   *\n   * If you want to send a universal sysex message, simply assign the correct identification number\n   * in the first parameter. Number `0x7D` (125) is for non-commercial, `0x7E` (126) is for\n   * non-realtime and `0x7F` (127) is for realtime.\n   *\n   * So, for example, if you wanted to send an identity request non-realtime message (`0x7E`), you\n   * could use the following:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendSysex(0x7E, [0x7F, 0x06, 0x01]);\n   * ```\n   *\n   * For more details on the format of universal messages, consult the list of\n   * [universal sysex messages](https://www.midi.org/specifications-old/item/table-4-universal-system-exclusive-messages).\n   *\n   * @param {number|number[]} identification An unsigned integer or an array of three unsigned\n   * integers between `0` and `127` that either identify the manufacturer or sets the message to be\n   * a **universal non-commercial message** (`0x7D`), a **universal non-realtime message** (`0x7E`)\n   * or a **universal realtime message** (`0x7F`). The *MIDI Manufacturers Association* maintains a\n   * full list of\n   * [Manufacturer ID Numbers](https://www.midi.org/specifications-old/item/manufacturer-id-numbers).\n   *\n   * @param {number[]|Uint8Array} [data] A `Uint8Array` or an array of unsigned integers between `0`\n   * and `127`. This is the data you wish to transfer.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {DOMException} Failed to execute 'send' on 'MIDIOutput': System exclusive message is\n   * not allowed.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index x is greater\n   * than 0xFF.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendSysex(identification, data= [], options = {}) {\n\n    identification = [].concat(identification);\n\n    // Check if data is Uint8Array\n    if (data instanceof Uint8Array) {\n      const merged = new Uint8Array(1 + identification.length + data.length + 1);\n      merged[0] = Enumerations.MIDI_SYSTEM_MESSAGES.sysex;\n      merged.set(Uint8Array.from(identification), 1);\n      merged.set(data, 1 + identification.length);\n      merged[merged.length - 1] = Enumerations.MIDI_SYSTEM_MESSAGES.sysexend;\n      this.send(merged, {time: options.time});\n    } else {\n      const merged = identification.concat(data, Enumerations.MIDI_SYSTEM_MESSAGES.sysexend);\n      this.send([Enumerations.MIDI_SYSTEM_MESSAGES.sysex].concat(merged), {time: options.time});\n    }\n\n    return this;\n\n  };\n\n  /**\n   * Clears all messages that have been queued but not yet delivered.\n   *\n   * **Warning**: this method has been defined in the specification but has not been implemented\n   * yet. As soon as browsers implement it, it will work.\n   *\n   * You can check out the current status of this feature for Chromium (Chrome) here:\n   * https://bugs.chromium.org/p/chromium/issues/detail?id=471798\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  clear() {\n\n    if (this._midiOutput.clear) {\n\n      this._midiOutput.clear();\n\n    } else {\n\n      if (WebMidi.validation) {\n        console.warn(\n          \"The 'clear()' method has not yet been implemented in your environment.\"\n        );\n      }\n\n    }\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **timecode quarter frame** message. Please note that no processing is being done\n   * on the data. It is up to the developer to format the data according to the\n   * [MIDI Timecode](https://en.wikipedia.org/wiki/MIDI_timecode) format.\n   *\n   * @param value {number} The quarter frame message content (integer between 0 and 127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendTimecodeQuarterFrame(value, options = {}) {\n\n    if (WebMidi.validation) {\n      value = parseInt(value);\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The value must be an integer between 0 and 127.\");\n      }\n    }\n\n    this.send(\n      [\n        Enumerations.MIDI_SYSTEM_MESSAGES.timecode,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **song position** MIDI message. The value is expressed in MIDI beats (between `0` and\n   * `16383`) which are 16th note. Position `0` is always the start of the song.\n   *\n   * @param {number} [value=0] The MIDI beat to cue to (integer between `0` and `16383`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongPosition(value = 0, options = {}) {\n\n    // @todo allow passing in 2-entries array for msb/lsb\n\n    value = Math.floor(value) || 0;\n\n    var msb = (value >> 7) & 0x7F;\n    var lsb = value & 0x7F;\n\n    this.send(\n      [\n        Enumerations.MIDI_SYSTEM_MESSAGES.songposition,\n        msb,\n        lsb\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **song select** MIDI message.\n   *\n   * @param {number} [value=0] The number of the song to select (integer between `0` and `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws The song number must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendSongSelect(value = 0, options = {}) {\n\n    if (WebMidi.validation) {\n\n      value = parseInt(value);\n\n      if (isNaN(value) || !(value >= 0 && value <= 127)) {\n        throw new RangeError(\"The program value must be between 0 and 127\");\n      }\n\n    }\n\n    this.send(\n      [\n        Enumerations.MIDI_SYSTEM_MESSAGES.songselect,\n        value\n      ],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **tune request** real-time message.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuneRequest(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.tunerequest],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **clock** real-time message. According to the standard, there are 24 MIDI clocks\n   * for every quarter note.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendClock(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.clock],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **start** real-time message. A MIDI Start message starts the playback of the current\n   * song at beat 0. To start playback elsewhere in the song, use the\n   * [`sendContinue()`]{@link #sendContinue} method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStart(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.start],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **continue** real-time message. This resumes song playback where it was previously\n   * stopped or where it was last cued with a song position message. To start playback from the\n   * start, use the [`sendStart()`]{@link Output#sendStart}` method.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendContinue(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.continue],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **stop** real-time message. This tells the device connected to this output to stop\n   * playback immediately (or at the scheduled time, if specified).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendStop(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.stop],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **active sensing** real-time message. This tells the device connected to this port\n   * that the connection is still good. Active sensing messages are often sent every 300 ms if there\n   * was no other activity on the MIDI port.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendActiveSensing(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.activesensing],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset** real-time message. This tells the device connected to this output that it\n   * should reset itself to a default state.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendReset(options = {}) {\n\n    this.send(\n      [Enumerations.MIDI_SYSTEM_MESSAGES.reset],\n      {time: options.time}\n    );\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  sendTuningRequest(options = {}) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead.\"\n      );\n    }\n\n    return this.sendTuneRequest(options);\n\n  }\n\n  /**\n   * Sends a MIDI **key aftertouch** message to the specified channel(s) at the scheduled time. This\n   * is a key-specific aftertouch. For a channel-wide aftertouch message, use\n   * [`setChannelAftertouch()`]{@link #setChannelAftertouch}.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) for which you are sending\n   * an aftertouch value. The notes can be specified by using a MIDI note number (`0` - `127`), a\n   * [`Note`](Note) object, a note identifier (e.g. `C3`, `G#4`, `F-1`, `Db7`) or an array of the\n   * previous types. When using a note identifier, octave range must be between `-1` and `9`. The\n   * lowest note is `C-1` (MIDI note number `0`) and the highest note is `G9` (MIDI note number\n   * `127`).\n   *\n   * @param [pressure=0.5] {number} The pressure level (between 0 and 1). An invalid pressure value\n   * will silently trigger the default behaviour. If the `rawValue` option is set to `true`, the\n   * pressure can be defined by using an integer between 0 and 127.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendKeyAftertouch(note, pressure, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendKeyAftertouch(note, pressure, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a MIDI **control change** message to the specified channel(s) at the scheduled time. The\n   * control change message to send can be specified numerically (0-127) or by using one of the\n   * following common names:\n   *\n   * | Number | Name                          |\n   * |--------|-------------------------------|\n   * | 0      |`bankselectcoarse`             |\n   * | 1      |`modulationwheelcoarse`        |\n   * | 2      |`breathcontrollercoarse`       |\n   * | 4      |`footcontrollercoarse`         |\n   * | 5      |`portamentotimecoarse`         |\n   * | 6      |`dataentrycoarse`              |\n   * | 7      |`volumecoarse`                 |\n   * | 8      |`balancecoarse`                |\n   * | 10     |`pancoarse`                    |\n   * | 11     |`expressioncoarse`             |\n   * | 12     |`effectcontrol1coarse`         |\n   * | 13     |`effectcontrol2coarse`         |\n   * | 18     |`generalpurposeslider3`        |\n   * | 19     |`generalpurposeslider4`        |\n   * | 32     |`bankselectfine`               |\n   * | 33     |`modulationwheelfine`          |\n   * | 34     |`breathcontrollerfine`         |\n   * | 36     |`footcontrollerfine`           |\n   * | 37     |`portamentotimefine`           |\n   * | 38     |`dataentryfine`                |\n   * | 39     |`volumefine`                   |\n   * | 40     |`balancefine`                  |\n   * | 42     |`panfine`                      |\n   * | 43     |`expressionfine`               |\n   * | 44     |`effectcontrol1fine`           |\n   * | 45     |`effectcontrol2fine`           |\n   * | 64     |`holdpedal`                    |\n   * | 65     |`portamento`                   |\n   * | 66     |`sustenutopedal`               |\n   * | 67     |`softpedal`                    |\n   * | 68     |`legatopedal`                  |\n   * | 69     |`hold2pedal`                   |\n   * | 70     |`soundvariation`               |\n   * | 71     |`resonance`                    |\n   * | 72     |`soundreleasetime`             |\n   * | 73     |`soundattacktime`              |\n   * | 74     |`brightness`                   |\n   * | 75     |`soundcontrol6`                |\n   * | 76     |`soundcontrol7`                |\n   * | 77     |`soundcontrol8`                |\n   * | 78     |`soundcontrol9`                |\n   * | 79     |`soundcontrol10`               |\n   * | 80     |`generalpurposebutton1`        |\n   * | 81     |`generalpurposebutton2`        |\n   * | 82     |`generalpurposebutton3`        |\n   * | 83     |`generalpurposebutton4`        |\n   * | 91     |`reverblevel`                  |\n   * | 92     |`tremololevel`                 |\n   * | 93     |`choruslevel`                  |\n   * | 94     |`celestelevel`                 |\n   * | 95     |`phaserlevel`                  |\n   * | 96     |`databuttonincrement`          |\n   * | 97     |`databuttondecrement`          |\n   * | 98     |`nonregisteredparametercoarse` |\n   * | 99     |`nonregisteredparameterfine`   |\n   * | 100    |`registeredparametercoarse`    |\n   * | 101    |`registeredparameterfine`      |\n   * | 120    |`allsoundoff`                  |\n   * | 121    |`resetallcontrollers`          |\n   * | 122    |`localcontrol`                 |\n   * | 123    |`allnotesoff`                  |\n   * | 124    |`omnimodeoff`                  |\n   * | 125    |`omnimodeon`                   |\n   * | 126    |`monomodeon`                   |\n   * | 127    |`polymodeon`                   |\n   *\n   * Note: as you can see above, not all control change message have a matching name. This does not\n   * mean you cannot use the others. It simply means you will need to use their number (`0` - `127`)\n   * instead of their name. While you can still use them, numbers `120` to `127` are usually\n   * reserved for *channel mode* messages. See [`sendChannelMode()`]{@link #sendChannelMode} method\n   * for more info.\n   *\n   * To view a list of all available **control change** messages, please consult [Table 3 - Control\n   * Change Messages](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * from the MIDI specification.\n   *\n   * @param controller {number|string} The MIDI controller name or number (0-127).\n   *\n   * @param [value=0] {number} The value to send (0-127).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} Controller numbers must be between 0 and 127.\n   * @throws {RangeError} Invalid controller name.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendControlChange(controller, value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendControlChange(controller, value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * Sends a **pitch bend range** message to the specified channel(s) at the scheduled time so that\n   * they adjust the range used by their pitch bend lever. The range is specified by using the\n   * `semitones` and `cents` parameters. For example, setting the `semitones` parameter to `12`\n   * means that the pitch bend range will be 12 semitones above and below the nominal pitch.\n   *\n   * @param {number} [semitones=0] The desired adjustment value in semitones (between `0` and `127`).\n   * While nothing imposes that in the specification, it is very common for manufacturers to limit\n   * the range to 2 octaves (-12 semitones to 12 semitones).\n   *\n   * @param {number} [cents=0] The desired adjustment value in cents (integer between `0` and\n   * `127`).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127.\n   * @throws {RangeError} The lsb value must be between 0 and 127.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBendRange(semitones= 0, cents = 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBendRange(semitones, cents, options);\n    });\n\n    return this;\n\n  }\n\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setPitchBendRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendPitchBendRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sets the specified MIDI registered parameter to the desired value. The value is defined with\n   * up to two bytes of data (msb, lsb) that each can go from `0` to `127`.\n   *\n   * MIDI\n   * [registered parameters](https://www.midi.org/specifications-old/item/table-3-control-change-messages-data-bytes-2)\n   * extend the original list of control change messages. The MIDI 1.0 specification lists only a\n   * limited number of them:\n   *\n   * | Numbers      | Function                 |\n   * |--------------|--------------------------|\n   * | (0x00, 0x00) | `pitchbendrange`         |\n   * | (0x00, 0x01) | `channelfinetuning`      |\n   * | (0x00, 0x02) | `channelcoarsetuning`    |\n   * | (0x00, 0x03) | `tuningprogram`          |\n   * | (0x00, 0x04) | `tuningbank`             |\n   * | (0x00, 0x05) | `modulationrange`        |\n   * | (0x3D, 0x00) | `azimuthangle`           |\n   * | (0x3D, 0x01) | `elevationangle`         |\n   * | (0x3D, 0x02) | `gain`                   |\n   * | (0x3D, 0x03) | `distanceratio`          |\n   * | (0x3D, 0x04) | `maximumdistance`        |\n   * | (0x3D, 0x05) | `maximumdistancegain`    |\n   * | (0x3D, 0x06) | `referencedistanceratio` |\n   * | (0x3D, 0x07) | `panspreadangle`         |\n   * | (0x3D, 0x08) | `rollangle`              |\n   *\n   * Note that the `tuningprogram` and `tuningbank` parameters are part of the *MIDI Tuning\n   * Standard*, which is not widely implemented.\n   *\n   * @param parameter {string|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (e.g. `[0x65, 0x64]`) that identify the\n   * registered parameter.\n   *\n   * @param [data=[]] {number|number[]} A single integer or an array of integers with a maximum\n   * length of 2 specifying the desired data.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel aftertouch** message to the specified channel(s). For key-specific\n   * aftertouch, you should instead use [`setKeyAftertouch()`]{@link #setKeyAftertouch}.\n   *\n   * @param [pressure=0.5] {number} The pressure level (between `0` and `1`). An invalid pressure\n   * value will silently trigger the default behaviour. If the `rawValue` option is set to `true`,\n   * the pressure can be defined by using an integer between `0` and `127`.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered a float between `0` and `1.0` (default) or a raw integer between `0` and `127`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   * @since 3.0.0\n   */\n  sendChannelAftertouch(pressure, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelAftertouch(pressure, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **pitch bend** message to the specified channel(s) at the scheduled time.\n   *\n   * The resulting bend is relative to the pitch bend range that has been defined. The range can be\n   * set with [`sendPitchBendRange()`]{@link #sendPitchBendRange}. So, for example, if the pitch\n   * bend range has been set to 12 semitones, using a bend value of `-1` will bend the note 1 octave\n   * below its nominal value.\n   *\n   * @param {number|number[]} value The intensity of the bend (between `-1.0` and `1.0`). A value of\n   * `0` means no bend. If an invalid value is specified, the nearest valid value will be used\n   * instead. If the `rawValue` option is set to `true`, the intensity of the bend can be defined by\n   * either using a single integer between `0` and `127` (MSB) or an array of two integers between\n   * `0` and `127` representing, respectively, the MSB (most significant byte) and the LSB (least\n   * significant byte). The MSB is expressed in semitones with `64` meaning no bend. A value lower\n   * than `64` bends downwards while a value higher than `64` bends upwards. The LSB is expressed\n   * in cents (1/100 of a semitone). An LSB of `64` also means no bend.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {boolean} [options.rawValue=false] A boolean indicating whether the value should be\n   * considered as a float between `-1.0` and `1.0` (default) or as raw integer between `0` and\n   * 127` (or an array of 2 integers if using both MSB and LSB).\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPitchBend(value, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPitchBend(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a MIDI **program change** message to the specified channel(s) at the scheduled time.\n   *\n   * @param {number} [program=0] The MIDI patch (program) number (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Failed to execute 'send' on 'MIDIOutput': The value at index 1 is greater\n   * than 0xFF.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendProgramChange(program = 0, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendProgramChange(program, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **modulation depth range** message to the specified channel(s) so that they adjust the\n   * depth of their modulation wheel's range. The range can be specified with the `semitones`\n   * parameter, the `cents` parameter or by specifying both parameters at the same time.\n   *\n   * @param [semitones=0] {number} The desired adjustment value in semitones (integer between\n   * 0 and 127).\n   *\n   * @param [cents=0] {number} The desired adjustment value in cents (integer between 0 and 127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The msb value must be between 0 and 127\n   * @throws {RangeError} The lsb value must be between 0 and 127\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendModulationRange(semitones, cents, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendModulationRange(semitones, cents, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setModulationRange(semitones = 0, cents = 0, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setModulationRange() method is deprecated. Use sendModulationRange() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendModulationRange(semitones, cents, options);\n\n  }\n\n  /**\n   * Sends a master tuning message to the specified channel(s). The value is decimal and must be\n   * larger than `-65` semitones and smaller than `64` semitones.\n   *\n   * Because of the way the MIDI specification works, the decimal portion of the value will be\n   * encoded with a resolution of 14bit. The integer portion must be between -64 and 63\n   * inclusively. This function actually generates two MIDI messages: a **Master Coarse Tuning** and\n   * a **Master Fine Tuning** RPN messages.\n   *\n   * @param [value=0.0] {number} The desired decimal adjustment value in semitones (-65 < x < 64)\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The value must be a decimal number between larger than -65 and smaller\n   * than 64.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendMasterTuning(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendMasterTuning(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setMasterTuning(value, channel = {}, options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setMasterTuning() method is deprecated. Use sendMasterTuning() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendMasterTuning(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning program to use. Note that the **Tuning Program** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param value {number} The desired tuning program (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The program value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningProgram(value, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningProgram(value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningProgram(value, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setTuningProgram() method is deprecated. Use sendTuningProgram() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningProgram(value, options);\n\n  }\n\n  /**\n   * Sets the MIDI tuning bank to use. Note that the **Tuning Bank** parameter is part of the\n   * *MIDI Tuning Standard*, which is not widely implemented.\n   *\n   * @param {number} [value=0] The desired tuning bank (integer between `0` and `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The bank value must be between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendTuningBank(value= 0, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendTuningBank(value, options);\n    });\n\n    return this;\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setTuningBank(parameter, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setTuningBank() method is deprecated. Use sendTuningBank() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendTuningBank(parameter, options);\n\n  }\n\n  /**\n   * Sends a MIDI **channel mode** message to the specified channel(s). The channel mode message to\n   * send can be specified numerically or by using one of the following common names:\n   *\n   * |  Type                |Number| Shortcut Method                                               |\n   * | ---------------------|------|-------------------------------------------------------------- |\n   * | `allsoundoff`        | 120  | [`sendAllSoundOff()`]{@link #sendAllSoundOff}                 |\n   * | `resetallcontrollers`| 121  | [`sendResetAllControllers()`]{@link #sendResetAllControllers} |\n   * | `localcontrol`       | 122  | [`sendLocalControl()`]{@link #sendLocalControl}               |\n   * | `allnotesoff`        | 123  | [`sendAllNotesOff()`]{@link #sendAllNotesOff}                 |\n   * | `omnimodeoff`        | 124  | [`sendOmniMode(false)`]{@link #sendOmniMode}                  |\n   * | `omnimodeon`         | 125  | [`sendOmniMode(true)`]{@link #sendOmniMode}                   |\n   * | `monomodeon`         | 126  | [`sendPolyphonicMode(\"mono\")`]{@link #sendPolyphonicMode}     |\n   * | `polymodeon`         | 127  | [`sendPolyphonicMode(\"poly\")`]{@link #sendPolyphonicMode}     |\n   *\n   * Note: as you can see above, to make it easier, all channel mode messages also have a matching\n   * helper method.\n   *\n   * It should also be noted that, per the MIDI specification, only `localcontrol` and `monomodeon`\n   * may require a value that's not zero. For that reason, the `value` parameter is optional and\n   * defaults to 0.\n   *\n   * @param {number|string} command The numerical identifier of the channel mode message (integer\n   * between 120-127) or its name as a string.\n   *\n   * @param {number} [value=0] The value to send (integer between 0-127).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   */\n  sendChannelMode(command, value = 0, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendChannelMode(command, value, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all sound off** channel mode message. This will silence all sounds playing on that\n   * channel but will not prevent new sounds from being triggered.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllSoundOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllSoundOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends an **all notes off** channel mode message. This will make all currently playing notes\n   * fade out just as if their key had been released. This is different from the\n   * [`turnSoundOff()`]{@link #turnSoundOff} method which mutes all sounds immediately.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   *\n   * @since 3.0.0\n   */\n  sendAllNotesOff(options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendAllNotesOff(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **reset all controllers** channel mode message. This resets all controllers, such as\n   * the pitch bend, to their default value.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output}\n   */\n  sendResetAllControllers(options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendResetAllControllers(options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets the polyphonic mode. In `poly` mode (usually the default), multiple notes can be played\n   * and heard at the same time. In `mono` mode, only one note will be heard at once even if\n   * multiple notes are being played.\n   *\n   * @param mode {string} The mode to use: `mono` or `poly`.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendPolyphonicMode(mode, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendPolyphonicMode(mode, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Turns local control on or off. Local control is usually enabled by default. If you disable it,\n   * the instrument will no longer trigger its own sounds. It will only send the MIDI messages to\n   * its out port.\n   *\n   * @param [state=false] {boolean} Whether to activate local control (`true`) or disable it\n   * (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendLocalControl(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendLocalControl(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets OMNI mode to **on** or **off** for the specified channel(s). MIDI's OMNI mode causes the\n   * instrument to respond to messages from all channels.\n   *\n   * It should be noted that support for OMNI mode is not as common as it used to be.\n   *\n   * @param [state] {boolean} Whether to activate OMNI mode (`true`) or not (`false`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {TypeError} Invalid channel mode message name.\n   * @throws {RangeError} Channel mode controller numbers must be between 120 and 127.\n   * @throws {RangeError} Value must be an integer between 0 and 127.\n   *\n   * @return {Output} Returns the `Output` object so methods can be chained.\n   *\n   * @since 3.0.0\n   */\n  sendOmniMode(state, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendOmniMode(state, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sets a non-registered parameter to the specified value. The NRPN is selected by passing a\n   * two-position array specifying the values of the two control bytes. The value is specified by\n   * passing a single integer (most cases) or an array of two integers.\n   *\n   * NRPNs are not standardized in any way. Each manufacturer is free to implement them any way\n   * they see fit. For example, according to the Roland GS specification, you can control the\n   * **vibrato rate** using NRPN (`1`, `8`). Therefore, to set the **vibrato rate** value to `123`\n   * you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123);\n   * ```\n   *\n   * You probably want to should select a channel so the message is not sent to all channels. For\n   * instance, to send to channel `1` of the first output port, you would use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([1, 8], 123, 1);\n   * ```\n   *\n   * In some rarer cases, you need to send two values with your NRPN messages. In such cases, you\n   * would use a 2-position array. For example, for its **ClockBPM** parameter (`2`, `63`), Novation\n   * uses a 14-bit value that combines an MSB and an LSB (7-bit values). So, for example, if the\n   * value to send was `10`, you could use:\n   *\n   * ```js\n   * WebMidi.outputs[0].sendNrpnValue([2, 63], [0, 10], 1);\n   * ```\n   *\n   * For further implementation details, refer to the manufacturer's documentation.\n   *\n   * @param parameter {number[]} A two-position array specifying the two control bytes (`0x63`,\n   * `0x62`) that identify the non-registered parameter.\n   *\n   * @param [data=[]] {number|number[]} An integer or an array of integers with a length of 1 or 2\n   * specifying the desired data.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws {RangeError} The control value must be between 0 and 127.\n   * @throws {RangeError} The msb value must be between 0 and 127\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNrpnValue(parameter, data, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNrpnValue(parameter, data, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  setNonRegisteredParameter(parameter, data = [], channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendNrpnValue(parameter, data, options);\n\n  }\n\n  /**\n   * Increments the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnIncrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnIncrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  incrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnIncrement(parameter, options);\n\n  }\n\n  /**\n   * Decrements the specified MIDI registered parameter by 1. Here is the full list of parameter\n   * names that can be used with this method:\n   *\n   *  * Pitchbend Range (0x00, 0x00): `\"pitchbendrange\"`\n   *  * Channel Fine Tuning (0x00, 0x01): `\"channelfinetuning\"`\n   *  * Channel Coarse Tuning (0x00, 0x02): `\"channelcoarsetuning\"`\n   *  * Tuning Program (0x00, 0x03): `\"tuningprogram\"`\n   *  * Tuning Bank (0x00, 0x04): `\"tuningbank\"`\n   *  * Modulation Range (0x00, 0x05): `\"modulationrange\"`\n   *  * Azimuth Angle (0x3D, 0x00): `\"azimuthangle\"`\n   *  * Elevation Angle (0x3D, 0x01): `\"elevationangle\"`\n   *  * Gain (0x3D, 0x02): `\"gain\"`\n   *  * Distance Ratio (0x3D, 0x03): `\"distanceratio\"`\n   *  * Maximum Distance (0x3D, 0x04): `\"maximumdistance\"`\n   *  * Maximum Distance Gain (0x3D, 0x05): `\"maximumdistancegain\"`\n   *  * Reference Distance Ratio (0x3D, 0x06): `\"referencedistanceratio\"`\n   *  * Pan Spread Angle (0x3D, 0x07): `\"panspreadangle\"`\n   *  * Roll Angle (0x3D, 0x08): `\"rollangle\"`\n   *\n   * @param parameter {String|number[]} A string identifying the parameter's name (see above) or a\n   * two-position array specifying the two control bytes (0x65, 0x64) that identify the registered\n   * parameter.\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @throws TypeError The specified parameter is not available.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendRpnDecrement(parameter, options = {}) {\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendRpnDecrement(parameter, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0\n   */\n  decrementRegisteredParameter(parameter, channel = \"all\", options = {}) {\n\n    if (WebMidi.validation) {\n\n      console.warn(\n        \"The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead.\"\n      );\n\n      options.channels = channel;\n      if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    }\n\n    return this.sendRpnDecrement(parameter, options);\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`,\n   * `F-1`, `Db7`) or an array of the previous types. When using a note identifier, octave range\n   * must be between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest\n   * note is `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOff(note, options= {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOff(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note off** message for the specified MIDI note number on the specified channel(s).\n   * The first parameter is the note to stop. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   * The execution of the **note off** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note\n   * (between `0` and `1`).  If the `rawRelease` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note\n   * (between `0` and `127`). If the `release` option is also defined, `rawRelease` will have\n   * priority. An invalid velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  stopNote(note, options) {\n    return this.sendNoteOff(note, options);\n  }\n\n  /**\n   * Plays a note or an array of notes on one or more channels of this output. If you intend to play\n   * notes on a single channel, you should probably use\n   * [`OutputChannel.playNote()`](OutputChannel#playNote) instead.\n   *\n   * The first parameter is the note to play. It can be a single value or an array of the following\n   * valid values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`]{@link Note} object\n   *\n   * The `playNote()` method sends a **note on** MIDI message for all specified notes on all\n   * specified channels. If no channel is specified, it will send to all channels. If a `duration`\n   * is set in the `options` parameter or in the [`Note`]{@link Note} object's\n   * [`duration`]{@link Note#duration} property, it will also schedule a **note off** message to end\n   * the note after said duration. If no `duration` is set, the note will simply play until a\n   * matching **note off** message is sent with [`stopNote()`]{@link #stopNote}.\n   *\n   * The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * When using [`Note`]{@link Note} objects, the durations and velocities defined in the\n   * [`Note`]{@link Note} objects have precedence over the ones specified via the method's `options`\n   * parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|string|Note|number[]|string[]|Note[]} The note(s) to play. The notes can be\n   * specified by using a MIDI note number (0-127), a note identifier (e.g. C3, G#4, F-1, Db7), a\n   * [`Note`]{@link Note} object or an array of the previous types. When using a note identifier,\n   * octave range must be between -1 and 9. The lowest note is C-1 (MIDI note number `0`) and the\n   * highest note is G9 (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.duration=undefined] The number of milliseconds after which a\n   * **note off** message will be scheduled. If left undefined, only a **note on** message is sent.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`). If the `rawAttack` option is also defined, it will have priority. An invalid velocity\n   * value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The attack velocity at which to play the note (between\n   * `0` and `127`). This has priority over the `attack` property. An invalid velocity value will\n   * silently trigger the default of 64.\n   *\n   * @param {number} [options.release=0.5] The velocity at which to release the note (between `0`\n   * and `1`). If the `rawRelease` option is also defined, it will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`. This is only used with the\n   * **note off** event triggered when `options.duration` is set.\n   *\n   * @param {number} [options.rawRelease=64] The velocity at which to release the note (between `0`\n   * and `127`). This has priority over the `release` property. An invalid velocity value will\n   * silently trigger the default of 64. This is only used with the **note off** event triggered\n   * when `options.duration` is set.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  playNote(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy-compatibility warnings\n      if (options.rawVelocity) {\n        console.warn(\"The 'rawVelocity' option is deprecated. Use 'rawAttack' instead.\");\n      }\n\n      if (options.velocity) {\n        console.warn(\"The 'velocity' option is deprecated. Use 'velocity' instead.\");\n      }\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].playNote(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Sends a **note on** message for the specified MIDI note number on the specified channel(s). The\n   * first parameter is the number. It can be a single value or an array of the following valid\n   * values:\n   *\n   *  - A MIDI note number (integer between `0` and `127`)\n   *  - A note identifier (e.g. `\"C3\"`, `\"G#4\"`, `\"F-1\"`, `\"Db7\"`)\n   *  - A [`Note`](Note) object\n   *\n   *  The execution of the **note on** command can be delayed by using the `time` property of the\n   * `options` parameter.\n   *\n   * **Note**: As per the MIDI standard, a **note on** message with an attack velocity of `0` is\n   * functionally equivalent to a **note off** message.\n   *\n   * @param note {number|Note|string|number[]|Note[]|string[]} The note(s) to stop. The notes can be\n   * specified by using a MIDI note number (`0` - `127`), a note identifier (e.g. `C3`, `G#4`, `F-1`,\n   * `Db7`) or an array of the previous types. When using a note identifier, octave range must be\n   * between `-1` and `9`. The lowest note is `C-1` (MIDI note number `0`) and the highest note is\n   * `G9` (MIDI note number `127`).\n   *\n   * @param {Object} [options={}]\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * The MIDI channel number (between `1` and `16`) or an array of channel numbers to use. If no\n   * channel is specified, all channels will be used.\n   *\n   * @param {number} [options.attack=0.5] The velocity at which to play the note (between `0` and\n   * `1`).  If the `rawAttack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `0.5`.\n   *\n   * @param {number} [options.rawAttack=64] The velocity at which to release the note (between `0`\n   * and `127`). If the `attack` option is also defined, `rawAttack` will have priority. An invalid\n   * velocity value will silently trigger the default of `64`.\n   *\n   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `\"+\"` and\n   * followed by a number, the message will be delayed by that many milliseconds. If the value is a\n   * positive number\n   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),\n   * the operation will be scheduled for that time. The current time can be retrieved with\n   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the\n   * operation will be carried out as soon as possible.\n   *\n   * @returns {Output} Returns the `Output` object so methods can be chained.\n   */\n  sendNoteOn(note, options = {}, legacy = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (Array.isArray(options) || Number.isInteger(options) || options === \"all\") {\n        const channels = options;\n        options = legacy;\n        options.channels = channels;\n        if (options.channels === \"all\") options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n      }\n\n    }\n\n    if (options.channels == undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // This actually supports passing a Note object even if, semantically, this does not make sense.\n    Utilities.sanitizeChannels(options.channels).forEach(ch => {\n      this.channels[ch].sendNoteOn(note, options);\n    });\n\n    return this;\n\n  }\n\n  /**\n   * Name of the MIDI output.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiOutput.name;\n  }\n\n  /**\n   * ID string of the MIDI output. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiOutput.id;\n  }\n\n  /**\n   * Output port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiOutput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this output port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiOutput.manufacturer;\n  }\n\n  /**\n   * State of the output port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiOutput.state;\n  }\n\n  /**\n   * Type of the output port (it will always be: `output`).\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiOutput.type;\n  }\n\n  /**\n   * An integer to offset the octave of outgoing notes. By default, middle C (MIDI note number 60)\n   * is placed on the 4th octave (C4).\n   *\n   * Note that this value is combined with the global offset value defined in\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n}\n","import {Enumerations} from \"./Enumerations.js\";\nimport {Output} from \"./Output.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you\n * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object\n * to all the outputs listed in its [`destinations`](#destinations) property.\n *\n * If specific channels or message types have been defined in the [`channels`](#channels) or\n * [`types`](#types) properties, only messages matching the channels/types will be forwarded.\n *\n * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as\n * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Forwarder {\n\n  /**\n   * Creates a `Forwarder` object.\n   *\n   * @param {Output|Output[]} [destinations=\\[\\]] An [`Output`](Output) object, or an array of such\n   * objects, to forward the message to.\n   *\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A MIDI message type or an array of such\n   * types (`\"noteon\"`, `\"controlchange\"`, etc.), that the specified message must match in order to\n   * be forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`MIDI_SYSTEM_MESSAGES`](Enumerations#MIDI_SYSTEM_MESSAGES)\n   * or [`MIDI_CHANNEL_MESSAGES`](Enumerations#MIDI_CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   */\n  constructor(destinations = [], options = {}) {\n\n    /**\n     * An array of [`Output`](Output) objects to forward the message to.\n     * @type {Output[]}\n     */\n    this.destinations = [];\n\n    /**\n     * An array of message types (`\"noteon\"`, `\"controlchange\"`, etc.) that must be matched in order\n     * for messages to be forwarded. By default, this array includes all\n     * [`Enumerations.MIDI_SYSTEM_MESSAGES`](Enumerations#MIDI_SYSTEM_MESSAGES) and\n     * [`Enumerations.MIDI_CHANNEL_MESSAGES`](Enumerations#MIDI_CHANNEL_MESSAGES).\n     * @type {string[]}\n     */\n    this.types = [\n      ...Object.keys(Enumerations.MIDI_SYSTEM_MESSAGES),\n      ...Object.keys(Enumerations.MIDI_CHANNEL_MESSAGES)\n    ];\n\n    /**\n     * An array of MIDI channel numbers that the message must match in order to be forwarded. By\n     * default, this array includes all MIDI channels (`1` to `16`).\n     * @type {number[]}\n     */\n    this.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    /**\n     * Indicates whether message forwarding is currently suspended or not in this forwarder.\n     * @type {boolean}\n     */\n    this.suspended = false;\n\n    // Make sure parameters are arrays\n    if (!Array.isArray(destinations)) destinations = [destinations];\n    if (options.types && !Array.isArray(options.types)) options.types = [options.types];\n    if (options.channels && !Array.isArray(options.channels)) options.channels = [options.channels];\n\n    if (WebMidi.validation) {\n\n      // Validate destinations\n      destinations.forEach(destination => {\n        if ( !(destination instanceof Output) ) {\n          throw new TypeError(\"Destinations must be of type 'Output'.\");\n        }\n      });\n\n      // Validate types\n      if (options.types !== undefined) {\n\n        options.types.forEach(type => {\n          if (\n            ! Enumerations.MIDI_SYSTEM_MESSAGES.hasOwnProperty(type) &&\n            ! Enumerations.MIDI_CHANNEL_MESSAGES.hasOwnProperty(type)\n          ) {\n            throw new TypeError(\"Type must be a valid message type.\");\n          }\n        });\n\n      }\n\n      // Validate channels\n      if (options.channels !== undefined) {\n\n        options.channels.forEach(channel => {\n          if (! Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel) ) {\n            throw new TypeError(\"MIDI channel must be between 1 and 16.\");\n          }\n        });\n\n      }\n\n    }\n\n    this.destinations = destinations;\n    if (options.types) this.types = options.types;\n    if (options.channels) this.channels = options.channels;\n\n  }\n\n  /**\n   * Sends the specified message to the forwarder's destination(s) if it matches the specified\n   * type(s) and channel(s).\n   *\n   * @param {Message} message The [`Message`](Message) object to forward.\n   */\n  forward(message) {\n\n    // Abort if forwarding is currently suspended\n    if (this.suspended) return;\n\n    // Abort if this message type should not be forwarded\n    if (!this.types.includes(message.type)) return;\n\n    // Abort if this channel should not be forwarded\n    if (message.channel && !this.channels.includes(message.channel)) return;\n\n    // Forward\n    this.destinations.forEach(destination => {\n      if (WebMidi.validation && !(destination instanceof Output)) return;\n      destination.send(message);\n    });\n\n  }\n\n}\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {WebMidi} from \"./WebMidi.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Note} from \"./Note.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input\n * device. This object is derived from the host's MIDI subsystem and should not be instantiated\n * directly.\n *\n * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)\n * property.\n *\n * @fires InputChannel#midimessage\n * @fires InputChannel#unknownmessage\n *\n * @fires InputChannel#noteoff\n * @fires InputChannel#noteon\n * @fires InputChannel#keyaftertouch\n * @fires InputChannel#programchange\n * @fires InputChannel#event:controlchange-controllerxxx\n * @fires InputChannel#channelaftertouch\n * @fires InputChannel#pitchbend\n * @fires InputChannel#controlchange\n *\n * @fires InputChannel#allnotesoff\n * @fires InputChannel#allsoundoff\n * @fires InputChannel#localcontrol\n * @fires InputChannel#monomode\n * @fires InputChannel#omnimode\n * @fires InputChannel#resetallcontrollers\n *\n * @fires InputChannel#event:nrpn\n * @fires InputChannel#event:nrpn-dataentrycoarse\n * @fires InputChannel#event:nrpn-dataentryfine\n * @fires InputChannel#event:nrpn-databuttonincrement\n * @fires InputChannel#event:nrpn-databuttondecrement\n * @fires InputChannel#event:rpn\n * @fires InputChannel#event:rpn-dataentrycoarse\n * @fires InputChannel#event:rpn-dataentryfine\n * @fires InputChannel#event:rpn-databuttonincrement\n * @fires InputChannel#event:rpn-databuttondecrement\n *\n * @extends EventEmitter\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class InputChannel extends EventEmitter {\n\n  /**\n   * Creates an `InputChannel` object.\n   *\n   * @param {Input} input The [`Input`](Input) object this channel belongs to.\n   * @param {number} number The channel's MIDI number (1-16).\n   */\n  constructor(input, number) {\n\n    super();\n\n    /**\n     * @type {Input}\n     * @private\n     */\n    this._input = input;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._number = number;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * An array of messages that form the current NRPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._nrpnBuffer = [];\n\n    /**\n     * An array of messages that form the current RPN sequence\n     * @private\n     * @type {Message[]}\n     */\n    this._rpnBuffer = [];\n\n    /**\n     * Indicates whether events for **Registered Parameter Number** and **Non-Registered Parameter\n     * Number** should be dispatched. RPNs and NRPNs are composed of a sequence of specific\n     * **control change** messages. When a valid sequence of such control change messages is\n     * received, an [`rpn`](#event-rpn) or [`nrpn`](#event-nrpn) event will fire.\n     *\n     * If an invalid or out-of-order **control change** message is received, it will fall through\n     * the collector logic and all buffered **control change** messages will be discarded as\n     * incomplete.\n     *\n     * @type {boolean}\n     */\n    this.parameterNumberEventsEnabled = true;\n\n    /**\n     * Contains the current playing state of all MIDI notes of this channel (0-127). The state is\n     * `true` for a currently playing note and `false` otherwise.\n     * @type {boolean[]}\n     */\n    this.notesState = new Array(128).fill(false);\n\n  }\n\n  /**\n   * Destroys the `InputChannel` by removing all listeners and severing the link with the MIDI\n   * subsystem's input.\n   */\n  destroy() {\n    this._input = null;\n    this._number = null;\n    this._octaveOffset = 0;\n    this._nrpnBuffer = [];\n    this.notesState = new Array(128).fill(false);\n    this.parameterNumberEventsEnabled = false;\n    this.removeListener();\n  }\n\n  /**\n   * @param e MIDIMessageEvent\n   * @private\n   */\n  _processMidiMessageEvent(e) {\n\n    // Create and emit a new 'midimessage' event based on the incoming one\n    const event = Object.assign({}, e);\n    event.port = this.input;\n    event.target = this;\n    event.type = \"midimessage\";\n\n    /**\n     * Event emitted when a MIDI message of any kind is received by an `InputChannel`\n     *\n     * @event InputChannel#midimessage\n     *\n     * @type {object}\n     *\n     * @property {string} type `midimessage`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n    this.emit(event.type, event);\n\n    // Parse the inbound event for regular MIDI messages\n    this._parseEventForStandardMessages(event);\n\n  }\n\n  /**\n   * Parses incoming channel events and emit standard MIDI message events (noteon, noteoff, etc.)\n   * @param e Event\n   * @private\n   */\n  _parseEventForStandardMessages(e) {\n\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmessage\";\n\n    const data1 = e.message.dataBytes[0];\n    const data2 = e.message.dataBytes[1];\n\n    if ( event.type === \"noteoff\" || (event.type === \"noteon\" && data2 === 0) ) {\n\n      this.notesState[data1] = false;\n      event.type = \"noteoff\"; // necessary for note on with 0 velocity\n\n      /**\n       * Event emitted when a **note off** MIDI message has been received on the channel.\n       *\n       * @event InputChannel#noteoff\n       *\n       * @type {object}\n       * @property {string} type `noteoff`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the incoming\n       * MIDI message.\n       * @property {number} timestamp The moment\n       * ([`DOMHighResTimeStamp`](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp))\n       * when the event occurred (in milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The release velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The release velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n\n      // The object created when a noteoff event arrives is a Note with an attack velocity of 0.\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        {\n          rawAttack: 0,\n          rawRelease: data2,\n        }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.release;\n      event.rawVelocity = event.note.rawRelease;\n\n    } else if (event.type === \"noteon\") {\n\n      this.notesState[data1] = true;\n\n      /**\n       * Event emitted when a **note on** MIDI message has been received.\n       *\n       * @event InputChannel#noteon\n       *\n       * @type {object}\n       * @property {string} type `noteon`\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name,\n       * octave and release velocity.\n       * @property {number} value The attack velocity amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The attack velocity amount expressed as an integer (between 0\n       * and 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        ),\n        { rawAttack: data2 }\n      );\n\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // Those are kept for backwards-compatibility but are gone from the documentation. They will\n      // be removed in future versions (@deprecated).\n      event.velocity = event.note.attack;\n      event.rawVelocity = event.note.rawAttack;\n\n    } else if (event.type === \"keyaftertouch\") {\n\n      /**\n       * Event emitted when a **key-specific aftertouch** MIDI message has been received.\n       *\n       * @event InputChannel#keyaftertouch\n       *\n       * @type {object}\n       * @property {string} type `\"keyaftertouch\"`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} note A [`Note`](Note) object containing information such as note name\n       * and number.\n       * @property {number} value The aftertouch amount expressed as a float between 0 and 1.\n       * @property {number} rawValue The aftertouch amount expressed as an integer (between 0 and\n       * 127).\n       */\n      event.note = new Note(\n        Utilities.offsetNumber(\n          data1, this.octaveOffset + this.input.octaveOffset + WebMidi.octaveOffset\n        )\n      );\n\n      // Aftertouch value\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      // @deprecated\n      event.identifier = event.note.identifier;\n      event.key = event.note.number;\n      event.rawKey = data1;\n\n    } else if (event.type === \"controlchange\") {\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received.\n       *\n       * @event InputChannel#controlchange\n       *\n       * @type {object}\n       * @property {string} type `controlchange`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      event.controller = {\n        number: data1,\n        name: Utilities.getCcNameByNumber(data1)\n      };\n\n      event.subtype = event.controller.name || \"controller\" + data1;\n      event.value = Utilities.from7bitToFloat(data2);\n      event.rawValue = data2;\n\n      /**\n       * Event emitted when a **control change** MIDI message has been received and that message is\n       * targeting the controller numbered \"xxx\". Of course, \"xxx\" should be replaced by a valid\n       * controller number (0-127).\n       *\n       * @event InputChannel#controlchange-controllerxxx\n       *\n       * @type {object}\n       * @property {string} type `controlchange-controllerxxx`\n       * @property {string} subtype The type of control change message that was received.\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {object} controller\n       * @property {object} controller.number The number of the controller.\n       * @property {object} controller.name The usual name or function of the controller.\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The value expressed as an integer (between 0 and 127).\n       */\n      const specificEvent = Object.assign({}, event);\n      specificEvent.type = `${event.type}-controller${data1}`;\n      delete specificEvent.subtype;\n      this.emit(specificEvent.type, specificEvent);\n\n      // Trigger channel mode message events (if appropriate)\n      if (event.message.dataBytes[0] >= 120) this._parseChannelModeMessage(event);\n\n      // Parse the inbound event to see if its part of an RPN/NRPN sequence\n      if (\n        this.parameterNumberEventsEnabled &&\n        this._isRpnOrNrpnController(event.message.dataBytes[0])\n      ) {\n        this._parseEventForParameterNumber(event);\n      }\n\n    } else if (event.type === \"programchange\") {\n\n      /**\n       * Event emitted when a **program change** MIDI message has been received.\n       *\n       * @event InputChannel#programchange\n       *\n       * @type {object}\n       * @property {string} type `programchange`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as an integer between 0 and 127.\n       * @property {number} rawValue  The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = data1;\n      event.rawValue = event.value;\n\n    } else if (event.type === \"channelaftertouch\") {\n\n      /**\n       * Event emitted when a control change MIDI message has been received.\n       *\n       * @event InputChannel#channelaftertouch\n       *\n       * @type {object}\n       * @property {string} type `channelaftertouch`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer between 0 and 127.\n       */\n      event.value = Utilities.from7bitToFloat(data1);\n      event.rawValue = data1;\n\n    } else if (event.type === \"pitchbend\") {\n\n      /**\n       * Event emitted when a pitch bend MIDI message has been received.\n       *\n       * @event InputChannel#pitchbend\n       *\n       * @type {object}\n       * @property {string} type `pitchbend`\n       *\n       * @property {InputChannel} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       * @property {Message} message A [`Message`](Message) object containing information about the\n       * incoming MIDI message.\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       *\n       * @property {number} value The value expressed as a float between 0 and 1.\n       * @property {number} rawValue The raw MIDI value expressed as an integer (between 0 and\n       * 16383).\n       */\n      event.value = ((data2 << 7) + data1 - 8192) / 8192;\n      event.rawValue = (data2 << 7) + data1;\n\n    } else {\n      event.type = \"unknownmessage\";\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @param e {Object}\n   * @private\n   */\n  _parseChannelModeMessage(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.controller.name;\n\n    /**\n     * Event emitted when an \"all sound off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allsoundoff\n     *\n     * @type {object}\n     * @property {string} type `allsoundoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"reset all controllers\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#resetallcontrollers\n     *\n     * @type {object}\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when a \"local control\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (local control on) of `false` (local control\n     * off).\n     *\n     * @event InputChannel#localcontrol\n     *\n     * @type {object}\n     * @property {string} type `localcontrol`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value For local control on, the value is `true`. For local control off,\n     * the value is `false`.\n     * @property {boolean} rawValue For local control on, the value is `127`. For local control off,\n     * the value is `0`.\n     */\n    if (event.type === \"localcontrol\") {\n      event.value = event.message.data[2] === 127 ? true : false;\n      event.rawValue = event.message.data[2];\n    }\n\n    /**\n     * Event emitted when an \"all notes off\" channel-mode MIDI message has been received.\n     *\n     * @event InputChannel#allnotesoff\n     *\n     * @type {object}\n     * @property {string} type `allnotesoff`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     */\n\n    /**\n     * Event emitted when an \"omni mode\" channel-mode MIDI message has been received. The value\n     * property of the event is set to either `true` (omni mode on) of `false` (omni mode off).\n     *\n     * @event InputChannel#omnimode\n     *\n     * @type {object}\n     * @property {string} type `\"omnimode\"`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"omnimodeon\") {\n      event.type = \"omnimode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"omnimodeoff\") {\n      event.type = \"omnimode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n\n    /**\n     * Event emitted when a \"mono/poly mode\" MIDI message has been received. The value property of\n     * the event is set to either `true` (mono mode on / poly mode off) or `false` (mono mode off /\n     * poly mode on).\n     *\n     * @event InputChannel#monomode\n     *\n     * @type {object}\n     * @property {string} type `monomode`\n     *\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     *\n     * @property {boolean} value The value is `true` for omni mode on and false for omni mode off.\n     * @property {boolean} rawValue The raw MIDI value\n     */\n    if (event.type === \"monomodeon\") {\n      event.type = \"monomode\";\n      event.value = true;\n      event.rawValue = event.message.data[2];\n    } else if (event.type === \"polymodeon\") {\n      event.type = \"monomode\";\n      event.value = false;\n      event.rawValue = event.message.data[2];\n    }\n\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Parses inbound events to identify RPN/NRPN sequences.\n   * @param e Event\n   * @private\n   */\n  _parseEventForParameterNumber(event) {\n\n    // To make it more legible\n    const controller = event.message.dataBytes[0];\n    const value = event.message.dataBytes[1];\n    const list = Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n    // A. Check if the message is the start of an RPN (101) or NRPN (99) parameter declaration.\n    if (\n      controller === list.nonregisteredparameterfine ||         // 99\n      controller === list.registeredparameterfine               // 101\n    ) {\n\n      this._nrpnBuffer = [];\n      this._rpnBuffer = [];\n\n      if (controller === list.nonregisteredparameterfine) {     // 99\n        this._nrpnBuffer = [event.message];\n      } else {                                                  // 101\n        // 127 is a reset so we ignore it\n        if (value !== 127) this._rpnBuffer = [event.message];\n      }\n\n    // B. Check if the message is the end of an RPN (100) or NRPN (98) parameter declaration.\n    } else if (\n      controller === list.nonregisteredparametercoarse ||       // 98\n      controller === list.registeredparametercoarse             // 100\n    ) {\n\n      if (controller === list.nonregisteredparametercoarse) {   // 98\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._rpnBuffer = [];\n\n        // Check if we are in sequence\n        if (this._nrpnBuffer.length === 1) {\n          this._nrpnBuffer.push(event.message);\n        } else {\n          this._nrpnBuffer = []; // out of sequence\n        }\n\n      } else {                                                  // 100\n\n        // Flush the other buffer (they are mutually exclusive)\n        this._nrpnBuffer = [];\n\n        // 127 is a reset so we ignore it\n        if (this._rpnBuffer.length === 1 && value !== 127) {\n          this._rpnBuffer.push(event.message);\n        } else {\n          this._rpnBuffer = []; // out of sequence or reset\n        }\n\n      }\n\n    // C. Check if the message is for data entry (6, 38, 96 or 97). Those messages trigger events.\n    } else if (\n      controller === list.dataentrycoarse ||                    // 6\n      controller === list.dataentryfine ||                      // 38\n      controller === list.databuttonincrement ||                // 96\n      controller === list.databuttondecrement                   // 97\n    ) {\n\n      if (this._rpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"rpn\",\n          this._rpnBuffer[0].dataBytes[1],\n          this._rpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else if (this._nrpnBuffer.length === 2) {\n        this._dispatchParameterNumberEvent(\n          \"nrpn\",\n          this._nrpnBuffer[0].dataBytes[1],\n          this._nrpnBuffer[1].dataBytes[1],\n          event\n        );\n      } else {\n        this._nrpnBuffer = [];\n        this._rpnBuffer = [];\n      }\n\n    }\n\n  }\n\n  /**\n   * Indicates whether the specified controller can be part of an RPN or NRPN sequence\n   * @param controller\n   * @returns {boolean}\n   * @private\n   */\n  _isRpnOrNrpnController(controller) {\n\n    return controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse ||        //   6\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine ||               //  38\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement ||         //  96\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement ||         //  97\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse ||//  98\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine ||  //  99\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse ||   // 100\n      controller === Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine;       // 101\n\n  }\n\n  /**\n   * @private\n   */\n  _dispatchParameterNumberEvent(type, paramMsb, paramLsb, e) {\n\n    type = type === \"nrpn\" ? \"nrpn\" : \"rpn\";\n\n    /**\n     * Event emitted when an **RPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data button increment** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-databuttonincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-databuttonincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **RPN data button decrement** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn-databuttondecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn-databuttondecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry coarse** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentrycoarse\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentrycoarse`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data entry fine** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-dataentryfine\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-dataentryfine`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data button increment** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-databuttonincrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-databuttonincrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when an **NRPN data button decrement** message is received on the input. The\n     * specific parameter to which the message applies can be found in the event's `parameter`\n     * property. It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#nrpn-databuttondecrement\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn-databuttondecrement`\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    const event = {\n      target: e.target,\n      timestamp: e.timestamp,\n      message: e.message,\n      parameterMsb: paramMsb,\n      parameterLsb: paramLsb,\n      value: Utilities.from7bitToFloat(e.message.dataBytes[1]),\n      rawValue: e.message.dataBytes[1],\n    };\n\n    // Identify the parameter (by name for RPN and by number for NRPN)\n    if (type === \"rpn\") {\n\n      event.parameter = Object.keys(Enumerations.MIDI_REGISTERED_PARAMETERS).find(key => {\n        return Enumerations.MIDI_REGISTERED_PARAMETERS[key][0] === paramMsb &&\n          Enumerations.MIDI_REGISTERED_PARAMETERS[key][1] === paramLsb;\n      });\n\n    } else {\n      event.parameter = (paramMsb << 7) + paramLsb;\n    }\n\n    // Type and subtype\n    const subtype = Utilities.getPropertyByValue(\n      Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,\n      e.message.dataBytes[0]\n    );\n\n    // Emit specific event\n    event.type = `${type}-${subtype}`;\n    this.emit(event.type, event);\n\n    /**\n     * Event emitted when any NRPN message is received on the input. There are four subtypes of NRPN\n     * messages:\n     *\n     *   * `nrpn-dataentrycoarse`\n     *   * `nrpn-dataentryfine`\n     *   * `nrpn-databuttonincrement`\n     *   * `nrpn-databuttondecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     *\n     * @event InputChannel#nrpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `nrpn`\n     * @property {string} subtype The precise type of NRPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} parameter The non-registered parameter number (0-16383)\n     * @property {number} parameterMsb The MSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} parameterLsb: The LSB portion of the non-registered parameter number\n     * (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    /**\n     * Event emitted when any RPN message is received on the input. There are four subtypes of RPN\n     * messages:\n     *\n     *   * `rpn-dataentrycoarse`\n     *   * `rpn-dataentryfine`\n     *   * `rpn-databuttonincrement`\n     *   * `rpn-databuttondecrement`\n     *\n     * The parameter to which the message applies can be found in the event's `parameter` property.\n     * It is one of the ones defined in\n     * [`Enumerations.MIDI_REGISTERED_PARAMETERS`](Enumerations#MIDI_REGISTERED_PARAMETERS).\n     *\n     * @event InputChannel#rpn\n     *\n     * @type {object}\n     *\n     * @property {string} type `rpn`\n     * @property {string} subtype The precise type of RPN message that was received.\n     * @property {InputChannel} target The object that dispatched the event.\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {string} parameter The registered parameter's name\n     * @property {number} parameterMsb The MSB portion of the registered parameter (0-127)\n     * @property {number} parameterLsb: The LSB portion of the registered parameter (0-127)\n     * @property {number} value The received value as a normalized number between 0 and 1.\n     * @property {number} rawValue The value as received (0-127)\n     */\n\n    // Emit general event\n    event.type = type;\n    event.subtype = subtype;\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getChannelModeByNumber(number) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = Math.floor(number);\n    }\n\n    return Utilities.getChannelModeByNumber(number);\n\n  }\n\n  /**\n   * @deprecated since version 3.\n   * @private\n   */\n  getCcNameByNumber(number) {\n\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getCcNameByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n      number = parseInt(number);\n      if ( !(number >= 0 && number <= 127) ) throw new RangeError(\"Invalid control change number.\");\n    }\n\n    return Utilities.getCcNameByNumber(number);\n\n  }\n\n  /**\n   * Returns the playing status of the specified note (`true` if the note is currently playing,\n   * `false` if it is not). The `note` parameter can be an unsigned integer (0-127), a note\n   * identifier (`\"C4\"`, `\"G#5\"`, etc.) or a [`Note`]{@link Note} object.\n   *\n   * IF the note is specified using an integer (0-127), no octave offset will be applied.\n   *\n   * @param {number|string|Note} note The note to get the state for. The\n   * [`octaveOffset`](#octaveOffset) (channel, input and global) will be factored in for note\n   * identifiers and [`Note`]{@link Note} objects.\n   * @returns {boolean}\n   * @since version 3.0.0\n   */\n  getNoteState(note) {\n\n    // If it's a note object, we simply use the identifier\n    if (note instanceof Note) note = note.identifier;\n\n    const number = Utilities.guessNoteNumber(\n      note,\n      WebMidi.octaveOffset + this.input.octaveOffset + this.octaveOffset\n    );\n\n    return this.notesState[number];\n\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming note-specific messages (`noteon`,\n   * `noteoff` and `keyaftertouch`). By default, middle C (MIDI note number 60) is placed on the 4th\n   * octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined by\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) object and with the value defined on the parent\n   * input object with [`Input.octaveOffset`](Input#octaveOffset).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * The [`Input`](Input) this channel belongs to.\n   * @type {Input}\n   * @since 3.0\n   */\n  get input() {\n    return this._input;\n  }\n\n  /**\n   * This channel's MIDI number (1-16).\n   * @type {number}\n   * @since 3.0\n   */\n  get number() {\n    return this._number;\n  }\n\n  /**\n   * Whether RPN/NRPN events are parsed and dispatched.\n   * @type {boolean}\n   * @since 3.0\n   * @deprecated Use parameterNumberEventsEnabled instead.\n   * @private\n   */\n  get nrpnEventsEnabled() {\n    return this.parameterNumberEventsEnabled;\n  }\n  set nrpnEventsEnabled(value) {\n\n    if (this.validation) {\n      value = !!value;\n    }\n\n    this.parameterNumberEventsEnabled = value;\n\n  }\n\n}\n","import {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/**\n * The `Message` class represents a single MIDI message. It has several properties that make it\n * easy to make sense of the binary data it contains.\n *\n * @license Apache-2.0\n * @since 3.0.0\n */\nexport class Message {\n\n  /**\n   * Creates a new `Message` object from raw MIDI data.\n   *\n   * @param {Uint8Array} data The raw data of the MIDI message as a\n   * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n   * of integers between `0` and `255`.\n   */\n  constructor(data) {\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * containing the bytes of the MIDI message. Each byte is an integer between `0` and `255`.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawData = data;\n\n    /**\n     * An array containing all the bytes of the MIDI message. Each byte is an integer between `0`\n     * and `255`.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.data = Array.from(this.rawData);\n\n    /**\n     * The MIDI status byte of the message as an integer between `0` and `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.statusByte = this.rawData[0];\n\n    /**\n     * A\n     * [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)\n     * of the data byte(s) of the MIDI message. When the message is a system exclusive message\n     * (sysex), `rawDataBytes` explicitly excludes the manufacturer ID and the sysex end byte so\n     * only the actual data is included.\n     *\n     * @type {Uint8Array}\n     * @readonly\n     */\n    this.rawDataBytes = this.rawData.slice(1);\n\n    /**\n     * An array of the the data byte(s) of the MIDI message (as opposed to the status byte). When\n     * the message is a system exclusive message (sysex), `dataBytes` explicitly excludes the\n     * manufacturer ID and the sysex end byte so only the actual data is included.\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.dataBytes = this.data.slice(1);\n\n    /**\n     * A boolean indicating whether the MIDI message is a channel-specific message.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isChannelMessage = false;\n\n    /**\n     * A boolean indicating whether the MIDI message is a system message (not specific to a\n     * channel).\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.isSystemMessage = false;\n\n    /**\n     * An integer identifying the MIDI command. For channel-specific messages, the value is 4-bit\n     * and will be between `8` and `14`. For system messages, the value will be between `240` and\n     * `255`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.command = undefined;\n\n    /**\n     * The MIDI channel number (`1` - `16`) that the message is targeting. This is only for\n     * channel-specific messages. For system messages, this will be left `undefined`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.channel = undefined;\n\n    /**\n     * When the message is a system exclusive message (sysex), this property contains an array with\n     * either 1 or 3 entries that identify the manufacturer targeted by the message.\n     *\n     * To know how to translate these entries into manufacturer names, check out the official list:\n     * https://www.midi.org/specifications-old/item/manufacturer-id-numbers\n     *\n     * @type {number[]}\n     * @readonly\n     */\n    this.manufacturerId = undefined;\n\n    /**\n     * The type of message as a string (`\"noteon\"`, `\"controlchange\"`, `\"sysex\"`, etc.)\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.type = undefined;\n\n    // Assign values to property that vary according to whether they are channel-specific or system\n    if (this.statusByte < 240) {\n      this.isChannelMessage = true;\n      this.command = this.statusByte >> 4;\n      this.channel = (this.statusByte & 0b00001111) + 1;\n    } else {\n      this.isSystemMessage = true;\n      this.command = this.statusByte;\n    }\n\n    // Assign type (depending on whether the message is channel-specific or system)\n    if (this.isChannelMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.MIDI_CHANNEL_MESSAGES, this.command);\n    } else if (this.isSystemMessage) {\n      this.type = Utilities.getPropertyByValue(Enumerations.MIDI_SYSTEM_MESSAGES, this.command);\n    }\n\n    // When the message is a sysex message, we add a manufacturer property and strip out the id from\n    // dataBytes and rawDataBytes.\n    if (this.statusByte === Enumerations.MIDI_SYSTEM_MESSAGES.sysex) {\n\n      if (this.dataBytes[0] === 0) {\n        this.manufacturerId = this.dataBytes.slice(0, 3);\n        this.dataBytes = this.dataBytes.slice(3, this.rawDataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(3, this.rawDataBytes.length - 1);\n      } else {\n        this.manufacturerId = [this.dataBytes[0]];\n        this.dataBytes = this.dataBytes.slice(1, this.dataBytes.length - 1);\n        this.rawDataBytes = this.rawDataBytes.slice(1, this.rawDataBytes.length - 1);\n      }\n\n    }\n\n  }\n\n}\n","import {Enumerations} from \"./Enumerations.js\";\nimport {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {Forwarder} from \"./Forwarder.js\";\nimport {InputChannel} from \"./InputChannel.js\";\nimport {Message} from \"./Message.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {WebMidi} from \"./WebMidi.js\";\n\n/**\n * The `Input` class represents a single MIDI input port. This object is automatically instantiated\n * by the library according to the host's MIDI subsystem and does not need to be directly\n * instantiated. Instead, you can access all `Input` objects by referring to the\n * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as\n * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and\n * [`WebMidi.getInputById()`](WebMidi#getInputById).\n *\n * Note that a single MIDI device may expose several inputs and/or outputs.\n *\n * **Important**: the `Input` class does not directly fire channel-specific MIDI messages\n * (such as [`noteon`](InputChannel#event:noteon) or\n * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)\n * object does that. However, you can still use the\n * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple\n * [`InputChannel`](InputChannel) objects at once.\n *\n * @fires Input#opened\n * @fires Input#disconnected\n * @fires Input#closed\n * @fires Input#midimessage\n *\n * @fires Input#sysex\n * @fires Input#timecode\n * @fires Input#songposition\n * @fires Input#songselect\n * @fires Input#tunerequest\n * @fires Input#clock\n * @fires Input#start\n * @fires Input#continue\n * @fires Input#stop\n * @fires Input#activesensing\n * @fires Input#reset\n *\n * @fires Input#unknownmidimessage\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nexport class Input extends EventEmitter {\n\n  /**\n   * Creates an `Input` object.\n   *\n   * @param {MIDIInput} midiInput [`MIDIInput`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIInput)\n   * object as provided by the MIDI subsystem (Web MIDI API).\n   */\n  constructor(midiInput) {\n\n    super();\n\n    /**\n     * Reference to the actual MIDIInput object\n     * @private\n     */\n    this._midiInput = midiInput;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n    /**\n     * Array containing the 16 [`InputChannel`](InputChannel) objects available for this `Input`. The\n     * channels are numbered 1 through 16.\n     *\n     * @type {InputChannel[]}\n     */\n    this.channels = [];\n    for (let i = 1; i <= 16; i++) this.channels[i] = new InputChannel(this, i);\n\n    /**\n     * @type {Forwarder[]}\n     * @private\n     */\n    this._forwarders = [];\n\n    // Setup listeners\n    this._midiInput.onstatechange = this._onStateChange.bind(this);\n    this._midiInput.onmidimessage = this._onMidiMessage.bind(this);\n\n  }\n\n  /**\n   * Destroys the `Input` by removing all listeners, emptying the [`channels`](#channels) array and\n   * unlinking the MIDI subsystem. This is mostly for internal use.\n   *\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    this.removeListener();\n    this.channels.forEach(ch => ch.destroy());\n    this.channels = [];\n    this._forwarders = [];\n    if (this._midiInput) {\n      this._midiInput.onstatechange = null;\n      this._midiInput.onmidimessage = null;\n    }\n    await this.close();\n    this._midiInput = null;\n  }\n\n  /**\n   * Executed when a `\"statechange\"` event occurs.\n   *\n   * @param e\n   * @private\n   */\n  _onStateChange(e) {\n\n    let event = {\n      timestamp: WebMidi.time,\n      target: this,\n      port: this // for consistency\n    };\n\n    if (e.port.connection === \"open\") {\n\n      /**\n       * Event emitted when the `Input` has been opened by calling the [`open()`]{@link #open}\n       * method.\n       *\n       * @event Input#opened\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `opened`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"opened\";\n      this.emit(\"opened\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"connected\") {\n\n      /**\n       * Event emitted when the `Input` has been closed by calling the\n       * [`close()`]{@link #close} method.\n       *\n       * @event Input#closed\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `closed`\n       * @property {Input} target The object that dispatched the event.\n       * @property {Input} port The `Input` that triggered the event.\n       */\n      event.type = \"closed\";\n      this.emit(\"closed\", event);\n\n    } else if (e.port.connection === \"closed\" && e.port.state === \"disconnected\") {\n\n      /**\n       * Event emitted when the `Input` becomes unavailable. This event is typically fired\n       * when the MIDI device is unplugged.\n       *\n       * @event Input#disconnected\n       * @type {object}\n       * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {string} type `disconnected`\n       * @property {Input} port Object with properties describing the {@link Input} that was\n       * disconnected. This is not the actual `Input` as it is no longer available.\n       * @property {Input} target The object that dispatched the event.\n       */\n      event.type = \"disconnected\";\n      event.port = {\n        connection: e.port.connection,\n        id: e.port.id,\n        manufacturer: e.port.manufacturer,\n        name: e.port.name,\n        state: e.port.state,\n        type: e.port.type\n      };\n      this.emit(\"disconnected\", event);\n\n    } else if (e.port.connection === \"pending\" && e.port.state === \"disconnected\") {\n      // I don't see the need to forward that...\n    } else {\n      console.warn(\"This statechange event was not caught: \", e.port.connection, e.port.state);\n    }\n\n  }\n\n  /**\n   * Executed when a `\"midimessage\"` event is received\n   * @param e\n   * @private\n   */\n  _onMidiMessage(e) {\n\n    // Create Message object from MIDI data\n    const message = new Message(e.data);\n\n    /**\n     * Event emitted when any MIDI message is received on an `Input`.\n     *\n     * @event Input#midimessage\n     *\n     * @type {object}\n     *\n     * @property {Input} port The `Input` that triggered the event.\n     * @property {Input} target The object that dispatched the event.\n     * @property {Message} message A [`Message`](Message) object containing information about the\n     * incoming MIDI message.\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {string} type `midimessage`\n     *\n     * @since 2.1\n     */\n    const event = {\n      port: this,\n      target: this,\n      message: message,\n      timestamp: e.timeStamp,\n      type: \"midimessage\",\n\n      data: message.data,           // @deprecated (will be removed in v4)\n      rawData: message.data,        // @deprecated (will be removed in v4)\n      statusByte: message.data[0],  // @deprecated (will be removed in v4)\n      dataBytes: message.dataBytes  // @deprecated (will be removed in v4)\n    };\n\n    this.emit(\"midimessage\", event);\n\n    // Messages are forwarded to InputChannel if they are channel messages or parsed locally for\n    // system messages.\n    if (message.isSystemMessage) {           // system messages\n      this._parseEvent(event);\n    } else if (message.isChannelMessage) {   // channel messages\n      this.channels[message.channel]._processMidiMessageEvent(event);\n    }\n\n    // Forward message if forwarders have been defined\n    this._forwarders.forEach(forwarder => forwarder.forward(message));\n\n  }\n\n  /**\n   * @private\n   */\n  _parseEvent(e) {\n\n    // Make a shallow copy of the incoming event so we can use it as the new event.\n    const event = Object.assign({}, e);\n    event.type = event.message.type || \"unknownmidimessage\";\n\n    // Add custom property for 'songselect'\n    if (event.type === \"songselect\") {\n      event.song = e.data[1] + 1; // deprecated\n      event.value = e.data[1];\n      event.rawValue = event.value;\n    }\n\n    // Emit event\n    this.emit(event.type, event);\n\n  }\n\n  /**\n   * Opens the input for usage. This is usually unnecessary as the port is opened automatically when\n   * WebMidi is enabled.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object.\n   */\n  async open() {\n\n    // Explicitly opens the port for usage. This is not mandatory. When the port is not explicitly\n    // opened, it is implicitly opened (asynchronously) when assigning a listener to the\n    // `onmidimessage` property of the `MIDIInput`. We do it explicitly so that 'connected' events\n    // are dispatched immediately and that we are ready to listen.\n    try {\n      await this._midiInput.open();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Closes the input. When an input is closed, it cannot be used to listen to MIDI messages until\n   * the input is opened again by calling [`Input.open()`](Input#open).\n   *\n   * **Note**: if what you want to do is stop events from being dispatched, you should use\n   * [`eventsSuspended`](#eventsSuspended) instead.\n   *\n   * @returns {Promise<Input>} The promise is fulfilled with the `Input` object\n   */\n  async close() {\n\n    // We close the port. This triggers a statechange event which, in turn, will emit the 'closed'\n    // event.\n    if (!this._midiInput) return Promise.resolve(this);\n\n    try {\n      await this._midiInput.close();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since v3.0.0 (moved to 'Utilities' class)\n   */\n  getChannelModeByNumber() {\n    if (WebMidi.validation) {\n      console.warn(\n        \"The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.\"\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener that will trigger a function callback when the specified event is\n   * dispatched. The event usually is **input-wide** but can also be **channel-specific**.\n   *\n   * Input-wide events do not target a specific MIDI channel so it makes sense to listen for them\n   * at the `Input` level and not at the [`InputChannel`](InputChannel) level. Channel-specific\n   * events target a specific channel. Usually, in this case, you would add the listener to the\n   * [`InputChannel`](InputChannel) object. However, as a convenience, you can also listen to\n   * channel-specific events directly on an `Input`. This allows you to react to a channel-specific\n   * event no matter which channel it actually came through.\n   *\n   * When listening for an event, you simply need to specify the event name and the function to\n   * execute:\n   *\n   * ```javascript\n   * const listener = WebMidi.inputs[0].addListener(\"midimessage\", e => {\n   *   console.log(e);\n   * });\n   * ```\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, `listeners` is an array containing 3 [`Listener`](Listener) objects.\n   *\n   * Note that, when adding channel-specific listeners, it is the [`InputChannel`](InputChannel)\n   * instance that actually gets a listener added and not the `Input` instance. You can check that\n   * by calling [`InputChannel.hasListener()`](InputChannel#hasListener()).\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-databuttonincrement`]{@link InputChannel#event:nrpn-databuttonincrement}\n   *    * [`nrpn-databuttondecrement`]{@link InputChannel#event:nrpn-databuttondecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-databuttonincrement`]{@link InputChannel#event:rpn-databuttonincrement}\n   *    * [`rpn-databuttondecrement`]{@link InputChannel#event:rpn-databuttondecrement}\n   *\n   * @param event {string | EventEmitter.ANY_EVENT} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * An integer between 1 and 16 or an array of such integers representing the MIDI channel(s) to\n   * listen on. If no channel is specified, all channels will be used. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @param {number} [options.remaining=Infinity] The number of times after which the callback\n   * should automatically be removed.\n   *\n   * @returns {Listener|Listener[]} If the event is input-wide, a single [`Listener`](Listener)\n   * object is returned. If the event is channel-specific, an array of all the\n   * [`Listener`](Listener) objects is returned (one for each channel).\n   */\n  addListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = (listener != undefined) ? [].concat(listener) : undefined; // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    // Check if the event is channel-specific or input-wide\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      let listeners = [];\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        listeners.push(this.channels[ch].addListener(event, listener, options));\n      });\n\n      return listeners;\n\n    } else {\n\n      return super.addListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a one-time event listener that will trigger a function callback when the specified event\n   * happens. The event can be **channel-bound** or **input-wide**. Channel-bound events are\n   * dispatched by [`InputChannel`]{@link InputChannel} objects and are tied to a specific MIDI\n   * channel while input-wide events are dispatched by the `Input` object itself and are not tied\n   * to a specific channel.\n   *\n   * Calling the function with an input-wide event (such as\n   * [`\"midimessage\"`]{@link #event:midimessage}), will return the [`Listener`](Listener) object\n   * that was created.\n   *\n   * If you call the function with a channel-specific event (such as\n   * [`\"noteon\"`]{@link InputChannel#event:noteon}), it will return an array of all\n   * [`Listener`](Listener) objects that were created (one for each channel):\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction);\n   * ```\n   *\n   * You can also specify which channels you want to add the listener to:\n   *\n   * ```javascript\n   * const listeners = WebMidi.inputs[0].addOneTimeListener(\"noteon\", someFunction, {channels: [1, 2, 3]});\n   * ```\n   *\n   * In this case, the `listeners` variable contains an array of 3 [`Listener`](Listener) objects.\n   *\n   * The code above will add a listener for the `\"noteon\"` event and call `someFunction` when the\n   * event is triggered on MIDI channels `1`, `2` or `3`.\n   *\n   * Note that, when adding events to channels, it is the [`InputChannel`](InputChannel) instance\n   * that actually gets a listener added and not the `Input` instance.\n   *\n   * Note: if you want to add a listener to a single MIDI channel you should probably do so directly\n   * on the [`InputChannel`](InputChannel) object itself.\n   *\n   * There are 8 families of events you can listen to:\n   *\n   * 1. **MIDI System Common** Events (input-wide)\n   *\n   *    * [`songposition`]{@link Input#event:songposition}\n   *    * [`songselect`]{@link Input#event:songselect}\n   *    * [`sysex`]{@link Input#event:sysex}\n   *    * [`timecode`]{@link Input#event:timecode}\n   *    * [`tunerequest`]{@link Input#event:tunerequest}\n   *\n   * 2. **MIDI System Real-Time** Events (input-wide)\n   *\n   *    * [`clock`]{@link Input#event:clock}\n   *    * [`start`]{@link Input#event:start}\n   *    * [`continue`]{@link Input#event:continue}\n   *    * [`stop`]{@link Input#event:stop}\n   *    * [`activesensing`]{@link Input#event:activesensing}\n   *    * [`reset`]{@link Input#event:reset}\n   *\n   * 3. **State Change** Events (input-wide)\n   *\n   *    * [`opened`]{@link Input#event:opened}\n   *    * [`closed`]{@link Input#event:closed}\n   *    * [`disconnected`]{@link Input#event:disconnected}\n   *\n   * 4. **Catch-All** Events (input-wide)\n   *\n   *    * [`midimessage`]{@link Input#event:midimessage}\n   *    * [`unknownmidimessage`]{@link Input#event:unknownmidimessage}\n   *\n   * 5. **Channel Voice** Events (channel-specific)\n   *\n   *    * [`channelaftertouch`]{@link InputChannel#event:channelaftertouch}\n   *    * [`controlchange`]{@link InputChannel#event:controlchange}\n   *      * [`controlchange-controller0`]{@link InputChannel#event:controlchange-controller0}\n   *      * [`controlchange-controller1`]{@link InputChannel#event:controlchange-controller1}\n   *      * [`controlchange-controller2`]{@link InputChannel#event:controlchange-controller2}\n   *      * (...)\n   *      * [`controlchange-controller127`]{@link InputChannel#event:controlchange-controller127}\n   *    * [`keyaftertouch`]{@link InputChannel#event:keyaftertouch}\n   *    * [`noteoff`]{@link InputChannel#event:noteoff}\n   *    * [`noteon`]{@link InputChannel#event:noteon}\n   *    * [`pitchbend`]{@link InputChannel#event:pitchbend}\n   *    * [`programchange`]{@link InputChannel#event:programchange}\n   *\n   *    Note: you can listen for a specific control change message by using an event name like this:\n   *    `controlchange-controller23`, `controlchange-controller99`, `controlchange-controller122`,\n   *    etc.\n   *\n   * 6. **Channel Mode** Events (channel-specific)\n   *\n   *    * [`allnotesoff`]{@link InputChannel#event:allnotesoff}\n   *    * [`allsoundoff`]{@link InputChannel#event:allsoundoff}\n   *    * [`localcontrol`]{@link InputChannel#event:localcontrol}\n   *    * [`monomode`]{@link InputChannel#event:monomode}\n   *    * [`omnimode`]{@link InputChannel#event:omnimode}\n   *    * [`resetallcontrollers`]{@link InputChannel#event:resetallcontrollers}\n   *\n   * 7. **NRPN** Events (channel-specific)\n   *\n   *    * [`nrpn`]{@link InputChannel#event:nrpn}\n   *    * [`nrpn-dataentrycoarse`]{@link InputChannel#event:nrpn-dataentrycoarse}\n   *    * [`nrpn-dataentryfine`]{@link InputChannel#event:nrpn-dataentryfine}\n   *    * [`nrpn-databuttonincrement`]{@link InputChannel#event:nrpn-databuttonincrement}\n   *    * [`nrpn-databuttondecrement`]{@link InputChannel#event:nrpn-databuttondecrement}\n   *\n   * 8. **RPN** Events (channel-specific)\n   *\n   *    * [`rpn`]{@link InputChannel#event:rpn}\n   *    * [`rpn-dataentrycoarse`]{@link InputChannel#event:rpn-dataentrycoarse}\n   *    * [`rpn-dataentryfine`]{@link InputChannel#event:rpn-dataentryfine}\n   *    * [`rpn-databuttonincrement`]{@link InputChannel#event:rpn-databuttonincrement}\n   *    * [`rpn-databuttondecrement`]{@link InputChannel#event:rpn-databuttondecrement}\n   *\n   * @param event {string} The type of the event.\n   *\n   * @param listener {function} A callback function to execute when the specified event is detected.\n   * This function will receive an event parameter object. For details on this object's properties,\n   * check out the documentation for the various events (links above).\n   *\n   * @param {object} [options={}]\n   *\n   * @param {array} [options.arguments] An array of arguments which will be passed separately to the\n   * callback function. This array is stored in the [`arguments`](Listener#arguments) property of\n   * the [`Listener`](Listener) object and can be retrieved or modified as desired.\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to listen on. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {object} [options.context=this] The value of `this` in the callback function.\n   *\n   * @param {number} [options.duration=Infinity] The number of milliseconds before the listener\n   * automatically expires.\n   *\n   * @param {boolean} [options.prepend=false] Whether the listener should be added at the beginning\n   * of the listeners array and thus be triggered before others.\n   *\n   * @returns {Listener[]} An array of all [`Listener`](Listener) objects that were created.\n   */\n  addOneTimeListener(event, listener, options = {}) {\n    options.remaining = 1;\n    return this.addListener(event, listener, options);\n  }\n\n  /**\n   * This is an alias to the [Input.addListener()]{@link Input#addListener} method.\n   * @since 2.0.0\n   * @deprecated since v3.0\n   * @private\n   */\n  on(event, channel, listener, options) {\n    return this.addListener(event, channel, listener, options);\n  }\n\n  /**\n   * Checks if the specified event type is already defined to trigger the specified callback\n   * function. For channel-specific events, the function will return `true` only if all channels\n   * have the listener defined.\n   *\n   * @param event {string|Symbol} The type of the event.\n   *\n   * @param listener {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of such\n   * integers representing the MIDI channel(s) to check. This parameter is ignored for input-wide\n   * events.\n   *\n   * @returns {boolean} Boolean value indicating whether or not the `Input` or\n   * [`InputChannel`](InputChannel) already has this listener defined.\n   */\n  hasListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      // If no channel defined, use all.\n      if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n      return Utilities.sanitizeChannels(options.channels).every(ch => {\n        return this.channels[ch].hasListener(event, listener);\n      });\n\n    } else {\n      return super.hasListener(event, listener);\n    }\n\n  }\n\n  /**\n   * Removes the specified listener for the specified event. If no listener is specified, all\n   * listeners for the specified event will be removed. If no event is specified, all listeners for\n   * the `Input` as well as all listeners for all [`InputChannel`]{@link InputChannel} objects will\n   * be removed.\n   *\n   * By default, channel-specific listeners will be removed from all channels unless the\n   * `options.channel` narrows it down.\n   *\n   * @param [type] {string} The type of the event.\n   *\n   * @param [listener] {function} The callback function to check for.\n   *\n   * @param {object} [options={}]\n   *\n   * @param {number|number[]} [options.channels]  An integer between 1 and 16 or an array of\n   * such integers representing the MIDI channel(s) to match. This parameter is ignored for\n   * input-wide events.\n   *\n   * @param {*} [options.context] Only remove the listeners that have this exact context.\n   *\n   * @param {number} [options.remaining] Only remove the listener if it has exactly that many\n   * remaining times to be executed.\n   */\n  removeListener(event, listener, options = {}) {\n\n    if (WebMidi.validation) {\n\n      // Legacy compatibility\n      if (typeof options === \"function\") {\n        let channels = [].concat(listener); // clone\n        listener = options;\n        options = {channels: channels};\n      }\n\n    }\n\n    if (options.channels === undefined) options.channels = Enumerations.MIDI_CHANNEL_NUMBERS;\n\n    // If the event is not specified, remove everything (channel-specific and input-wide)!\n    if (event == undefined) {\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        if (this.channels[ch]) this.channels[ch].removeListener();\n      });\n      return super.removeListener();\n    }\n\n    // If the event is specified, check if it's channel-specific or input-wide.\n    if (Enumerations.CHANNEL_EVENTS.includes(event)) {\n\n      Utilities.sanitizeChannels(options.channels).forEach(ch => {\n        this.channels[ch].removeListener(event, listener, options);\n      });\n\n    } else {\n\n      super.removeListener(event, listener, options);\n\n    }\n\n  }\n\n  /**\n   * Adds a forwarder that will forward all incoming MIDI messages matching the criteria to the\n   * specified [`Output`](Output) destination(s). This is akin to the hardware MIDI THRU port, with\n   * the added benefit of being able to filter which data is forwarded.\n   *\n   * @param {Output|Output[]} output An [`Output`](Output) object, or an array of such\n   * objects, to forward messages to.\n   * @param {object} [options={}]\n   * @param {string|string[]} [options.types=(all messages)] A message type, or an array of such\n   * types (`noteon`, `controlchange`, etc.), that the message type must match in order to be\n   * forwarded. If this option is not specified, all types of messages will be forwarded. Valid\n   * messages are the ones found in either\n   * [`MIDI_SYSTEM_MESSAGES`](Enumerations#MIDI_SYSTEM_MESSAGES) or\n   * [`MIDI_CHANNEL_MESSAGES`](Enumerations#MIDI_CHANNEL_MESSAGES).\n   * @param {number|number[]} [options.channels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n   * A MIDI channel number or an array of channel numbers that the message must match in order to be\n   * forwarded. By default all MIDI channels are included (`1` to `16`).\n   *\n   * @returns {Forwarder} The [`Forwarder`](Forwarder) object created to handle the forwarding. This\n   * is useful if you wish to manipulate or remove the [`Forwarder`](Forwarder) later on.\n   */\n  addForwarder(output, options = {}) {\n\n    let forwarder;\n\n    // Unless 'output' is a forwarder, create a new forwarder\n    if (output instanceof Forwarder) {\n      forwarder = output;\n    } else {\n      forwarder = new Forwarder(output, options);\n    }\n\n    this._forwarders.push(forwarder);\n    return forwarder;\n\n  }\n\n  /**\n   * Removes the specified [`Forwarder`](Forwarder) object from the input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to remove (the\n   * [`Forwarder`](Forwarder) object is returned when calling `addForwarder()`.\n   */\n  removeForwarder(forwarder) {\n    this._forwarders = this._forwarders.filter(item => item !== forwarder);\n  }\n\n  /**\n   * Checks whether the specified [`Forwarder`](Forwarder) object has already been attached to this\n   * input.\n   *\n   * @param {Forwarder} forwarder The [`Forwarder`](Forwarder) to check for (the\n   * [`Forwarder`](Forwarder) object is returned when calling [`addForwarder()`](#addForwarder).\n   * @returns {boolean}\n   */\n  hasForwarder(forwarder) {\n    return this._forwarders.includes(forwarder);\n  }\n\n  /**\n   * Name of the MIDI input.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get name() {\n    return this._midiInput.name;\n  }\n\n  /**\n   * ID string of the MIDI port. The ID is host-specific. Do not expect the same ID on different\n   * platforms. For example, Google Chrome and the Jazz-Plugin report completely different IDs for\n   * the same port.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get id() {\n    return this._midiInput.id;\n  }\n\n  /**\n   * Input port's connection state: `pending`, `open` or `closed`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get connection() {\n    return this._midiInput.connection;\n  }\n\n  /**\n   * Name of the manufacturer of the device that makes this input port available.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get manufacturer() {\n    return this._midiInput.manufacturer;\n  }\n\n  /**\n   * An integer to offset the reported octave of incoming notes. By default, middle C (MIDI note\n   * number 60) is placed on the 4th octave (C4).\n   *\n   * If, for example, `octaveOffset` is set to 2, MIDI note number 60 will be reported as C6. If\n   * `octaveOffset` is set to -1, MIDI note number 60 will be reported as C3.\n   *\n   * Note that this value is combined with the global offset value defined in the\n   * [`WebMidi.octaveOffset`](WebMidi#octaveOffset) property (if any).\n   *\n   * @type {number}\n   *\n   * @since 3.0\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * State of the input port: `connected` or `disconnected`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get state() {\n    return this._midiInput.state;\n  }\n\n  /**\n   * The port type. In the case of the `Input` object, this is always: `input`.\n   *\n   * @type {string}\n   * @readonly\n   */\n  get type() {\n    return this._midiInput.type;\n  }\n\n  /**\n   * @type {boolean}\n   * @private\n   * @deprecated since v3.0.0 (moved to 'InputChannel' class)\n   */\n  get nrpnEventsEnabled() {\n    if (WebMidi.validation) {\n      console.warn(\"The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class.\");\n    }\n    return false;\n  }\n\n}\n\n// Events that do not have code below them must be placed outside the class definition (?!)\n\n/**\n * Input-wide (system) event emitted when a **system exclusive** message has been received.\n * You should note that, to receive `sysex` events, you must call the\n * [`WebMidi.enable()`](WebMidi#enable()) method with the `sysex` option set to `true`:\n *\n * ```js\n * WebMidi.enable({sysex: true})\n *  .then(() => console.log(\"WebMidi has been enabled with sysex support.\"))\n * ```\n *\n * @event Input#sysex\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `sysex`\n *\n */\n\n/**\n * Input-wide (system) event emitted when a **time code quarter frame** message has been\n * received.\n *\n * @event Input#timecode\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `timecode`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song position** message has been received.\n *\n * @event Input#songposition\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `songposition`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **song select** message has been received.\n *\n * @event Input#songselect\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} value Song (or sequence) number to select (0-127)\n * @property {string} rawValue Song (or sequence) number to select (0-127)\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **tune request** message has been received.\n *\n * @event Input#tunerequest\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `tunerequest`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **timing clock** message has been received.\n *\n * @event Input#clock\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `clock`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **start** message has been received.\n *\n * @event Input#start\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `start`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **continue** message has been received.\n *\n * @event Input#continue\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `continue`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **stop** message has been received.\n *\n * @event Input#stop\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `stop`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an **active sensing** message has been received.\n *\n * @event Input#activesensing\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `activesensing`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when a **reset** message has been received.\n *\n * @event Input#reset\n *\n * @type {object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `reset`\n *\n * @since 2.1\n */\n\n/**\n * Input-wide (system) event emitted when an unknown MIDI message has been received. It could\n * be, for example, one of the undefined/reserved messages.\n *\n * @event Input#unknownmessage\n *\n * @type {Object}\n *\n * @property {Input} port The `Input` that triggered the event.\n * @property {Input} target The object that dispatched the event.\n * @property {Message} message A [`Message`](Message) object containing information about the\n * incoming MIDI message.\n * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred (in\n * milliseconds since the navigation start of the document).\n * @property {string} type `unknownmessage`\n *\n * @since 2.1\n */\n","import {EventEmitter} from \"../node_modules/djipevents/src/djipevents.js\";\nimport {Input} from \"./Input.js\";\nimport {Output} from \"./Output.js\";\nimport {Utilities} from \"./Utilities.js\";\nimport {Enumerations} from \"./Enumerations.js\";\n\n/*START-CJS*/\n\n// This code will only be included in the CJS version (CommonJS).\n\n// If this code is executed by Node.js then we must import the `jzz` module. I import it in this\n// convoluted way to prevent Webpack from automatically bundling it in browser bundles where it\n// isn't needed.\nif (Utilities.isNode) {\n\n  // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React Native,\n  // etc.) so we also check for the presence of the window.navigator property.\n  try {\n    window.navigator;\n  } catch (err) {\n    let jzz;\n    eval('jzz = require(\"jzz\")');\n    global.navigator = jzz;\n  }\n\n  // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically\n  // imported only in v16+.\n  try {\n    performance;\n  } catch (err) {\n    let performance;\n    eval('performance = require(\"perf_hooks\").performance');\n    global.performance = performance;\n  }\n\n}\n\n/*END-CJS*/\n/**\n * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it\n * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.\n *\n * When using the WebMidi.js library, you should know that the `WebMidi` class has already been\n * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should\n * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6\n * module) version, you get an already-instantiated object when you import the module.\n *\n * @fires WebMidi#connected\n * @fires WebMidi#disabled\n * @fires WebMidi#disconnected\n * @fires WebMidi#enabled\n * @fires WebMidi#error\n * @fires WebMidi#midiaccessgranted\n * @fires WebMidi#portschanged\n *\n * @extends EventEmitter\n * @license Apache-2.0\n */\nclass WebMidi extends EventEmitter {\n\n  /**\n   * The WebMidi class is a singleton and you cannot instantiate it directly. It has already been\n   * instantiated for you.\n   */\n  constructor() {\n\n    super();\n\n    /**\n     * Object containing system-wide default values that can be changed to customize how the library\n     * works.\n     *\n     * @type {object}\n     *\n     * @property {object}  defaults.note - Default values relating to note\n     * @property {number}  defaults.note.attack - A number between 0 and 127 representing the\n     * default attack velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.release - A number between 0 and 127 representing the\n     * default release velocity of notes. Initial value is 64.\n     * @property {number}  defaults.note.duration - A number representing the default duration of\n     * notes (in seconds). Initial value is Infinity.\n     */\n    this.defaults = {\n      note: {\n        attack: Utilities.from7bitToFloat(64),\n        release: Utilities.from7bitToFloat(64),\n        duration: Infinity\n      }\n    };\n\n    /**\n     * The [`MIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n     * instance used to talk to the lower-level Web MIDI API. This should not be used directly\n     * unless you know what you are doing.\n     *\n     * @type {MIDIAccess}\n     * @readonly\n     */\n    this.interface = null;\n\n    /**\n     * Indicates whether argument validation and backwards-compatibility checks are performed\n     * throughout the WebMidi.js library for object methods and property setters.\n     *\n     * This is an advanced setting that should be used carefully. Setting `validation` to `false`\n     * improves performance but should only be done once the project has been thoroughly tested with\n     * `validation` turned on.\n     *\n     * @type {boolean}\n     */\n    this.validation = true;\n\n    /**\n     * Array of all (Input) objects\n     * @type {Input[]}\n     * @private\n     */\n    this._inputs = [];\n\n    /**\n     * Array of disconnected [`Input`](Input) objects. This is used when inputs are plugged back in\n     * to retain their previous state.\n     * @type {Input[]}\n     * @private\n     */\n    this._disconnectedInputs = [];\n\n    /**\n     * Array of all [`Output`](Output) objects\n     * @type {Output[]}\n     * @private\n     */\n    this._outputs = [];\n\n    /**\n     * Array of disconnected [`Output`](Output) objects. This is used when outputs are plugged back\n     * in to retain their previous state.\n     * @type {Output[]}\n     * @private\n     */\n    this._disconnectedOutputs = [];\n\n    /**\n     * Array of statechange events to process. These events must be parsed synchronously so they do\n     * not override each other.\n     *\n     * @type {string[]}\n     * @private\n     */\n    this._stateChangeQueue = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this._octaveOffset = 0;\n\n  }\n\n  /**\n   * Checks if the Web MIDI API is available in the current environment and then tries to connect to\n   * the host's MIDI subsystem. This is an asynchronous operation and it causes a security prompt to\n   * be displayed to the user.\n   *\n   * To enable the use of MIDI system exclusive messages, the `sysex` option should be set to\n   * `true`. However, under some environments (e.g. Jazz-Plugin), the `sysex` option is ignored\n   * and system exclusive messages are always enabled. You can check the\n   * [`sysexEnabled`](#sysexEnabled) property to confirm.\n   *\n   * To enable access to software synthesizers available on the host, you would set the `software`\n   * option to `true`. However, this option is only there to future-proof the library as support for\n   * software synths has not yet been implemented in any browser (as of September 2021).\n   *\n   * By the way, if you call the [`enable()`](#enable) method while WebMidi.js is already enabled,\n   * the callback function will be executed (if any), the promise will resolve but the events\n   * ([`\"midiaccessgranted\"`](#event:midiaccessgranted), [`\"connected\"`](#event:connected) and\n   * [`\"enabled\"`](#event:enabled)) will not be fired.\n   *\n   * There are 3 ways to execute code after `WebMidi` has been enabled:\n   *\n   * - Pass a callback function in the `options`\n   * - Listen to the [`\"enabled\"`](#event:enabled) event\n   * - Wait for the promise to resolve\n   *\n   * In order, this is what happens towards the end of the enabling process:\n   *\n   * 1. [`\"midiaccessgranted\"`](#event:midiaccessgranted) event is triggered once the user has\n   * granted access to use MIDI.\n   * 2. [`\"connected\"`](#event:connected) events are triggered (for each available input and output)\n   * 3. [`\"enabled\"`](#event:enabled) event is triggered when WebMidi.js is fully ready\n   * 4. specified callback (if any) is executed\n   * 5. promise is resolved and fulfilled with the `WebMidi` object.\n   *\n   * **Important note**: starting with Chrome v77, a page using Web MIDI API must be hosted on a\n   * secure origin (`https://`, `localhost` or `file:///`) and the user will always be prompted to\n   * authorize the operation (no matter if the `sysex` option is `true` or not).\n   *\n   * ##### Example\n   * ```js\n   * // Enabling WebMidi and using the promise\n   * WebMidi.enable().then(() => {\n   *   console.log(\"WebMidi.js has been enabled!\");\n   * })\n   * ```\n   *\n   * @param [options] {object}\n   *\n   * @param [options.callback] {function} A function to execute once the operation completes. This\n   * function will receive an `Error` object if enabling the Web MIDI API failed.\n   *\n   * @param [options.sysex=false] {boolean} Whether to enable MIDI system exclusive messages or not.\n   *\n   * @param [options.validation=true] {boolean} Whether to enable library-wide validation of method\n   * arguments and setter values. This is an advanced setting that should be used carefully. Setting\n   * [`validation`](#validation) to `false` improves performance but should only be done once the\n   * project has been thoroughly tested with [`validation`](#validation)  turned on.\n   *\n   * @param [options.software=false] {boolean} Whether to request access to software synthesizers on\n   * the host system. This is part of the spec but has not yet been implemented by most browsers as\n   * of April 2020.\n   * \n   * @param [options.requestMIDIAccessFunction] {function} A custom function to use to return \n   * the MIDIAccess object. This is useful if you want to use a polyfill for the Web MIDI API \n   * or if you want to use a custom implementation of the Web MIDI API - probably for testing\n   * purposes.\n   *\n   * @async\n   *\n   * @returns {Promise.<WebMidi>} The promise is fulfilled with the `WebMidi` object fro\n   * chainability\n   *\n   * @throws {Error} The Web MIDI API is not supported in your environment.\n   * @throws {Error} Jazz-Plugin must be installed to use WebMIDIAPIShim.\n   */\n  async enable(options = {}, legacy = false) {\n\n    /*START-ESM*/\n\n    // This block is stripped out of the IIFE and CJS versions where it isn't needed.\n\n    // If this code is executed by Node.js in \"module\" mode (when \"type\": \"module\" is used in the\n    // package.json file), then we must import the `jzz` module. I import it in this convoluted way\n    // to prevent Webpack from automatically bundling it in browser bundles where it isn't needed.\n    if (Utilities.isNode) {\n\n      // Some environments may have both Node.js and browser runtimes (Electron, NW.js, React\n      // Native, etc.) so we also check for the presence of the window.navigator property.\n      try {\n        window.navigator;\n      } catch (err) {\n        global.navigator = await Object.getPrototypeOf(async function() {}).constructor(`\n        let jzz = await import(\"jzz\");\n        return jzz.default;\n        `)();\n      }\n\n      // The `performance` module appeared in Node.js v8.5.0 but has started to be automatically\n      // imported only in v16+.\n      try {\n        performance;\n      } catch (err) {\n        global.performance = await Object.getPrototypeOf(async function() {}).constructor(`\n        let perf_hooks = await import(\"perf_hooks\");\n        return perf_hooks.performance;\n        `)();\n      }\n\n    }\n\n    /*END-ESM*/\n\n    this.validation = (options.validation !== false);\n\n    if (this.validation) {\n      // Backwards-compatibility. Previous syntax was: enable(callback, sysex)\n      if (typeof options === \"function\") options = {callback: options, sysex: legacy};\n      if (legacy) options.sysex = true;\n    }\n\n    // If already enabled, trigger callback and resolve promise but do not dispatch events.\n    if (this.enabled) {\n      if (typeof options.callback === \"function\") options.callback();\n      return Promise.resolve();\n    }\n\n    // The Jazz-Plugin takes a while to be available (even after the Window's 'load' event has been\n    // fired). Therefore, we wait a little while to give it time to finish loading (initiqted in\n    // constructor).\n    // if (!this.supported) {\n    //\n    //   await new Promise((resolve, reject) => {\n    //\n    //     const start = this.time;\n    //\n    //     const intervalID = setInterval(() => {\n    //\n    //       if (this.supported) {\n    //         clearInterval(intervalID);\n    //         resolve();\n    //       } else {\n    //         if (this.time > start + 1500) {\n    //           clearInterval(intervalID);\n    //           let error = new Error(\"The Web MIDI API is not available in your environment.\");\n    //           if (typeof options.callback === \"function\") options.callback(error);\n    //           reject(error);\n    //         }\n    //       }\n    //\n    //     }, 25);\n    //\n    //   });\n    //\n    // }\n\n    /**\n     * Event emitted when an error occurs trying to enable `WebMidi`\n     *\n     * @event WebMidi#error\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n     * milliseconds since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `error`\n     * @property {*} error Actual error that occurred\n     */\n    const errorEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"error\",\n      error: undefined\n    };\n\n    /**\n     * Event emitted once the MIDI interface has been successfully created (which implies user has\n     * granted access to MIDI).\n     *\n     * @event WebMidi#midiaccessgranted\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `midiaccessgranted`\n     */\n    const midiAccessGrantedEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"midiaccessgranted\"\n    };\n\n    /**\n     * Event emitted once `WebMidi` has been fully enabled\n     *\n     * @event WebMidi#enabled\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {WebMidi} target The object that triggered the event\n     * @property {string} type `\"enabled\"`\n     */\n    const enabledEvent = {\n      timestamp: this.time,\n      target: this,\n      type: \"enabled\"\n    };\n\n    // Request MIDI access (this iw where the prompt will appear)\n    try {\n      if (typeof options.requestMIDIAccessFunction === \"function\") {\n        this.interface = await options.requestMIDIAccessFunction(\n          {sysex: options.sysex, software: options.software}\n        );\n      } else {\n        this.interface = await navigator.requestMIDIAccess(\n          {sysex: options.sysex, software: options.software}\n        );\n      }\n    } catch(err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // Now that the Web MIDI API interface has been created, we trigger the 'midiaccessgranted'\n    // event. This allows the developer an occasion to assign listeners on 'connected' events.\n    this.emit(\"midiaccessgranted\", midiAccessGrantedEvent);\n\n    // We setup the state change listener before creating the ports so that it properly catches the\n    // the ports' `connected` events\n    this.interface.onstatechange = this._onInterfaceStateChange.bind(this);\n\n    // Update inputs and outputs (this is where `Input` and `Output` objects are created).\n    try {\n      await this._updateInputsAndOutputs();\n    } catch (err) {\n      errorEvent.error = err;\n      this.emit(\"error\", errorEvent);\n      if (typeof options.callback === \"function\") options.callback(err);\n      return Promise.reject(err);\n    }\n\n    // If we make it here, the ports have been successfully created, so we trigger the 'enabled'\n    // event.\n    this.emit(\"enabled\", enabledEvent);\n\n    // Execute the callback (if any) and resolve the promise with 'this' (for chainability)\n    if (typeof options.callback === \"function\") options.callback();\n    return Promise.resolve(this);\n\n  }\n\n  /**\n   * Completely disables **WebMidi.js** by unlinking the MIDI subsystem's interface and closing all\n   * [`Input`](Input) and [`Output`](Output) objects that may have been opened. This also means that\n   * listeners added to [`Input`](Input) objects, [`Output`](Output) objects or to `WebMidi` itself\n   * are also destroyed.\n   *\n   * @async\n   * @returns {Promise<Array>}\n   *\n   * @throws {Error} The Web MIDI API is not supported by your environment.\n   *\n   * @since 2.0.0\n   */\n  async disable() {\n\n    return this._destroyInputsAndOutputs().then(() => {\n\n      if (navigator && typeof navigator.close === \"function\") navigator.close(); // jzz\n\n      if (this.interface) this.interface.onstatechange = undefined;\n      this.interface = null; // also resets enabled, sysexEnabled\n\n      /**\n       * Event emitted once `WebMidi` has been successfully disabled.\n       *\n       * @event WebMidi#disabled\n       * @type {object}\n       * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in\n       * milliseconds since the navigation start of the document).\n       * @property {WebMidi} target The object that triggered the event\n       * @property {string} type `\"disabled\"`\n       */\n      let event = {\n        timestamp: this.time,\n        target: this,\n        type: \"disabled\"\n      };\n\n      // Finally, trigger the 'disabled' event and then remove all listeners.\n      this.emit(\"disabled\", event);\n      this.removeListener();\n\n    });\n\n  };\n\n  /**\n   * Returns the [`Input`](Input) object that matches the specified ID string or `false` if no\n   * matching input is found. As per the Web MIDI API specification, IDs are strings (not integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the input. IDs can be viewed by looking at the\n   * [`WebMidi.inputs`](WebMidi#inputs) array. Even though they sometimes look like integers, IDs\n   * are strings.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @returns {Input} An [`Input`](Input) object matching the specified ID string or `undefined`\n   * if no matching input can be found.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (this._disconnectedInputs[i].id === id.toString()) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (this.inputs[i].id === id.toString()) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Input`](Input) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [inputs](WebMidi#inputs) array).\n   *\n   * @returns {Input} The [`Input`](Input) that was found or `undefined` if no input contained the\n   * specified name.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected input\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getInputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedInputs.length; i++) {\n        if (~this._disconnectedInputs[i].name.indexOf(name)) return this._disconnectedInputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.inputs.length; i++) {\n        if (~this.inputs[i].name.indexOf(name)) return this.inputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the first [`Output`](Output) object whose name **contains** the specified string. Note\n   * that the port names change from one environment to another. For example, Chrome does not report\n   * input names in the same way as the Jazz-Plugin does.\n   *\n   * @param name {string} The non-empty string to look for within the name of MIDI inputs (such as\n   * those visible in the [`outputs`](#outputs) array).\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} The [`Output`](Output) that was found or `undefined` if no output matched\n   * the specified name.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputByName(name, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!name) return;\n      name = name.toString();\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (~this._disconnectedOutputs[i].name.indexOf(name)) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (~this.outputs[i].name.indexOf(name)) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * Returns the [`Output`](Output) object that matches the specified ID string or `false` if no\n   * matching output is found. As per the Web MIDI API specification, IDs are strings (not\n   * integers).\n   *\n   * Please note that IDs change from one host to another. For example, Chrome does not use the same\n   * kind of IDs as Jazz-Plugin.\n   *\n   * @param id {string} The ID string of the port. IDs can be viewed by looking at the\n   * [`WebMidi.outputs`](WebMidi#outputs) array.\n   * @param [options] {object}\n   * @param [options.disconnected] {boolean} Whether to retrieve a disconnected output\n   *\n   * @returns {Output} An [`Output`](Output) object matching the specified ID string. If no\n   * matching output can be found, the method returns `undefined`.\n   *\n   * @throws {Error} WebMidi is not enabled.\n   *\n   * @since 2.0.0\n   */\n  getOutputById(id, options = {disconnected: false}) {\n\n    if (this.validation) {\n      if (!this.enabled) throw new Error(\"WebMidi is not enabled.\");\n      if (!id) return;\n    }\n\n    if (options.disconnected) {\n      for (let i = 0; i < this._disconnectedOutputs.length; i++) {\n        if (this._disconnectedOutputs[i].id === id.toString()) return this._disconnectedOutputs[i];\n      }\n    } else {\n      for (let i = 0; i < this.outputs.length; i++) {\n        if (this.outputs[i].id === id.toString()) return this.outputs[i];\n      }\n    }\n\n  };\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toNoteNumber() instead.\n   */\n  noteNameToNumber(name) {\n    if (this.validation) {\n      console.warn(\n        \"The noteNameToNumber() method is deprecated. Use \" +\n        \"Utilities.toNoteNumber() instead.\"\n      );\n    }\n    return Utilities.toNoteNumber(name, this.octaveOffset);\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.getNoteDetails() instead.\n   */\n  getOctave(number) {\n\n    if (this.validation) {\n      console.warn(\"The getOctave()is deprecated. Use Utilities.getNoteDetails() instead\");\n      number = parseInt(number);\n    }\n\n    if (!isNaN(number) && number >= 0 && number <= 127) {\n      return Utilities.getNoteDetails(Utilities.offsetNumber(number, this.octaveOffset)).octave;\n    } else {\n      return false;\n    }\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  sanitizeChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\"The sanitizeChannels() method has been moved to the utilities class.\");\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.sanitizeChannels() instead.\n   */\n  toMIDIChannels(channel) {\n\n    if (this.validation) {\n      console.warn(\n        \"The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead.\"\n      );\n    }\n\n    return Utilities.sanitizeChannels(channel);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.guessNoteNumber() instead.\n   */\n  guessNoteNumber(input) {\n\n    if (this.validation) {\n      console.warn(\n        \"The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead.\"\n      );\n    }\n\n    return Utilities.guessNoteNumber(input, this.octaveOffset);\n\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.buildNoteArray() instead.\n   */\n  getValidNoteArray(notes, options = {}) {\n    if (this.validation) {\n      console.warn(\n        \"The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()\"\n      );\n    }\n    return Utilities.buildNoteArray(notes, options);\n  }\n\n  /**\n   * @private\n   * @deprecated since version 3.0.0, use Utilities.toTimestamp() instead.\n   */\n  convertToTimestamp(time) {\n\n    if (this.validation) {\n      console.warn(\n        \"The convertToTimestamp() method has been moved to Utilities.toTimestamp().\"\n      );\n    }\n\n    return Utilities.toTimestamp(time);\n\n  }\n\n  /**\n   * @return {Promise<void>}\n   * @private\n   */\n  async _destroyInputsAndOutputs() {\n\n    let promises = [];\n\n    this.inputs.forEach(input => promises.push(input.destroy()));\n    this.outputs.forEach(output => promises.push(output.destroy()));\n\n    return Promise.all(promises).then(() => {\n      this._inputs = [];\n      this._outputs = [];\n    });\n\n  }\n\n  /**\n   * @private\n   */\n  _onInterfaceStateChange(e) {\n\n    this._updateInputsAndOutputs();\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) port is connected or\n     * disconnected. This event is typically fired whenever a MIDI device is plugged in or\n     * unplugged. Please note that it may fire several times if a device possesses multiple inputs\n     * and/or outputs (which is often the case).\n     *\n     * @event WebMidi#portschanged\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `portschanged`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     *\n     * @since 3.0.2\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes available. This event is\n     * typically fired whenever a MIDI device is plugged in. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#connected\n     * @type {object}\n     * @property {number} timestamp The moment (DOMHighResTimeStamp) when the event occurred\n     * (in milliseconds since the navigation start of the document).\n     * @property {string} type `connected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n\n    /**\n     * Event emitted when an [`Input`](Input) or [`Output`](Output) becomes unavailable. This event\n     * is typically fired whenever a MIDI device is unplugged. Please note that it may fire several\n     * times if a device possesses multiple inputs and/or outputs (which is often the case).\n     *\n     * @event WebMidi#disconnected\n     * @type {object}\n     * @property {DOMHighResTimeStamp} timestamp The moment when the event occurred (in milliseconds\n     * since the navigation start of the document).\n     * @property {string} type `disconnected`\n     * @property {WebMidi} target The object to which the listener was originally added (`WebMidi`)\n     * @property {Input|Output} port The [`Input`](Input) or [`Output`](Output) object that\n     * triggered the event.\n     */\n    let event = {\n      timestamp: e.timeStamp,\n      type: e.port.state,\n      target: this\n    };\n\n    // We check if \"connection\" is \"open\" because connected events are also triggered with\n    // \"connection=closed\"\n    if (e.port.state === \"connected\" && e.port.connection === \"open\") {\n\n      if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id);\n      } else if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id);\n      }\n\n      // Emit \"connected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    // We check if \"connection\" is \"pending\" because we do not always get the \"closed\" event\n    } else if (e.port.state === \"disconnected\" && e.port.connection === \"pending\") {\n\n      if (e.port.type === \"input\") {\n        event.port = this.getInputById(e.port.id, {disconnected: true});\n      } else if (e.port.type === \"output\") {\n        event.port = this.getOutputById(e.port.id, {disconnected: true});\n      }\n\n      // Emit \"disconnected\" event\n      this.emit(e.port.state, event);\n\n      // Make a shallow copy of the event so we can use it for the \"portschanged\" event\n      const portsChangedEvent = Object.assign({}, event);\n      portsChangedEvent.type = \"portschanged\";\n      this.emit(portsChangedEvent.type, portsChangedEvent);\n\n    }\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputsAndOutputs() {\n\n    return Promise.all([\n      this._updateInputs(),\n      this._updateOutputs()\n    ]);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateInputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._inputs.length - 1; i >= 0; i--) {\n      const current = this._inputs[i];\n      const inputs = Array.from(this.interface.inputs.values());\n      if (! inputs.find(input => input === current._midiInput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedInputs.push(current);\n        this._inputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all input ports\n    let promises = [];\n\n    // Add new inputs (if not already present)\n    this.interface.inputs.forEach(nInput => {\n\n      // Check if the input is currently absent from the 'inputs' array.\n      if (! this._inputs.find(input => input._midiInput === nInput) ) {\n\n        // If the input has previously been stashed away, reuse it. If not, create a new one.\n        let input = this._disconnectedInputs.find(input => input._midiInput === nInput);\n        if (!input) input = new Input(nInput);\n        this._inputs.push(input);\n        promises.push(input.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  /**\n   * @private\n   */\n  async _updateOutputs() {\n\n    // We must check for the existence of this.interface because it might have been closed via\n    // WebMidi.disable().\n    if (!this.interface) return;\n\n    // Check for items to remove from the existing array (because they are no longer being reported\n    // by the MIDI back-end).\n    for (let i = this._outputs.length - 1; i >= 0; i--) {\n      const current = this._outputs[i];\n      const outputs = Array.from(this.interface.outputs.values());\n      if (! outputs.find(output => output === current._midiOutput)) {\n        // Instead of destroying removed inputs, we stash them in case they come back (which is the\n        // case when the computer goes to sleep and is later brought back online).\n        this._disconnectedOutputs.push(current);\n        this._outputs.splice(i, 1);\n      }\n    }\n\n    // Array to hold pending promises from trying to open all output ports\n    let promises = [];\n\n    // Add new outputs (if not already present)\n    this.interface.outputs.forEach(nOutput => {\n\n      // Check if the output is currently absent from the 'outputs' array.\n      if (! this._outputs.find(output => output._midiOutput === nOutput) ) {\n\n        // If the output has previously been stashed away, reuse it. If not, create a new one.\n        let output = this._disconnectedOutputs.find(output => output._midiOutput === nOutput);\n        if (!output) output = new Output(nOutput);\n        this._outputs.push(output);\n        promises.push(output.open());\n\n      }\n\n    });\n\n    // Return a promise that resolves when all sub-promises have resolved\n    return Promise.all(promises);\n\n  };\n\n  // injectPluginMarkup(parent) {\n  //\n  //   // Silently ignore on Node.js\n  //   if (Utilities.isNode) return;\n  //\n  //   // Default to <body> if no parent is specified\n  //   if (!(parent instanceof Element) && !(parent instanceof HTMLDocument)) {\n  //     parent = document.body;\n  //   }\n  //\n  //   // IE10 needs this:\n  //   // <meta http-equiv=\"X-UA-Compatible\" content=\"requiresActiveX=true\"/>\n  //\n  //   // Create markup and add to parent\n  //   const obj = document.createElement(\"object\");\n  //   obj.classid = \"CLSID:1ACE1618-1C7D-4561-AEE1-34842AA85E90\"; // IE\n  //   if (!obj.isJazz) obj.type = \"audio/x-jazz\";                 // Standards-compliant\n  //   obj.style.visibility = \"hidden\";\n  //   obj.style.width = obj.style.height = \"0px\";\n  //   parent.appendChild(obj);\n  //\n  // }\n\n  /**\n   * Indicates whether access to the host's MIDI subsystem is active or not.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.interface !== null;\n  }\n\n  /**\n   * An array of all currently available MIDI inputs.\n   *\n   * @readonly\n   * @type {Input[]}\n   */\n  get inputs() {\n    return this._inputs;\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isNode() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isNode has been deprecated. Use Utilities.isNode instead.\");\n    }\n\n    return Utilities.isNode;\n\n  }\n\n  /**\n   * @private\n   * @deprecated\n   */\n  get isBrowser() {\n\n    if (this.validation) {\n      console.warn(\"WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead.\");\n    }\n\n    return Utilities.isBrowser;\n\n  }\n\n  /**\n   * An integer to offset the octave of notes received from external devices or sent to external\n   * devices.\n   *\n   * When a MIDI message comes in on an input channel the reported note name will be offset. For\n   * example, if the `octaveOffset` is set to `-1` and a [`\"noteon\"`](InputChannel#event:noteon)\n   * message with MIDI number 60 comes in, the note will be reported as C3 (instead of C4).\n   *\n   * By the same token, when [`OutputChannel.playNote()`](OutputChannel#playNote) is called, the\n   * MIDI note number being sent will be offset. If `octaveOffset` is set to `-1`, the MIDI note\n   * number sent will be 72 (instead of 60).\n   *\n   * @type {number}\n   *\n   * @since 2.1\n   */\n  get octaveOffset() {\n    return this._octaveOffset;\n  }\n  set octaveOffset(value) {\n\n    if (this.validation) {\n      value = parseInt(value);\n      if (isNaN(value)) throw new TypeError(\"The 'octaveOffset' property must be an integer.\");\n    }\n\n    this._octaveOffset = value;\n\n  }\n\n  /**\n   * An array of all currently available MIDI outputs as [`Output`](Output) objects.\n   *\n   * @readonly\n   * @type {Output[]}\n   */\n  get outputs() {\n    return this._outputs;\n  }\n\n  /**\n   * Indicates whether the environment provides support for the Web MIDI API or not.\n   *\n   * **Note**: in environments that do not offer built-in MIDI support, this will report `true` if\n   * the\n   * [`navigator.requestMIDIAccess`](https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess)\n   * function is available. For example, if you have installed WebMIDIAPIShim.js but no plugin, this\n   * property will be `true` even though actual support might not be there.\n   *\n   * @readonly\n   * @type {boolean}\n   */\n  get supported() {\n    return (typeof navigator !== \"undefined\" && navigator.requestMIDIAccess);\n  }\n\n  /**\n   * Indicates whether MIDI system exclusive messages have been activated when WebMidi.js was\n   * enabled via the [`enable()`](#enable) method.\n   *\n   * @readonly\n   * @type boolean\n   */\n  get sysexEnabled() {\n    return !!(this.interface && this.interface.sysexEnabled);\n  }\n\n  /**\n   * The elapsed time, in milliseconds, since the time\n   * [origin](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin).\n   * Said simply, it is the number of milliseconds that passed since the page was loaded. Being a\n   * floating-point number, it has sub-millisecond accuracy. According to the\n   * [documentation](https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp), the\n   * time should be accurate to 5 µs (microseconds). However, due to various constraints, the\n   * browser might only be accurate to one millisecond.\n   *\n   * Note: `WebMidi.time` is simply an alias to `performance.now()`.\n   *\n   * @type {DOMHighResTimeStamp}\n   * @readonly\n   */\n  get time() {\n    return performance.now();\n  }\n\n  /**\n   * The version of the library as a [semver](https://semver.org/) string.\n   *\n   * @readonly\n   * @type string\n   */\n  get version() {\n    return \"[VI]{version}[/VI]\";\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.CHANNEL_EVENTS instead.\n   */\n  get CHANNEL_EVENTS() {\n    if (this.validation) {\n      console.warn(\n        \"The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS.\"\n      );\n    }\n    return Enumerations.CHANNEL_EVENTS;\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_SYSTEM_MESSAGES instead.\n   */\n  get MIDI_SYSTEM_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_SYSTEM_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_SYSTEM_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_SYSTEM_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_CHANNEL_MODE_MESSAGES instead\n   */\n  get MIDI_CHANNEL_MODE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_CHANNEL_MODE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_CHANNEL_MODE_MESSAGES;\n\n  }\n\n  /**\n   * @private\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_CONTROL_CHANGE_MESSAGES instead.\n   */\n  get MIDI_CONTROL_CHANGE_MESSAGES() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to \" +\n        \"Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.\"\n      );\n    }\n\n    return Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0. Use Enumerations.MIDI_REGISTERED_PARAMETERS instead.\n   * @private\n   */\n  get MIDI_REGISTERED_PARAMETER() {\n\n    if (this.validation) {\n      console.warn(\n        \"The MIDI_REGISTERED_PARAMETER enum has been moved to \" +\n        \"Enumerations.MIDI_REGISTERED_PARAMETERS.\"\n      );\n    }\n\n    return this.MIDI_REGISTERED_PARAMETERS;\n\n  }\n\n  /**\n   * @deprecated since 3.0.0.\n   * @private\n   */\n  get NOTES() {\n\n    if (this.validation) {\n      console.warn(\"The NOTES enum has been deprecated.\");\n    }\n\n    return [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n  }\n\n}\n\n// Export singleton instance of WebMidi class. The 'constructor' is nulled so that it cannot be used\n// to instantiate a new WebMidi object or extend it. However, it is not freezed so it remains\n// extensible (properties can be added at will).\nconst wm = new WebMidi();\nwm.constructor = null;\n\nexport {Enumerations} from \"./Enumerations.js\";\nexport {Forwarder} from \"./Forwarder.js\";\nexport {Input} from \"./Input.js\";\nexport {InputChannel} from \"./InputChannel.js\";\nexport {Message} from \"./Message.js\";\nexport {Note} from \"./Note.js\";\nexport {Output} from \"./Output.js\";\nexport {OutputChannel} from \"./OutputChannel.js\";\nexport {Utilities} from \"./Utilities.js\";\nexport {wm as WebMidi};\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\r\n * Attract Mode! \r\n * This demos the app and allows for a player to totally immerse\r\n * themselves in play without having to concern with actually\r\n * interacting\r\n * getPerson,getPlayers\r\n\tfetchPlayerOptions,setPlayerOption, setPlayerOptions,\r\n\tlanguage, \r\n\t...ui, \r\n\t...information,\r\n\tsetBPM, setMasterVolume,\r\n\tloadInstruments, \r\n\tloadRandomInstrument, previousInstrument, nextInstrument,\r\n\ttoggleRecording\r\n */\r\n\r\n// in seconds\r\nconst DURATION_BEFORE_AUTOMATIC_INSTRUMENT_CHANGE = 60 * 3\r\n\r\nexport default class Attractor{\r\n\r\n\tbarCounter = 0\r\n\r\n\tconstructor( application ) {\r\n\t\tthis.application = application\r\n\t}\r\n\r\n\t/**\r\n\t * Tick this along!\r\n\t */\r\n\ttick(elapsed, barProgress=0){\r\n\r\n\t\tconst players = this.application.getPlayers() \r\n\t\tconst userActive = this.application.isUserActive()\r\n\t\tif (!userActive )\r\n\t\t{\r\n\t\t\t// inactive - ATTRACT MODE\r\n\t\t\tif (barProgress === 0)\r\n\t\t\t{\r\n\t\t\t\tthis.barCounter++\r\n\r\n\t\t\t\tplayers.forEach( player => {\r\n\t\t\t\t\tif ( player.timeSinceInstrumentChanged > DURATION_BEFORE_AUTOMATIC_INSTRUMENT_CHANGE )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//console.log(\"Has player been stuck on this instrument too long?\", player.timeSinceInstrumentChanged, DURATION_BEFORE_AUTOMATIC_INSTRUMENT_CHANGE)\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tplayer.loadRandomInstrument()\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t\t\r\n\t\t\t\t// occassionally turn on a feature or two...\r\n\t\t\t\t//this.application.setBPM( Math.random() * 100 + 60 )\r\n\t\t\t\t//console.log(this.counter, \"AUTOMATON:\", elapsed.toFixed(2), \"seconds\", barProgress * 100,  this.application )\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}else{\r\n\r\n\t\t\t// active - just change instruments every now and then\r\n\t\t\tif (barProgress === 0)\r\n\t\t\t{\r\n\t\t\t\t//this.application.setState( 'backingTrack', true )\r\n\t\t\t\tthis.barCounter++\r\n\t\t\t\tplayers.forEach( player => {\r\n\t\t\t\t\tif ( player.timeSinceInstrumentChanged > DURATION_BEFORE_AUTOMATIC_INSTRUMENT_CHANGE )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tplayer.loadRandomInstrument()\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}else{\r\n\t\t\t\t//this.application.setState( 'backingTrack', false )\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// FIXME: \r\n\t\t//console.log(this.barCounter, \"AUTOMATON:\", elapsed.toFixed(2) + \"seconds\", barProgress,  {players, userActive, photoSYNTH: this.application,} )\r\n\t}\r\n\r\n\t// every frame....\r\n\ttock(elapsed, barProgress){\r\n\t\t// FIXME: \r\n\t\t// console.log(this.counter, \"AUTOMATON:\", elapsed.toFixed(2), \"seconds\", barProgress * 100,  this.application )\r\n\t}\r\n\r\n}","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('h1ZFd') + \"interface.6185bf9f.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('eYDPu'));"],"names":["eventMap","event","entries","this","listener","listeners","params","suspended","Array","args","push","callback","parseInt","duration","timeout","resolve","remaining","setTimeout","reject","assign","target","arguments","undefined","Infinity","resetallcontrollers","localcontrol","allnotesoff","omnimodeoff","omnimodeon","monomodeon","polymodeon","modulationwheelcoarse","breathcontrollercoarse","controller3","footcontrollercoarse","portamentotimecoarse","dataentrycoarse","volumecoarse","balancecoarse","controller9","pancoarse","expressioncoarse","effectcontrol1coarse","effectcontrol2coarse","controller14","controller15","generalpurposeslider1","generalpurposeslider2","generalpurposeslider3","generalpurposeslider4","controller20","controller21","controller22","controller23","controller24","controller25","controller26","controller27","controller28","controller29","controller30","controller31","bankselectfine","modulationwheelfine","breathcontrollerfine","controller35","footcontrollerfine","portamentotimefine","dataentryfine","volumefine","balancefine","controller41","panfine","expressionfine","effectcontrol1fine","effectcontrol2fine","controller46","controller47","controller48","controller49","controller50","controller51","controller52","controller53","controller54","controller55","controller56","controller57","controller58","controller59","controller60","controller61","controller62","controller63","holdpedal","portamento","sustenutopedal","softpedal","legatopedal","hold2pedal","soundvariation","resonance","soundreleasetime","soundattacktime","brightness","soundcontrol6","soundcontrol7","soundcontrol8","soundcontrol9","soundcontrol10","generalpurposebutton1","generalpurposebutton2","generalpurposebutton3","generalpurposebutton4","controller84","controller85","controller86","controller87","controller88","controller89","controller90","reverblevel","tremololevel","choruslevel","celestelevel","phaserlevel","databuttonincrement","databuttondecrement","nonregisteredparametercoarse","nonregisteredparameterfine","registeredparametercoarse","registeredparameterfine","controller102","controller103","controller104","controller105","controller106","controller107","controller108","controller109","controller110","controller111","controller112","controller113","controller114","controller115","controller116","controller117","controller118","controller119","allsoundoff","channelfinetuning","channelcoarsetuning","tuningprogram","tuningbank","modulationrange","azimuthangle","elevationangle","gain","distanceratio","maximumdistance","maximumdistancegain","referencedistanceratio","panspreadangle","rollangle","unknownsystemmessage","attack","wm","release","defaults","note","options","rawAttack","identifier","value","_accidental","_octave","validation","semitoneOffset","isNaN","result","D","E","F","G","A","B","toUpperCase","octave","matches","accidental","toLowerCase","name","Enumerations","ch","time","parsed","input","output","e","octaveOffset","RangeError","toString","Math","floor","number","lsb","min","max","multiplied","key","_number","_octaveOffset","removeListener","pressure","TypeError","controller","map","sendControlChange","parameter","Object","forEach","Utilities","rawRelease","console","warn","n","velocity","sendChannelMode","fine","sendRpnValue","Number","semitones","cents","nrpn","isArray","program","rpn","channels","_midiOutput","port","emit","id","manufacturer","state","type","open","err","Promise","message","merged","set","data","MIDI_SYSTEM_MESSAGES","mode","destinations","types","_nrpnBuffer","notesState","parameterNumberEventsEnabled","fill","data1","data2","dataBytes","rawValue","rawVelocity","rawKey","specificEvent","subtype","list","_rpnBuffer","_dispatchParameterNumberEvent","MIDI_CONTROL_CHANGE_MESSAGES","paramMsb","timestamp","parameterMsb","parameterLsb","paramLsb","command","channel","slice","rawDataBytes","length","_midiInput","onmidimessage","_onMidiMessage","bind","_forwarders","_parseEvent","isChannelMessage","addListener","window","eval","jzz","global","performance","from7bitToFloat","legacy","sysex","error","requestMIDIAccessFunction","software","errorEvent","disconnected","i","outputs","_inputs","promises","_outputs","getOutputById","portsChangedEvent","getInputById","inputs","from"],"version":3,"file":"index.2675afee.js.map","sourceRoot":"/__parcel_source_root/"}