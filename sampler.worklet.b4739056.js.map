{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,kBAAkB;AAExB,MAAM,+BAA+B;IAEpC,uEAAuE;IACvE,WAAW,uBAAuB;QACjC,OAAO;YAAC;gBACP,MAAM;gBACN,cAAc;YACf;SAAE;IACH;IAEA,YAAY,OAAO,CAAE;QAEpB,KAAK,CAAC,SAAS;QAEf,IAAI,CAAC,KAAK,YAAY,CAAC;YACtB,+BAA+B;YAC/B,QAAQ,IAAI,2BAA2B,MAAM;QAC7C,yBAAyB;QAC1B;QAEA,IAAI,CAAC,KAAK,YAAY;IACvB;IAEA,MAAM,WAAW,IAAI,EAAC;QACrB,MAAM,WAAW,MAAM,MAAM;QAC7B,MAAM,cAAc,MAAM,SAAS;QACnC,MAAM,cAAc,MAAM,IAAI,CAAC,QAAQ,gBAAgB;QACvD,OAAO;IACR;IAEA,MAAM,aAAa,WAAW,EAC9B;QACC,MAAM,cAAc,IAAI,CAAC,QAAQ;QACjC,YAAY,SAAS;QACrB,OAAO;IACR;IAEA,MAAM,KAAK,WAAW,EAAE,SAAO,CAAC,EAAE,WAAS,GAAG,EAAE,UAAQ;QAAE,MAAK;IAAM,CAAC,EAAE;QAEvE,IAAI,cAAc,IAAI,CAAC,aAAc;QAErC,YAAY,OAAO,QAAQ,QAAQ;QAEnC,IAAI,IAAI,CAAC,QAAQ,UAAU,aAE1B,MAAM,IAAI,CAAC,QAAQ;QAGpB,IAAI,UAAU,GAEb,YAAY,MAAO;aAGnB,YAAY,MAAM,GAAG,IAAI,CAAC,QAAQ,cAAc;IAElD;IAEA,oBAAoB;IACpB,QAAQ,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE;QACpC,8EAA8E;QAC9E,UAAU;QACV,MAAM,QAAQ,MAAM,CAAC,EAAE;QACvB,MAAM,SAAS,OAAO,CAAC,EAAE;QAEzB,QAAQ,MAAM,WAAW;YAAC;YAAQ;YAAS;QAAU;QAErD,0EAA0E;QAC1E,MAAM,gBAAgB,KAAK,CAAC,EAAE;QAC9B,MAAM,iBAAiB,MAAM,CAAC,EAAE;QAEhC,iCAAiC;QACjC,qEAAqE;QACrE,oEAAoE;QACpE,yEAAyE;QACzE,oCAAoC;QACpC,MAAM,gBAAgB,WAAW,WAAW,EAAE;QAE9C,yEAAyE;QACzE,kCAAkC;QAClC,IAAI,cAAc,WAAW,GAE5B,sEAAsE;QACtE,+CAA+C;QAE/C,gEAAgE;QAChE,gEAAgE;QAChE,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,QAAQ,EAAE,EAC3C,cAAc,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE;aAKxD,iEAAiE;QACjE,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,QAAQ,EAAE,EAC3C,cAAc,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,EAAE;QAIzD,gCAAgC;QAChC,OAAO;IACR;AACD;AAGA,kBAAmB,iBAAkB","sources":["source/audio/worklets/sampler.worklet.js"],"sourcesContent":["const WORKLET_SAMPLER = \"sampler-processor\"\r\n\r\nclass SampleAudioWorkletNode extends AudioWorkletProcessor  {\r\n\r\n\t// Static getter to define AudioParam objects in this custom processor.\r\n\tstatic get parameterDescriptors() {\r\n\t\treturn [{\r\n\t\t\tname: 'myParam',\r\n\t\t\tdefaultValue: 0.707\r\n\t\t}]\r\n\t}\r\n\r\n\tconstructor(context) {\r\n\r\n\t\tsuper(context, WORKLET_SAMPLER)\r\n\r\n\t\tthis.port.onmessage = (event) => {\r\n\t\t\t// Handling data from the node.\r\n\t\t\tconsole.log(\"SampleAudioWorkletNode:\", event.data)\r\n\t\t\t// loadSample(event.data)\r\n\t\t}\r\n\t  \r\n\t\tthis.port.postMessage('Hi!')\r\n\t}\r\n\r\n\tasync loadSample(path){\r\n\t\tconst response = await fetch(path)\r\n\t\tconst arrayBuffer = await response.arrayBuffer()\r\n\t\tconst audioBuffer = await this.context.decodeAudioData(arrayBuffer)\r\n\t\treturn audioBuffer\r\n\t}\r\n\r\n\tasync createBuffer(audioBuffer)\r\n\t{\r\n\t\tconst trackSource = this.context.createBufferSource()\r\n\t\ttrackSource.buffer = audioBuffer\r\n\t\treturn trackSource\r\n\t}\r\n\r\n\tasync play(audioBuffer, offset=0, velocity=128, options={ loop:false } ){\r\n\t\t\r\n\t\tlet trackSource = this.createBuffer( audioBuffer )\r\n\t\t\r\n\t\ttrackSource.loop = options.loop || false\r\n\r\n\t\tif (this.context.state === 'suspended') \r\n\t\t{\r\n\t\t\tawait this.context.resume()\r\n\t\t}\r\n\t\t\r\n\t\tif (offset == 0) \r\n\t\t{\r\n\t\t\ttrackSource.start( 0 )\r\n\t\t//offset = context.currentTime\r\n\t\t} else {\r\n\t\t\ttrackSource.start(0, this.context.currentTime - offset)\r\n\t\t}\r\n\t}\r\n\r\n\t// Float32Array(128)\r\n\tprocess(inputs, outputs, parameters) {\r\n\t\t// The processor may have multiple inputs and outputs. Get the first input and\r\n\t\t// output.\r\n\t\tconst input = inputs[0]\r\n\t\tconst output = outputs[0]\r\n\r\n\t\tconsole.error(\"process\", {inputs, outputs, parameters} )\r\n\r\n\t\t// Each input or output may have multiple channels. Get the first channel.\r\n\t\tconst inputChannel0 = input[0]\r\n\t\tconst outputChannel0 = output[0]\r\n\r\n\t\t// Get the parameter value array.\r\n\t\t// |myParamValues| is a Float32Array of either 1 or 128 audio samples\r\n\t\t// calculated by WebAudio engine from regular AudioParam operations.\r\n\t\t// (automation methods, setter) Without any AudioParam change, this array\r\n\t\t// would be a single value of 0.707.\r\n\t\tconst myParamValues = parameters.myParam || []\r\n\r\n\t\t// if |myParam| has been a constant value during this render quantum, the\r\n\t\t// length of the array would be 1.\r\n\t\tif (myParamValues.length === 1) {\r\n\r\n\t\t\t// |myParam| has been a constant value for the current render quantum,\r\n\t\t\t// which can be accessed by |myParamValues[0]|.\r\n\r\n\t\t\t// Simple gain (multiplication) processing over a render quantum\r\n\t\t\t// (128 samples). This processor only supports the mono channel.\r\n\t\t\tfor (let i = 0; i < inputChannel0.length; ++i) {\r\n\t\t\t\toutputChannel0[i] = inputChannel0[i] * myParamValues[0]\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// |myParam| has been changed and |myParamValues| has 128 values.\r\n\t\t\tfor (let i = 0; i < inputChannel0.length; ++i) {\r\n\t\t\t\toutputChannel0[i] = inputChannel0[i] * myParamValues[i]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// To keep this processor alive.\r\n\t\treturn true\r\n\t}\t\r\n}\r\n\r\n\r\nregisterProcessor( WORKLET_SAMPLER , SampleAudioWorkletNode)"],"names":[],"version":3,"file":"sampler.worklet.b4739056.js.map","sourceRoot":"/__parcel_source_root/"}