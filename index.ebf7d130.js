!function(e,t,n,r,s){var a="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},i="function"==typeof a.parcelRequireaaed&&a.parcelRequireaaed,o=i.cache||{},l="undefined"!=typeof module&&"function"==typeof module.require&&module.require.bind(module);function c(t,n){if(!o[t]){if(!e[t]){var r="function"==typeof a.parcelRequireaaed&&a.parcelRequireaaed;if(!n&&r)return r(t,!0);if(i)return i(t,!0);if(l&&"string"==typeof t)return l(t);var s=new Error("Cannot find module '"+t+"'");throw s.code="MODULE_NOT_FOUND",s}h.resolve=function(n){var r=e[t][1][n];return null!=r?r:n},h.cache={};var u=o[t]=new c.Module(t);e[t][0].call(u.exports,h,u,u.exports,this)}return o[t].exports;function h(e){var t=h.resolve(e);return!1===t?{}:c(t)}}c.isParcelRequire=!0,c.Module=function(e){this.id=e,this.bundle=c,this.exports={}},c.modules=e,c.cache=o,c.parent=i,c.register=function(t,n){e[t]=[function(e,t){t.exports=n},{}]},Object.defineProperty(c,"root",{get:function(){return a.parcelRequireaaed}}),a.parcelRequireaaed=c;for(var u=0;u<t.length;u++)c(t[u]);var h=c(n);"object"==typeof exports&&"undefined"!=typeof module?module.exports=h:"function"==typeof define&&define.amd&&define((function(){return h}))}({eygo8:[function(e,t,n){e("./helpers/bundle-manifest").register(JSON.parse('{"kPWjp":"index.ebf7d130.js","9Dn3o":"manifest.7fa60d45.webmanifest","aoX8U":"android-chrome-512x512.d05e1292.png","75ujM":"android-chrome-192x192.48a3b030.png","cwD58":"android-chrome-48x48.e0fc3253.png","6Gxta":"android-chrome-24x24.b9ecdc58.png","e0yIn":"screen1.2625ade3.png","8VVsq":"screen2.e97de4be.png","i599B":"screen3.44f277a6.png","ecLhi":"changes.623ed1ac.js","kYk3P":"changes.b2d29960.html","6ZiDd":"service-worker.js","dQYJg":"interface.5da44d38.js","1XLIV":"timing.settimeout.worker.867220de.js","257vJ":"body.5843ea5b.js","5AKhY":"body.d76b56ab.js","d5l0U":"face.ba8735ea.js","ht3Pg":"instructions.c12bf7dd.js","gm5sg":"reporting.301a458c.js","blv9t":"share-menu.17201719.js"}'))},{"./helpers/bundle-manifest":"6jNRu"}],"6jNRu":[function(e,t,n){"use strict";var r={};t.exports.register=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)r[t[n]]=e[t[n]]},t.exports.resolve=function(e){var t=r[e];if(null==t)throw new Error("Could not resolve bundle with id "+e);return t}},{}],gPDLX:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js"),s=e("./location-handler"),a=e("./dom/load-progress"),i=e("./version"),o=e("./i18n"),l=e("./settings"),c=e("./pwa/pwa"),u=e("./store"),h=e("./dom/button"),d=e("./capabilities"),m=r.interopDefault(d),p=e("./attractor"),f=r.interopDefault(p);const g=s.getRefererHostname().split(".").pop(),E=!1,_=document.documentElement;s.forceSecure(E);const w=new m.default;_.classList.add("loading",g);c.installOrUpdate(E).then((e=>{if(_.classList.toggle("updates-available",e.hasUpdates),_.classList.toggle("first-run",e.isFirstRun),_.classList.toggle("installable",e.isInstallable),e.isInstallable){const t=document.getElementById("button-install");t.addEventListener("click",(async n=>{const r=await e.install(t);console.log("installed",r.success,{installed:r}),setToast(r.success?"Installed to HomeScreen":"You can always install again in the future")})),t.hidden=!1}else if(e.updatesAvailable){document.getElementById("button-update")}})).catch((e=>{console.error("PWA",e)})).finally((t=>{(()=>{const t=l.getDomainDefaults(g),n=o.getBrowserLocales()[0],r=u.createStore();e("a91a3d2b644d6c5a").then((async({createInterface:e})=>{let o=!1;const l=document.title;try{const c=await e(t,r,w,n,((e,t)=>{1===e?(o?a.setLoadProgress(1,"Ready!"):(o=!0,a.setLoadProgress(.99," ")),document.title=l):(a.setLoadProgress(e,t),document.title=l+" - "+100*e+"%")}));new f.default(c),c.debug&&console.log(`InterFACE Version ${i.VERSION} from ${s.getReferer()} in ${n} used ${c.count} times, last time was ${Math.ceil(c.timeElapsedSinceLastPlay/1e3)} seconds ago`,{application:c})}catch(e){_.classList.add("failure"),_.classList.remove("loading"),document.getElementById("feedback").appendChild(h.showReloadButton(!0)),console.error("Ultimate failure - remove loading - add error class?")}}))})()})).catch((e=>{console.error(e)}))},{"./location-handler":"6ch5Y","./dom/load-progress":"iSXnP","./version":"98oCg","./i18n":"xOeWy","./settings":"h7RGC","./pwa/pwa":"6fCzM","./store":"g3Glw","./dom/button":"6WDhH","./capabilities":"cSvrf","./attractor":"9lSj9",a91a3d2b644d6c5a:"96lbq","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"6ch5Y":[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"parseType",(()=>a)),r.export(n,"getLocationSettings",(()=>i)),r.export(n,"createQueryString",(()=>o)),r.export(n,"getShareLink",(()=>l)),r.export(n,"getReferer",(()=>c)),r.export(n,"getRefererHostname",(()=>u)),r.export(n,"refresh",(()=>h)),r.export(n,"forceSecure",(()=>d)),r.export(n,"addToHistory",(()=>m));const s=e=>{if("string"==typeof e){const t=e.toLowerCase();return"true"===t||"1"===t||"false"!==t&&"0"!==t&&e}return Array.isArray(e)?e.toString():data},a=e=>"string"==typeof e?isNaN(parseFloat(e))?"true"===e.toLowerCase()||"false"!==e&&(e.indexOf(",")>=0?convertIntegerArrayToBooleans(e.split(",")):e):parseFloat(e):Array.isArray(e)?e.toString():e,i=e=>{{const t=new URLSearchParams(window.location.search),n=Object.assign({},e);for(const[e,r]of t)n[e]=s(r);return n}},o=e=>new URLSearchParams(e).toString(),l=e=>window.location+o(e),c=()=>document.referrer||document.location||"interface.place",u=()=>new URL(c()).hostname,h=e=>{e&&m(e),window.location.reload()},d=(e=!1)=>(e||"localhost"===location.hostname||"https:"===location.protocol||(location.protocol="https:"),!1),m=(e,t="")=>{const n=new URL(window.location);for(let t in e){const r=e[t];n.searchParams.set(t,r)}window.history.pushState(e,t,n)}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"14tkN":[function(e,t,n){n.interopDefault=function(e){return e&&e.__esModule?e:{default:e}},n.defineInteropFlag=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.exportAll=function(e,t){return Object.keys(e).forEach((function(n){"default"===n||"__esModule"===n||t.hasOwnProperty(n)||Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[n]}})})),t},n.export=function(e,t,n){Object.defineProperty(e,t,{enumerable:!0,get:n})}},{}],iSXnP:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"setLoadProgress",(()=>c)),r.export(n,"getLoadProgress",(()=>u));const s=document;let a=0;const i=["Please wait","Loading.","Loading..","Loading...","Still Loading!","Almost done!"],o=s.querySelector('label[for="progress-bar"]'),l=s.querySelector("progress"),c=(e,t)=>{a=parseInt(e),l.style.setProperty("--progress",a),l.setAttribute("value",a),t&&t.length||(t=i[Math.ceil(e*(i.length-1))]),o.innerHTML!==t&&(o.innerHTML=t)},u=()=>a},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"98oCg":[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"VERSION",(()=>s)),r.export(n,"DATE",(()=>a));const s="0.8.6",a=1654464984904},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],xOeWy:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"trimLocaleCode",(()=>s)),r.export(n,"getBrowserLocales",(()=>a));const s=e=>e.split(/-|_/)[0],a=(e={})=>{const t=Object.assign({},{languageCodeOnly:!1,fallback:"en-GB"},e),n=void 0===navigator.languages?[navigator.language]:navigator.languages;return n?n.map((e=>{const n=e.trim();return t.languageCodeOnly?s(n):n})):t.fallback?[t.fallback]:void 0}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],h7RGC:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"DEFAULT_TENSORFLOW_OPTIONS",(()=>o)),r.export(n,"DEFAULT_OPTIONS",(()=>l)),r.export(n,"KIDS_OPTIONS",(()=>c)),r.export(n,"BODY_OPTIONS",(()=>u)),r.export(n,"DANCE_OPTIONS",(()=>h)),r.export(n,"NAMES",(()=>d)),r.export(n,"getFactoryDefaults",(()=>m)),r.export(n,"getDomainDefaults",(()=>p)),r.export(n,"DEFAULT_PERSON_OPTIONS",(()=>f));var s=e("./audio/instruments"),a=e("./palette"),i=e("./maths/easing");const o={runtime:"mediapipe",solutionPath:"https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh",maxFaces:1,shouldLoadIrisModel:!0},l={loadMIDIPerformance:!1,useGamePad:!0,advancedMode:!0,showSettings:!1,metronome:!1,backingTrack:!1,clear:!0,transparent:!0,synch:!0,debug:!1,muted:!1,duet:!1,masks:!0,stereo:!1,eyes:!0,quantise:!0,text:!0,spectrogram:!0,speak:!0,midiChannel:"all",bpm:200,model:"face",instrumentPack:s.INSTRUMENT_PACK_FATBOY,instrumentPacks:[s.INSTRUMENT_PACK_FATBOY,s.INSTRUMENT_PACK_FM,s.INSTRUMENT_PACK_MUSYNGKITE].join(","),photoSensitive:window.matchMedia&&window.matchMedia("(prefers-reduced-motion: reduce)").matches||!1},c={...l,advancedMode:!1,text:!1,masks:!1},u={...l,backingTrack:!0},h={...l,instrumentPack:s.INSTRUMENT_PACK_MUSYNGKITE,instrumentPacks:[s.INSTRUMENT_PACK_MUSYNGKITE].join(",")},d=["a","b","c","d"].map((e=>`person-${e}`)),m=(e=l)=>Object.assign({},e),p=e=>{switch(e.toLowerCase()){case"lol":return m(c);case"band":default:return m();case"dance":return m(h)}},f={...a.DEFAULT_COLOURS,useDelay:!1,delayTime:.14,delayLength:10,stereoPan:!0,sendMIDI:!0,swapControls:!1,photoSensitive:!1,drawMesh:!1,drawNodes:!0,meshOnSing:!1,drawMask:!0,drawMouth:!0,drawEyes:!0,scleraRadius:1,irisRadius:.8,pupilRadius:.3,eyeRatio:.8,mouseHoldDuration:.3,eyeShutHolddDuration:3500,feedback:.1,rollSensitivity:1.2,pitchSensitivity:1,mouthCutOff:.2,mouthSilence:.05,volumeRate:.7,instrumentPack:s.INSTRUMENT_PACK_MUSYNGKITE,precision:3,ease:i.easeInSine}},{"./audio/instruments":"ftlvJ","./palette":"bNJmu","./maths/easing":"8aGct","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],ftlvJ:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"MUSICAL_NOTES",(()=>a)),r.export(n,"INSTRUMENT_PACK_FM",(()=>i)),r.export(n,"INSTRUMENT_PACK_FATBOY",(()=>o)),r.export(n,"INSTRUMENT_PACK_MUSYNGKITE",(()=>l)),r.export(n,"INSTRUMENT_PACKS",(()=>c)),r.export(n,"instrumentFolders",(()=>u)),r.export(n,"cleanTitle",(()=>h)),r.export(n,"instrumentNames",(()=>d)),r.export(n,"instrumentCache",(()=>m)),r.export(n,"fetchInstrument",(()=>p)),r.export(n,"storeInstrument",(()=>f)),r.export(n,"loadInstrumentDataPack",(()=>g)),r.export(n,"getFolderNameForInstrument",(()=>E));var s=e("./midi/general-midi");const a=["♫","𝅗𝅥","𝅘𝅥","𝅘𝅥𝅮","𝅘𝅥𝅯","𝅘𝅥𝅰","𝅘𝅥𝅱","𝅘𝅥𝅲"],i="FluidR3_GM",o="FatBoy",l="MusyngKite",c=[i,o];let u=["accordion-mp3","acoustic_bass-mp3","acoustic_grand_piano-mp3","acoustic_guitar_nylon-mp3","acoustic_guitar_steel-mp3","agogo-mp3","alto_sax-mp3","applause-mp3","bagpipe-mp3","banjo-mp3","baritone_sax-mp3","bassoon-mp3","bird_tweet-mp3","blown_bottle-mp3","brass_section-mp3","breath_noise-mp3","bright_acoustic_piano-mp3","celesta-mp3","cello-mp3","choir_aahs-mp3","church_organ-mp3","clarinet-mp3","clavinet-mp3","contrabass-mp3","distortion_guitar-mp3","drawbar_organ-mp3","dulcimer-mp3","electric_bass_finger-mp3","electric_bass_pick-mp3","electric_grand_piano-mp3","electric_guitar_clean-mp3","electric_guitar_jazz-mp3","electric_guitar_muted-mp3","electric_piano_1-mp3","electric_piano_2-mp3","english_horn-mp3","fiddle-mp3","flute-mp3","french_horn-mp3","fretless_bass-mp3","fx_1_rain-mp3","fx_2_soundtrack-mp3","fx_3_crystal-mp3","fx_4_atmosphere-mp3","fx_5_brightness-mp3","fx_6_goblins-mp3","fx_7_echoes-mp3","fx_8_scifi-mp3","glockenspiel-mp3","guitar_fret_noise-mp3","guitar_harmonics-mp3","gunshot-mp3","harmonica-mp3","harpsichord-mp3","helicopter-mp3","honkytonk_piano-mp3","kalimba-mp3","koto-mp3","lead_1_square-mp3","lead_2_sawtooth-mp3","lead_3_calliope-mp3","lead_4_chiff-mp3","lead_5_charang-mp3","lead_6_voice-mp3","lead_7_fifths-mp3","lead_8_bass__lead-mp3","marimba-mp3","melodic_tom-mp3","music_box-mp3","muted_trumpet-mp3","oboe-mp3","ocarina-mp3","orchestra_hit-mp3","orchestral_harp-mp3","overdriven_guitar-mp3","pad_1_new_age-mp3","pad_2_warm-mp3","pad_3_polysynth-mp3","pad_4_choir-mp3","pad_5_bowed-mp3","pad_6_metallic-mp3","pad_7_halo-mp3","pad_8_sweep-mp3","pan_flute-mp3","percussive_organ-mp3","piccolo-mp3","pizzicato_strings-mp3","recorder-mp3","reed_organ-mp3","reverse_cymbal-mp3","rock_organ-mp3","seashore-mp3","shakuhachi-mp3","shamisen-mp3","shanai-mp3","sitar-mp3","slap_bass_1-mp3","slap_bass_2-mp3","soprano_sax-mp3","steel_drums-mp3","string_ensemble_1-mp3","string_ensemble_2-mp3","synth_bass_1-mp3","synth_bass_2-mp3","synth_brass_1-mp3","synth_brass_2-mp3","synth_choir-mp3","synth_drum-mp3","synth_strings_1-mp3","synth_strings_2-mp3","taiko_drum-mp3","tango_accordion-mp3","telephone_ring-mp3","tenor_sax-mp3","timpani-mp3","tinkle_bell-mp3","tremolo_strings-mp3","trombone-mp3","trumpet-mp3","tuba-mp3","tubular_bells-mp3","vibraphone-mp3","viola-mp3","violin-mp3","voice_oohs-mp3","whistle-mp3","woodblock-mp3","xylophone-mp3"];const h=e=>e&&e.length>1?e.replaceAll("_"," ").replace("-mp3",""):"";let d=u.map((e=>h(e)));const m={},p=e=>m[e],f=(e,t)=>{m[e]=t},g=async(e="musyng.json")=>{const t=`./assets/audio/${e}`,n=await fetch(t);return(await n.json()).map(((e,t)=>(u[t]=`${e}-mp3`,d[t]=s.GENERAL_MIDI_INSTRUMENTS[t],`${e}-mp3`)))},E=e=>{let t=u.indexOf(e);return-1===t&&(t=d.indexOf(e)),u[t]}},{"./midi/general-midi":"dVWlb","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],dVWlb:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"GENERAL_MIDI_INSTRUMENTS",(()=>s)),r.export(n,"GENERAL_MIDI_INSTRUMENT_FAMILIES",(()=>a)),r.export(n,"DrumKitByPatchID",(()=>i));const s=["acoustic grand piano","bright acoustic piano","electric grand piano","honky-tonk piano","electric piano 1","electric piano 2","harpsichord","clavi","celesta","glockenspiel","music box","vibraphone","marimba","xylophone","tubular bells","dulcimer","drawbar organ","percussive organ","rock organ","church organ","reed organ","accordion","harmonica","tango accordion","acoustic guitar (nylon)","acoustic guitar (steel)","electric guitar (jazz)","electric guitar (clean)","electric guitar (muted)","overdriven guitar","distortion guitar","guitar harmonics","acoustic bass","electric bass (finger)","electric bass (pick)","fretless bass","slap bass 1","slap bass 2","synth bass 1","synth bass 2","violin","viola","cello","contrabass","tremolo strings","pizzicato strings","orchestral harp","timpani","string ensemble 1","string ensemble 2","synthstrings 1","synthstrings 2","choir aahs","voice oohs","synth voice","orchestra hit","trumpet","trombone","tuba","muted trumpet","french horn","brass section","synthbrass 1","synthbrass 2","soprano sax","alto sax","tenor sax","baritone sax","oboe","english horn","bassoon","clarinet","piccolo","flute","recorder","pan flute","blown bottle","shakuhachi","whistle","ocarina","lead 1 (square)","lead 2 (sawtooth)","lead 3 (calliope)","lead 4 (chiff)","lead 5 (charang)","lead 6 (voice)","lead 7 (fifths)","lead 8 (bass + lead)","pad 1 (new age)","pad 2 (warm)","pad 3 (polysynth)","pad 4 (choir)","pad 5 (bowed)","pad 6 (metallic)","pad 7 (halo)","pad 8 (sweep)","fx 1 (rain)","fx 2 (soundtrack)","fx 3 (crystal)","fx 4 (atmosphere)","fx 5 (brightness)","fx 6 (goblins)","fx 7 (echoes)","fx 8 (sci-fi)","sitar","banjo","shamisen","koto","kalimba","bag pipe","fiddle","shanai","tinkle bell","agogo","steel drums","woodblock","taiko drum","melodic tom","synth drum","reverse cymbal","guitar fret noise","breath noise","seashore","bird tweet","telephone ring","helicopter","applause","gunshot"],a=["piano","chromatic percussion","organ","guitar","bass","strings","ensemble","brass","reed","pipe","synth lead","synth pad","synth effects","ethnic","percussive","sound effects"],i={0:"standard kit",8:"room kit",16:"power kit",24:"electronic kit",25:"tr-808 kit",32:"jazz kit",40:"brush kit",48:"orchestra kit",56:"sound fx kit"}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],bNJmu:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"DEFAULT_COLOURS",(()=>s)),r.export(n,"DAMI_KIM_COLOURS",(()=>a)),r.export(n,"PASTEL_COLOURS",(()=>i));const s={hue:90,saturation:80,luminosity:50,hueRange:360,dots:60,mouth:"rgba(255,0,0,0.5)",mouthClosed:"rgba(255,0,0,0.2)",lipsUpperInner:"pink",lipsLowerInner:"pink",midwayBetweenEyes:"blue",leftEyeLower0:"red",rightEyeLower0:"red",leftEyeIris:"yellow",rightEyeIris:"yellow"},a={...s},i={...s};n.default={white:"hsl(22, 28%, 87%)",dark:"hsl(30, 6%, 14%)",grey:"hsl(11, 6%, 50%)",cream:"hsl(27, 30%, 45%)",brown:"hsl(23, 22%, 30%)",blue:"hsl(196, 18%, 33%)",green:"hsl(56, 18%, 33%)",yellow:"hsl(56, 18%, 33%)",orange:"hsl(28, 69%, 38%)",red:"hsl(9, 58%, 35%)"}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"8aGct":[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"linear",(()=>s)),r.export(n,"easeInSine",(()=>a)),r.export(n,"easeOutSine",(()=>i)),r.export(n,"easeInOutSine",(()=>o)),r.export(n,"easeInQuad",(()=>l)),r.export(n,"easeOutQuad",(()=>c)),r.export(n,"easeInOutQuad",(()=>u)),r.export(n,"easeInCubic",(()=>h)),r.export(n,"easeOutCubic",(()=>d)),r.export(n,"easeInOutCubic",(()=>m)),r.export(n,"easeInQuart",(()=>p)),r.export(n,"easeOutQuart",(()=>f)),r.export(n,"easeInOutQuart",(()=>g)),r.export(n,"easeInQuint",(()=>E)),r.export(n,"easeOutQuint",(()=>_)),r.export(n,"easeInOutQuint",(()=>w)),r.export(n,"easeInExpo",(()=>v)),r.export(n,"easeOutExpo",(()=>b)),r.export(n,"easeInOutExpo",(()=>I)),r.export(n,"easeInCirc",(()=>N)),r.export(n,"easeOutCirc",(()=>y)),r.export(n,"easeInOutCirc",(()=>M)),r.export(n,"easeInBack",(()=>S)),r.export(n,"easeOutBack",(()=>A)),r.export(n,"easeInOutBack",(()=>T)),r.export(n,"easeInElastic",(()=>R)),r.export(n,"easeOutElastic",(()=>C)),r.export(n,"easeInOutElastic",(()=>O)),r.export(n,"easeOutBounce",(()=>D)),r.export(n,"easeInBounce",(()=>U)),r.export(n,"easeInOutBounce",(()=>L));const s=e=>e,a=e=>-1*Math.cos(e*(Math.PI/2))+1;function i(e){return Math.sin(e*(Math.PI/2))}function o(e){return-.5*(Math.cos(Math.PI*e)-1)}function l(e){return e*e}function c(e){return e*(2-e)}function u(e){return e<.5?2*e*e:(4-2*e)*e-1}function h(e){return e*e*e}function d(e){const t=e-1;return t*t*t+1}function m(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1}function p(e){return e*e*e*e}function f(e){const t=e-1;return 1-t*t*t*t}function g(e){const t=e-1;return e<.5?8*e*e*e*e:1-8*t*t*t*t}function E(e){return e*e*e*e*e}function _(e){const t=e-1;return 1+t*t*t*t*t}function w(e){const t=e-1;return e<.5?16*e*e*e*e*e:1+16*t*t*t*t*t}function v(e){return 0===e?0:Math.pow(2,10*(e-1))}function b(e){return 1===e?1:1-Math.pow(2,-10*e)}function I(e){if(0===e||1===e)return e;const t=2*e,n=t-1;return t<1?.5*Math.pow(2,10*n):.5*(2-Math.pow(2,-10*n))}function N(e){const t=e/1;return-1*(Math.sqrt(1-t*e)-1)}function y(e){const t=e-1;return Math.sqrt(1-t*t)}function M(e){const t=2*e,n=t-2;return t<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-n*n)+1)}function S(e,t=1.70158){return e*e*((t+1)*e-t)}function A(e,t=1.70158){const n=e/1-1;return n*n*((t+1)*n+t)+1}function T(e,t=1.70158){const n=2*e,r=n-2,s=1.525*t;return n<1?.5*n*n*((s+1)*n-s):.5*(r*r*((s+1)*r+s)+2)}function R(e,t=.7){if(0===e||1===e)return e;const n=e/1-1,r=1-t,s=r/(2*Math.PI)*Math.asin(1);return-Math.pow(2,10*n)*Math.sin((n-s)*(2*Math.PI)/r)}function C(e,t=.7){const n=1-t,r=2*e;if(0===e||1===e)return e;const s=n/(2*Math.PI)*Math.asin(1);return Math.pow(2,-10*r)*Math.sin((r-s)*(2*Math.PI)/n)+1}function O(e,t=.65){const n=1-t;if(0===e||1===e)return e;const r=2*e,s=r-1,a=n/(2*Math.PI)*Math.asin(1);return r<1?Math.pow(2,10*s)*Math.sin((s-a)*(2*Math.PI)/n)*-.5:Math.pow(2,-10*s)*Math.sin((s-a)*(2*Math.PI)/n)*.5+1}function D(e){const t=e/1;if(t<1/2.75)return 7.5625*t*t;if(t<2/2.75){const e=t-1.5/2.75;return 7.5625*e*e+.75}if(t<2.5/2.75){const e=t-2.25/2.75;return 7.5625*e*e+.9375}{const e=t-2.625/2.75;return 7.5625*e*e+.984375}}function U(e){return 1-D(1-e)}function L(e){return e<.5?.5*U(2*e):.5*D(2*e-1)+.5}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"6fCzM":[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"isSupportingBrowser",(()=>E)),r.export(n,"uninstall",(()=>w)),r.export(n,"installOrUpdate",(()=>S));var s=e("../version"),a=e("url:../manifest.webmanifest");r.interopDefault(a);let i;const o=["standalone","fullscreen","minimal-ui"],l="standalone"in navigator&&!0===window.navigator.standalone,c=o.filter((e=>window.matchMedia(`(display-mode:${e})`).matches)),u=o.includes(c),h=document.referrer.includes("android-app://"),d=Array.isArray(navigator.userAgent.match(/MSAppHost/i)),m=l||u||h||d||!1,p=null===navigator.serviceWorker.controller,f=navigator.onLine,g={android:h,microsoft:d,pwa:m,offline:!f,displayMode:c},E=window.hasOwnProperty("BeforeInstallPromptEvent");let _;const w=()=>{navigator.serviceWorker.getRegistrations().then((e=>{for(let t of e)t.unregister().then((()=>self.clients.matchAll())).then((e=>{e.forEach((e=>{e.url&&"navigate"in e&&e.navigate(e.url)}))}))}))};let v=!1,b=!1,I=!1,N=!1;const y=s.VERSION;let M;const S=async(t=!1)=>{let n=[],r={};if(!E)throw Error("Browser does not support PWA installation");m?n.push(`PWA ${s.VERSION} Installed, checking for updates`,{deferredPrompt:i,isFirstRun:p,isInWebAppiOS:l,isInWebAppChrome:u}):p?n.push(`PWA ${s.VERSION} AVAILABLE WWW / PWA`,{deferredPrompt:i,isFirstRun:p,first:navigator.serviceWorker.controller}):n.push(`WWW ${s.VERSION}`,{deferredPrompt:i,isFirstRun:p,first:navigator.serviceWorker.controller});const a=await navigator.serviceWorker.getRegistration();if(console.log("Checking for installed service worker",a),a&&a.installing&&navigator.storage){const e=await navigator.storage.estimate();console.log("Checking for installed storage space",e)}if(a){const e=a.active,t=new URL(e.scriptURL);M=t.search.split("=")[1]||"-.-.-",I=M!==s.VERSION;const r=e.state;n.push("PREVIOUS SW URL",`${t}`),n.push("EXPECTED VERSION",`${s.VERSION}`),n.push("SW Reg v",`${M} -> ${y}`,{updatesAvailable:I,previousVersion:M,registration:a,activatedState:r,activeWorker:e,previousServiceWorkerURL:t}),n.push(`SW State ${r}`),a.addEventListener("updatefound",(async()=>{const r=a.installing;n.push("Update found",{registration:a,installWorker:r,activeWorker:e,previousServiceWorkerURL:t}),b=!0,r.waiting&&navigator.serviceWorker.controller&&n.push("sanity check",{installWorker:r,nav:navigator.serviceWorker.controller}),r.addEventListener("statechange",(()=>{"installed"===r.state?(b=!1,N=!0,n.push("update installed expected truth",navigator.serviceWorker.controller,{registration:a,installWorker:r})):n.push("update",r.state,{registration:a,installWorker:r})}))}),{once:!0})}else n.push("PWA NO service worker registered");const o=`../service-worker.js#v=${s.VERSION}`;let c=await navigator.serviceWorker.register(o);if(n.push("Service worker with #",o,c),!c){const e=`../service-worker.js?v=${s.VERSION}`;c=await navigator.serviceWorker.register(e),n.push("Service worker with ?",e,c)}return c||(c=await navigator.serviceWorker.register(e("859dbabfced9cec8")),n.push("Service worker falling back to default :*(",c)),p?n.push("PWA FRESH service worker registering",{serviceWorker:c}):n.push("PWA registering service worker",{serviceWorker:c}),m||i||(i=await A(),v=!0,n.push("Waiting prompts",i)),r={log:n,online:f,offline:!f,previousVersion:M,currentVersion:y,isInstallable:v,isFirstRun:p,isRunningAsApp:m,hasUpdates:I&&!p,isInstalled:m,install:e=>{return t=e,n=i,new Promise((async(e,r)=>{if(!n)return r();window.addEventListener("appinstalled",(t=>{e({success:!0,log:"Your PWA has been installed"})}),{once:!0}),n.prompt(),t.disabled=!0,"accepted"===(await n.userChoice).outcome?(new URLSearchParams(window.location.search).installing=!0,_=!0,t.hidden=!0):(_=!1,e({success:!1,log:"User chose to not install"})),t.disabled=!1}));var t,n},prompt:i,updatesAvailable:I,updating:b,updated:N,update:()=>{a.waiting.postMessage({type:"SKIP_WAITING"}),window.location.reload()},...g},r},A=()=>new Promise(((e,t)=>E?i?e(i):void window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),e(t)}),{once:!0}):t("Unsupported Browser")));m||A().then((e=>i=e))},{"../version":"98oCg","url:../manifest.webmanifest":"3Gevj","3ff03aacb10143d6":"6ja6U","859dbabfced9cec8":"lTsCa","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"3Gevj":[function(e,t,n){t.exports=e("./helpers/bundle-url").getBundleURL("kPWjp")+e("./helpers/bundle-manifest").resolve("9Dn3o")},{"./helpers/bundle-url":"bGZ1f","./helpers/bundle-manifest":"6jNRu"}],bGZ1f:[function(e,t,n){"use strict";var r={};function s(e){return(""+e).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\/\/.+)\/[^/]+$/,"$1")+"/"}n.getBundleURL=function(e){var t=r[e];return t||(t=function(){try{throw new Error}catch(t){var e=(""+t.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^)\n]+/g);if(e)return s(e[2])}return"/"}(),r[e]=t),t},n.getBaseURL=s,n.getOrigin=function(e){var t=(""+e).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^/]+/);if(!t)throw new Error("Origin not found");return t[0]}},{}],"6ja6U":[function(e,t,n){t.exports=e("./helpers/browser/js-loader")(e("./helpers/bundle-url").getBundleURL("kPWjp")+e("./helpers/bundle-manifest").resolve("ecLhi")).then((()=>t.bundle.root("fkDEI")))},{"./helpers/browser/js-loader":"7mk4K","./helpers/bundle-url":"bGZ1f","./helpers/bundle-manifest":"6jNRu"}],"7mk4K":[function(e,t,n){"use strict";var r=e("../cacheLoader");t.exports=r((function(e){return new Promise((function(t,n){var r=document.getElementsByTagName("script");if([].concat(r).some((function(t){return t.src===e})))t();else{var s=document.createElement("link");s.href=e,s.rel="preload",s.as="script",document.head.appendChild(s);var a=document.createElement("script");a.async=!0,a.type="text/javascript",a.charset="utf-8",a.src=e,a.onerror=function(t){var r=new TypeError("Failed to fetch dynamically imported module: ".concat(e,". Error: ").concat(t.message));a.onerror=a.onload=null,a.remove(),n(r)},a.onload=function(){a.onerror=a.onload=null,t()},document.getElementsByTagName("head")[0].appendChild(a)}}))}))},{"../cacheLoader":"beMRV"}],beMRV:[function(e,t,n){"use strict";var r={},s={},a={};function i(e){switch(e){case"preload":return s;case"prefetch":return a;default:return r}}t.exports=function(e,t){return function(n){var r=i(t);return r[n]?r[n]:r[n]=e.apply(null,arguments).catch((function(e){throw delete r[n],e}))}}},{}],lTsCa:[function(e,t,n){t.exports=e("./helpers/bundle-url").getBundleURL("kPWjp")+e("./helpers/bundle-manifest").resolve("6ZiDd")},{"./helpers/bundle-url":"bGZ1f","./helpers/bundle-manifest":"6jNRu"}],g3Glw:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"createStore",(()=>a));var s=e("./utils");const a=(e="InterFACE")=>{const t=localStorage.getItem(e),n=Object.assign({},JSON.parse(t)),r=s.debounce((t=>{const n=JSON.stringify(t);localStorage.setItem(e,n)}),20);return{save:r,has:e=>!!n[e],removeItem:e=>{delete n[e],r(n)},getItem:e=>n[e],setItem:(e,t)=>(n[e]=Object.assign({},n[e],t),r(n),n)}}},{"./utils":"9g7cm","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"9g7cm":[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"convertOptionToObject",(()=>s)),r.export(n,"debounce",(()=>a)),r.export(n,"MOUSE_HELD",(()=>o)),r.export(n,"MOUSE_HOLDING",(()=>l)),r.export(n,"MOUSE_TAP",(()=>c)),r.export(n,"addMouseTapAndHoldEvents",(()=>u)),r.export(n,"decodeBase64",(()=>h));const s=e=>e.reduce(((e,t)=>{const n=t.split(":");return e[n[0]]=parseFloat(n[1]),e}),{}),a=(e,t)=>{let n;return(...r)=>(clearTimeout(n),n=setTimeout((()=>e(...r)),t),n)},i=()=>performance.now()||Date.now(),o="mouse_held",l="mouse_holding",c="mouse_tap",u=(e,t=800)=>{let n=-1,r=!1,s=!1;const a=(t,n={})=>{e.dispatchEvent(new CustomEvent(t,{detail:n}))},u=()=>{if(r&&s){const e=i()-n;if(e<t){const n=1-e/t,s=100-Math.ceil(100*n);a(l,{elapsed:e,isMouseOver:r,remaining:n,percentageRemaining:s}),requestAnimationFrame(u)}else n=-1}};return e.addEventListener("mousedown",(e=>{n=i(),s=!0,u(),e.preventDefault()})),e.addEventListener("mouseup",(e=>{const l=i()-n;a(l<t?c:o,{elapsed:l,isMouseOver:r}),n=-1,s=!1,e.preventDefault()})),e.addEventListener("mouseover",(e=>{r=!0})),e.addEventListener("mouseout",(e=>{r=!1})),{}};const h=(e,t)=>{const n=e.replace(/[^A-Za-z0-9\+\/]/g,""),r=n.length,s=t?Math.ceil((3*r+1>>2)/t)*t:3*r+1>>2,a=new Uint8Array(s);for(let e,t,o=0,l=0,c=0;c<r;c++)if(t=3&c,o|=((i=n.charCodeAt(c))>64&&i<91?i-65:i>96&&i<123?i-71:i>47&&i<58?i+4:43===i?62:47===i?63:0)<<18-6*t,3===t||r-c==1){for(e=0;e<3&&l<s;e++,l++)a[l]=o>>>(16>>>e&24)&255;o=0}var i;return a}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"6WDhH":[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"setButton",(()=>o)),r.export(n,"showReloadButton",(()=>c)),r.export(n,"createInstallButton",(()=>u)),r.export(n,"showUpdateButton",(()=>h)),r.export(n,"setupMIDIButton",(()=>d));var s=e("./text"),a=e("../version"),i=e("../models/info");const o=(e,t)=>{const n=document.getElementById(e);return!!n&&(n.addEventListener("click",(e=>{t&&t({element:n})})),n)},l=(e,t,n="")=>{const r=document.createElement("button");return r.classList.add(n),r.setAttribute("type","button"),r.setAttribute("aria-label",t),r.innerHTML=e,s.addTooltip(r),r},c=e=>{const t=l("Try again! Reload and reset","Reload this application!","reload-app");return t.addEventListener("click",(t=>{e&&history.replaceState(null,null,"?"),window.location.reload()})),t.id="button-reload",t},u=e=>{const t=`Click to install ${e.short_name} V-${a.VERSION.replaceAll(".","-")}<br>Date:${i.formattedDate}`,n=l("Install",t,"install-app");return n.id="button-install",n.style.setProperty("--logo",`url(${e.icons[0].src})`),n},h=(e,t)=>{const n=l("Update","Update to new version","update-available");n.id="button-update",n.addEventListener("click",(()=>t()))},d=(e,t)=>{let n=!1;return e.addEventListener("mousedown",(async e=>(e.preventDefault(),t&&t(),n=!0,!1)),{once:!0}),{setText:t=>e.innerHTML=t,setLabel:t=>e.setAttribute("aria-label",t)}}},{"./text":"cwBIr","../version":"98oCg","../models/info":"dytk0","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],cwBIr:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"bindTextElement",(()=>a)),r.export(n,"setFeedback",(()=>i)),r.export(n,"setToast",(()=>l)),r.export(n,"addTooltip",(()=>u)),r.export(n,"addToolTips",(()=>h));var s=e("../utils");const a=(e,t=700,n=0,r=!1)=>{let a=null,i=-1,o=-1,l=null;const c=s.debounce((t=>{e.innerHTML=t}),t);return e?(s,u=t)=>{r&&(s=s.split(/!|\./i).join("<br>")),l=s,""!==e.innerHTML&&a==s||(clearTimeout(o),a=s,0===u?(clearTimeout(i),e.innerHTML=s):i=c(s),n>0&&(o=(t=>{const r=n*t;return o=setTimeout((()=>{e.innerHTML=""}),r),r})(s.length)))}:null},i=a(document.getElementById("feedback"),20),o=document.getElementById("toast"),l=((e,t=6,n=550)=>{let r="",s=null,a=!1,i=!1;return e?(o,l=t)=>{if(o===r)return;clearInterval(s),r=o;const c=(t=0,r=1)=>{const l=o.slice(0,t);if(a=!0,e.innerHTML=l,t<o.length)requestAnimationFrame((()=>c(t+r,r)));else{a=!1;const t=n*o.length;s=setTimeout((()=>{e.innerHTML="",i=!0}),t)}};l<1?c(o.length,10):c(a?r.length:0,l)}:null})(o),c=e=>{o.setAttribute("style",`--left: ${e.offsetLeft}; \n\t\t --top: ${e.offsetTop};`)},u=e=>e.addEventListener("mouseover",(e=>{const t=e.target.getAttribute("aria-label")||e.target.innerHTML;"BUTTON"===e.target.nodeName?c(e.target):c(e.target.parentElement),l(t)})),h=(e,t="button, select, input")=>{e.querySelectorAll(t).forEach((e=>u(e)))}},{"../utils":"9g7cm","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],dytk0:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"formattedDate",(()=>i));var s=e("../version");const a=new Date(s.DATE),i=`${a.getDate()}/${a.getMonth()+1}/${a.getFullYear()} ${a.toLocaleTimeString("en-GB",{hour12:!0,hour:"numeric",minute:"numeric"})}`},{"../version":"98oCg","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],cSvrf:[function(e,t,n){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(n);var r=e("./audio/midi/midi-out");n.default=class{cameraAvailble=void 0!==navigator.getUserMedia;webMIDIAvailable=!1;touchScreen=(()=>{try{return document.createEvent("TouchEvent"),!0}catch(e){return!1}})();mouse=!window.matchMedia("(hover: none)").matches;get willWork(){return this.cameraAvailble}constructor(){this.webMIDIAvailable=r.testForMIDI()}}},{"./audio/midi/midi-out":"czNVC","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],czNVC:[function(e,t,n){var r=e("@parcel/transformer-js/src/esmodule-helpers.js");r.defineInteropFlag(n),r.export(n,"testForMIDI",(()=>a)),r.export(n,"setupMIDI",(()=>i));var s=e("webmidi");const a=()=>void 0!==navigator.requestMIDIAccess,i=(e,t)=>new Promise(((n,r)=>{s.WebMidi.enable().then((r=>{s.WebMidi.addListener("connected",(function(t){e&&e(t)})),s.WebMidi.addListener("disconnected",(function(e){t&&t()})),n(s.WebMidi)})).catch((e=>r(e)))}))},{webmidi:"hhSo0","@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],hhSo0:[function(require,module,exports){"use strict";var global=arguments[3];Object.defineProperty(exports,"__esModule",{value:!0});class EventEmitter{constructor(e=!1){this.eventMap={},this.eventsSuspended=1==e}addListener(e,t,n={}){if("string"==typeof e&&e.length<1||e instanceof String&&e.length<1||"string"!=typeof e&&!(e instanceof String)&&e!==EventEmitter.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if("function"!=typeof t)throw new TypeError("The callback must be a function.");const r=new Listener(e,this,t,n);return this.eventMap[e]||(this.eventMap[e]=[]),n.prepend?this.eventMap[e].unshift(r):this.eventMap[e].push(r),r}addOneTimeListener(e,t,n={}){n.remaining=1,this.addListener(e,t,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(e,t){return void 0===e?!!(this.eventMap[EventEmitter.ANY_EVENT]&&this.eventMap[EventEmitter.ANY_EVENT].length>0)||Object.entries(this.eventMap).some((([,e])=>e.length>0)):!!(this.eventMap[e]&&this.eventMap[e].length>0)&&(t instanceof Listener?this.eventMap[e].filter((e=>e===t)).length>0:"function"==typeof t?this.eventMap[e].filter((e=>e.callback===t)).length>0:null==t)}get eventNames(){return Object.keys(this.eventMap)}getListeners(e){return this.eventMap[e]||[]}suspendEvent(e){this.getListeners(e).forEach((e=>{e.suspended=!0}))}unsuspendEvent(e){this.getListeners(e).forEach((e=>{e.suspended=!1}))}getListenerCount(e){return this.getListeners(e).length}emit(e,...t){if("string"!=typeof e&&!(e instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[EventEmitter.ANY_EVENT]||[];return this.eventMap[e]&&(r=r.concat(this.eventMap[e])),r.forEach((e=>{if(e.suspended)return;let r=[...t];Array.isArray(e.arguments)&&(r=r.concat(e.arguments)),e.remaining>0&&(n.push(e.callback.apply(e.context,r)),e.count++),--e.remaining<1&&e.remove()})),n}removeListener(e,t,n={}){if(void 0===e)return void(this.eventMap={});if(!this.eventMap[e])return;let r=this.eventMap[e].filter((e=>t&&e.callback!==t||n.remaining&&n.remaining!==e.remaining||n.context&&n.context!==e.context));r.length?this.eventMap[e]=r:delete this.eventMap[e]}async waitFor(e,t={}){return t.duration=parseInt(t.duration),(isNaN(t.duration)||t.duration<=0)&&(t.duration=1/0),new Promise(((n,r)=>{let s,a=this.addListener(e,(()=>{clearTimeout(s),n()}),{remaining:1});t.duration!==1/0&&(s=setTimeout((()=>{a.remove(),r("The duration expired before the event was emitted.")}),t.duration))}))}get eventCount(){return Object.keys(this.eventMap).length}}class Listener{constructor(e,t,n,r={}){if("string"!=typeof e&&!(e instanceof String)&&e!==EventEmitter.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!t)throw new ReferenceError("The 'target' parameter is mandatory.");if("function"!=typeof n)throw new TypeError("The 'callback' must be a function.");void 0===r.arguments||Array.isArray(r.arguments)||(r.arguments=[r.arguments]),(r=Object.assign({context:t,remaining:1/0,arguments:void 0,duration:1/0},r)).duration!==1/0&&setTimeout((()=>this.remove()),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=e,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=t}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}
/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All properties are static and should be referenced using the class name. For example:
 * `Enumerations.MIDI_CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Enumerations{static get MIDI_CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get MIDI_CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CONTROL_CHANGE_MESSAGES(){return{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-databuttonincrement","rpn-databuttondecrement"]}}
/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Note{constructor(e,t={}){this.duration=wm.defaults.note.duration,this.attack=wm.defaults.note.attack,this.release=wm.defaults.note.release,null!=t.duration&&(this.duration=t.duration),null!=t.attack&&(this.attack=t.attack),null!=t.rawAttack&&(this.attack=Utilities.from7bitToFloat(t.rawAttack)),null!=t.release&&(this.release=t.release),null!=t.rawRelease&&(this.release=Utilities.from7bitToFloat(t.rawRelease)),Number.isInteger(e)?this.identifier=Utilities.toNoteIdentifier(e):this.identifier=e}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(e){const t=Utilities.getNoteDetails(e);if(wm.validation&&!e)throw new Error("Invalid note identifier");this._name=t.name,this._accidental=t.accidental,this._octave=t.octave}get name(){return this._name}set name(e){if(wm.validation&&(e=e.toUpperCase(),!["C","D","E","F","G","A","B"].includes(e)))throw new Error("Invalid name value");this._name=e}get accidental(){return this._accidental}set accidental(e){if(wm.validation&&(e=e.toLowerCase(),!["#","##","b","bb"].includes(e)))throw new Error("Invalid accidental value");this._accidental=e}get octave(){return this._octave}set octave(e){if(wm.validation&&(e=parseInt(e),isNaN(e)))throw new Error("Invalid octave value");this._octave=e}get duration(){return this._duration}set duration(e){if(wm.validation&&(e=parseFloat(e),isNaN(e)||null===e||e<0))throw new RangeError("Invalid duration value.");this._duration=e}get attack(){return this._attack}set attack(e){if(wm.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid attack value.");this._attack=e}get release(){return this._release}set release(e){if(wm.validation&&(e=parseFloat(e),isNaN(e)||!(e>=0&&e<=1)))throw new RangeError("Invalid release value.");this._release=e}get rawAttack(){return Utilities.fromFloatTo7Bit(this._attack)}set rawAttack(e){this._attack=Utilities.from7bitToFloat(e)}get rawRelease(){return Utilities.fromFloatTo7Bit(this._release)}set rawRelease(e){this._release=Utilities.from7bitToFloat(e)}get number(){return Utilities.toNoteNumber(this.identifier)}getOffsetNumber(e=0,t=0){return wm.validation&&(e=parseInt(e)||0,t=parseInt(t)||0),Math.min(Math.max(this.number+12*e+t,0),127)}}
/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Utilities{
/**
   * Returns a MIDI note number matching the identifier passed in the form of a string. The
   * identifier must include the octave number. The identifier also optionally include a sharp (#),
   * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid
   * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.
   *
   * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number
   * 60) as per the scientific pitch notation standard.
   *
   * The resulting note number can be offset by using the `octaveOffset` parameter.
   *
   * @param identifier {string} The identifier in the form of a letter, followed by an optional "#",
   * "##", "b" or "bb" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,
   * Abb4, B##6, etc.
   *
   * @param {number} [octaveOffset=0] A integer to offset the octave by.
   *
   * @returns {number} The MIDI note number (an integer between 0 and 127).
   *
   * @throws RangeError Invalid 'octaveOffset' value
   *
   * @throws TypeError Invalid note identifier
   *
   * @license Apache-2.0
   * @since 3.0.0
   * @static
   */
static toNoteNumber(e,t=0){if(t=null==t?0:parseInt(t),isNaN(t))throw new RangeError("Invalid 'octaveOffset' value");"string"!=typeof e&&(e="");const n=this.getNoteDetails(e);if(!n)throw new TypeError("Invalid note identifier");let r=12*(n.octave+1+t);if(r+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n.name],n.accidental&&(n.accidental.startsWith("b")?r-=n.accidental.length:r+=n.accidental.length),r<0||r>127)throw new RangeError("Invalid octaveOffset value");return r}static getNoteDetails(e){Number.isInteger(e)&&(e=this.toNoteIdentifier(e));const t=e.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!t)throw new TypeError("Invalid note identifier");const n=t[1].toUpperCase(),r=parseInt(t[3]);let s=t[2].toLowerCase();return s=""===s?void 0:s,{accidental:s,identifier:n+(s||"")+r,name:n,octave:r}}static sanitizeChannels(e){let t;if(this.validation)if("all"===e)t=["all"];else if("none"===e)return[];return t=Array.isArray(e)?e:[e],t.indexOf("all")>-1&&(t=Enumerations.MIDI_CHANNEL_NUMBERS),t.map((function(e){return parseInt(e)})).filter((function(e){return e>=1&&e<=16}))}static toTimestamp(e){let t=!1;const n=parseFloat(e);return!isNaN(n)&&("string"==typeof e&&"+"===e.substring(0,1)?n>=0&&(t=wm.time+n):n>=0&&(t=n),t)}static guessNoteNumber(e,t){t=parseInt(t)||0;let n=!1;if(Number.isInteger(e)&&e>=0&&e<=127)n=parseInt(e);else if(parseInt(e)>=0&&parseInt(e)<=127)n=parseInt(e);else if("string"==typeof e||e instanceof String)try{n=this.toNoteNumber(e.trim(),t)}catch(e){return!1}return n}static toNoteIdentifier(e,t){if(e=parseInt(e),isNaN(e)||e<0||e>127)throw new RangeError("Invalid note number");if(t=null==t?0:parseInt(t),isNaN(t))throw new RangeError("Invalid octaveOffset value");const n=Math.floor(e/12-1)+t;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][e%12]+n.toString()}static buildNote(e,t={}){if(t.octaveOffset=parseInt(t.octaveOffset)||0,e instanceof Note)return e;let n=this.guessNoteNumber(e,t.octaveOffset);if(!1===n)throw new TypeError(`The input could not be parsed as a note (${e})`);return t.octaveOffset=void 0,new Note(n,t)}static buildNoteArray(e,t={}){let n=[];return Array.isArray(e)||(e=[e]),e.forEach((e=>{n.push(this.buildNote(e,t))})),n}static from7bitToFloat(e){return e===1/0&&(e=127),e=parseInt(e)||0,Math.min(Math.max(e/127,0),1)}static fromFloatTo7Bit(e){return e===1/0&&(e=1),e=parseFloat(e)||0,Math.min(Math.max(Math.round(127*e),0),127)}static fromMsbLsbToFloat(e,t=0){wm.validation&&(e=Math.min(Math.max(parseInt(e)||0,0),127),t=Math.min(Math.max(parseInt(t)||0,0),127));const n=((e<<7)+t)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(e){wm.validation&&(e=Math.min(Math.max(parseFloat(e)||0,0),1));const t=Math.round(16383*e);return{msb:t>>7,lsb:127&t}}static offsetNumber(e,t=0,n=0){if(wm.validation){if(e=parseInt(e),isNaN(e))throw new Error("Invalid note number");t=parseInt(t)||0,n=parseInt(n)||0}return Math.min(Math.max(e+12*t+n,0),127)}static getPropertyByValue(e,t){return Object.keys(e).find((n=>e[n]===t))}static getCcNameByNumber(e){return Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,e)}static getChannelModeByNumber(e){if(!(e>=120&&e<=127))return!1;for(let t in Enumerations.MIDI_CHANNEL_MODE_MESSAGES)if(Enumerations.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(t)&&e===Enumerations.MIDI_CHANNEL_MODE_MESSAGES[t])return t;return!1}static get isNode(){return new Function("try { return this === global; } catch(e) { return false; }")()}static get isBrowser(){return new Function("try { return this === window; } catch(e) { return false; }")()}}
/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class OutputChannel extends EventEmitter{constructor(e,t){super(),this._output=e,this._number=t,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(e,t={time:0}){return this.output.send(e,t),this}sendKeyAftertouch(e,t,n={}){if(wm.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(t)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(t=Utilities.fromFloatTo7Bit(t));const r=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(e)||(e=[e]),Utilities.buildNoteArray(e).forEach((e=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),e.getOffsetNumber(r),t],{time:Utilities.toTimestamp(n.time)})})),this
/**
   * Sends a MIDI **control change** message to the channel at the scheduled time. The control
   * change message to send can be specified numerically (`0` to `127`) or by using one of the
   * following common names:
   *
   * | Number | Name                          |
   * |--------|-------------------------------|
   * | 0      |`bankselectcoarse`             |
   * | 1      |`modulationwheelcoarse`        |
   * | 2      |`breathcontrollercoarse`       |
   * | 4      |`footcontrollercoarse`         |
   * | 5      |`portamentotimecoarse`         |
   * | 6      |`dataentrycoarse`              |
   * | 7      |`volumecoarse`                 |
   * | 8      |`balancecoarse`                |
   * | 10     |`pancoarse`                    |
   * | 11     |`expressioncoarse`             |
   * | 12     |`effectcontrol1coarse`         |
   * | 13     |`effectcontrol2coarse`         |
   * | 18     |`generalpurposeslider3`        |
   * | 19     |`generalpurposeslider4`        |
   * | 32     |`bankselectfine`               |
   * | 33     |`modulationwheelfine`          |
   * | 34     |`breathcontrollerfine`         |
   * | 36     |`footcontrollerfine`           |
   * | 37     |`portamentotimefine`           |
   * | 38     |`dataentryfine`                |
   * | 39     |`volumefine`                   |
   * | 40     |`balancefine`                  |
   * | 42     |`panfine`                      |
   * | 43     |`expressionfine`               |
   * | 44     |`effectcontrol1fine`           |
   * | 45     |`effectcontrol2fine`           |
   * | 64     |`holdpedal`                    |
   * | 65     |`portamento`                   |
   * | 66     |`sustenutopedal`               |
   * | 67     |`softpedal`                    |
   * | 68     |`legatopedal`                  |
   * | 69     |`hold2pedal`                   |
   * | 70     |`soundvariation`               |
   * | 71     |`resonance`                    |
   * | 72     |`soundreleasetime`             |
   * | 73     |`soundattacktime`              |
   * | 74     |`brightness`                   |
   * | 75     |`soundcontrol6`                |
   * | 76     |`soundcontrol7`                |
   * | 77     |`soundcontrol8`                |
   * | 78     |`soundcontrol9`                |
   * | 79     |`soundcontrol10`               |
   * | 80     |`generalpurposebutton1`        |
   * | 81     |`generalpurposebutton2`        |
   * | 82     |`generalpurposebutton3`        |
   * | 83     |`generalpurposebutton4`        |
   * | 91     |`reverblevel`                  |
   * | 92     |`tremololevel`                 |
   * | 93     |`choruslevel`                  |
   * | 94     |`celestelevel`                 |
   * | 95     |`phaserlevel`                  |
   * | 96     |`databuttonincrement`          |
   * | 97     |`databuttondecrement`          |
   * | 98     |`nonregisteredparametercoarse` |
   * | 99     |`nonregisteredparameterfine`   |
   * | 100    |`registeredparametercoarse`    |
   * | 101    |`registeredparameterfine`      |
   * | 120    |`allsoundoff`                  |
   * | 121    |`resetallcontrollers`          |
   * | 122    |`localcontrol`                 |
   * | 123    |`allnotesoff`                  |
   * | 124    |`omnimodeoff`                  |
   * | 125    |`omnimodeon`                   |
   * | 126    |`monomodeon`                   |
   * | 127    |`polymodeon`                   |
   *
   * As you can see above, not all control change message have a matching name. This does not mean
   * you cannot use the others. It simply means you will need to use their number
   * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are
   * usually reserved for *channel mode* messages. See
   * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.
   *
   * To view a detailed list of all available **control change** messages, please consult "Table 3 -
   * Control Change Messages" from the [MIDI Messages](
   * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)
   * specification.
   *
   * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1
   * (`modulationwheelcoarse`) can be accompanied by a second control change message for
   * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB
   * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the
   * second parameter.
   *
   * @param {number|string} controller The MIDI controller name or number (`0` - `127`).
   *
   * @param {number|number[]} value The value to send (0-127). You can also use a two-position array
   * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second
   * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first
   * controller)
   *
   * @param {object} [options={}]
   *
   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
   * followed by a number, the message will be delayed by that many milliseconds. If the value is a
   * positive number
   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
   * the operation will be scheduled for that time. The current time can be retrieved with
   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
   * operation will be carried out as soon as possible.
   *
   * @throws {RangeError} Controller numbers must be between 0 and 127.
   * @throws {RangeError} Invalid controller name.
   * @throws {TypeError} The value array must have a length of 2.
   *
   * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
   *
   * @license Apache-2.0
   * @since 3.0.0
   */}sendControlChange(e,t,n={}){if("string"==typeof e&&(e=Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[e]),Array.isArray(t)||(t=[t]),wm.validation){if(void 0===e)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(2===(t=t.map((e=>{const t=Math.min(Math.max(parseInt(e),0),127);if(isNaN(t))throw new TypeError("Values must be integers between 0 and 127");return t}))).length&&e>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return t.forEach(((r,s)=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e+32*s,t[s]],{time:Utilities.toTimestamp(n.time)})})),this}_selectNonRegisteredParameter(e,t={}){return this.sendControlChange(99,e[0],t),this.sendControlChange(98,e[1],t),this}_deselectRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_deselectNonRegisteredParameter(e={}){return this.sendControlChange(101,127,e),this.sendControlChange(100,127,e),this}_selectRegisteredParameter(e,t={}){return this.sendControlChange(101,e[0],t),this.sendControlChange(100,e[1],t),this}_setCurrentParameter(e,t={}){return e=[].concat(e),this.sendControlChange(6,e[0],t),e.length<2||this.sendControlChange(38,e[1],t),this}sendRpnDecrement(e,t={}){if(Array.isArray(e)||(e=Enumerations.MIDI_REGISTERED_PARAMETERS[e]),wm.validation){if(void 0===e)throw new TypeError("The specified registered parameter is invalid.");let t=!1;if(Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach((n=>{Enumerations.MIDI_REGISTERED_PARAMETERS[n][0]===e[0]&&Enumerations.MIDI_REGISTERED_PARAMETERS[n][1]===e[1]&&(t=!0)})),!t)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(97,0,t),this._deselectRegisteredParameter(t),this}sendRpnIncrement(e,t={}){if(Array.isArray(e)||(e=Enumerations.MIDI_REGISTERED_PARAMETERS[e]),wm.validation){if(void 0===e)throw new TypeError("The specified registered parameter is invalid.");let t=!1;if(Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach((n=>{Enumerations.MIDI_REGISTERED_PARAMETERS[n][0]===e[0]&&Enumerations.MIDI_REGISTERED_PARAMETERS[n][1]===e[1]&&(t=!0)})),!t)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(e,t),this.sendControlChange(96,0,t),this._deselectRegisteredParameter(t),this}playNote(e,t={}){if(this.sendNoteOn(e,t),t.duration>0&&isFinite(String(t.duration).trim()||NaN)){let n={time:(Utilities.toTimestamp(t.time)||wm.time)+t.duration,release:t.release,rawRelease:t.rawRelease};this.sendNoteOff(e,n)}return this}sendNoteOff(e,t={}){if(wm.validation){if(null!=t.rawRelease&&!(t.rawRelease>=0&&t.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(null!=t.release&&!(t.release>=0&&t.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");t.rawVelocity&&(t.rawRelease=t.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),t.velocity&&(t.release=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;null!=t.rawRelease?n=t.rawRelease:isNaN(t.release)||(n=Math.round(127*t.release));const r=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Utilities.buildNoteArray(e,{rawRelease:parseInt(n)}).forEach((e=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),e.getOffsetNumber(r),e.rawRelease],{time:Utilities.toTimestamp(t.time)})})),this}stopNote(e,t={}){return this.sendNoteOff(e,t)}sendNoteOn(e,t={}){if(wm.validation){if(null!=t.rawAttack&&!(t.rawAttack>=0&&t.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(null!=t.attack&&!(t.attack>=0&&t.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");t.rawVelocity&&(t.rawAttack=t.velocity,t.rawRelease=t.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),t.velocity&&(t.attack=t.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;null!=t.rawAttack?n=t.rawAttack:isNaN(t.attack)||(n=Math.round(127*t.attack));const r=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Utilities.buildNoteArray(e,{rawAttack:n}).forEach((e=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.noteon<<4)+(this.number-1),e.getOffsetNumber(r),e.rawAttack],{time:Utilities.toTimestamp(t.time)})})),this}sendChannelMode(e,t=0,n={}){if("string"==typeof e&&(e=Enumerations.MIDI_CHANNEL_MODE_MESSAGES[e]),wm.validation){if(void 0===e)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(e)||!(e>=120&&e<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(t))||t<0||t>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),e,t],{time:Utilities.toTimestamp(n.time)}),this}sendOmniMode(e,t={}){return void 0===e||e?this.sendChannelMode("omnimodeon",0,t):this.sendChannelMode("omnimodeoff",0,t),this}sendChannelAftertouch(e,t={}){if(wm.validation){if(isNaN(parseFloat(e)))throw new RangeError("Invalid channel aftertouch value.");if(t.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(127*e)],{time:Utilities.toTimestamp(t.time)}),this}sendMasterTuning(e,t={}){if(e=parseFloat(e)||0,wm.validation&&!(e>-65&&e<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(e)+64,r=e-Math.floor(e);r=Math.round((r+1)/2*16383);let s=r>>7&127,a=127&r;return this.sendRpnValue("channelcoarsetuning",n,t),this.sendRpnValue("channelfinetuning",[s,a],t),this}sendModulationRange(e,t,n={}){if(wm.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(null==t||Number.isInteger(t)&&t>=0&&t<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return t>=0&&t<=127||(t=0),this.sendRpnValue("modulationrange",[e,t],n),this}sendNrpnValue(e,t,n={}){if(t=[].concat(t),wm.validation){if(!Array.isArray(e)||!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");t.forEach((e=>{if(!(e>=0&&e<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")}))}return this._selectNonRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(e,t={}){if(wm.validation)if(t.rawValue&&Array.isArray(e)){if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(t.rawValue&&!Array.isArray(e)){if(!(e>=0&&e<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(e)||null===e)throw new RangeError("Invalid pitch bend value.");if(!(e>=-1&&e<=1))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}let n=0,r=0;if(t.rawValue&&Array.isArray(e))n=e[0],r=e[1];else if(t.rawValue&&!Array.isArray(e))n=e;else{const t=Utilities.fromFloatToMsbLsb((e+1)/2);n=t.msb,r=t.lsb}return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:Utilities.toTimestamp(t.time)}),this}sendPitchBendRange(e,t,n={}){if(wm.validation){if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[e,t],n),this}sendProgramChange(e,t={}){if(e=parseInt(e)||0,wm.validation&&!(e>=0&&e<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.programchange<<4)+(this.number-1),e],{time:Utilities.toTimestamp(t.time)}),this}sendRpnValue(e,t,n={}){if(Array.isArray(e)||(e=Enumerations.MIDI_REGISTERED_PARAMETERS[e]),wm.validation){if(!Number.isInteger(e[0])||!Number.isInteger(e[1]))throw new TypeError("The specified NRPN is invalid.");if(!(e[0]>=0&&e[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(e[1]>=0&&e[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(t).forEach((e=>{if(!(e>=0&&e<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")}))}return this._selectRegisteredParameter(e,n),this._setCurrentParameter(t,n),this._deselectRegisteredParameter(n),this}sendTuningBank(e,t={}){if(wm.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",e,t),this}sendTuningProgram(e,t={}){if(wm.validation&&(!Number.isInteger(e)||!(e>=0&&e<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",e,t),this}sendLocalControl(e,t={}){return e?this.sendChannelMode("localcontrol",127,t):this.sendChannelMode("localcontrol",0,t)}sendAllNotesOff(e={}){return this.sendChannelMode("allnotesoff",0,e)}sendAllSoundOff(e={}){return this.sendChannelMode("allsoundoff",0,e)}sendResetAllControllers(e={}){return this.sendChannelMode("resetallcontrollers",0,e)}sendPolyphonicMode(e,t={}){return"mono"===e?this.sendChannelMode("monomodeon",0,t):this.sendChannelMode("polymodeon",0,t)}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get output(){return this._output}get number(){return this._number}}
/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Output extends EventEmitter{constructor(e){super(),this._midiOutput=e,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new OutputChannel(this,e);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach((e=>e.destroy())),this.channels=[],this._midiOutput.onstatechange=null,await this.close(),this._midiOutput=null}_onStateChange(e){let t={timestamp:wm.time};"open"===e.port.connection?(t.type="opened",t.target=this,t.port=t.target,this.emit("opened",t)):"closed"===e.port.connection&&"connected"===e.port.state?(t.type="closed",t.target=this,t.port=t.target,this.emit("closed",t)):"closed"===e.port.connection&&"disconnected"===e.port.state?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(e){return Promise.reject(e)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}
/**
   * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be
   * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a
   * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}
   * object or a [`Message`](Message) object.
   *
   * It is usually not necessary to use this method directly as you can use one of the simpler
   * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),
   * [`sendControlChange()`](#sendControlChange), etc.
   *
   * Details on the format of MIDI messages are available in the summary of
   * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}
   * from the MIDI Manufacturers Association.
   *
   * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`
   * object (not available in Node.js) containing the message bytes or a `Message` object.
   *
   * @param {object} [options={}]
   *
   * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
   * followed by a number, the message will be delayed by that many milliseconds. If the value is a
   * positive number
   * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
   * the operation will be scheduled for that time. The current time can be retrieved with
   * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
   * operation will be carried out as soon as possible.
   *
   * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.
   *
   * @returns {Output} Returns the `Output` object so methods can be chained.
   *
   * @license Apache-2.0
   */send(e,t={time:0},n=0){if(e instanceof Message&&(e=Utilities.isNode?e.data:e.rawData),e instanceof Uint8Array&&Utilities.isNode&&(e=Array.from(e)),wm.validation){if(Array.isArray(e)||e instanceof Uint8Array||(e=[e],Array.isArray(t)&&(e=e.concat(t)),t=isNaN(n)?{time:0}:{time:n}),!(parseInt(e[0])>=128&&parseInt(e[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");e.slice(1).forEach((e=>{if(!((e=parseInt(e))>=0&&e<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")})),t||(t={time:0})}return this._midiOutput.send(e,Utilities.toTimestamp(t.time)),this}sendSysex(e,t=[],n={}){if(e=[].concat(e),t instanceof Uint8Array){const r=new Uint8Array(1+e.length+t.length+1);r[0]=Enumerations.MIDI_SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(e),1),r.set(t,1+e.length),r[r.length-1]=Enumerations.MIDI_SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=e.concat(t,Enumerations.MIDI_SYSTEM_MESSAGES.sysexend);this.send([Enumerations.MIDI_SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():wm.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(e,t={}){if(wm.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.timecode,e],{time:t.time}),this}sendSongPosition(e=0,t={}){var n=(e=Math.floor(e)||0)>>7&127,r=127&e;return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.songposition,n,r],{time:t.time}),this}sendSongSelect(e=0,t={}){if(wm.validation&&(e=parseInt(e),isNaN(e)||!(e>=0&&e<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.songselect,e],{time:t.time}),this}sendTuneRequest(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.tunerequest],{time:e.time}),this}sendClock(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.clock],{time:e.time}),this}sendStart(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.start],{time:e.time}),this}sendContinue(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.continue],{time:e.time}),this}sendStop(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.stop],{time:e.time}),this}sendActiveSensing(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.activesensing],{time:e.time}),this}sendReset(e={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.reset],{time:e.time}),this}sendTuningRequest(e={}){return wm.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(e)}sendKeyAftertouch(e,t,n={}){return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendKeyAftertouch(e,t,n)})),this}sendControlChange(e,t,n={},r={}){if(wm.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){const e=n;(n=r).channels=e,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendControlChange(e,t,n)})),this}sendPitchBendRange(e=0,t=0,n={}){return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendPitchBendRange(e,t,n)})),this}setPitchBendRange(e=0,t=0,n="all",r={}){return wm.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,"all"===r.channels&&(r.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(e,t,r)}sendRpnValue(e,t,n={}){return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendRpnValue(e,t,n)})),this}setRegisteredParameter(e,t=[],n="all",r={}){return wm.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,"all"===r.channels&&(r.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(e,t,r)}sendChannelAftertouch(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendChannelAftertouch(e,t)})),this}sendPitchBend(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendPitchBend(e,t)})),this}sendProgramChange(e=0,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendProgramChange(e,t)})),this}sendModulationRange(e,t,n={}){return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendModulationRange(e,t,n)})),this}setModulationRange(e=0,t=0,n="all",r={}){return wm.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,"all"===r.channels&&(r.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(e,t,r)}sendMasterTuning(e,t={}){return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendMasterTuning(e,t)})),this}setMasterTuning(e,t={},n={}){return wm.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=t,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(e,n)}sendTuningProgram(e,t={}){return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendTuningProgram(e,t)})),this}setTuningProgram(e,t="all",n={}){return wm.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=t,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(e,n)}sendTuningBank(e=0,t={}){return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendTuningBank(e,t)})),this}setTuningBank(e,t="all",n={}){return wm.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=t,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(e,n)}sendChannelMode(e,t=0,n={},r={}){if(wm.validation&&(Array.isArray(n)||Number.isInteger(n)||"all"===n)){const e=n;(n=r).channels=e,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendChannelMode(e,t,n)})),this}sendAllSoundOff(e={}){return null==e.channels&&(e.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(e.channels).forEach((t=>{this.channels[t].sendAllSoundOff(e)})),this}sendAllNotesOff(e={}){return null==e.channels&&(e.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(e.channels).forEach((t=>{this.channels[t].sendAllNotesOff(e)})),this}sendResetAllControllers(e={},t={}){if(wm.validation&&(Array.isArray(e)||Number.isInteger(e)||"all"===e)){const n=e;(e=t).channels=n,"all"===e.channels&&(e.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==e.channels&&(e.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(e.channels).forEach((t=>{this.channels[t].sendResetAllControllers(e)})),this}sendPolyphonicMode(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendPolyphonicMode(e,t)})),this}sendLocalControl(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendLocalControl(e,t)})),this}sendOmniMode(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendOmniMode(e,t)})),this}sendNrpnValue(e,t,n={}){return null==n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].sendNrpnValue(e,t,n)})),this}setNonRegisteredParameter(e,t=[],n="all",r={}){return wm.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,"all"===r.channels&&(r.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(e,t,r)}sendRpnIncrement(e,t={}){return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendRpnIncrement(e,t)})),this}incrementRegisteredParameter(e,t="all",n={}){return wm.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=t,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(e,n)}sendRpnDecrement(e,t={}){return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendRpnDecrement(e,t)})),this}decrementRegisteredParameter(e,t="all",n={}){return wm.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=t,"all"===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(e,n)}sendNoteOff(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendNoteOff(e,t)})),this}stopNote(e,t){return this.sendNoteOff(e,t)}playNote(e,t={},n={}){if(wm.validation&&(t.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),t.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].playNote(e,t)})),this}sendNoteOn(e,t={},n={}){if(wm.validation&&(Array.isArray(t)||Number.isInteger(t)||"all"===t)){const e=t;(t=n).channels=e,"all"===t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==t.channels&&(t.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(t.channels).forEach((n=>{this.channels[n].sendNoteOn(e,t)})),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}}
/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Forwarder{constructor(e=[],t={}){this.destinations=[],this.types=[...Object.keys(Enumerations.MIDI_SYSTEM_MESSAGES),...Object.keys(Enumerations.MIDI_CHANNEL_MESSAGES)],this.channels=Enumerations.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(e)||(e=[e]),t.types&&!Array.isArray(t.types)&&(t.types=[t.types]),t.channels&&!Array.isArray(t.channels)&&(t.channels=[t.channels]),wm.validation&&(e.forEach((e=>{if(!(e instanceof Output))throw new TypeError("Destinations must be of type 'Output'.")})),void 0!==t.types&&t.types.forEach((e=>{if(!Enumerations.MIDI_SYSTEM_MESSAGES.hasOwnProperty(e)&&!Enumerations.MIDI_CHANNEL_MESSAGES.hasOwnProperty(e))throw new TypeError("Type must be a valid message type.")})),void 0!==t.channels&&t.channels.forEach((e=>{if(!Enumerations.MIDI_CHANNEL_NUMBERS.includes(e))throw new TypeError("MIDI channel must be between 1 and 16.")}))),this.destinations=e,t.types&&(this.types=t.types),t.channels&&(this.channels=t.channels)}forward(e){this.suspended||this.types.includes(e.type)&&(e.channel&&!this.channels.includes(e.channel)||this.destinations.forEach((t=>{(!wm.validation||t instanceof Output)&&t.send(e)})))}}
/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 * @fires InputChannel#controlchange
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-databuttonincrement
 * @fires InputChannel#event:nrpn-databuttondecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-databuttonincrement
 * @fires InputChannel#event:rpn-databuttondecrement
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class InputChannel extends EventEmitter{constructor(e,t){super(),this._input=e,this._number=t,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const t=Object.assign({},e);t.port=this.input,t.target=this,t.type="midimessage",this.emit(t.type,t),this._parseEventForStandardMessages(t)}_parseEventForStandardMessages(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmessage";const n=e.message.dataBytes[0],r=e.message.dataBytes[1];if("noteoff"===t.type||"noteon"===t.type&&0===r)this.notesState[n]=!1,t.type="noteoff",t.note=new Note(Utilities.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset),{rawAttack:0,rawRelease:r}),t.value=Utilities.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.release,t.rawVelocity=t.note.rawRelease;else if("noteon"===t.type)this.notesState[n]=!0,t.note=new Note(Utilities.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset),{rawAttack:r}),t.value=Utilities.from7bitToFloat(r),t.rawValue=r,t.velocity=t.note.attack,t.rawVelocity=t.note.rawAttack;else if("keyaftertouch"===t.type)t.note=new Note(Utilities.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset)),t.value=Utilities.from7bitToFloat(r),t.rawValue=r,t.identifier=t.note.identifier,t.key=t.note.number,t.rawKey=n;else if("controlchange"===t.type){t.controller={number:n,name:Utilities.getCcNameByNumber(n)},t.subtype=t.controller.name||"controller"+n,t.value=Utilities.from7bitToFloat(r),t.rawValue=r;const e=Object.assign({},t);e.type=`${t.type}-controller${n}`,delete e.subtype,this.emit(e.type,e),t.message.dataBytes[0]>=120&&this._parseChannelModeMessage(t),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(t.message.dataBytes[0])&&this._parseEventForParameterNumber(t)}else"programchange"===t.type?(t.value=n,t.rawValue=t.value):"channelaftertouch"===t.type?(t.value=Utilities.from7bitToFloat(n),t.rawValue=n):"pitchbend"===t.type?(t.value=((r<<7)+n-8192)/8192,t.rawValue=(r<<7)+n):t.type="unknownmessage";this.emit(t.type,t)}_parseChannelModeMessage(e){const t=Object.assign({},e);t.type=t.controller.name,"localcontrol"===t.type&&(t.value=127===t.message.data[2],t.rawValue=t.message.data[2]),"omnimodeon"===t.type?(t.type="omnimode",t.value=!0,t.rawValue=t.message.data[2]):"omnimodeoff"===t.type&&(t.type="omnimode",t.value=!1,t.rawValue=t.message.data[2]),"monomodeon"===t.type?(t.type="monomode",t.value=!0,t.rawValue=t.message.data[2]):"polymodeon"===t.type&&(t.type="monomode",t.value=!1,t.rawValue=t.message.data[2]),this.emit(t.type,t)}_parseEventForParameterNumber(e){const t=e.message.dataBytes[0],n=e.message.dataBytes[1],r=Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;t===r.nonregisteredparameterfine||t===r.registeredparameterfine?(this._nrpnBuffer=[],this._rpnBuffer=[],t===r.nonregisteredparameterfine?this._nrpnBuffer=[e.message]:127!==n&&(this._rpnBuffer=[e.message])):t===r.nonregisteredparametercoarse||t===r.registeredparametercoarse?t===r.nonregisteredparametercoarse?(this._rpnBuffer=[],1===this._nrpnBuffer.length?this._nrpnBuffer.push(e.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],1===this._rpnBuffer.length&&127!==n?this._rpnBuffer.push(e.message):this._rpnBuffer=[]):t!==r.dataentrycoarse&&t!==r.dataentryfine&&t!==r.databuttonincrement&&t!==r.databuttondecrement||(2===this._rpnBuffer.length?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],e):2===this._nrpnBuffer.length?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],e):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(e){return e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse||e===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine}_dispatchParameterNumberEvent(e,t,n,r){e="nrpn"===e?"nrpn":"rpn";const s={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:t,parameterLsb:n,value:Utilities.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};s.parameter="rpn"===e?Object.keys(Enumerations.MIDI_REGISTERED_PARAMETERS).find((e=>Enumerations.MIDI_REGISTERED_PARAMETERS[e][0]===t&&Enumerations.MIDI_REGISTERED_PARAMETERS[e][1]===n)):(t<<7)+n;const a=Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,r.message.dataBytes[0]);s.type=`${e}-${a}`,this.emit(s.type,s),s.type=e,s.subtype=a,this.emit(s.type,s)}getChannelModeByNumber(e){return wm.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),e=Math.floor(e)),Utilities.getChannelModeByNumber(e)}getCcNameByNumber(e){if(wm.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),!((e=parseInt(e))>=0&&e<=127)))throw new RangeError("Invalid control change number.");return Utilities.getCcNameByNumber(e)}getNoteState(e){e instanceof Note&&(e=e.identifier);const t=Utilities.guessNoteNumber(e,wm.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[t]}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(e){this.validation&&(e=!!e),this.parameterNumberEventsEnabled=e}}
/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Message{constructor(e){this.rawData=e,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=Utilities.getPropertyByValue(Enumerations.MIDI_CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=Utilities.getPropertyByValue(Enumerations.MIDI_SYSTEM_MESSAGES,this.command)),this.statusByte===Enumerations.MIDI_SYSTEM_MESSAGES.sysex&&(0===this.dataBytes[0]?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}
/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Input extends EventEmitter{constructor(e){super(),this._midiInput=e,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new InputChannel(this,e);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach((e=>e.destroy())),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let t={timestamp:wm.time,target:this,port:this};"open"===e.port.connection?(t.type="opened",this.emit("opened",t)):"closed"===e.port.connection&&"connected"===e.port.state?(t.type="closed",this.emit("closed",t)):"closed"===e.port.connection&&"disconnected"===e.port.state?(t.type="disconnected",t.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",t)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const t=new Message(e.data),n={port:this,target:this,message:t,timestamp:e.timeStamp,type:"midimessage",data:t.data,rawData:t.data,statusByte:t.data[0],dataBytes:t.dataBytes};this.emit("midimessage",n),t.isSystemMessage?this._parseEvent(n):t.isChannelMessage&&this.channels[t.channel]._processMidiMessageEvent(n),this._forwarders.forEach((e=>e.forward(t)))}_parseEvent(e){const t=Object.assign({},e);t.type=t.message.type||"unknownmidimessage","songselect"===t.type&&(t.song=e.data[1]+1,t.value=e.data[1],t.rawValue=t.value),this.emit(t.type,t)}async open(){try{await this._midiInput.open()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(e){return Promise.reject(e)}return Promise.resolve(this)}getChannelModeByNumber(){wm.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(e,t,n={}){if(wm.validation&&"function"==typeof n){let e=null!=t?[].concat(t):void 0;t=n,n={channels:e}}if(Enumerations.CHANNEL_EVENTS.includes(e)){void 0===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS);let r=[];return Utilities.sanitizeChannels(n.channels).forEach((s=>{r.push(this.channels[s].addListener(e,t,n))})),r}return super.addListener(e,t,n)}addOneTimeListener(e,t,n={}){return n.remaining=1,this.addListener(e,t,n)}on(e,t,n,r){return this.addListener(e,t,n,r)}hasListener(e,t,n={}){if(wm.validation&&"function"==typeof n){let e=[].concat(t);t=n,n={channels:e}}return Enumerations.CHANNEL_EVENTS.includes(e)?(void 0===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(n.channels).every((n=>this.channels[n].hasListener(e,t)))):super.hasListener(e,t)}removeListener(e,t,n={}){if(wm.validation&&"function"==typeof n){let e=[].concat(t);t=n,n={channels:e}}if(void 0===n.channels&&(n.channels=Enumerations.MIDI_CHANNEL_NUMBERS),null==e)return Utilities.sanitizeChannels(n.channels).forEach((e=>{this.channels[e]&&this.channels[e].removeListener()})),super.removeListener();Enumerations.CHANNEL_EVENTS.includes(e)?Utilities.sanitizeChannels(n.channels).forEach((r=>{this.channels[r].removeListener(e,t,n)})):super.removeListener(e,t,n)}addForwarder(e,t={}){let n;return n=e instanceof Forwarder?e:new Forwarder(e,t),this._forwarders.push(n),n}removeForwarder(e){this._forwarders=this._forwarders.filter((t=>t!==e))}hasForwarder(e){return this._forwarders.includes(e)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return wm.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}if(Utilities.isNode)try{window.navigator}catch(err){let jzz;eval('jzz = require("jzz")'),global.navigator=jzz}
/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class WebMidi extends EventEmitter{constructor(){super(),this.defaults={note:{attack:Utilities.from7bitToFloat(64),release:Utilities.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(e={},t=!1){if(this.validation=!1!==e.validation,this.validation&&("function"==typeof e&&(e={callback:e,sysex:t}),t&&(e.sysex=!0)),this.enabled)return"function"==typeof e.callback&&e.callback(),Promise.resolve();const n={timestamp:this.time,target:this,type:"error",error:void 0},r={timestamp:this.time,target:this,type:"midiaccessgranted"},s={timestamp:this.time,target:this,type:"enabled"};try{"function"==typeof e.requestMIDIAccessFunction?this.interface=await e.requestMIDIAccessFunction({sysex:e.sysex,software:e.software}):this.interface=await navigator.requestMIDIAccess({sysex:e.sysex,software:e.software})}catch(t){return n.error=t,this.emit("error",n),"function"==typeof e.callback&&e.callback(t),Promise.reject(t)}this.emit("midiaccessgranted",r),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(t){return n.error=t,this.emit("error",n),"function"==typeof e.callback&&e.callback(t),Promise.reject(t)}return this.emit("enabled",s),"function"==typeof e.callback&&e.callback(),Promise.resolve(this)}async disable(){return this._destroyInputsAndOutputs().then((()=>{navigator&&"function"==typeof navigator.close&&navigator.close(),this.interface&&(this.interface.onstatechange=void 0),this.interface=null;let e={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",e),this.removeListener()}))}getInputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let t=0;t<this._disconnectedInputs.length;t++)if(this._disconnectedInputs[t].id===e.toString())return this._disconnectedInputs[t]}else for(let t=0;t<this.inputs.length;t++)if(this.inputs[t].id===e.toString())return this.inputs[t]}getInputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let t=0;t<this._disconnectedInputs.length;t++)if(~this._disconnectedInputs[t].name.indexOf(e))return this._disconnectedInputs[t]}else for(let t=0;t<this.inputs.length;t++)if(~this.inputs[t].name.indexOf(e))return this.inputs[t]}getOutputByName(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return;e=e.toString()}if(t.disconnected){for(let t=0;t<this._disconnectedOutputs.length;t++)if(~this._disconnectedOutputs[t].name.indexOf(e))return this._disconnectedOutputs[t]}else for(let t=0;t<this.outputs.length;t++)if(~this.outputs[t].name.indexOf(e))return this.outputs[t]}getOutputById(e,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!e)return}if(t.disconnected){for(let t=0;t<this._disconnectedOutputs.length;t++)if(this._disconnectedOutputs[t].id===e.toString())return this._disconnectedOutputs[t]}else for(let t=0;t<this.outputs.length;t++)if(this.outputs[t].id===e.toString())return this.outputs[t]}noteNameToNumber(e){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),Utilities.toNoteNumber(e,this.octaveOffset)}getOctave(e){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),e=parseInt(e)),!isNaN(e)&&e>=0&&e<=127&&Utilities.getNoteDetails(Utilities.offsetNumber(e,this.octaveOffset)).octave}sanitizeChannels(e){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),Utilities.sanitizeChannels(e)}toMIDIChannels(e){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),Utilities.sanitizeChannels(e)}guessNoteNumber(e){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),Utilities.guessNoteNumber(e,this.octaveOffset)}getValidNoteArray(e,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),Utilities.buildNoteArray(e,t)}convertToTimestamp(e){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),Utilities.toTimestamp(e)}async _destroyInputsAndOutputs(){let e=[];return this.inputs.forEach((t=>e.push(t.destroy()))),this.outputs.forEach((t=>e.push(t.destroy()))),Promise.all(e).then((()=>{this._inputs=[],this._outputs=[]}))}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let t={timestamp:e.timeStamp,type:e.port.state,target:this};if("connected"===e.port.state&&"open"===e.port.connection){"output"===e.port.type?t.port=this.getOutputById(e.port.id):"input"===e.port.type&&(t.port=this.getInputById(e.port.id)),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}else if("disconnected"===e.port.state&&"pending"===e.port.connection){"input"===e.port.type?t.port=this.getInputById(e.port.id,{disconnected:!0}):"output"===e.port.type&&(t.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,t);const n=Object.assign({},t);n.type="portschanged",this.emit(n.type,n)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let e=this._inputs.length-1;e>=0;e--){const t=this._inputs[e];Array.from(this.interface.inputs.values()).find((e=>e===t._midiInput))||(this._disconnectedInputs.push(t),this._inputs.splice(e,1))}let e=[];return this.interface.inputs.forEach((t=>{if(!this._inputs.find((e=>e._midiInput===t))){let n=this._disconnectedInputs.find((e=>e._midiInput===t));n||(n=new Input(t)),this._inputs.push(n),e.push(n.open())}})),Promise.all(e)}async _updateOutputs(){if(!this.interface)return;for(let e=this._outputs.length-1;e>=0;e--){const t=this._outputs[e];Array.from(this.interface.outputs.values()).find((e=>e===t._midiOutput))||(this._disconnectedOutputs.push(t),this._outputs.splice(e,1))}let e=[];return this.interface.outputs.forEach((t=>{if(!this._outputs.find((e=>e._midiOutput===t))){let n=this._disconnectedOutputs.find((e=>e._midiOutput===t));n||(n=new Output(t)),this._outputs.push(n),e.push(n.open())}})),Promise.all(e)}get enabled(){return null!==this.interface}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),Utilities.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),Utilities.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(e){if(this.validation&&(e=parseInt(e),isNaN(e)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=e}get outputs(){return this._outputs}get supported(){return"undefined"!=typeof navigator&&navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.0.20"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),Enumerations.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.MIDI_SYSTEM_MESSAGES."),Enumerations.MIDI_SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.MIDI_CHANNEL_MODE_MESSAGES."),Enumerations.MIDI_CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to Enumerations.MIDI_CONTROL_CHANGE_MESSAGES."),Enumerations.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.MIDI_REGISTERED_PARAMETERS."),this.MIDI_REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const wm=new WebMidi;wm.constructor=null,exports.Enumerations=Enumerations,exports.Forwarder=Forwarder,exports.Input=Input,exports.InputChannel=InputChannel,exports.Message=Message,exports.Note=Note,exports.Output=Output,exports.OutputChannel=OutputChannel,exports.Utilities=Utilities,exports.WebMidi=wm},{}],"9lSj9":[function(e,t,n){e("@parcel/transformer-js/src/esmodule-helpers.js").defineInteropFlag(n);n.default=class{constructor(e){}}},{"@parcel/transformer-js/src/esmodule-helpers.js":"14tkN"}],"96lbq":[function(e,t,n){t.exports=e("./helpers/browser/js-loader")(e("./helpers/bundle-url").getBundleURL("kPWjp")+e("./helpers/bundle-manifest").resolve("dQYJg")).then((()=>t.bundle.root("3mTtx")))},{"./helpers/browser/js-loader":"7mk4K","./helpers/bundle-url":"bGZ1f","./helpers/bundle-manifest":"6jNRu"}]},["eygo8","gPDLX"],"gPDLX");