// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"bQiRm":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "d4f4e7e98149b6ca";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"fVAka":[function(require,module,exports) {
// Thanks to
// https://github.com/vivien000/trompeloeil/blob/master/src/World/components/geometry/geometry.js
// Import @tensorflow/tfjs or @tensorflow/tfjs-core
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadFaceModel", ()=>loadFaceModel);
var _tfjs = require("@tensorflow/tfjs");
var _tfjsCore = require("@tensorflow/tfjs-core");
// Register backends
// CPU Only
//import '@tensorflow/tfjs-backend-cpu'
// If you are using the WebGL backend:
var _tfjsBackendWebgl = require("@tensorflow/tfjs-backend-webgl");
// Adds the WASM backend to the global backend registry.
var _tfjsBackendWasm = require("@tensorflow/tfjs-backend-wasm");
//import '@tensorflow/tfjs-backend-wasm'
var _indexJs = require("@tensorflow/tfjs-backend-wasm/dist/index.js");
var _tfjsBackendWasmWasm = require("url:@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm.wasm");
var _tfjsBackendWasmWasmDefault = parcelHelpers.interopDefault(_tfjsBackendWasmWasm);
var _tfjsBackendWasmSimdWasm = require("url:@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-simd.wasm");
var _tfjsBackendWasmSimdWasmDefault = parcelHelpers.interopDefault(_tfjsBackendWasmSimdWasm);
var _tfjsBackendWasmThreadedSimdWasm = require("url:@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.wasm");
var _tfjsBackendWasmThreadedSimdWasmDefault = parcelHelpers.interopDefault(_tfjsBackendWasmThreadedSimdWasm);
var _faceMesh = require("@mediapipe/face_mesh");
// import PACKED_ASSETS from "@mediapipe/face_mesh/face_mesh_solution_packed_assets_loader.js"
var _faceDetection = require("@tensorflow-models/face-detection");
var _faceModelCalculations = require("./face-model-calculations");
var _timing = require("../timing/timing");
// This flips to using a seperate thread for the 
// prediction calculations - dunno if it makes it quicker
// but it certainly uses more CPU which then shonks audio
const useWorker = true;
const flipHorizontally = true;
let faceWorker;
// const createWorker = () => {
// 	const worker = new Worker("data-url:./face-worker.js") 
// 	let callback = (e)=>{ console.log(e.data) }
// 	faceWorker.onmessage = (e) => callback
// 	// Send prediction data to our worker
// 	return {
// 		worker,
// 		send: async (value) =>{ 
// 			// wait for message...?
// 			callback = (e) => {
// 				return e.data
// 			}
// 			// send
// 			faceWorker.postMessage(prediction)
// 		}
// 	}
// }
// Load in our transformer
const makePrediction = (prediction)=>new Promise((resolve, reject)=>{
        // load worker if neccessary
        if (!faceWorker) // faceWorker = new Worker( new URL('data-url:./face-worker.js', import.meta.url), {type:'module'} )
        faceWorker = new Worker(require("a02db1813e52cd3c"));
        faceWorker.onmessage = (e)=>resolve(e.data);
        // Send prediction data to our worker
        faceWorker.postMessage(prediction);
    });
// const makePrediction = (prediction) => new Promise((resolve,reject)=>{
// 	// load worker if neccessary
// 	if (!faceWorker)
// 	{
// 		faceWorker = new Worker("data-url:./face-worker.js") 
// 	}
// 	faceWorker.onmessage = (e) => resolve( e.data )
// 	// Send prediction data to our worker
// 	faceWorker.postMessage(prediction)
// })
const predictPlayerQuantity = async (inputElement, detector)=>{
    const estimationConfig = {
        flipHorizontal: false
    };
    const faces = await detector.estimateFaces(inputElement, estimationConfig);
    return faces.length;
};
// const faceMesh = new FaceMesh({ locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}` })
// faceMesh.setOptions({
// 	maxNumFaces: 1,
// 	refineLandmarks: true,
// 	minDetectionConfidence: 0.5,
// 	minTrackingConfidence: 0.5
//   })
//  faceMesh.onResults(onResults)
// await faceMesh.send({image: videoElement}) // inputElement
/**
 * This uses the ML model to solve stuff
 * @param {HTMLElement} inputElement 
 * @param {Function} detector 
 * @returns Array predictions
 */ const predict = async (inputElement, detector)=>{
    try {
        // some effects are timing related
        const time = (0, _timing.now)();
        const options = {
            // webcam element with video
            // input: video / img etc
            input: inputElement,
            // no need for these yet...
            // TODO: Implement emotion tests
            returnTensors: false,
            // Whether to flip/mirror the facial keypoints horizontally. Should be true for videos that are flipped by default (e.g. webcams)
            flipHorizontal: flipHorizontally,
            // (defaults to true) Whether to return keypoints for the irises. Disabling may improve performance.
            predictIrises: true
        };
        //console.error(time, { options, detector:detector.estimateFaces, inputElement})
        // Pass in a video stream (or an image, canvas, or 3D tensor) to obtain an
        // array of detected faces from the MediaPipe graph. If passing in a video
        // stream, a single prediction per frame will be returned.
        //const predictions = await detector.estimateFaces(options)
        const predictions = await detector.estimateFaces(inputElement, options);
        // Fetch the UV coords for use with 3D renderers
        // const uvs = FaceLandmarksDetection.getUVCoords()
        // determine head rotation?
        // take the UV of the eyes and use them to determine angle
        // firstly check to see if there any predictions
        if (predictions.length > 0) // now loop through all predictions?
        for(let p = 0, l = predictions.length; p < l; p++){
            // no enhancement...
            let prediction // = predictions[p]
            ;
            if (!useWorker) // direct (no worker)
            prediction = (0, _faceModelCalculations.enhanceFaceModelPrediction)(predictions[p], time);
            else // using async worker (any faster?)
            prediction = await makePrediction(predictions[p]);
            // overwrite
            predictions[p] = prediction;
        //console.log(prediction, {lmx,rmx,yaw},{lookingRight, eyeLeft,eyeRight}, {leftEyeIris,rightEyeIris})
        }
        return predictions;
    } catch (error) {
        console.error("Model failure!", error, {
            inputElement,
            detector
        });
        return null;
    }
};
const determineSolutionPath = (options)=>{
    // as MediaPipe loads this from a domain without the option
    // of being able to also set the filename, the builder used hashes
    // all file names making the lib 404 when fishing for it's data
    // if we specify local and it fails it will fall back to the CDN anyway
    // as that appears to be hard coded in the system anyway
    return options.solutionPath || `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh@${_faceMesh.VERSION}` // '../../node_modules/@mediapipe/face_mesh' // new URL('../../node_modules/@mediapipe/face_mesh/face_mesh_solution_packed_assets_loader.js', import.meta.url)
    ;
// 'base/node_modules/@mediapipe/face_mesh' in npm.
// solutionPath: The path to where the wasm binary and model files are located.
//const solutionPath = wasmURL
// node_modules\@mediapipe\face_mesh\face_mesh_solution_packed_assets_loader.js
// solutionPath: new URL('../../node_modules/@mediapipe/face_mesh/face_mesh_solution_packed_assets_loader.js', import.meta.url)
// solutionPath: `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh@${faceMesh.VERSION}`
};
const loadFaceModel = async (inputElement, options, progressCallback)=>{
    const startLoadProgress = 0.5;
    const loadRange = 0.3;
    const loadTotal = 2;
    let loadIndex = 0;
    progressCallback && progressCallback(startLoadProgress + loadRange * (loadIndex++ / loadTotal), "Loading Brains");
    // console.log("Loading Face Model from TF", {options} )
    // Set the WASM paths if possible
    _tfjsBackendWasm.setWasmPaths({
        "tfjs-backend-wasm.wasm": (0, _tfjsBackendWasmWasmDefault.default),
        "tfjs-backend-wasm-simd.wasm": (0, _tfjsBackendWasmSimdWasmDefault.default),
        "tfjs-backend-wasm-threaded-simd.wasm": (0, _tfjsBackendWasmThreadedSimdWasmDefault.default)
    });
    // or fallback due to CORS
    // `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${tfjsWasm.version_wasm}/dist/`
    let success = false;
    // try wasm first (we can always fallback to it if GL fails below)
    // Set the backend to WASM and wait for the module to be ready.
    const backEnds = options.backEnds || [];
    backEnds.forEach(async (backEnd)=>{
        success = await _tfjs.setBackend(backEnd);
    });
    // success =await tf.setBackend('cpu')
    // success = await tf.setBackend('wasm')
    // success = await tf.setBackend('webgl')
    // Returns a promise that resolves when the currently selected backend (or the
    // highest priority one) has initialized. Await this promise when you are using
    // a backend that has async initialization.
    await _tfjs.ready();
    progressCallback && progressCallback(startLoadProgress + loadRange * (loadIndex++ / loadTotal));
    // FIXME: Use the method for player inference once the detector is available
    const detectPeople = options.maxFaces;
    // one of the models from SupportedModels, including MediaPipeFaceMesh.
    const model = (0, _faceDetection.SupportedModels).MediaPipeFaceMesh // SupportedPackages.mediapipeFacemesh
    ;
    // console.error({PACKED_ASSETS})
    const solutionPath = determineSolutionPath(options);
    console.error("Loading Face Model", {
        options,
        backEnds,
        solutionPath
    });
    // console.log("loadFaceModel",{options, model, solutionPath, detectPeople} )
    const loadDetector = ()=>{
        switch(options.runtime){
            case "mediapipe":
                return (0, _faceDetection.createDetector)(model, {
                    ...options,
                    solutionPath
                });
            case "tfjs":
                return (0, _faceDetection.createDetector)(model, {
                    ...options
                });
        }
    };
    // Load the MediaPipe Facemesh package.
    const detector = await loadDetector(model, options);
    progressCallback && progressCallback(startLoadProgress + loadRange * (loadIndex++ / loadTotal), "Loaded Detector");
    // console.log("Loaded Detector", {detector} )
    // Load Emotion Detection
    // const emotionModel = await tf.loadLayersModel( 'web/model/facemo.json' )
    // console.log("Loaded TF model", model, "for", detectPeople, "people" )
    // now subscribe to events and monitor
    const update = async (repeat, callback, isPaused = null)=>{
        const shouldUpdate = isPaused ? isPaused() : true;
        // console.log("shouldUpdate", shouldUpdate, {isPaused})
        // console.log("Combining TF model", model, "with element", inputElement, "..." )
        if (shouldUpdate) {
            // single player right now but this could be an array in future
            // const playerCount = await predictPlayerQuantity(inputElement, detector)
            const predictions = await predict(inputElement, detector);
            if (!predictions) {
                console.warn("face>tfjs", {
                    predictions,
                    inputElement,
                    model
                });
                return; // ?
            }
            // //console.log("Predictions narrowed down to", predictions)
            // if (predictions.length > 0)
            // {
            // 	// find the smaller value and use as the face quantity
            const quantity = Math.min(detectPeople, predictions.length);
            // 	// const people = []
            // 	// for (let i=0; i < quantity; ++i)
            // 	// {
            // 	// 	const prediction = predictions[i]
            // 	// 	people.push( prediction )
            // 	// }
            // 	const people = predictions.slice(0,quantity)
            // 	if (callback) 
            // 	{
            // 		callback(people)
            // 	}
            // }else{
            // 	// nofaces
            // 	if (callback) 
            // 	{
            // 		callback(null)
            // 	}
            // }
            // const people = predictions.slice(0,quantity)
            callback(predictions.length ? predictions.slice(0, quantity) : []);
        }
        // loop or use worker???
        if (repeat) requestAnimationFrame(()=>update(repeat, callback, isPaused));
    };
    return update;
};

},{"@tensorflow/tfjs":"fzTad","@tensorflow/tfjs-core":"2votT","@tensorflow/tfjs-backend-webgl":"7ttvt","@tensorflow/tfjs-backend-wasm":"kRozE","@tensorflow/tfjs-backend-wasm/dist/index.js":"kRozE","url:@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm.wasm":"djQBs","url:@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-simd.wasm":"f9gZ7","url:@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.wasm":"hbhXF","@mediapipe/face_mesh":"4Binw","@tensorflow-models/face-detection":"bzeQv","./face-model-calculations":"jui49","../timing/timing":"3YQyl","a02db1813e52cd3c":"hYvRN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRozE":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _registerAllKernels = require("./register_all_kernels");
var _base = require("./base");
parcelHelpers.exportAll(_base, exports);

},{"./register_all_kernels":"1vLx3","./base":"3UmgH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1vLx3":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // We explicitly import the modular kernels so they get registered in the
// global registry when we compile the library. A modular build would replace
// the contents of this file and import only the kernels that are needed.
var _tfjsCore = require("@tensorflow/tfjs-core");
var _fusedMatMul = require("./kernels/_FusedMatMul");
var _abs = require("./kernels/Abs");
var _acos = require("./kernels/Acos");
var _acosh = require("./kernels/Acosh");
var _add = require("./kernels/Add");
var _addN = require("./kernels/AddN");
var _all = require("./kernels/All");
var _any = require("./kernels/Any");
var _argMax = require("./kernels/ArgMax");
var _argMin = require("./kernels/ArgMin");
var _asin = require("./kernels/Asin");
var _asinh = require("./kernels/Asinh");
var _atan = require("./kernels/Atan");
var _atan2 = require("./kernels/Atan2");
var _atanh = require("./kernels/Atanh");
var _avgPool = require("./kernels/AvgPool");
var _avgPool3D = require("./kernels/AvgPool3D");
var _avgPool3DGrad = require("./kernels/AvgPool3DGrad");
var _avgPoolGrad = require("./kernels/AvgPoolGrad");
var _batchMatMul = require("./kernels/BatchMatMul");
var _batchToSpaceND = require("./kernels/BatchToSpaceND");
var _bincount = require("./kernels/Bincount");
var _bitwiseAnd = require("./kernels/BitwiseAnd");
var _broadcastArgs = require("./kernels/BroadcastArgs");
var _cast = require("./kernels/Cast");
var _ceil = require("./kernels/Ceil");
var _clipByValue = require("./kernels/ClipByValue");
var _concat = require("./kernels/Concat");
var _conv2D = require("./kernels/Conv2D");
var _conv2DBackpropInput = require("./kernels/Conv2DBackpropInput");
var _conv3D = require("./kernels/Conv3D");
var _conv3DBackpropFilterV2 = require("./kernels/Conv3DBackpropFilterV2");
var _conv3DBackpropInputV2 = require("./kernels/Conv3DBackpropInputV2");
var _cos = require("./kernels/Cos");
var _cosh = require("./kernels/Cosh");
var _cropAndResize = require("./kernels/CropAndResize");
var _cumprod = require("./kernels/Cumprod");
var _cumsum = require("./kernels/Cumsum");
var _denseBincount = require("./kernels/DenseBincount");
var _depthToSpace = require("./kernels/DepthToSpace");
var _depthwiseConv2DNative = require("./kernels/DepthwiseConv2dNative");
var _diag = require("./kernels/Diag");
var _dilation2D = require("./kernels/Dilation2D");
var _dilation2DBackpropFilter = require("./kernels/Dilation2DBackpropFilter");
var _dilation2DBackpropInput = require("./kernels/Dilation2DBackpropInput");
var _elu = require("./kernels/Elu");
var _eluGrad = require("./kernels/EluGrad");
var _equal = require("./kernels/Equal");
var _erf = require("./kernels/Erf");
var _exp = require("./kernels/Exp");
var _expandDims = require("./kernels/ExpandDims");
var _expm1 = require("./kernels/Expm1");
var _fill = require("./kernels/Fill");
var _flipLeftRight = require("./kernels/FlipLeftRight");
var _floor = require("./kernels/Floor");
var _floorDiv = require("./kernels/FloorDiv");
var _fusedBatchNorm = require("./kernels/FusedBatchNorm");
var _fusedConv2D = require("./kernels/FusedConv2D");
var _fusedDepthwiseConv2D = require("./kernels/FusedDepthwiseConv2D");
var _gatherNd = require("./kernels/GatherNd");
var _gatherV2 = require("./kernels/GatherV2");
var _greater = require("./kernels/Greater");
var _greaterEqual = require("./kernels/GreaterEqual");
var _identity = require("./kernels/Identity");
var _isFinite = require("./kernels/IsFinite");
var _isInf = require("./kernels/IsInf");
var _isNan = require("./kernels/IsNan");
var _leakyRelu = require("./kernels/LeakyRelu");
var _less = require("./kernels/Less");
var _lessEqual = require("./kernels/LessEqual");
var _linSpace = require("./kernels/LinSpace");
var _log = require("./kernels/Log");
var _log1P = require("./kernels/Log1p");
var _logicalAnd = require("./kernels/LogicalAnd");
var _logicalNot = require("./kernels/LogicalNot");
var _logicalOr = require("./kernels/LogicalOr");
var _logicalXor = require("./kernels/LogicalXor");
var _lrn = require("./kernels/LRN");
var _lrngrad = require("./kernels/LRNGrad");
var _max = require("./kernels/Max");
var _maximum = require("./kernels/Maximum");
var _maxPool = require("./kernels/MaxPool");
var _maxPool3D = require("./kernels/MaxPool3D");
var _maxPool3DGrad = require("./kernels/MaxPool3DGrad");
var _maxPoolGrad = require("./kernels/MaxPoolGrad");
var _maxPoolWithArgmax = require("./kernels/MaxPoolWithArgmax");
var _mean = require("./kernels/Mean");
var _min = require("./kernels/Min");
var _minimum = require("./kernels/Minimum");
var _mirrorPad = require("./kernels/MirrorPad");
var _multinomial = require("./kernels/Multinomial");
var _mod = require("./kernels/Mod");
var _multiply = require("./kernels/Multiply");
var _neg = require("./kernels/Neg");
var _nonMaxSuppressionV3 = require("./kernels/NonMaxSuppressionV3");
var _nonMaxSuppressionV4 = require("./kernels/NonMaxSuppressionV4");
var _nonMaxSuppressionV5 = require("./kernels/NonMaxSuppressionV5");
var _notEqual = require("./kernels/NotEqual");
var _oneHot = require("./kernels/OneHot");
var _onesLike = require("./kernels/OnesLike");
var _pack = require("./kernels/Pack");
var _padV2 = require("./kernels/PadV2");
var _pow = require("./kernels/Pow");
var _prelu = require("./kernels/Prelu");
var _prod = require("./kernels/Prod");
var _range = require("./kernels/Range");
var _realDiv = require("./kernels/RealDiv");
var _reciprocal = require("./kernels/Reciprocal");
var _relu = require("./kernels/Relu");
var _relu6 = require("./kernels/Relu6");
var _reshape = require("./kernels/Reshape");
var _resizeBilinear = require("./kernels/ResizeBilinear");
var _resizeBilinearGrad = require("./kernels/ResizeBilinearGrad");
var _resizeNearestNeighbor = require("./kernels/ResizeNearestNeighbor");
var _resizeNearestNeighborGrad = require("./kernels/ResizeNearestNeighborGrad");
var _reverse = require("./kernels/Reverse");
var _rotateWithOffset = require("./kernels/RotateWithOffset");
var _round = require("./kernels/Round");
var _rsqrt = require("./kernels/Rsqrt");
var _scatterNd = require("./kernels/ScatterNd");
var _searchSorted = require("./kernels/SearchSorted");
var _select = require("./kernels/Select");
var _selu = require("./kernels/Selu");
var _sigmoid = require("./kernels/Sigmoid");
var _sign = require("./kernels/Sign");
var _sin = require("./kernels/Sin");
var _sinh = require("./kernels/Sinh");
var _slice = require("./kernels/Slice");
var _softmax = require("./kernels/Softmax");
var _softplus = require("./kernels/Softplus");
var _spaceToBatchND = require("./kernels/SpaceToBatchND");
var _sparseFillEmptyRows = require("./kernels/SparseFillEmptyRows");
var _sparseReshape = require("./kernels/SparseReshape");
var _sparseSegmentMean = require("./kernels/SparseSegmentMean");
var _sparseSegmentSum = require("./kernels/SparseSegmentSum");
var _sparseToDense = require("./kernels/SparseToDense");
var _splitV = require("./kernels/SplitV");
var _sqrt = require("./kernels/Sqrt");
var _square = require("./kernels/Square");
var _squaredDifference = require("./kernels/SquaredDifference");
var _step = require("./kernels/Step");
var _stridedSlice = require("./kernels/StridedSlice");
var _stringNGrams = require("./kernels/StringNGrams");
var _stringSplit = require("./kernels/StringSplit");
var _stringToHashBucketFast = require("./kernels/StringToHashBucketFast");
var _sub = require("./kernels/Sub");
var _sum = require("./kernels/Sum");
var _tan = require("./kernels/Tan");
var _tanh = require("./kernels/Tanh");
var _tensorScatterUpdate = require("./kernels/TensorScatterUpdate");
var _tile = require("./kernels/Tile");
var _topK = require("./kernels/TopK");
var _transform = require("./kernels/Transform");
var _transpose = require("./kernels/Transpose");
var _unique = require("./kernels/Unique");
var _unpack = require("./kernels/Unpack");
var _zerosLike = require("./kernels/ZerosLike");
// List all kernel configs here
const kernelConfigs = [
    (0, _fusedMatMul._fusedMatMulConfig),
    (0, _abs.absConfig),
    (0, _acos.acosConfig),
    (0, _acosh.acoshConfig),
    (0, _add.addConfig),
    (0, _addN.addNConfig),
    (0, _all.allConfig),
    (0, _any.anyConfig),
    (0, _argMax.argMaxConfig),
    (0, _argMin.argMinConfig),
    (0, _asin.asinConfig),
    (0, _asinh.asinhConfig),
    (0, _atan.atanConfig),
    (0, _atan2.atan2Config),
    (0, _atanh.atanhConfig),
    (0, _avgPool.avgPoolConfig),
    (0, _avgPoolGrad.avgPoolGradConfig),
    (0, _avgPool3D.avgPool3DConfig),
    (0, _avgPool3DGrad.avgPool3DGradConfig),
    (0, _batchMatMul.batchMatMulConfig),
    (0, _batchToSpaceND.batchToSpaceNDConfig),
    (0, _bincount.bincountConfig),
    (0, _bitwiseAnd.bitwiseAndConfig),
    (0, _broadcastArgs.broadcastArgsConfig),
    (0, _cast.castConfig),
    (0, _ceil.ceilConfig),
    (0, _clipByValue.clipByValueConfig),
    (0, _concat.concatConfig),
    (0, _conv2D.conv2DConfig),
    (0, _conv2DBackpropInput.conv2DBackpropInputConfig),
    (0, _conv3D.conv3DConfig),
    (0, _conv3DBackpropFilterV2.conv3DBackpropFilterV2Config),
    (0, _conv3DBackpropInputV2.conv3DBackpropInputV2Config),
    (0, _cos.cosConfig),
    (0, _cosh.coshConfig),
    (0, _cropAndResize.cropAndResizeConfig),
    (0, _cumprod.cumprodConfig),
    (0, _cumsum.cumsumConfig),
    (0, _denseBincount.denseBincountConfig),
    (0, _depthToSpace.depthToSpaceConfig),
    (0, _depthwiseConv2DNative.depthwiseConv2dNativeConfig),
    (0, _diag.diagConfig),
    (0, _dilation2D.dilation2DConfig),
    (0, _dilation2DBackpropFilter.dilation2DBackpropFilterConfig),
    (0, _dilation2DBackpropInput.dilation2DBackpropInputConfig),
    (0, _elu.eluConfig),
    (0, _eluGrad.eluGradConfig),
    (0, _equal.equalConfig),
    (0, _erf.erfConfig),
    (0, _exp.expConfig),
    (0, _expandDims.expandDimsConfig),
    (0, _expm1.expm1Config),
    (0, _fill.fillConfig),
    (0, _flipLeftRight.flipLeftRightConfig),
    (0, _floor.floorConfig),
    (0, _floorDiv.floorDivConfig),
    (0, _fusedBatchNorm.fusedBatchNormConfig),
    (0, _fusedConv2D.fusedConv2DConfig),
    (0, _fusedDepthwiseConv2D.fusedDepthwiseConv2DConfig),
    (0, _gatherNd.gatherNdConfig),
    (0, _gatherV2.gatherV2Config),
    (0, _greater.greaterConfig),
    (0, _greaterEqual.greaterEqualConfig),
    (0, _identity.identityConfig),
    (0, _isFinite.isFiniteConfig),
    (0, _isInf.isInfConfig),
    (0, _isNan.isNaNConfig),
    (0, _leakyRelu.leakyReluConfig),
    (0, _less.lessConfig),
    (0, _lessEqual.lessEqualConfig),
    (0, _linSpace.linSpaceConfig),
    (0, _log1P.log1pConfig),
    (0, _log.logConfig),
    (0, _logicalAnd.logicalAndConfig),
    (0, _logicalNot.logicalNotConfig),
    (0, _logicalOr.logicalOrConfig),
    (0, _logicalXor.logicalXorConfig),
    (0, _lrn.lrnConfig),
    (0, _lrngrad.lrnGradConfig),
    (0, _max.maxConfig),
    (0, _maximum.maximumConfig),
    (0, _maxPool.maxPoolConfig),
    (0, _maxPool3D.maxPool3DConfig),
    (0, _maxPool3DGrad.maxPool3DGradConfig),
    (0, _maxPoolGrad.maxPoolGradConfig),
    (0, _maxPoolWithArgmax.maxPoolWithArgmaxConfig),
    (0, _mean.meanConfig),
    (0, _min.minConfig),
    (0, _minimum.minimumConfig),
    (0, _mirrorPad.mirrorPadConfig),
    (0, _multinomial.multinomialConfig),
    (0, _mod.modConfig),
    (0, _multiply.multiplyConfig),
    (0, _neg.negConfig),
    (0, _nonMaxSuppressionV3.nonMaxSuppressionV3Config),
    (0, _nonMaxSuppressionV4.nonMaxSuppressionV4Config),
    (0, _nonMaxSuppressionV5.nonMaxSuppressionV5Config),
    (0, _notEqual.notEqualConfig),
    (0, _oneHot.oneHotConfig),
    (0, _onesLike.onesLikeConfig),
    (0, _pack.packConfig),
    (0, _padV2.padV2Config),
    (0, _pow.powConfig),
    (0, _prelu.preluConfig),
    (0, _prod.prodConfig),
    (0, _range.rangeConfig),
    (0, _realDiv.realDivConfig),
    (0, _reciprocal.reciprocalConfig),
    (0, _relu.reluConfig),
    (0, _relu6.relu6Config),
    (0, _reshape.reshapeConfig),
    (0, _resizeBilinear.resizeBilinearConfig),
    (0, _resizeBilinearGrad.resizeBilinearGradConfig),
    (0, _resizeNearestNeighbor.resizeNearestNeighborConfig),
    (0, _resizeNearestNeighborGrad.resizeNearestNeighborGradConfig),
    (0, _reverse.reverseConfig),
    (0, _rotateWithOffset.rotateWithOffsetConfig),
    (0, _round.roundConfig),
    (0, _rsqrt.rsqrtConfig),
    (0, _scatterNd.scatterNdConfig),
    (0, _searchSorted.searchSortedConfig),
    (0, _select.selectConfig),
    (0, _selu.seluConfig),
    (0, _sigmoid.sigmoidConfig),
    (0, _sign.signConfig),
    (0, _sin.sinConfig),
    (0, _sinh.sinhConfig),
    (0, _slice.sliceConfig),
    (0, _softmax.softmaxConfig),
    (0, _softplus.softplusConfig),
    (0, _spaceToBatchND.spaceToBatchNDConfig),
    (0, _sparseFillEmptyRows.sparseFillEmptyRowsConfig),
    (0, _sparseReshape.sparseReshapeConfig),
    (0, _sparseSegmentMean.sparseSegmentMeanConfig),
    (0, _sparseSegmentSum.sparseSegmentSumConfig),
    (0, _sparseToDense.sparseToDenseConfig),
    (0, _splitV.splitVConfig),
    (0, _sqrt.sqrtConfig),
    (0, _square.squareConfig),
    (0, _squaredDifference.squaredDifferenceConfig),
    (0, _step.stepConfig),
    (0, _stridedSlice.stridedSliceConfig),
    (0, _stringNGrams.stringNGramsConfig),
    (0, _stringSplit.stringSplitConfig),
    (0, _stringToHashBucketFast.stringToHashBucketFastConfig),
    (0, _sub.subConfig),
    (0, _sum.sumConfig),
    (0, _tan.tanConfig),
    (0, _tanh.tanhConfig),
    (0, _tensorScatterUpdate.tensorScatterUpdateConfig),
    (0, _tile.tileConfig),
    (0, _topK.topKConfig),
    (0, _transform.transformConfig),
    (0, _transpose.transposeConfig),
    (0, _unique.uniqueConfig),
    (0, _unpack.unpackConfig),
    (0, _zerosLike.zerosLikeConfig)
];
for (const kernelConfig of kernelConfigs)(0, _tfjsCore.registerKernel)(kernelConfig);

},{"@tensorflow/tfjs-core":"2votT","./kernels/_FusedMatMul":"c6QyG","./kernels/Abs":"lO7qx","./kernels/Acos":"iJVpy","./kernels/Acosh":"lcVm8","./kernels/Add":"1q25n","./kernels/AddN":"jz9BM","./kernels/All":"1noP5","./kernels/Any":"1jreb","./kernels/ArgMax":"dsG5V","./kernels/ArgMin":"auunp","./kernels/Asin":"3l5uc","./kernels/Asinh":"95bwk","./kernels/Atan":"9Xo8S","./kernels/Atan2":"oLdxP","./kernels/Atanh":"cTa3M","./kernels/AvgPool":"iIJpP","./kernels/AvgPool3D":"imDTS","./kernels/AvgPool3DGrad":"2JYH4","./kernels/AvgPoolGrad":"aeprX","./kernels/BatchMatMul":"7cklx","./kernels/BatchToSpaceND":"jJLRN","./kernels/Bincount":"83neQ","./kernels/BitwiseAnd":"kxaHX","./kernels/BroadcastArgs":"28MFl","./kernels/Cast":"gJKP6","./kernels/Ceil":"1k9nC","./kernels/ClipByValue":"406QN","./kernels/Concat":"y7qGm","./kernels/Conv2D":"74Jxh","./kernels/Conv2DBackpropInput":"2O2my","./kernels/Conv3D":"02GEl","./kernels/Conv3DBackpropFilterV2":"e4wtJ","./kernels/Conv3DBackpropInputV2":"bHsT6","./kernels/Cos":"9PVNz","./kernels/Cosh":"1uWBb","./kernels/CropAndResize":"4mubI","./kernels/Cumprod":"f7DAM","./kernels/Cumsum":"ibqJp","./kernels/DenseBincount":"aXW1z","./kernels/DepthToSpace":"h2rOh","./kernels/DepthwiseConv2dNative":"rwba7","./kernels/Diag":"ecCeG","./kernels/Dilation2D":"1qvvz","./kernels/Dilation2DBackpropFilter":"aymWD","./kernels/Dilation2DBackpropInput":"kWoxu","./kernels/Elu":"i1zo7","./kernels/EluGrad":"jCW98","./kernels/Equal":"iA3XY","./kernels/Erf":"fuEKO","./kernels/Exp":"iuW02","./kernels/ExpandDims":"hoqoo","./kernels/Expm1":"jlaKP","./kernels/Fill":"1vlVC","./kernels/FlipLeftRight":"hyZBi","./kernels/Floor":"3BiHh","./kernels/FloorDiv":"iTnXh","./kernels/FusedBatchNorm":"k8l4A","./kernels/FusedConv2D":"eTBxq","./kernels/FusedDepthwiseConv2D":"4q09D","./kernels/GatherNd":"dnnqd","./kernels/GatherV2":"iPaDu","./kernels/Greater":"entds","./kernels/GreaterEqual":"jIeNs","./kernels/Identity":"cKt0J","./kernels/IsFinite":"4GIQ1","./kernels/IsInf":"kPy6f","./kernels/IsNan":"eIAKW","./kernels/LeakyRelu":"1dUpn","./kernels/Less":"kg1sX","./kernels/LessEqual":"8ZJvr","./kernels/LinSpace":"fi2FT","./kernels/Log":"9Oc1A","./kernels/Log1p":"gQD2Y","./kernels/LogicalAnd":"4C1z0","./kernels/LogicalNot":"iy1aT","./kernels/LogicalOr":"lFvpe","./kernels/LogicalXor":"72TlS","./kernels/LRN":"kbcNc","./kernels/LRNGrad":"kqCbI","./kernels/Max":"lVNto","./kernels/Maximum":"8ySPQ","./kernels/MaxPool":"7obZ6","./kernels/MaxPool3D":"lqp28","./kernels/MaxPool3DGrad":"a38DC","./kernels/MaxPoolGrad":"9Jpd5","./kernels/MaxPoolWithArgmax":"hBC10","./kernels/Mean":"kW875","./kernels/Min":"8JtfS","./kernels/Minimum":"hQb6J","./kernels/MirrorPad":"eejPZ","./kernels/Multinomial":"lKpUD","./kernels/Mod":"2xPTx","./kernels/Multiply":"hpEZg","./kernels/Neg":"4ssta","./kernels/NonMaxSuppressionV3":"5sUPV","./kernels/NonMaxSuppressionV4":"kuv65","./kernels/NonMaxSuppressionV5":"bhhQ0","./kernels/NotEqual":"eG0iO","./kernels/OneHot":"aeW0J","./kernels/OnesLike":"6OEuZ","./kernels/Pack":"6aDcA","./kernels/PadV2":"3d5wK","./kernels/Pow":"bSGJS","./kernels/Prelu":"fSMVr","./kernels/Prod":"chYZC","./kernels/Range":"6REW1","./kernels/RealDiv":"gwfv9","./kernels/Reciprocal":"1DML7","./kernels/Relu":"2zGPs","./kernels/Relu6":"2dox4","./kernels/Reshape":"iRXb9","./kernels/ResizeBilinear":"2q19B","./kernels/ResizeBilinearGrad":"7oPq8","./kernels/ResizeNearestNeighbor":"kcTrG","./kernels/ResizeNearestNeighborGrad":"kqviW","./kernels/Reverse":"l1bIb","./kernels/RotateWithOffset":"kNgCn","./kernels/Round":"kbM3V","./kernels/Rsqrt":"kChui","./kernels/ScatterNd":"bNnq7","./kernels/SearchSorted":"4yg1b","./kernels/Select":"lxm4v","./kernels/Selu":"dHQKF","./kernels/Sigmoid":"9JnBj","./kernels/Sign":"cDOTb","./kernels/Sin":"iRRaT","./kernels/Sinh":"ghhNP","./kernels/Slice":"aahzO","./kernels/Softmax":"5Pe7B","./kernels/Softplus":"1IxGM","./kernels/SpaceToBatchND":"1xG5H","./kernels/SparseFillEmptyRows":"ee9PK","./kernels/SparseReshape":"esy5z","./kernels/SparseSegmentMean":"8Zem2","./kernels/SparseSegmentSum":"lBYRU","./kernels/SparseToDense":"5I63k","./kernels/SplitV":"1oNH7","./kernels/Sqrt":"aNBTd","./kernels/Square":"afRG5","./kernels/SquaredDifference":"1otjw","./kernels/Step":"ebylA","./kernels/StridedSlice":"3ARUo","./kernels/StringNGrams":"c2J8H","./kernels/StringSplit":"2Xo92","./kernels/StringToHashBucketFast":"iN7Fc","./kernels/Sub":"hvU1T","./kernels/Sum":"b5j8c","./kernels/Tan":"hvkUo","./kernels/Tanh":"48W80","./kernels/TensorScatterUpdate":"fJV25","./kernels/Tile":"hUk4l","./kernels/TopK":"9Ml7B","./kernels/Transform":"dkX2q","./kernels/Transpose":"f63sH","./kernels/Unique":"eBKRv","./kernels/Unpack":"9FbYb","./kernels/ZerosLike":"3fIMY"}],"c6QyG":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "_fusedMatMulConfig", ()=>_fusedMatMulConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmFusedMatMul;
function setup(backend) {
    wasmFusedMatMul = backend.wasm.cwrap((0, _tfjsCore._FusedMatMul), null, [
        "number",
        "array",
        "number",
        "number",
        "array",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number" // out_id
    ]);
}
function fusedBatchMatMul(args) {
    const { inputs, backend, attrs } = args;
    const { a, b, bias, preluActivationWeights } = inputs;
    if (a.dtype !== "float32" || b.dtype !== "float32") throw new Error(`_FusedMatMul for non non-float32 tensors not yet supported.`);
    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;
    const aId = backend.dataIdMap.get(a.dataId).id;
    const bId = backend.dataIdMap.get(b.dataId).id;
    let biasId = 0;
    if (bias != null) {
        const biasData = backend.dataIdMap.get(bias.dataId);
        if (biasData.shape.length !== 1) throw new Error(`_FusedMatMul only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);
        biasId = biasData.id;
    }
    const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;
    const fusedActivation = (0, _types.FusableActivation)[activation];
    if (fusedActivation == null) throw new Error(`${activation} activation not yet supported for FusedConv2D ` + `in the wasm backend.`);
    const leftDim = transposeA ? a.shape[2] : a.shape[1];
    const rightDim = transposeB ? b.shape[1] : b.shape[2];
    const batchDims = (0, _tfjsCore.broadcast_util).assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
    const out = backend.makeOutput([
        ...batchDims,
        leftDim,
        rightDim
    ], a.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);
    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);
    wasmFusedMatMul(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, transposeA, transposeB, fusedActivation, biasId, preluActivationWeightsId, leakyreluAlpha || 0, outId);
    return out;
}
const _fusedMatMulConfig = {
    kernelName: (0, _tfjsCore._FusedMatMul),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: fusedBatchMatMul
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bv6GZ":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // This enum must align with the enum defined in cc/backend.h.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CppDType", ()=>CppDType);
parcelHelpers.export(exports, "FusableActivation", ()=>FusableActivation);
var CppDType;
(function(CppDType) {
    CppDType[CppDType["float32"] = 0] = "float32";
    CppDType[CppDType["int32"] = 1] = "int32";
    CppDType[CppDType["bool"] = 2] = "bool";
    CppDType[CppDType["string"] = 3] = "string";
    CppDType[CppDType["complex64"] = 4] = "complex64";
})(CppDType || (CppDType = {}));
var FusableActivation;
(function(FusableActivation) {
    FusableActivation[FusableActivation["linear"] = 0] = "linear";
    FusableActivation[FusableActivation["relu"] = 1] = "relu";
    FusableActivation[FusableActivation["relu6"] = 2] = "relu6";
    FusableActivation[FusableActivation["prelu"] = 3] = "prelu";
    FusableActivation[FusableActivation["leakyrelu"] = 4] = "leakyrelu";
    FusableActivation[FusableActivation["sigmoid"] = 5] = "sigmoid";
    FusableActivation[FusableActivation["elu"] = 6] = "elu";
})(FusableActivation || (FusableActivation = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lO7qx":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "absConfig", ()=>absConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const absConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Abs));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2q58u":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUnaryKernelConfig", ()=>createUnaryKernelConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
function createUnaryKernelConfig(kernelName, outType) {
    let wasmFunc;
    function setupFunc(backend) {
        wasmFunc = backend.wasm.cwrap(kernelName, null, [
            "number",
            "number",
            "number"
        ]);
    }
    function kernelFunc(args) {
        const { backend, inputs: { x } } = args;
        const xId = backend.dataIdMap.get(x.dataId).id;
        const out = backend.makeOutput(x.shape, outType || x.dtype);
        const outId = backend.dataIdMap.get(out.dataId).id;
        // Short-circuit zero-sized tensors.
        if ((0, _tfjsCore.util).sizeFromShape(out.shape) === 0) return out;
        wasmFunc(xId, (0, _types.CppDType)[x.dtype], outId);
        return out;
    }
    return {
        kernelName,
        backendName: "wasm",
        setupFunc,
        kernelFunc
    };
}

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJVpy":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acosConfig", ()=>acosConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const acosConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Acos));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lcVm8":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "acoshConfig", ()=>acoshConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const acoshConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Acosh));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1q25n":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addConfig", ()=>addConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = true;
const addConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Add), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7HbPP":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createBinaryKernelConfig", ()=>createBinaryKernelConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
function createBinaryKernelConfig(kernelName, supportsFullBroadcast, dtype) {
    let wasmFunc;
    function setupFunc(backend) {
        wasmFunc = backend.wasm.cwrap(kernelName, null, [
            "number",
            "array",
            "number",
            "number",
            "array",
            "number",
            "number",
            "number" // out_id
        ]);
    }
    function kernelFunc(args) {
        const { backend, inputs } = args;
        const { a, b } = inputs;
        const aId = backend.dataIdMap.get(a.dataId).id;
        const bId = backend.dataIdMap.get(b.dataId).id;
        const outputType = dtype != null ? dtype : a.dtype;
        const newShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(a.shape, b.shape);
        const out = backend.makeOutput(newShape, outputType);
        // Short-circuit zero-sized tensors.
        if ((0, _tfjsCore.util).sizeFromShape(newShape) === 0) return out;
        const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);
        const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);
        const outId = backend.dataIdMap.get(out.dataId).id;
        const kernelFunc = ()=>wasmFunc(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, (0, _types.CppDType)[a.dtype], outId);
        kernelFunc();
        return out;
    }
    return {
        kernelName,
        backendName: "wasm",
        setupFunc,
        kernelFunc
    };
}

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jz9BM":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addNConfig", ()=>addNConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmFunc;
function setupFunc(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.AddN), null, [
        "array",
        "number",
        "number",
        "number"
    ]);
}
function addn(args) {
    const { inputs, backend } = args;
    const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);
    // Short-circuit zero-sized tensors.
    if ((0, _tfjsCore.util).sizeFromShape(out.shape) === 0) return out;
    const inputIds = inputs.map((x)=>backend.dataIdMap.get(x.dataId).id);
    const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmFunc(inputIdsBytes, inputIds.length, (0, _types.CppDType)[out.dtype], outId);
    return out;
}
const addNConfig = {
    kernelName: (0, _tfjsCore.AddN),
    backendName: "wasm",
    setupFunc,
    kernelFunc: addn
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1noP5":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "allConfig", ()=>allConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
let wasmAll;
function setup(backend) {
    wasmAll = backend.wasm.cwrap((0, _tfjsCore.All), null, [
        "number, number, number"
    ]);
}
function all(args) {
    const { backend, inputs, attrs } = args;
    const { axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        input = transposed;
        inputId = transposedId;
    }
    const inputRank = input.shape.length;
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("all", axes, inputRank);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const out = backend.makeOutput(outShape, x.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmAll(inputId, reduceSize, outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    return out;
}
const allConfig = {
    kernelName: (0, _tfjsCore.All),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: all
};

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h9kCK":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Compute permutation axes and do a transpose if necessary.
 *
 * Used by reduction ops.
 * @param x input TensorInfo
 * @param axis reduction axes
 * @param backend wasm backend instance
 */ parcelHelpers.export(exports, "permuteAxesAndTranspose", ()=>permuteAxesAndTranspose);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _transpose = require("./Transpose");
function permuteAxesAndTranspose(x, axis, backend) {
    const xShape = x.shape;
    const xRank = x.shape.length;
    const originalAxes = (0, _tfjsCore.util).parseAxisParam(axis, xShape);
    let axes = originalAxes;
    const permutedAxes = (0, _tfjsCore.backend_util).getAxesPermutation(axes, xRank);
    let xTransposed = null;
    let inputWasTransposed = false;
    if (permutedAxes != null) {
        const newShape = new Array(xRank);
        for(let i = 0; i < newShape.length; i++)newShape[i] = xShape[permutedAxes[i]];
        axes = (0, _tfjsCore.backend_util).getInnerMostAxes(axes.length, xRank);
        xTransposed = (0, _transpose.transpose)({
            inputs: {
                x
            },
            attrs: {
                perm: permutedAxes
            },
            backend
        });
        const xId = backend.dataIdMap.get(x.dataId).id;
        const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;
        if (transposedId !== xId) inputWasTransposed = true;
    }
    return {
        transposed: xTransposed,
        originalAxes,
        axes,
        inputWasTransposed
    };
}

},{"@tensorflow/tfjs-core":"2votT","./Transpose":"f63sH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f63sH":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transpose", ()=>transpose);
parcelHelpers.export(exports, "transposeConfig", ()=>transposeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _identity = require("./Identity");
var _types = require("./types");
let wasmTranspose;
function setup(backend) {
    wasmTranspose = backend.wasm.cwrap((0, _tfjsCore.Transpose), null, [
        "number",
        "array",
        "number",
        "number",
        "number",
        "array",
        "number"
    ]);
}
function transpose(args) {
    const { inputs, backend, attrs } = args;
    // Reduce any dimensions with size one. Lower-rank transpose kernel performs
    // better due to simpler memory access pattern.
    const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);
    let permIsNoOp = true;
    for(let i = 0; i < perm.length; i++)if (perm[i] !== i) permIsNoOp = false;
    const outShape = computeOutShape(inputs.x.shape, attrs.perm);
    const x = {
        dataId: inputs.x.dataId,
        shape: reducedShape,
        dtype: inputs.x.dtype
    };
    if (permIsNoOp) {
        const cloned = (0, _identity.identity)({
            inputs,
            backend
        });
        cloned.shape = outShape;
        return cloned;
    }
    const out = backend.makeOutput(outShape, x.dtype);
    const xId = backend.dataIdMap.get(x.dataId).id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    const permBytes = new Uint8Array(new Int32Array(perm).buffer);
    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);
    wasmTranspose(xId, xShapeBytes, x.shape.length, (0, _types.CppDType)[x.dtype], outId, permBytes, perm.length);
    return out;
}
function computeOutShape(inShape, perm) {
    const outShape = new Array(inShape.length);
    for(let i = 0; i < outShape.length; i++)outShape[i] = inShape[perm[i]];
    return outShape;
}
function removeOneSizeDims(shape, perm) {
    const newShape = [];
    const newPerm = [];
    for(let i = 0; i < shape.length; ++i){
        if (shape[i] !== 1) newShape.push(shape[i]);
        if (shape[perm[i]] !== 1) newPerm.push(perm[i]);
    }
    for(let i = 0; i < newPerm.length; ++i){
        let minValIdx = -1;
        for(let j = 0; j < newPerm.length; ++j)if (newPerm[j] >= i && (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) minValIdx = j;
        newPerm[minValIdx] = i;
    }
    return [
        newShape,
        newPerm
    ];
}
const transposeConfig = {
    kernelName: (0, _tfjsCore.Transpose),
    backendName: "wasm",
    kernelFunc: transpose,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","./Identity":"cKt0J","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKt0J":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "identityConfig", ()=>identityConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function identity(args) {
    const { inputs: { x }, backend } = args;
    if (x.dtype === "string") return (0, _tfjsCore.tensor)(backend.readSync(x.dataId), x.shape, x.dtype);
    const out = backend.makeOutput(x.shape, x.dtype);
    const inVals = backend.typedArrayFromHeap(x);
    const outVals = backend.typedArrayFromHeap(out);
    outVals.set(inVals);
    return out;
}
const identityConfig = {
    kernelName: (0, _tfjsCore.Identity),
    backendName: "wasm",
    kernelFunc: identity
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1jreb":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "anyConfig", ()=>anyConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
let wasmAny;
function setup(backend) {
    wasmAny = backend.wasm.cwrap((0, _tfjsCore.Any), null, [
        "number, number, number"
    ]);
}
function any(args) {
    const { backend, inputs, attrs } = args;
    const { axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        input = transposed;
        inputId = transposedId;
    }
    const inputRank = input.shape.length;
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("any", axes, inputRank);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const out = backend.makeOutput(outShape, x.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmAny(inputId, reduceSize, outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    return out;
}
const anyConfig = {
    kernelName: (0, _tfjsCore.Any),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: any
};

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsG5V":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argMaxConfig", ()=>argMaxConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _argminmaxKernel = require("./argminmax_kernel");
const argMaxConfig = (0, _argminmaxKernel.createArgMinMaxKernelConfig)((0, _tfjsCore.ArgMax));

},{"@tensorflow/tfjs-core":"2votT","./argminmax_kernel":"uC6ho","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"uC6ho":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createArgMinMaxKernelConfig", ()=>createArgMinMaxKernelConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
var _types = require("./types");
function createArgMinMaxKernelConfig(kernelName) {
    let wasmFunc;
    function setupFunc(backend) {
        wasmFunc = backend.wasm.cwrap(kernelName, null, [
            "number",
            "number",
            "number",
            "number",
            "number" // out_id
        ]);
    }
    function kernelFunc(args) {
        const { backend, inputs, attrs } = args;
        const { axis } = attrs;
        const { x } = inputs;
        const xId = backend.dataIdMap.get(x.dataId).id;
        let inputId = xId;
        let input = x;
        const { transposed, axes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
        if (inputWasTransposed) {
            const transposedId = backend.dataIdMap.get(transposed.dataId).id;
            if (transposedId !== xId) {
                // transpose was not a no-op. We will need to dispose of this
                // once we are done.
                input = transposed;
                inputId = transposedId;
            }
        }
        const outShape = input.shape.slice(0, -1);
        const out = backend.makeOutput(outShape, "int32");
        const outId = backend.dataIdMap.get(out.dataId).id;
        const outerSize = (0, _tfjsCore.util).sizeFromShape(out.shape);
        const innerSize = input.shape[axes[0]];
        wasmFunc(inputId, (0, _types.CppDType)[input.dtype], outerSize, innerSize, outId);
        if (inputWasTransposed) // dispose of the transposed tensor.
        backend.disposeData(transposed.dataId);
        return out;
    }
    return {
        kernelName,
        backendName: "wasm",
        setupFunc,
        kernelFunc: kernelFunc
    };
}

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"auunp":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "argMinConfig", ()=>argMinConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _argminmaxKernel = require("./argminmax_kernel");
const argMinConfig = (0, _argminmaxKernel.createArgMinMaxKernelConfig)((0, _tfjsCore.ArgMin));

},{"@tensorflow/tfjs-core":"2votT","./argminmax_kernel":"uC6ho","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3l5uc":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinConfig", ()=>asinConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const asinConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Asin));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"95bwk":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asinhConfig", ()=>asinhConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const asinhConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Asinh));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Xo8S":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanConfig", ()=>atanConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const atanConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Atan));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"oLdxP":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atan2Config", ()=>atan2Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const atan2Config = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Atan2), /*supportsFullBroadcast=*/ false);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTa3M":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "atanhConfig", ()=>atanhConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const atanhConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Atanh));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iIJpP":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPoolConfig", ()=>avgPoolConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmAvgPool;
function setup(backend) {
    wasmAvgPool = backend.wasm.cwrap((0, _tfjsCore.AvgPool), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function avgPool(args) {
    const { inputs, attrs, backend } = args;
    const x = inputs.x;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const { filterSize, strides, pad, dimRoundingMode } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = convInfo.padInfo.top;
    const padRight = convInfo.padInfo.right;
    const padBottom = convInfo.padInfo.bottom;
    const padLeft = convInfo.padInfo.left;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const channels = convInfo.inChannels;
    if (convInfo.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);
    if (convInfo.dilationWidth !== 1 || convInfo.dilationHeight !== 1) throw new Error(`was backend only supports average pooling with dilation = [1, 1], ` + `got [${convInfo.dilationHeight}, ${convInfo.dilationWidth}].`);
    const out = backend.makeOutput(convInfo.outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmAvgPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, strideHeight, strideWidth, channels, outId);
    return out;
}
const avgPoolConfig = {
    kernelName: (0, _tfjsCore.AvgPool),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: avgPool
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"imDTS":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool3D", ()=>avgPool3D);
parcelHelpers.export(exports, "avgPool3DConfig", ()=>avgPool3DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmAvgPool3D;
function setup(backend) {
    wasmAvgPool3D = backend.wasm.cwrap("AvgPool3D", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function avgPool3D(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(x.shape, filterSize, strides, /*dilations=*/ 1, pad, dimRoundingMode, dataFormat);
    const out = backend.makeOutput(convInfo.outShape, x.dtype);
    wasmAvgPool3D(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(out.dataId).id, convInfo.batchSize, // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in
    // channels should always equal to out channels.
    /*channelSize=*/ convInfo.inChannels, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);
    return out;
}
const avgPool3DConfig = {
    kernelName: (0, _tfjsCore.AvgPool3D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: avgPool3D
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2JYH4":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPool3DGrad", ()=>avgPool3DGrad);
parcelHelpers.export(exports, "avgPool3DGradConfig", ()=>avgPool3DGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmAvgPool3DGrad;
function setup(backend) {
    wasmAvgPool3DGrad = backend.wasm.cwrap("AvgPool3DGrad", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function avgPool3DGrad(args) {
    const { inputs, backend, attrs } = args;
    const { dy, input } = inputs;
    const { filterSize, strides, pad, dimRoundingMode } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(input.shape, filterSize, strides, /*dilations=*/ 1, pad, dimRoundingMode);
    const dx = backend.makeOutput(input.shape, input.dtype);
    wasmAvgPool3DGrad(backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize, // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in
    // channels should always equal to out channels.
    /*channelSize=*/ convInfo.inChannels, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth);
    return dx;
}
const avgPool3DGradConfig = {
    kernelName: (0, _tfjsCore.AvgPool3DGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: avgPool3DGrad
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeprX":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "avgPoolGrad", ()=>avgPoolGrad);
parcelHelpers.export(exports, "avgPoolGradConfig", ()=>avgPoolGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmAvgPoolGrad;
function setup(backend) {
    wasmAvgPoolGrad = backend.wasm.cwrap("AvgPoolGrad", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function avgPoolGrad(args) {
    const { inputs, backend, attrs } = args;
    const { dy, input } = inputs;
    const { filterSize, strides, pad } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(input.shape, filterSize, strides, /*dilations=*/ 1, pad);
    const dx = backend.makeOutput(input.shape, input.dtype);
    wasmAvgPoolGrad(backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize, // Since Pool ops (AvgPool and MaxPool) support 2D filter only, in
    // channels should always equal to out channels.
    /*channelSize=*/ convInfo.inChannels, convInfo.inHeight, convInfo.inWidth, convInfo.outHeight, convInfo.outWidth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.top, convInfo.padInfo.left, convInfo.filterHeight, convInfo.filterWidth);
    return dx;
}
const avgPoolGradConfig = {
    kernelName: (0, _tfjsCore.AvgPoolGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: avgPoolGrad
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7cklx":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchMatMulConfig", ()=>batchMatMulConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
let wasmBatchMatMul;
function setup(backend) {
    wasmBatchMatMul = backend.wasm.cwrap((0, _tfjsCore.BatchMatMul), null, [
        "number",
        "array",
        "number",
        "number",
        "array",
        "number",
        "number",
        "number",
        "number" // out_id
    ]);
}
function batchMatMul(args) {
    const { inputs, backend, attrs } = args;
    const { a, b } = inputs;
    const { transposeA, transposeB } = attrs;
    if (a.dtype !== "float32" || b.dtype !== "float32") throw new Error(`BatchMatMul for non non-float32 tensors not yet supported.`);
    const aRank = a.shape.length;
    const bRank = b.shape.length;
    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];
    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];
    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];
    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];
    const outerDimsA = a.shape.slice(0, -2);
    const outerDimsB = b.shape.slice(0, -2);
    const batchDimA = (0, _tfjsCore.util).sizeFromShape(outerDimsA);
    const batchDimB = (0, _tfjsCore.util).sizeFromShape(outerDimsB);
    const outShapeOuterDims = (0, _tfjsCore.broadcast_util).assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));
    const outShape = outShapeOuterDims.concat([
        outerShapeA,
        outerShapeB
    ]);
    (0, _tfjsCore.util).assert(innerShapeA === innerShapeB, ()=>`Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);
    const a3dShape = transposeA ? [
        batchDimA,
        innerShapeA,
        outerShapeA
    ] : [
        batchDimA,
        outerShapeA,
        innerShapeA
    ];
    const b3dShape = transposeB ? [
        batchDimB,
        outerShapeB,
        innerShapeB
    ] : [
        batchDimB,
        innerShapeB,
        outerShapeB
    ];
    // The rest of the implementation is designed to operate on rank-3 tensors
    const a3d = (0, _reshape.reshape)({
        inputs: {
            x: a
        },
        backend,
        attrs: {
            shape: a3dShape
        }
    });
    const b3d = (0, _reshape.reshape)({
        inputs: {
            x: b
        },
        backend,
        attrs: {
            shape: b3dShape
        }
    });
    const a3dId = backend.dataIdMap.get(a3d.dataId).id;
    const b3dId = backend.dataIdMap.get(b3d.dataId).id;
    const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];
    const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];
    const batchDim = Math.max(batchDimA, batchDimB);
    const out = backend.makeOutput([
        batchDim,
        leftDim,
        rightDim
    ], a3d.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const aShapeBytes = new Uint8Array(new Int32Array(a3d.shape).buffer);
    const bShapeBytes = new Uint8Array(new Int32Array(b3d.shape).buffer);
    wasmBatchMatMul(a3dId, aShapeBytes, a3d.shape.length, b3dId, bShapeBytes, b3d.shape.length, transposeA, transposeB, outId);
    backend.disposeData(a3d.dataId);
    backend.disposeData(b3d.dataId);
    out.shape = outShape;
    return out;
}
const batchMatMulConfig = {
    kernelName: (0, _tfjsCore.BatchMatMul),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: batchMatMul
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"iRXb9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRXb9":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reshape", ()=>reshape);
parcelHelpers.export(exports, "reshapeConfig", ()=>reshapeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function reshape(args) {
    const { inputs, attrs } = args;
    const { x } = inputs;
    const { shape } = attrs;
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const $shape = (0, _tfjsCore.util).inferFromImplicitShape(shape, xSize);
    (0, _tfjsCore.util).assert(xSize === (0, _tfjsCore.util).sizeFromShape($shape), ()=>`new shape: ${$shape}, old shape: ${x.shape}. New shape and old ` + `shape must have the same number of elements.`);
    // Backend needs to track refCount for the dataId for reshape op
    args.backend.incRef(x.dataId);
    return {
        dataId: x.dataId,
        shape: $shape,
        dtype: x.dtype
    };
}
const reshapeConfig = {
    kernelName: (0, _tfjsCore.Reshape),
    backendName: "wasm",
    kernelFunc: reshape
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJLRN":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "batchToSpaceNDConfig", ()=>batchToSpaceNDConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
var _slice = require("./Slice");
var _transpose = require("./Transpose");
function batchToSpaceND(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { blockShape, crops } = attrs;
    const prod = blockShape.reduce((a, b)=>a * b);
    const reshaped = (0, _tfjsCore.backend_util).getReshaped(x.shape, blockShape, prod);
    const permuted = (0, _tfjsCore.backend_util).getPermuted(reshaped.length, blockShape.length);
    const reshapedPermuted = (0, _tfjsCore.backend_util).getReshapedPermuted(x.shape, blockShape, prod);
    const sliceBeginCoords = (0, _tfjsCore.backend_util).getSliceBeginCoords(crops, blockShape.length);
    const sliceSize = (0, _tfjsCore.backend_util).getSliceSize(reshapedPermuted, crops, blockShape.length);
    const xReshaped = (0, _reshape.reshape)({
        inputs: {
            x
        },
        backend,
        attrs: {
            shape: reshaped
        }
    });
    const xTransposed = (0, _transpose.transpose)({
        inputs: {
            x: xReshaped
        },
        backend,
        attrs: {
            perm: permuted
        }
    });
    const xTransposedReshaped = (0, _reshape.reshape)({
        inputs: {
            x: xTransposed
        },
        backend,
        attrs: {
            shape: reshapedPermuted
        }
    });
    const result = (0, _slice.slice)({
        inputs: {
            x: xTransposedReshaped
        },
        backend,
        attrs: {
            begin: sliceBeginCoords,
            size: sliceSize
        }
    });
    backend.disposeData(xReshaped.dataId);
    backend.disposeData(xTransposed.dataId);
    backend.disposeData(xReshaped.dataId);
    return result;
}
const batchToSpaceNDConfig = {
    kernelName: (0, _tfjsCore.BatchToSpaceND),
    backendName: "wasm",
    kernelFunc: batchToSpaceND
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"iRXb9","./Slice":"aahzO","./Transpose":"f63sH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aahzO":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "sliceConfig", ()=>sliceConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
function slice(args) {
    const { inputs: { x }, attrs: { begin, size }, backend } = args;
    const [begin_, size_] = (0, _tfjsCore.slice_util).parseSliceParams(x, begin, size);
    const isContinous = (0, _tfjsCore.slice_util).isSliceContinous(x.shape, begin_, size_);
    const xVals = backend.readSync(x.dataId);
    const out = backend.makeOutput(size_, x.dtype);
    const xStrides = (0, _tfjsCore.util).computeStrides(x.shape);
    const outData = backend.dataIdMap.get(out.dataId);
    if (isContinous) {
        const flatOffset = (0, _tfjsCore.slice_util).computeFlatOffset(begin_, xStrides);
        if (x.dtype === "string") outData.stringBytes = xVals.slice(flatOffset, flatOffset + (0, _tfjsCore.util).sizeFromShape(size_));
        else {
            const outVals = backend.typedArrayFromHeap(out);
            outVals.set(xVals.subarray(flatOffset, flatOffset + (0, _tfjsCore.util).sizeFromShape(size_)));
        }
        return out;
    }
    if (x.dtype === "string") {
        const res = (0, _shared.sliceImplCPU)(xVals, begin_, size_, x.shape, x.dtype);
        outData.stringBytes = res;
        return out;
    }
    const outVals = backend.typedArrayFromHeap(out);
    const rank = x.shape.length;
    if (rank === 2) slice2d(xVals, xStrides[0], outVals, begin_, size_);
    else if (rank === 3) slice3d(xVals, xStrides[0], xStrides[1], outVals, begin_, size_);
    else if (rank === 4) slice4d(xVals, xStrides[0], xStrides[1], xStrides[2], outVals, begin_, size_);
    else {
        const res = (0, _shared.sliceImplCPU)(xVals, begin_, size_, x.shape, x.dtype);
        outVals.set(res);
    }
    return out;
}
function slice2d(xVals, xStride, outVals, begin, size) {
    let outOffset = 0;
    const beginI = begin[0];
    const beginJ = begin[1];
    const endI = beginI + size[0];
    for(let i = beginI; i < endI; i++){
        const xOffset = i * xStride + beginJ;
        outVals.set(xVals.subarray(xOffset, xOffset + size[1]), outOffset);
        outOffset += size[1];
    }
}
function slice3d(xVals, xStride1, xStride2, outVals, begin, size) {
    let outOffset = 0;
    const beginI = begin[0];
    const beginJ = begin[1];
    const beginK = begin[2];
    const endI = beginI + size[0];
    const endJ = beginJ + size[1];
    for(let i = beginI; i < endI; i++)for(let j = beginJ; j < endJ; j++){
        const xOffset = i * xStride1 + j * xStride2 + beginK;
        outVals.set(xVals.subarray(xOffset, xOffset + size[2]), outOffset);
        outOffset += size[2];
    }
}
function slice4d(xVals, xStride1, xStride2, xStride3, outVals, begin, size) {
    let outOffset = 0;
    const beginI = begin[0];
    const beginJ = begin[1];
    const beginK = begin[2];
    const endI = beginI + size[0];
    const endJ = beginJ + size[1];
    const endK = beginK + size[2];
    const beginL = begin[3];
    for(let i = beginI; i < endI; i++){
        for(let j = beginJ; j < endJ; j++)for(let k = beginK; k < endK; k++){
            const xOffset = i * xStride1 + j * xStride2 + k * xStride3 + beginL;
            outVals.set(xVals.subarray(xOffset, xOffset + size[3]), outOffset);
            outOffset += size[3];
        }
    }
}
const sliceConfig = {
    kernelName: (0, _tfjsCore.Slice),
    backendName: "wasm",
    kernelFunc: slice
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqi3L":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ // Import shared functionality from tfjs-backend-cpu without triggering
// side effects.
// tslint:disable-next-line: no-imports-from-dist
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concatImplCPU", ()=>(0, _shared.concatImpl));
parcelHelpers.export(exports, "rangeImplCPU", ()=>(0, _shared.rangeImpl));
parcelHelpers.export(exports, "sliceImplCPU", ()=>(0, _shared.sliceImpl));
parcelHelpers.export(exports, "stringNGramsImplCPU", ()=>(0, _shared.stringNGramsImpl));
parcelHelpers.export(exports, "stringSplitImplCPU", ()=>(0, _shared.stringSplitImpl));
parcelHelpers.export(exports, "stringToHashBucketFastImplCPU", ()=>(0, _shared.stringToHashBucketFastImpl));
parcelHelpers.export(exports, "uniqueImplCPU", ()=>(0, _shared.uniqueImpl));
var _shared = require("@tensorflow/tfjs-backend-cpu/dist/shared");

},{"@tensorflow/tfjs-backend-cpu/dist/shared":"bDxeV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"83neQ":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bincountConfig", ()=>bincountConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmBincount;
function setup(backend) {
    wasmBincount = backend.wasm.cwrap((0, _tfjsCore.Bincount), null, [
        "number",
        "number",
        "boolean",
        "number",
        "number",
        "number"
    ]);
}
function bincount(args) {
    const { backend, inputs, attrs } = args;
    const { x, weights } = inputs;
    const { size } = attrs;
    const hasWeights = weights.shape.reduce((p, v)=>p * v, 1) !== 0;
    const outShape = x.shape.length === 1 ? [
        size
    ] : [
        x.shape[0],
        size
    ];
    const out = backend.makeOutput(outShape, weights.dtype);
    function tensorId(x) {
        return backend.dataIdMap.get(x.dataId).id;
    }
    wasmBincount(tensorId(x), size, hasWeights, tensorId(weights), (0, _types.CppDType)[weights.dtype], tensorId(out));
    return out;
}
const bincountConfig = {
    kernelName: (0, _tfjsCore.Bincount),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: bincount
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxaHX":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitwiseAndConfig", ()=>bitwiseAndConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = true;
const bitwiseAndConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.BitwiseAnd), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"28MFl":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "broadcastArgs", ()=>broadcastArgs);
parcelHelpers.export(exports, "broadcastArgsConfig", ()=>broadcastArgsConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function broadcastArgs(args) {
    const { inputs, backend } = args;
    const { s0, s1 } = inputs;
    const s0Vals = backend.typedArrayFromHeap(s0);
    const s1Vals = backend.typedArrayFromHeap(s1);
    const broadcastShape = (0, _tfjsCore.backend_util).assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));
    return backend.makeOutput([
        broadcastShape.length
    ], "int32", /*memoryOffset=*/ undefined, /*values=*/ new Int32Array(broadcastShape));
}
const broadcastArgsConfig = {
    kernelName: (0, _tfjsCore.BroadcastArgs),
    backendName: "wasm",
    kernelFunc: broadcastArgs
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gJKP6":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cast", ()=>cast);
parcelHelpers.export(exports, "castConfig", ()=>castConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function cast(args) {
    const { inputs: { x }, attrs: { dtype }, backend } = args;
    const out = backend.makeOutput(x.shape, dtype);
    const inVals = backend.typedArrayFromHeap(x);
    const outVals = backend.typedArrayFromHeap(out);
    outVals.set(inVals);
    return out;
}
const castConfig = {
    kernelName: (0, _tfjsCore.Cast),
    backendName: "wasm",
    kernelFunc: cast
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1k9nC":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ceilConfig", ()=>ceilConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const ceilConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Ceil));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"406QN":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clipByValueConfig", ()=>clipByValueConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmClip;
function setup(backend) {
    wasmClip = backend.wasm.cwrap((0, _tfjsCore.ClipByValue), null, [
        "number",
        "number",
        "number",
        "number" // out_id
    ]);
}
function clip(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { clipValueMin, clipValueMax } = attrs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const out = backend.makeOutput(x.shape, x.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmClip(xId, clipValueMin, clipValueMax, outId);
    return out;
}
const clipByValueConfig = {
    kernelName: (0, _tfjsCore.ClipByValue),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: clip
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"y7qGm":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "concatConfig", ()=>concatConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
var _identity = require("./Identity");
var _reshape = require("./Reshape");
function concat(args) {
    const { inputs, backend } = args;
    const axis = (0, _tfjsCore.util).parseAxisParam(args.attrs.axis, inputs[0].shape)[0];
    const shapes = inputs.map((t)=>t.shape);
    (0, _tfjsCore.backend_util).assertParamsConsistent(shapes, axis);
    let outShape = (0, _tfjsCore.backend_util).computeOutShape(inputs.map((t)=>t.shape), axis);
    // Keep only non-empty tensors (ignore tensors with 0 in their shape).
    const $inputs = inputs.filter((t)=>(0, _tfjsCore.util).sizeFromShape(t.shape) > 0);
    if ($inputs.length === 1) return (0, _identity.identity)({
        inputs: {
            x: $inputs[0]
        },
        backend
    });
    const out = backend.makeOutput(outShape, inputs[0].dtype);
    if ((0, _tfjsCore.util).sizeFromShape(outShape) === 0) return out;
    if ($inputs[0].dtype === "string") {
        // Any concat of n-dimensional tensors across any axis can be reduced to
        // a concatenation of two-dimensional tensors across the axis 1 by first
        // partitioning the axes of the original tensors into those less than the
        // axis to be concatenated and the rest. Then reshape the tensors
        // into a two-dimensional tensor by collapsing these two sets of axes and
        // concatenate the resulting matrices across the axis 1, finally reshaping
        // the result to have the proper shape.
        const inputs2D = $inputs.map((t)=>{
            const innerSize = (0, _tfjsCore.util).sizeFromShape(t.shape.slice(axis));
            const shape = [
                -1,
                innerSize
            ];
            return (0, _reshape.reshape)({
                inputs: {
                    x: t
                },
                backend,
                attrs: {
                    shape
                }
            });
        });
        const inputsValShapes = inputs2D.map((t)=>{
            return {
                vals: backend.readSync(t.dataId),
                shape: t.shape
            };
        });
        // Concats 2d tensors along axis=1.
        outShape = (0, _tfjsCore.backend_util).computeOutShape(inputs2D.map((t)=>t.shape), 1 /* axis */ );
        const simplyConcat = inputs2D[0].shape[0] === 1;
        const outVals = (0, _shared.concatImplCPU)(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);
        const finalOutShape = (0, _tfjsCore.backend_util).computeOutShape($inputs.map((t)=>t.shape), axis);
        out.shape = finalOutShape;
        const outData = backend.dataIdMap.get(out.dataId);
        outData.stringBytes = (0, _tfjsCore.backend_util).fromStringArrayToUint8(outVals);
        inputs2D.forEach((t)=>backend.disposeData(t.dataId));
        return out;
    }
    const batchDim = (0, _tfjsCore.util).sizeFromShape($inputs[0].shape.slice(0, axis));
    let sumInnerDims = 0;
    const innerDims = $inputs.map((input)=>{
        const innerDim = (0, _tfjsCore.util).sizeFromShape(input.shape.slice(axis));
        sumInnerDims += innerDim;
        return innerDim;
    });
    const inVals = $inputs.map((input)=>backend.typedArrayFromHeap(input));
    const outVals = backend.typedArrayFromHeap(out);
    for(let b = 0; b < batchDim; b++){
        let outOffset = b * sumInnerDims;
        for(let i = 0; i < inVals.length; i++){
            const innerDim = innerDims[i];
            const inOffset = b * innerDim;
            const vals = inVals[i].subarray(inOffset, inOffset + innerDim);
            outVals.set(vals, outOffset);
            outOffset += innerDim;
        }
    }
    return out;
}
const concatConfig = {
    kernelName: (0, _tfjsCore.Concat),
    backendName: "wasm",
    kernelFunc: concat
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","./Identity":"cKt0J","./Reshape":"iRXb9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"74Jxh":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DConfig", ()=>conv2DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmConv2d;
function setup(backend) {
    wasmConv2d = backend.wasm.cwrap((0, _tfjsCore.Conv2D), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function conv2d(args) {
    const { inputs, attrs, backend } = args;
    const { x, filter } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const filterId = backend.dataIdMap.get(filter.dataId).id;
    const { strides, dilations, pad, dimRoundingMode, dataFormat } = attrs;
    const $dataFormat = (0, _tfjsCore.backend_util).convertConv2DDataFormat(dataFormat);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = convInfo.padInfo.top;
    const padRight = convInfo.padInfo.right;
    const padBottom = convInfo.padInfo.bottom;
    const padLeft = convInfo.padInfo.left;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const inputChannels = convInfo.inChannels;
    const outputChannels = convInfo.outChannels;
    const isSamePad = convInfo.padInfo.type === "SAME" ? 1 : 0;
    if (convInfo.dataFormat !== "channelsLast") throw new Error(`wasm backend Conv2D does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);
    const out = backend.makeOutput(convInfo.outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);
    return out;
}
const conv2DConfig = {
    kernelName: (0, _tfjsCore.Conv2D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: conv2d
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2O2my":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv2DBackpropInputConfig", ()=>conv2DBackpropInputConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmConv2DBackpropInput;
function setup(backend) {
    wasmConv2DBackpropInput = backend.wasm.cwrap((0, _tfjsCore.Conv2DBackpropInput), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function conv2DBackpropInput(args) {
    const { backend, inputs, attrs } = args;
    const { dy, filter } = inputs;
    const { strides, pad, dataFormat, dimRoundingMode, inputShape } = attrs;
    const dilations = 1;
    const $dataFormat = (0, _tfjsCore.backend_util).convertConv2DDataFormat(dataFormat);
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);
    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;
    const topPad = filterHeight - 1 - convInfo.padInfo.top;
    const leftPad = filterWidth - 1 - convInfo.padInfo.left;
    const isChannelsLast = convInfo.dataFormat === "channelsLast";
    const dxStrides = (0, _tfjsCore.util).computeStrides(convInfo.inShape);
    const dyStrides = (0, _tfjsCore.util).computeStrides(dy.shape);
    const [fltS0, fltS1, fltS2] = (0, _tfjsCore.util).computeStrides(filter.shape);
    const xBatchStride = dxStrides[0];
    const xRowStride = isChannelsLast ? dxStrides[1] : dxStrides[2];
    const xColStride = isChannelsLast ? dxStrides[2] : 1;
    const xChannelStride = isChannelsLast ? 1 : dxStrides[1];
    const yBatchStride = dyStrides[0];
    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];
    const yColStride = isChannelsLast ? dyStrides[2] : 1;
    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];
    const out = backend.makeOutput(convInfo.inShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    const dyId = backend.dataIdMap.get(dy.dataId).id;
    const filterId = backend.dataIdMap.get(filter.dataId).id;
    wasmConv2DBackpropInput(dyId, filterId, batchSize, filterHeight, filterWidth, inHeight, inWidth, inChannels, outHeight, outWidth, outChannels, strideHeight, strideWidth, topPad, leftPad, fltS0, fltS1, fltS2, xBatchStride, xRowStride, xColStride, xChannelStride, yBatchStride, yRowStride, yColStride, yChannelStride, outId);
    return out;
}
const conv2DBackpropInputConfig = {
    kernelName: (0, _tfjsCore.Conv2DBackpropInput),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: conv2DBackpropInput
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"02GEl":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3D", ()=>conv3D);
parcelHelpers.export(exports, "conv3DConfig", ()=>conv3DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmConv3D;
function setup(backend) {
    wasmConv3D = backend.wasm.cwrap((0, _tfjsCore.Conv3D), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function conv3D(args) {
    const { inputs, backend, attrs } = args;
    const { x, filter } = inputs;
    const { strides, pad, dilations } = attrs;
    if (x.dtype !== "float32") throw new Error(`Tensor x must have dtype float32, got ${x.dtype}`);
    if (filter.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${filter.dtype}`);
    const convInfo = (0, _tfjsCore.backend_util).computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);
    const out = backend.makeOutput(convInfo.outShape, x.dtype);
    wasmConv3D(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(out.dataId).id, convInfo.batchSize, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.inChannels, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.outChannels, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);
    return out;
}
const conv3DConfig = {
    kernelName: (0, _tfjsCore.Conv3D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: conv3D
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e4wtJ":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropFilterV2", ()=>conv3DBackpropFilterV2);
parcelHelpers.export(exports, "conv3DBackpropFilterV2Config", ()=>conv3DBackpropFilterV2Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmConv3DBackpropFilterV2;
function setup(backend) {
    wasmConv3DBackpropFilterV2 = backend.wasm.cwrap((0, _tfjsCore.Conv3DBackpropFilterV2), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function conv3DBackpropFilterV2(args) {
    const { inputs, backend, attrs } = args;
    const { x, dy } = inputs;
    const { strides, pad, filterShape } = attrs;
    if (x.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${x.dtype}`);
    if (dy.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${dy.dtype}`);
    const convInfo = (0, _tfjsCore.backend_util).computeConv3DInfo(x.shape, filterShape, strides, /*dilations=*/ 1, pad);
    const dw = backend.makeOutput(convInfo.filterShape, dy.dtype);
    wasmConv3DBackpropFilterV2(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dw.dataId).id, convInfo.batchSize, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.inChannels, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.outChannels, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);
    return dw;
}
const conv3DBackpropFilterV2Config = {
    kernelName: (0, _tfjsCore.Conv3DBackpropFilterV2),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: conv3DBackpropFilterV2
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bHsT6":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conv3DBackpropInputV2", ()=>conv3DBackpropInputV2);
parcelHelpers.export(exports, "conv3DBackpropInputV2Config", ()=>conv3DBackpropInputV2Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmConv3DBackpropInputV2;
function setup(backend) {
    wasmConv3DBackpropInputV2 = backend.wasm.cwrap((0, _tfjsCore.Conv3DBackpropInputV2), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function conv3DBackpropInputV2(args) {
    const { inputs, backend, attrs } = args;
    const { dy, filter } = inputs;
    const { pad, strides, inputShape } = attrs;
    if (dy.dtype !== "float32") throw new Error(`Tensor dy must have dtype float32, got ${dy.dtype}`);
    if (filter.dtype !== "float32") throw new Error(`Tensor filter must have dtype float32, got ${filter.dtype}`);
    const convInfo = (0, _tfjsCore.backend_util).computeConv3DInfo(inputShape, filter.shape, strides, /*dilations=*/ 1, pad);
    const dx = backend.makeOutput(convInfo.inShape, dy.dtype);
    wasmConv3DBackpropInputV2(backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.inChannels, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.outChannels, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);
    return dx;
}
const conv3DBackpropInputV2Config = {
    kernelName: (0, _tfjsCore.Conv3DBackpropInputV2),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: conv3DBackpropInputV2
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9PVNz":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cosConfig", ()=>cosConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const cosConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Cos));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1uWBb":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "coshConfig", ()=>coshConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const coshConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Cosh));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4mubI":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cropAndResizeConfig", ()=>cropAndResizeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
// Must match enum in CropAndResize.cc
var InterpolationMethod;
(function(InterpolationMethod) {
    InterpolationMethod[InterpolationMethod["bilinear"] = 0] = "bilinear";
    InterpolationMethod[InterpolationMethod["nearest"] = 1] = "nearest";
})(InterpolationMethod || (InterpolationMethod = {}));
let wasmCropAndResize;
function setup(backend) {
    wasmCropAndResize = backend.wasm.cwrap((0, _tfjsCore.CropAndResize), null, [
        "number",
        "number",
        "number",
        "number",
        "array",
        "number",
        "number",
        "number",
        "number",
        "number" // out id
    ]);
}
function cropAndResize(args) {
    const { backend, inputs, attrs } = args;
    const { method, extrapolationValue, cropSize } = attrs;
    const { image, boxes, boxInd } = inputs;
    const numBoxes = boxes.shape[0];
    const [cropHeight, cropWidth] = cropSize;
    const outShape = [
        numBoxes,
        cropHeight,
        cropWidth,
        image.shape[3]
    ];
    let imagesData = backend.dataIdMap.get(image.dataId);
    let castedData;
    if (image.dtype !== "float32") {
        castedData = (0, _cast.cast)({
            backend,
            inputs: {
                x: image
            },
            attrs: {
                dtype: "float32"
            }
        });
        imagesData = backend.dataIdMap.get(castedData.dataId);
    }
    const imagesId = imagesData.id;
    const boxesId = backend.dataIdMap.get(boxes.dataId).id;
    const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;
    const out = backend.makeOutput(outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);
    wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);
    if (castedData != null) backend.disposeData(castedData.dataId);
    return out;
}
const cropAndResizeConfig = {
    kernelName: (0, _tfjsCore.CropAndResize),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: cropAndResize
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f7DAM":[function(require,module,exports) {
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cumprod", ()=>cumprod);
parcelHelpers.export(exports, "cumprodConfig", ()=>cumprodConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
var _transpose = require("./Transpose");
let wasmCumprod;
function setup(backend) {
    wasmCumprod = backend.wasm.cwrap((0, _tfjsCore.Cumprod), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number" // dtype
    ]);
}
function cumprod(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { axis, exclusive, reverse } = attrs;
    const xRank = x.shape.length;
    (0, _tfjsCore.util).assert(x.dtype === "float32" || x.dtype === "int32", ()=>`cumprod does not support ${x.dtype} tensors in the WASM backend`);
    // permute required axis to inner most axis
    const permutation = (0, _tfjsCore.backend_util).getAxesPermutation([
        axis
    ], xRank);
    let permutedX = x;
    if (permutation !== null) permutedX = (0, _transpose.transpose)({
        inputs: {
            x
        },
        attrs: {
            perm: permutation
        },
        backend
    });
    const permutedAxis = (0, _tfjsCore.backend_util).getInnerMostAxes(1, xRank)[0];
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("cumprod", [
        permutedAxis
    ], xRank);
    const permutedOut = backend.makeOutput(permutedX.shape, permutedX.dtype);
    const finalDim = permutedX.shape[permutedAxis];
    const permutedXId = backend.dataIdMap.get(permutedX.dataId).id;
    const permutedOutId = backend.dataIdMap.get(permutedOut.dataId).id;
    wasmCumprod(permutedXId, exclusive ? 1 : 0, reverse ? 1 : 0, finalDim, permutedOutId, (0, _types.CppDType)[x.dtype]);
    // transpose data back if permuted
    let out = permutedOut;
    if (permutation !== null) {
        const undoPermutation = (0, _tfjsCore.backend_util).getUndoAxesPermutation(permutation);
        out = (0, _transpose.transpose)({
            inputs: {
                x: permutedOut
            },
            attrs: {
                perm: undoPermutation
            },
            backend
        });
        backend.disposeData(permutedX.dataId);
        backend.disposeData(permutedOut.dataId);
    }
    return out;
}
const cumprodConfig = {
    kernelName: (0, _tfjsCore.Cumprod),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: cumprod
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","./Transpose":"f63sH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ibqJp":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cumsum", ()=>cumsum);
parcelHelpers.export(exports, "cumsumConfig", ()=>cumsumConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
var _transpose = require("./Transpose");
let wasmCumsum;
function setup(backend) {
    wasmCumsum = backend.wasm.cwrap((0, _tfjsCore.Cumsum), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number" // dtype
    ]);
}
function cumsum(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { axis, exclusive, reverse } = attrs;
    const xRank = x.shape.length;
    (0, _tfjsCore.util).assert(x.dtype === "float32" || x.dtype === "int32", ()=>`cumsum does not support ${x.dtype} tensors in the WASM backend`);
    // permute required axis to inner most axis
    const permutation = (0, _tfjsCore.backend_util).getAxesPermutation([
        axis
    ], xRank);
    let permutedX = x;
    if (permutation !== null) permutedX = (0, _transpose.transpose)({
        inputs: {
            x
        },
        attrs: {
            perm: permutation
        },
        backend
    });
    const permutedAxis = (0, _tfjsCore.backend_util).getInnerMostAxes(1, xRank)[0];
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("cumsum", [
        permutedAxis
    ], xRank);
    const permutedOut = backend.makeOutput(permutedX.shape, permutedX.dtype);
    const finalDim = permutedX.shape[permutedAxis];
    const permutedXId = backend.dataIdMap.get(permutedX.dataId).id;
    const permutedOutId = backend.dataIdMap.get(permutedOut.dataId).id;
    wasmCumsum(permutedXId, exclusive ? 1 : 0, reverse ? 1 : 0, finalDim, permutedOutId, (0, _types.CppDType)[x.dtype]);
    // transpose data back if permuted
    let out = permutedOut;
    if (permutation !== null) {
        const undoPermutation = (0, _tfjsCore.backend_util).getUndoAxesPermutation(permutation);
        out = (0, _transpose.transpose)({
            inputs: {
                x: permutedOut
            },
            attrs: {
                perm: undoPermutation
            },
            backend
        });
        backend.disposeData(permutedX.dataId);
        backend.disposeData(permutedOut.dataId);
    }
    return out;
}
const cumsumConfig = {
    kernelName: (0, _tfjsCore.Cumsum),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: cumsum
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","./Transpose":"f63sH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXW1z":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "denseBincountConfig", ()=>denseBincountConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmDenseBincount;
function setup(backend) {
    wasmDenseBincount = backend.wasm.cwrap("DenseBincount", null, [
        "number",
        "array",
        "number",
        "number",
        "boolean",
        "number",
        "number",
        "boolean",
        "number"
    ]);
}
function denseBincount(args) {
    const { backend, inputs, attrs } = args;
    const { x, weights } = inputs;
    const { size, binaryOutput } = attrs;
    const hasWeights = weights.shape.reduce((p, v)=>p * v, 1) !== 0;
    const outShape = x.shape.length === 1 ? [
        size
    ] : [
        x.shape[0],
        size
    ];
    const out = backend.makeOutput(outShape, weights.dtype);
    function tensorId(x) {
        return backend.dataIdMap.get(x.dataId).id;
    }
    wasmDenseBincount(tensorId(x), new Uint8Array(new Int32Array(x.shape).buffer), x.shape.length, size, hasWeights, tensorId(weights), (0, _types.CppDType)[weights.dtype], binaryOutput, tensorId(out));
    return out;
}
const denseBincountConfig = {
    kernelName: (0, _tfjsCore.DenseBincount),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: denseBincount
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2rOh":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthToSpace", ()=>depthToSpace);
parcelHelpers.export(exports, "depthToSpaceConfig", ()=>depthToSpaceConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmDepthToSpace;
function setup(backend) {
    wasmDepthToSpace = backend.wasm.cwrap((0, _tfjsCore.DepthToSpace), null, [
        "number",
        "number",
        "number",
        "array",
        "number",
        "array",
        "array",
        "number",
        "number"
    ]);
}
function depthToSpace(args) {
    const { backend, inputs, attrs } = args;
    const { x } = inputs;
    const { blockSize, dataFormat } = attrs;
    const batchSize = x.shape[0];
    const inputHeight = dataFormat === "NHWC" ? x.shape[1] : x.shape[2];
    const inputWidth = dataFormat === "NHWC" ? x.shape[2] : x.shape[3];
    const inputDepth = dataFormat === "NHWC" ? x.shape[3] : x.shape[1];
    const outputHeight = inputHeight * blockSize;
    const outputWidth = inputWidth * blockSize;
    const outputDepth = inputDepth / (blockSize * blockSize);
    const outputShape = dataFormat === "NHWC" ? [
        batchSize,
        outputHeight,
        outputWidth,
        outputDepth
    ] : [
        batchSize,
        outputDepth,
        outputHeight,
        outputWidth
    ];
    const out = backend.makeOutput(outputShape, "float32");
    const xData = backend.dataIdMap.get(x.dataId);
    const xId = xData.id;
    const xStridesBytes = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(x.shape)).buffer);
    const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);
    const outStridesBytes = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(outputShape)).buffer);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const channelsLast = dataFormat === "NHWC" ? 1 : 0;
    wasmDepthToSpace(xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1, outputShapeBytes, outStridesBytes, outputShape.length, outId);
    return out;
}
const depthToSpaceConfig = {
    kernelName: (0, _tfjsCore.DepthToSpace),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: depthToSpace
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"rwba7":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "depthwiseConv2dNativeConfig", ()=>depthwiseConv2dNativeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmDepthwiseConv2d;
function setup(backend) {
    wasmDepthwiseConv2d = backend.wasm.cwrap((0, _tfjsCore.DepthwiseConv2dNative), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function depthwiseConv2d(args) {
    const { inputs, attrs, backend } = args;
    const { x, filter } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const filterId = backend.dataIdMap.get(filter.dataId).id;
    const { strides, dilations, pad, dimRoundingMode } = attrs;
    const $dilations = dilations == null ? [
        1,
        1
    ] : dilations;
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = convInfo.padInfo.top;
    const padRight = convInfo.padInfo.right;
    const padBottom = convInfo.padInfo.bottom;
    const padLeft = convInfo.padInfo.left;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const inputChannels = convInfo.inChannels;
    const outputChannels = convInfo.outChannels;
    const isSamePad = convInfo.padInfo.type === "SAME" ? 1 : 0;
    if (convInfo.dataFormat !== "channelsLast") throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);
    const out = backend.makeOutput(convInfo.outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);
    return out;
}
const depthwiseConv2dNativeConfig = {
    kernelName: (0, _tfjsCore.DepthwiseConv2dNative),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: depthwiseConv2d
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ecCeG":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diag", ()=>diag);
parcelHelpers.export(exports, "diagConfig", ()=>diagConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmDiag;
function setup(backend) {
    wasmDiag = backend.wasm.cwrap("Diag", null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function diag(args) {
    const { inputs, backend } = args;
    const { x } = inputs;
    const xSize = (0, _tfjsCore.util).sizeFromShape(x.shape);
    const out = backend.makeOutput([
        ...x.shape,
        ...x.shape
    ], x.dtype);
    wasmDiag(backend.dataIdMap.get(x.dataId).id, (0, _types.CppDType)[x.dtype], xSize, backend.dataIdMap.get(out.dataId).id);
    return out;
}
const diagConfig = {
    kernelName: (0, _tfjsCore.Diag),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: diag
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qvvz":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2D", ()=>dilation2D);
parcelHelpers.export(exports, "dilation2DConfig", ()=>dilation2DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmDilation2D;
function setup(backend) {
    wasmDilation2D = backend.wasm.cwrap((0, _tfjsCore.Dilation2D), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function dilation2D(args) {
    const { inputs, backend, attrs } = args;
    const { x, filter } = inputs;
    const { strides, pad, dilations } = attrs;
    if (x.dtype !== filter.dtype) throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${x.dtype} and ${filter.dtype}`);
    const dilationInfo = (0, _tfjsCore.backend_util).computeDilation2DInfo(x.shape, filter.shape, strides, pad, /*dataFormat=*/ "NHWC", dilations);
    const out = backend.makeOutput(dilationInfo.outShape, x.dtype);
    wasmDilation2D(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(out.dataId).id, (0, _types.CppDType)[x.dtype], dilationInfo.batchSize, /*depth=*/ dilationInfo.inChannels, dilationInfo.inHeight, dilationInfo.inWidth, dilationInfo.outHeight, dilationInfo.outWidth, dilationInfo.strideHeight, dilationInfo.strideWidth, dilationInfo.dilationHeight, dilationInfo.dilationWidth, dilationInfo.filterHeight, dilationInfo.filterWidth, dilationInfo.padInfo.top, dilationInfo.padInfo.left);
    return out;
}
const dilation2DConfig = {
    kernelName: (0, _tfjsCore.Dilation2D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: dilation2D
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aymWD":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2DBackpropFilter", ()=>dilation2DBackpropFilter);
parcelHelpers.export(exports, "dilation2DBackpropFilterConfig", ()=>dilation2DBackpropFilterConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmDilation2DBackpropFilter;
function setup(backend) {
    wasmDilation2DBackpropFilter = backend.wasm.cwrap((0, _tfjsCore.Dilation2DBackpropFilter), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function dilation2DBackpropFilter(args) {
    const { inputs, backend, attrs } = args;
    const { x, filter, dy } = inputs;
    const { strides, pad, dilations } = attrs;
    if (x.dtype !== filter.dtype || x.dtype !== dy.dtype) throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${x.dtype}, ${filter.dtype}, and ${dy.dtype}`);
    const dilationInfo = (0, _tfjsCore.backend_util).computeDilation2DInfo(x.shape, filter.shape, strides, pad, /*dataFormat=*/ "NHWC", dilations);
    const gradients = backend.makeOutput(filter.shape, filter.dtype);
    wasmDilation2DBackpropFilter(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(gradients.dataId).id, (0, _types.CppDType)[x.dtype], dilationInfo.batchSize, /*depth=*/ dilationInfo.inChannels, dilationInfo.inHeight, dilationInfo.inWidth, dilationInfo.outHeight, dilationInfo.outWidth, dilationInfo.strideHeight, dilationInfo.strideWidth, dilationInfo.dilationHeight, dilationInfo.dilationWidth, dilationInfo.filterHeight, dilationInfo.filterWidth, dilationInfo.padInfo.top, dilationInfo.padInfo.left);
    return gradients;
}
const dilation2DBackpropFilterConfig = {
    kernelName: (0, _tfjsCore.Dilation2DBackpropFilter),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: dilation2DBackpropFilter
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kWoxu":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dilation2DBackpropInput", ()=>dilation2DBackpropInput);
parcelHelpers.export(exports, "dilation2DBackpropInputConfig", ()=>dilation2DBackpropInputConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmDilation2DBackpropInput;
function setup(backend) {
    wasmDilation2DBackpropInput = backend.wasm.cwrap((0, _tfjsCore.Dilation2DBackpropInput), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function dilation2DBackpropInput(args) {
    const { inputs, backend, attrs } = args;
    const { x, filter, dy } = inputs;
    const { strides, pad, dilations } = attrs;
    if (x.dtype !== filter.dtype || x.dtype !== dy.dtype) throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${x.dtype}, ${filter.dtype}, and ${dy.dtype}`);
    const dilationInfo = (0, _tfjsCore.backend_util).computeDilation2DInfo(x.shape, filter.shape, strides, pad, /*dataFormat=*/ "NHWC", dilations);
    const gradients = backend.makeOutput(x.shape, x.dtype);
    wasmDilation2DBackpropInput(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(filter.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(gradients.dataId).id, (0, _types.CppDType)[x.dtype], dilationInfo.batchSize, /*depth=*/ dilationInfo.inChannels, dilationInfo.inHeight, dilationInfo.inWidth, dilationInfo.outHeight, dilationInfo.outWidth, dilationInfo.strideHeight, dilationInfo.strideWidth, dilationInfo.dilationHeight, dilationInfo.dilationWidth, dilationInfo.filterHeight, dilationInfo.filterWidth, dilationInfo.padInfo.top, dilationInfo.padInfo.left);
    return gradients;
}
const dilation2DBackpropInputConfig = {
    kernelName: (0, _tfjsCore.Dilation2DBackpropInput),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: dilation2DBackpropInput
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1zo7":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eluConfig", ()=>eluConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const eluConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Elu));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jCW98":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eluGrad", ()=>eluGrad);
parcelHelpers.export(exports, "eluGradConfig", ()=>eluGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmEluGrad;
function setup(backend) {
    wasmEluGrad = backend.wasm.cwrap((0, _tfjsCore.EluGrad), null, [
        "number",
        "number",
        "number"
    ]);
}
function eluGrad(args) {
    const { inputs, backend } = args;
    const { dy, y } = inputs;
    const out = backend.makeOutput(y.shape, "float32");
    const tensorId = (x)=>{
        return backend.dataIdMap.get(x.dataId).id;
    };
    wasmEluGrad(tensorId(y), tensorId(dy), tensorId(out));
    return out;
}
const eluGradConfig = {
    kernelName: (0, _tfjsCore.EluGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: eluGrad
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iA3XY":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalConfig", ()=>equalConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const equalConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Equal), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fuEKO":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "erfConfig", ()=>erfConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const erfConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Erf));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iuW02":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expConfig", ()=>expConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const expConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Exp), "float32");

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hoqoo":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expandDims", ()=>expandDims);
parcelHelpers.export(exports, "expandDimsConfig", ()=>expandDimsConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
function expandDims(args) {
    const { inputs, attrs, backend } = args;
    const { input } = inputs;
    const { dim } = attrs;
    const inputRank = input.shape.length;
    const newShape = input.shape.slice();
    let $dim = dim;
    if (dim < 0) {
        // Negative value is counted from the tail of rank.
        (0, _tfjsCore.util).assert(-(inputRank + 1) <= dim, ()=>`Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);
        $dim = inputRank + dim + 1;
    }
    newShape.splice($dim, 0, 1);
    return (0, _reshape.reshape)({
        inputs: {
            x: input
        },
        backend,
        attrs: {
            shape: newShape
        }
    });
}
const expandDimsConfig = {
    kernelName: (0, _tfjsCore.ExpandDims),
    backendName: "wasm",
    kernelFunc: expandDims
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"iRXb9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jlaKP":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expm1Config", ()=>expm1Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const expm1Config = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Expm1), "float32");

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1vlVC":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fill", ()=>fill);
parcelHelpers.export(exports, "fillConfig", ()=>fillConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function fill(args) {
    const { attrs: { shape, value, dtype }, backend } = args;
    const out = backend.makeOutput(shape, dtype);
    const outVals = backend.typedArrayFromHeap(out);
    outVals.fill(value);
    return out;
}
const fillConfig = {
    kernelName: (0, _tfjsCore.Fill),
    backendName: "wasm",
    kernelFunc: fill
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyZBi":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flipLeftRight", ()=>flipLeftRight);
parcelHelpers.export(exports, "flipLeftRightConfig", ()=>flipLeftRightConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmFlipLeftRight;
function setup(backend) {
    wasmFlipLeftRight = backend.wasm.cwrap((0, _tfjsCore.FlipLeftRight), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function flipLeftRight(args) {
    const { inputs, backend } = args;
    const { image } = inputs;
    const out = backend.makeOutput(image.shape, image.dtype);
    const imageId = backend.dataIdMap.get(image.dataId).id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    wasmFlipLeftRight(imageId, batch, imageHeight, imageWidth, numChannels, outId);
    return out;
}
const flipLeftRightConfig = {
    kernelName: (0, _tfjsCore.FlipLeftRight),
    backendName: "wasm",
    kernelFunc: flipLeftRight,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3BiHh":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorConfig", ()=>floorConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const floorConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Floor));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iTnXh":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "floorDivConfig", ()=>floorDivConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const floorDivConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.FloorDiv), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8l4A":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fusedBatchNormConfig", ()=>fusedBatchNormConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmBatchNorm;
function setup(backend) {
    wasmBatchNorm = backend.wasm.cwrap((0, _tfjsCore.FusedBatchNorm), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function fusedBatchNorm(args) {
    const { backend, inputs, attrs } = args;
    const { varianceEpsilon } = attrs;
    const { x, mean, variance, offset, scale } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const meanId = backend.dataIdMap.get(mean.dataId).id;
    const varianceId = backend.dataIdMap.get(variance.dataId).id;
    const offsetId = offset != null ? backend.dataIdMap.get(offset.dataId).id : 0;
    const scaleId = scale != null ? backend.dataIdMap.get(scale.dataId).id : 0;
    const out = backend.makeOutput(x.shape, x.dtype);
    // Short-circuit zero-sized tensors.
    if ((0, _tfjsCore.util).sizeFromShape(x.shape) === 0) return out;
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmBatchNorm(xId, meanId, varianceId, offsetId, scaleId, varianceEpsilon, outId);
    return out;
}
const fusedBatchNormConfig = {
    kernelName: (0, _tfjsCore.FusedBatchNorm),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: fusedBatchNorm
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eTBxq":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fusedConv2DConfig", ()=>fusedConv2DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmFusedConv2d;
function setup(backend) {
    wasmFusedConv2d = backend.wasm.cwrap((0, _tfjsCore.FusedConv2D), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function fusedConv2d(args) {
    const { inputs, attrs, backend } = args;
    const { x, filter, bias, preluActivationWeights } = inputs;
    const { strides, pad, dilations, dataFormat, dimRoundingMode, activation, leakyreluAlpha } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode);
    const fusedActivation = (0, _types.FusableActivation)[activation];
    if (fusedActivation == null) throw new Error(`${activation} activation not yet supported for FusedConv2D ` + `in the wasm backend.`);
    const xId = backend.dataIdMap.get(x.dataId).id;
    const filterId = backend.dataIdMap.get(filter.dataId).id;
    const outputChannels = convInfo.outChannels;
    let biasId = 0;
    if (bias != null) {
        const biasData = backend.dataIdMap.get(bias.dataId);
        if (biasData.shape.length !== 1) throw new Error(`FusedConv2D only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);
        if (biasData.shape[0] !== outputChannels) throw new Error(`FusedConv2D bias shape (${biasData.shape}) does not ` + `match the number of output channels (${outputChannels})`);
        biasId = biasData.id;
    }
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = convInfo.padInfo.top;
    const padRight = convInfo.padInfo.right;
    const padBottom = convInfo.padInfo.bottom;
    const padLeft = convInfo.padInfo.left;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const inputChannels = convInfo.inChannels;
    const isSamePad = convInfo.padInfo.type === "SAME" ? 1 : 0;
    const batchSize = convInfo.batchSize;
    const inHeight = convInfo.inHeight;
    const inWidth = convInfo.inWidth;
    if (dataFormat !== "NHWC") throw new Error(`wasm backend FusedConv2D does not support dataFormat:'` + `${dataFormat}'. Please use 'NHWC'.`);
    const out = backend.makeOutput(convInfo.outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;
    wasmFusedConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);
    return out;
}
const fusedConv2DConfig = {
    kernelName: (0, _tfjsCore.FusedConv2D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: fusedConv2d
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4q09D":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fusedDepthwiseConv2DConfig", ()=>fusedDepthwiseConv2DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmFusedDepthwiseConv2d;
function setup(backend) {
    wasmFusedDepthwiseConv2d = backend.wasm.cwrap((0, _tfjsCore.FusedDepthwiseConv2D), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function fusedDepthwiseConv2d(args) {
    const { inputs, attrs, backend } = args;
    const { x, filter, bias, preluActivationWeights } = inputs;
    const { strides, pad, dilations, dataFormat, dimRoundingMode, activation, leakyreluAlpha } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, true);
    const fusedActivation = (0, _types.FusableActivation)[activation];
    if (fusedActivation == null) throw new Error(`${activation} activation not yet supported for FusedDepthwiseConv2D ` + `in the wasm backend.`);
    const xId = backend.dataIdMap.get(x.dataId).id;
    const filterId = backend.dataIdMap.get(filter.dataId).id;
    const outputChannels = convInfo.outChannels;
    let biasId = 0;
    if (bias != null) {
        const biasData = backend.dataIdMap.get(bias.dataId);
        if (biasData.shape.length !== 1) throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);
        if (biasData.shape[0] !== outputChannels) throw new Error(`FusedDepthwiseConv2D bias shape (${biasData.shape}) does not ` + `match the number of output channels (${outputChannels})`);
        biasId = biasData.id;
    }
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = convInfo.padInfo.top;
    const padRight = convInfo.padInfo.right;
    const padBottom = convInfo.padInfo.bottom;
    const padLeft = convInfo.padInfo.left;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const inputChannels = convInfo.inChannels;
    const isSamePad = convInfo.padInfo.type === "SAME" ? 1 : 0;
    const batchSize = convInfo.batchSize;
    const inHeight = convInfo.inHeight;
    const inWidth = convInfo.inWidth;
    if (dataFormat !== "NHWC") throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'` + `${dataFormat}'. Please use 'NHWC'.`);
    const out = backend.makeOutput(convInfo.outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;
    wasmFusedDepthwiseConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);
    return out;
}
const fusedDepthwiseConv2DConfig = {
    kernelName: (0, _tfjsCore.FusedDepthwiseConv2D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: fusedDepthwiseConv2d
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnnqd":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherNdConfig", ()=>gatherNdConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmGatherNd;
function setup(backend) {
    wasmGatherNd = backend.wasm.cwrap((0, _tfjsCore.GatherNd), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "array",
        "number" // outId
    ]);
}
function gatherNd(args) {
    const { backend, inputs } = args;
    const { params, indices } = inputs;
    const [resultShape, numSlices, sliceSize, strides] = (0, _tfjsCore.gather_util).prepareAndValidate(params, indices);
    const out = backend.makeOutput(resultShape, params.dtype);
    if (numSlices === 0) return out;
    const indicesShape = indices.shape;
    const sliceRank = indicesShape[indicesShape.length - 1];
    const xData = backend.dataIdMap.get(params.dataId);
    const xId = xData.id;
    const indicesData = backend.dataIdMap.get(indices.dataId);
    const indicesId = indicesData.id;
    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmGatherNd(xId, (0, _types.CppDType)[params.dtype], indicesId, numSlices, sliceRank, sliceSize, stridesBytes, outId);
    return out;
}
const gatherNdConfig = {
    kernelName: (0, _tfjsCore.GatherNd),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: gatherNd
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iPaDu":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gatherV2Config", ()=>gatherV2Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
var _types = require("./types");
let wasmGather;
function setup(backend) {
    wasmGather = backend.wasm.cwrap("Gather", null, [
        "number",
        "number",
        "array",
        "number",
        "number",
        "number",
        "array",
        "number" // outId
    ]);
}
function gatherV2(args) {
    const { backend, inputs, attrs } = args;
    const { x, indices } = inputs;
    const { axis, batchDims } = attrs;
    // Throw error when any index is out of bound.
    const parsedAxis = (0, _tfjsCore.util).parseAxisParam(axis, x.shape)[0];
    const indicesVals = backend.readSync(indices.dataId);
    const axisDim = x.shape[parsedAxis];
    for(let i = 0; i < indicesVals.length; ++i){
        const index = indicesVals[i];
        (0, _tfjsCore.util).assert(index <= axisDim - 1 && index >= 0, ()=>`GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);
    }
    const shapeInfo = (0, _tfjsCore.backend_util).segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);
    const flattenX = (0, _reshape.reshape)({
        inputs: {
            x
        },
        attrs: {
            shape: [
                shapeInfo.batchSize,
                shapeInfo.outerSize,
                shapeInfo.dimSize,
                shapeInfo.sliceSize
            ]
        },
        backend
    });
    const indicesSize = (0, _tfjsCore.util).sizeFromShape(indices.shape);
    const flattenIndex = (0, _reshape.reshape)({
        inputs: {
            x: indices
        },
        attrs: {
            shape: [
                shapeInfo.batchSize,
                indicesSize / shapeInfo.batchSize
            ]
        },
        backend
    });
    const flattenOutputShape = [
        shapeInfo.batchSize,
        shapeInfo.outerSize,
        indicesSize / shapeInfo.batchSize,
        shapeInfo.sliceSize
    ];
    const out = backend.makeOutput(flattenOutputShape, x.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(x.shape) === 0) return out;
    const stridesSize = flattenX.shape.length - 1;
    const xData = backend.dataIdMap.get(flattenX.dataId);
    const xId = xData.id;
    const indicesData = backend.dataIdMap.get(flattenIndex.dataId);
    const indicesId = indicesData.id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    const xStridesBytes = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(flattenX.shape)).buffer);
    const outStridesBytes = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(flattenOutputShape)).buffer);
    wasmGather(xId, (0, _types.CppDType)[x.dtype], xStridesBytes, stridesSize, indicesId, shapeInfo.batchSize, outStridesBytes, outId);
    backend.disposeData(flattenX.dataId);
    backend.disposeData(flattenIndex.dataId);
    // reshape
    out.shape = shapeInfo.outputShape;
    return out;
}
const gatherV2Config = {
    kernelName: (0, _tfjsCore.GatherV2),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: gatherV2
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"iRXb9","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"entds":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterConfig", ()=>greaterConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const greaterConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Greater), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIeNs":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "greaterEqualConfig", ()=>greaterEqualConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const greaterEqualConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.GreaterEqual), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4GIQ1":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFiniteConfig", ()=>isFiniteConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const isFiniteConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.IsFinite), "bool");

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kPy6f":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isInfConfig", ()=>isInfConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const isInfConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.IsInf), "bool");

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eIAKW":[function(require,module,exports) {
/**
 * @license
 * Copyright 2022 The TensorFlow Authors. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNaNConfig", ()=>isNaNConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const isNaNConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.IsNan), "bool");

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dUpn":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "leakyRelu", ()=>leakyRelu);
parcelHelpers.export(exports, "leakyReluConfig", ()=>leakyReluConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmFunc;
function setupFunc(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.LeakyRelu), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function leakyRelu(args) {
    const { inputs: { x }, attrs: { alpha }, backend } = args;
    const xId = backend.dataIdMap.get(x.dataId).id;
    // According to TF API, LeakyRelu returns float32 when input is either float32
    // or int32.
    const out = backend.makeOutput(x.shape, "float32");
    if ((0, _tfjsCore.util).sizeFromShape(x.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmFunc(xId, (0, _types.CppDType)[x.dtype], alpha, outId);
    }
    return out;
}
const leakyReluConfig = {
    kernelName: (0, _tfjsCore.LeakyRelu),
    backendName: "wasm",
    setupFunc,
    kernelFunc: leakyRelu
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kg1sX":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lessConfig", ()=>lessConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const lessConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Less), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ZJvr":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lessEqualConfig", ()=>lessEqualConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const lessEqualConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.LessEqual), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fi2FT":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linSpace", ()=>linSpace);
parcelHelpers.export(exports, "linSpaceConfig", ()=>linSpaceConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmLinSpace;
function setup(backend) {
    wasmLinSpace = backend.wasm.cwrap((0, _tfjsCore.LinSpace), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function linSpace(args) {
    const { attrs, backend } = args;
    const { start, stop, num } = attrs;
    // TFJS Cpu backend supports num as a float and returns undetermined tensor in
    // that case. However, according to TensorFlow spec, num should be a integer.
    const numInt = Math.floor(num);
    const out = backend.makeOutput([
        numInt
    ], "float32");
    wasmLinSpace(backend.dataIdMap.get(out.dataId).id, start, stop, numInt);
    return out;
}
const linSpaceConfig = {
    kernelName: (0, _tfjsCore.LinSpace),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: linSpace
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Oc1A":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logConfig", ()=>logConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const logConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Log));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQD2Y":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log1pConfig", ()=>log1pConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const log1pConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Log1p));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4C1z0":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalAndConfig", ()=>logicalAndConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const logicalAndConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.LogicalAnd), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iy1aT":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalNotConfig", ()=>logicalNotConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const logicalNotConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.LogicalNot));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFvpe":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalOrConfig", ()=>logicalOrConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const logicalOrConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.LogicalOr), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72TlS":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "logicalXorConfig", ()=>logicalXorConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const logicalXorConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.LogicalXor), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbcNc":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lrn", ()=>lrn);
parcelHelpers.export(exports, "lrnConfig", ()=>lrnConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmLRN;
function setup(backend) {
    wasmLRN = backend.wasm.cwrap((0, _tfjsCore.LRN), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function lrn(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { depthRadius, bias, alpha, beta } = attrs;
    if (x.dtype !== "float32") throw new Error("LRN error: x must have dtype float32");
    const out = backend.makeOutput(x.shape, x.dtype);
    wasmLRN(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(out.dataId).id, /*channels=*/ x.shape[3], depthRadius, bias, alpha, beta);
    return out;
}
const lrnConfig = {
    kernelName: (0, _tfjsCore.LRN),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: lrn
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqCbI":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lrnGrad", ()=>lrnGrad);
parcelHelpers.export(exports, "lrnGradConfig", ()=>lrnGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmLRNGrad;
function setup(backend) {
    wasmLRNGrad = backend.wasm.cwrap((0, _tfjsCore.LRNGrad), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function lrnGrad(args) {
    const { inputs, backend, attrs } = args;
    const { x, y, dy } = inputs;
    const { depthRadius, bias, alpha, beta } = attrs;
    if (x.dtype !== "float32" || y.dtype !== "float32" || dy.dtype !== "float32") throw new Error("LRNGrad error: x, y, and dy must have dtype float32");
    const dx = backend.makeOutput(x.shape, x.dtype);
    wasmLRNGrad(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(y.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, /*channels=*/ dy.shape[3], depthRadius, bias, alpha, beta);
    return dx;
}
const lrnGradConfig = {
    kernelName: (0, _tfjsCore.LRNGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: lrnGrad
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lVNto":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxConfig", ()=>maxConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
var _types = require("./types");
let wasmMax;
function setup(backend) {
    wasmMax = backend.wasm.cwrap((0, _tfjsCore.Max), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function max(args) {
    const { backend, inputs, attrs } = args;
    const { reductionIndices: axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        input = transposed;
        inputId = transposedId;
    }
    const inputRank = input.shape.length;
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("max", axes, inputRank);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const out = backend.makeOutput(outShape, x.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmMax(inputId, (0, _types.CppDType)[x.dtype], reduceSize, outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    return out;
}
const maxConfig = {
    kernelName: (0, _tfjsCore.Max),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: max
};

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ySPQ":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maximumConfig", ()=>maximumConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const maximumConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Maximum), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7obZ6":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolConfig", ()=>maxPoolConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmMaxPool;
function setup(backend) {
    wasmMaxPool = backend.wasm.cwrap((0, _tfjsCore.MaxPool), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function maxPool(args) {
    const { inputs, attrs, backend } = args;
    const x = inputs.x;
    const xId = backend.dataIdMap.get(x.dataId).id;
    // TF API supports int32 input. CPU and WebGL backend also support int32
    // input. WASM backend doesn't support it because it uses xnnpack which only
    // supports float32.
    //
    // Add the following assert only for the WASM backend instead of at core op
    // level.
    //
    // TODO: add support for int32 input.
    (0, _tfjsCore.util).assert(x.dtype === "float32", ()=>`Error in MaxPool: only float32 input is supported. Got ${x.dtype}.`);
    const { filterSize, strides, pad, dimRoundingMode } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */ , pad, dimRoundingMode);
    const filterHeight = convInfo.filterHeight;
    const filterWidth = convInfo.filterWidth;
    const padTop = convInfo.padInfo.top;
    const padRight = convInfo.padInfo.right;
    const padBottom = convInfo.padInfo.bottom;
    const padLeft = convInfo.padInfo.left;
    const dilationHeight = convInfo.dilationHeight;
    const dilationWidth = convInfo.dilationWidth;
    const strideHeight = convInfo.strideHeight;
    const strideWidth = convInfo.strideWidth;
    const inputChannels = convInfo.inChannels;
    const outputChannels = convInfo.outChannels;
    if (convInfo.dataFormat !== "channelsLast") throw new Error(`wasm backend does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);
    const out = backend.makeOutput(convInfo.outShape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmMaxPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);
    return out;
}
const maxPoolConfig = {
    kernelName: (0, _tfjsCore.MaxPool),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: maxPool
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqp28":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool3D", ()=>maxPool3D);
parcelHelpers.export(exports, "maxPool3DConfig", ()=>maxPool3DConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmMaxPool3D;
function setup(backend) {
    wasmMaxPool3D = backend.wasm.cwrap("MaxPool3D", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function maxPool3D(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(x.shape, filterSize, strides, /*dilations=*/ 1, pad, dimRoundingMode, dataFormat);
    const out = backend.makeOutput(convInfo.outShape, x.dtype);
    wasmMaxPool3D(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(out.dataId).id, convInfo.batchSize, // Since Pool3D ops (AvgPool3D and MaxPool3D) support 3D filter only, in
    // channels should always equal to out channels.
    /*channelSize=*/ convInfo.inChannels, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);
    return out;
}
const maxPool3DConfig = {
    kernelName: (0, _tfjsCore.MaxPool3D),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: maxPool3D
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a38DC":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPool3DGrad", ()=>maxPool3DGrad);
parcelHelpers.export(exports, "maxPool3DGradConfig", ()=>maxPool3DGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmMaxPool3DGrad;
function setup(backend) {
    wasmMaxPool3DGrad = backend.wasm.cwrap("MaxPool3DGrad", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function maxPool3DGrad(args) {
    const { inputs, backend, attrs } = args;
    const { dy, input } = inputs;
    const { filterSize, strides, pad, dimRoundingMode } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool3DInfo(input.shape, filterSize, strides, /*dilations=*/ 1, pad, dimRoundingMode);
    const dx = backend.makeOutput(input.shape, input.dtype);
    wasmMaxPool3DGrad(backend.dataIdMap.get(input.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize, // Since Pool3D ops (MaxPool3D and MaxPool3D) support 3D filter only, in
    // channels should always equal to out channels.
    /*channelSize=*/ convInfo.inChannels, convInfo.inDepth, convInfo.inHeight, convInfo.inWidth, convInfo.outDepth, convInfo.outHeight, convInfo.outWidth, convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left);
    return dx;
}
const maxPool3DGradConfig = {
    kernelName: (0, _tfjsCore.MaxPool3DGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: maxPool3DGrad
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Jpd5":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolGrad", ()=>maxPoolGrad);
parcelHelpers.export(exports, "maxPoolGradConfig", ()=>maxPoolGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmMaxPoolGrad;
function setup(backend) {
    wasmMaxPoolGrad = backend.wasm.cwrap("MaxPoolGrad", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function maxPoolGrad(args) {
    const { inputs, backend, attrs } = args;
    const { dy, input } = inputs;
    const { filterSize, strides, pad, dimRoundingMode } = attrs;
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(input.shape, filterSize, strides, /*dilations=*/ 1, pad, dimRoundingMode);
    const dx = backend.makeOutput(input.shape, input.dtype);
    wasmMaxPoolGrad(backend.dataIdMap.get(input.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, convInfo.batchSize, // Since Pool ops (MaxPool and MaxPool) support 2D filter only, in
    // channels should always equal to out channels.
    /*channelSize=*/ convInfo.inChannels, convInfo.inHeight, convInfo.inWidth, convInfo.outHeight, convInfo.outWidth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.top, convInfo.padInfo.left);
    return dx;
}
const maxPoolGradConfig = {
    kernelName: (0, _tfjsCore.MaxPoolGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: maxPoolGrad
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBC10":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maxPoolWithArgmax", ()=>maxPoolWithArgmax);
parcelHelpers.export(exports, "maxPoolWithArgmaxConfig", ()=>maxPoolWithArgmaxConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmMaxPoolWithArgmax;
function setup(backend) {
    wasmMaxPoolWithArgmax = backend.wasm.cwrap("MaxPoolWithArgmax", null, [
        "number",
        "number",
        "number",
        "number",
        "boolean",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function maxPoolWithArgmax(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { filterSize, strides, pad, includeBatchInIndex } = attrs;
    (0, _tfjsCore.util).assert(x.shape.length === 4, ()=>`Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);
    const dilations = [
        1,
        1
    ];
    (0, _tfjsCore.util).assert((0, _tfjsCore.backend_util).eitherStridesOrDilationsAreOne(strides, dilations), ()=>"Error in maxPool: Either strides or dilations must be 1. " + `Got strides ${strides} and dilations '${dilations}'`);
    const convInfo = (0, _tfjsCore.backend_util).computePool2DInfo(x.shape, filterSize, strides, [
        1,
        1
    ], pad);
    const pooled = backend.makeOutput(convInfo.outShape, x.dtype);
    const indexes = backend.makeOutput(convInfo.outShape, "int32");
    wasmMaxPoolWithArgmax(backend.dataIdMap.get(x.dataId).id, backend.dataIdMap.get(pooled.dataId).id, backend.dataIdMap.get(indexes.dataId).id, (0, _types.CppDType)[x.dtype], includeBatchInIndex, convInfo.batchSize, convInfo.inChannels, convInfo.inHeight, convInfo.inWidth, convInfo.outHeight, convInfo.outWidth, convInfo.strideHeight, convInfo.strideWidth, convInfo.dilationHeight, convInfo.dilationWidth, convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth, convInfo.padInfo.top, convInfo.padInfo.left);
    return [
        pooled,
        indexes
    ];
}
const maxPoolWithArgmaxConfig = {
    kernelName: (0, _tfjsCore.MaxPoolWithArgmax),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: maxPoolWithArgmax
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kW875":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mean", ()=>mean);
parcelHelpers.export(exports, "meanConfig", ()=>meanConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
var _kernelUtils = require("./kernel_utils");
let wasmMean;
function setup(backend) {
    wasmMean = backend.wasm.cwrap((0, _tfjsCore.Mean), null, [
        "number, number, number"
    ]);
}
function mean(args) {
    const { backend, inputs, attrs } = args;
    const { axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    let reductionAxes = axes;
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        if (transposedId !== xId) {
            // transpose was not a no-op. We will need to dispose of this
            // once we are done.
            input = transposed;
            inputId = transposedId;
            reductionAxes = (0, _tfjsCore.backend_util).getInnerMostAxes(reductionAxes.length, input.shape.length);
        }
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("mean", reductionAxes, input.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, reductionAxes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    let castedInput = input;
    if (input.dtype !== "float32") {
        castedInput = (0, _cast.cast)({
            backend,
            inputs: {
                x: input
            },
            attrs: {
                dtype: "float32"
            }
        });
        inputId = backend.dataIdMap.get(castedInput.dataId).id;
    }
    const out = backend.makeOutput(outShape, "float32");
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmMean(inputId, reduceSize, outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    if (input.dtype !== "float32") backend.disposeData(castedInput.dataId);
    return out;
}
const meanConfig = {
    kernelName: (0, _tfjsCore.Mean),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: mean
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","./kernel_utils":"h9kCK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8JtfS":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minConfig", ()=>minConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
var _types = require("./types");
let wasmMin;
function setup(backend) {
    wasmMin = backend.wasm.cwrap((0, _tfjsCore.Min), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function min(args) {
    const { backend, inputs, attrs } = args;
    const { axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        if (transposedId !== xId) {
            // transpose was not a no-op. We will need to dispose of this
            // once we are done.
            input = transposed;
            inputId = transposedId;
        }
    }
    const inputRank = input.shape.length;
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("min", axes, inputRank);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, axes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const out = backend.makeOutput(outShape, input.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmMin(inputId, (0, _types.CppDType)[x.dtype], reduceSize, outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    return out;
}
const minConfig = {
    kernelName: (0, _tfjsCore.Min),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: min
};

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQb6J":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "minimumConfig", ()=>minimumConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const minimumConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Minimum), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eejPZ":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mirrorPadConfig", ()=>mirrorPadConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
// Must match enum in MirrorPad.cc
var MirrorPaddingMode;
(function(MirrorPaddingMode) {
    MirrorPaddingMode[MirrorPaddingMode["reflect"] = 0] = "reflect";
    MirrorPaddingMode[MirrorPaddingMode["symmetric"] = 1] = "symmetric";
})(MirrorPaddingMode || (MirrorPaddingMode = {}));
let wasmMirrorPad;
function setup(backend) {
    wasmMirrorPad = backend.wasm.cwrap((0, _tfjsCore.MirrorPad), null, [
        "number",
        "array",
        "number",
        "number",
        "array",
        "array",
        "number",
        "number"
    ]);
}
function mirrorPad(args) {
    const { inputs: { x }, backend, attrs: { paddings, mode } } = args;
    const outShape = paddings.map((p, i)=>p[0] + x.shape[i] + p[1]);
    const xId = backend.dataIdMap.get(x.dataId).id;
    const out = backend.makeOutput(outShape, x.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);
    const prePaddingsFlat = paddings.map((padTuple)=>padTuple[0]);
    const postPaddingsFlat = paddings.map((padTuple)=>padTuple[1]);
    const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);
    const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);
    wasmMirrorPad(xId, xShapeBytes, x.shape.length, (0, _types.CppDType)[x.dtype], prePaddingsBytes, postPaddingsBytes, MirrorPaddingMode[mode], outId);
    return out;
}
const mirrorPadConfig = {
    kernelName: (0, _tfjsCore.MirrorPad),
    backendName: "wasm",
    kernelFunc: mirrorPad,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKpUD":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multinomial", ()=>multinomial);
parcelHelpers.export(exports, "multinomialConfig", ()=>multinomialConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _softmax = require("./Softmax");
let wasmMultinomial;
function setup(backend) {
    wasmMultinomial = backend.wasm.cwrap((0, _tfjsCore.Multinomial), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function multinomial(args) {
    const { inputs, backend, attrs } = args;
    const { logits } = inputs;
    const { numSamples, seed, normalized } = attrs;
    if (logits.dtype !== "float32") throw new Error(`Tensor logits must have dtype float32, got ${logits.dtype}`);
    const probabilities = normalized ? logits : (0, _softmax.softmax)({
        inputs: {
            logits
        },
        backend,
        attrs: {
            dim: logits.shape.length - 1
        }
    });
    const [batchSize, numEvents] = probabilities.shape;
    const out = backend.makeOutput([
        batchSize,
        numSamples
    ], "int32");
    wasmMultinomial(backend.dataIdMap.get(probabilities.dataId).id, batchSize, numEvents, numSamples, seed, backend.dataIdMap.get(out.dataId).id);
    if (!normalized) backend.disposeData(probabilities.dataId);
    return out;
}
const multinomialConfig = {
    kernelName: (0, _tfjsCore.Multinomial),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: multinomial
};

},{"@tensorflow/tfjs-core":"2votT","./Softmax":"5Pe7B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Pe7B":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softmax", ()=>softmax);
parcelHelpers.export(exports, "softmaxConfig", ()=>softmaxConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmFunc;
function setup(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.Softmax), null, [
        "number",
        "number",
        "number",
        "number" // batch
    ]);
}
function softmax(args) {
    const { backend, inputs: { logits }, attrs: { dim } } = args;
    const xId = backend.dataIdMap.get(logits.dataId).id;
    const out = backend.makeOutput(logits.shape, logits.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const channels = logits.shape[dim];
    const batch = (0, _tfjsCore.util).sizeFromShape(logits.shape) / channels;
    // Short-circuit zero-sized tensors.
    if ((0, _tfjsCore.util).sizeFromShape(out.shape) === 0) return out;
    wasmFunc(xId, outId, channels, batch);
    return out;
}
const softmaxConfig = {
    kernelName: (0, _tfjsCore.Softmax),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: softmax
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2xPTx":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "modConfig", ()=>modConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const modConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Mod), /*supportsFullBroadcast=*/ true);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hpEZg":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "multiplyConfig", ()=>multiplyConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = true;
const multiplyConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Multiply), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4ssta":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "negConfig", ()=>negConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const negConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Neg));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5sUPV":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV3Config", ()=>nonMaxSuppressionV3Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _nonMaxSuppressionUtil = require("./NonMaxSuppression_util");
let wasmFunc;
function setup(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.NonMaxSuppressionV3), "number", [
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function kernelFunc(args) {
    const { backend, inputs, attrs } = args;
    const { iouThreshold, maxOutputSize, scoreThreshold } = attrs;
    const { boxes, scores } = inputs;
    const boxesId = backend.dataIdMap.get(boxes.dataId).id;
    const scoresId = backend.dataIdMap.get(scores.dataId).id;
    const resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold);
    const { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs } = (0, _nonMaxSuppressionUtil.parseResultStruct)(backend, resOffset);
    // Since we are not using scores for V3, we have to delete it from the heap.
    backend.wasm._free(pSelectedScores);
    backend.wasm._free(pValidOutputs);
    const selectedIndicesTensor = backend.makeOutput([
        selectedSize
    ], "int32", pSelectedIndices);
    return selectedIndicesTensor;
}
const nonMaxSuppressionV3Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV3),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: kernelFunc
};

},{"@tensorflow/tfjs-core":"2votT","./NonMaxSuppression_util":"kQylT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQylT":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ /**
 * Parse the result of the c++ method, which has the shape equivalent to
 * `Result`.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseResultStruct", ()=>parseResultStruct);
function parseResultStruct(backend, resOffset) {
    const result = new Int32Array(backend.wasm.HEAPU8.buffer, resOffset, 4);
    const pSelectedIndices = result[0];
    const selectedSize = result[1];
    const pSelectedScores = result[2];
    const pValidOutputs = result[3];
    // Since the result was allocated on the heap, we have to delete it.
    backend.wasm._free(resOffset);
    return {
        pSelectedIndices,
        selectedSize,
        pSelectedScores,
        pValidOutputs
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kuv65":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV4Config", ()=>nonMaxSuppressionV4Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _nonMaxSuppressionUtil = require("./NonMaxSuppression_util");
let wasmFunc;
function setup(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.NonMaxSuppressionV4), "number", [
        "number",
        "number",
        "number",
        "number",
        "number",
        "bool"
    ]);
}
function nonMaxSuppressionV4(args) {
    const { backend, inputs, attrs } = args;
    const { iouThreshold, maxOutputSize, scoreThreshold, padToMaxOutputSize } = attrs;
    const { boxes, scores } = inputs;
    const boxesId = backend.dataIdMap.get(boxes.dataId).id;
    const scoresId = backend.dataIdMap.get(scores.dataId).id;
    const resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);
    const { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs } = (0, _nonMaxSuppressionUtil.parseResultStruct)(backend, resOffset);
    // Since we are not using scores for V4, we have to delete it from the heap.
    backend.wasm._free(pSelectedScores);
    const selectedIndicesTensor = backend.makeOutput([
        selectedSize
    ], "int32", pSelectedIndices);
    const validOutputsTensor = backend.makeOutput([], "int32", pValidOutputs);
    return [
        selectedIndicesTensor,
        validOutputsTensor
    ];
}
const nonMaxSuppressionV4Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV4),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: nonMaxSuppressionV4
};

},{"@tensorflow/tfjs-core":"2votT","./NonMaxSuppression_util":"kQylT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bhhQ0":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonMaxSuppressionV5Config", ()=>nonMaxSuppressionV5Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _nonMaxSuppressionUtil = require("./NonMaxSuppression_util");
let wasmFunc;
function setup(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.NonMaxSuppressionV5), "number", [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function kernelFunc(args) {
    const { backend, inputs, attrs } = args;
    const { iouThreshold, maxOutputSize, scoreThreshold, softNmsSigma } = attrs;
    const { boxes, scores } = inputs;
    const boxesId = backend.dataIdMap.get(boxes.dataId).id;
    const scoresId = backend.dataIdMap.get(scores.dataId).id;
    const resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);
    const { pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs } = (0, _nonMaxSuppressionUtil.parseResultStruct)(backend, resOffset);
    // Since we are not using validOutputs for V5, we have to delete it from the
    // heap.
    backend.wasm._free(pValidOutputs);
    const selectedIndicesTensor = backend.makeOutput([
        selectedSize
    ], "int32", pSelectedIndices);
    const selectedScoresTensor = backend.makeOutput([
        selectedSize
    ], "float32", pSelectedScores);
    return [
        selectedIndicesTensor,
        selectedScoresTensor
    ];
}
const nonMaxSuppressionV5Config = {
    kernelName: (0, _tfjsCore.NonMaxSuppressionV5),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: kernelFunc
};

},{"@tensorflow/tfjs-core":"2votT","./NonMaxSuppression_util":"kQylT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eG0iO":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "notEqualConfig", ()=>notEqualConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const notEqualConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.NotEqual), supportsFullBroadcast, "bool");

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aeW0J":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oneHotConfig", ()=>oneHotConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmOneHot;
function setup(backend) {
    wasmOneHot = backend.wasm.cwrap((0, _tfjsCore.OneHot), null, [
        "number",
        "number",
        "number",
        "number",
        "number" // out_id
    ]);
}
function oneHot(args) {
    const { inputs, backend, attrs } = args;
    const { indices } = inputs;
    const { dtype, depth, onValue, offValue } = attrs;
    const out = backend.makeOutput([
        ...indices.shape,
        depth
    ], dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const indicesData = backend.dataIdMap.get(indices.dataId);
    const indicesId = indicesData.id;
    wasmOneHot(indicesId, depth, onValue, offValue, outId);
    return out;
}
const oneHotConfig = {
    kernelName: (0, _tfjsCore.OneHot),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: oneHot
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OEuZ":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "onesLikeConfig", ()=>onesLikeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function onesLike(args) {
    const { inputs: { x }, backend } = args;
    const out = backend.makeOutput(x.shape, x.dtype);
    const outVals = backend.typedArrayFromHeap(out);
    outVals.fill(1);
    return out;
}
const onesLikeConfig = {
    kernelName: (0, _tfjsCore.OnesLike),
    backendName: "wasm",
    kernelFunc: onesLike
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6aDcA":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pack", ()=>pack);
parcelHelpers.export(exports, "packConfig", ()=>packConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _concat = require("./Concat");
var _expandDims = require("./ExpandDims");
function pack(args) {
    const { inputs, backend, attrs } = args;
    const { axis } = attrs;
    if (inputs.length === 1) return (0, _expandDims.expandDims)({
        inputs: {
            input: inputs[0]
        },
        backend,
        attrs: {
            dim: axis
        }
    });
    const shape = inputs[0].shape;
    const dtype = inputs[0].dtype;
    inputs.forEach((t)=>{
        (0, _tfjsCore.util).assertShapesMatch(shape, t.shape, "All tensors passed to stack must have matching shapes");
        (0, _tfjsCore.util).assert(dtype === t.dtype, ()=>"All tensors passed to stack must have matching dtypes");
    });
    const intermediateTensorInfos = [];
    const expandedTensors = inputs.map((t)=>{
        const expandedT = (0, _expandDims.expandDims)({
            inputs: {
                input: t
            },
            backend,
            attrs: {
                dim: axis
            }
        });
        intermediateTensorInfos.push(expandedT);
        return expandedT;
    });
    const result = (0, _concat.concat)({
        inputs: expandedTensors,
        backend,
        attrs: {
            axis
        }
    });
    intermediateTensorInfos.forEach((t)=>backend.disposeData(t.dataId));
    return result;
}
const packConfig = {
    kernelName: (0, _tfjsCore.Pack),
    backendName: "wasm",
    kernelFunc: pack
};

},{"@tensorflow/tfjs-core":"2votT","./Concat":"y7qGm","./ExpandDims":"hoqoo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3d5wK":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "padV2Config", ()=>padV2Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _fill = require("./Fill");
var _types = require("./types");
let wasmPadV2;
function setup(backend) {
    wasmPadV2 = backend.wasm.cwrap((0, _tfjsCore.PadV2), null, [
        "number",
        "array",
        "number",
        "number",
        "array",
        "array",
        "number",
        "number"
    ]);
}
function pad(args) {
    const { inputs: { x }, backend, attrs: { paddings, constantValue } } = args;
    const outShape = paddings.map((p, i)=>p[0] + x.shape[i] + p[1]);
    if ((0, _tfjsCore.util).sizeFromShape(x.shape) === 0) // Short-circuit the computation, since x doesn't have value, only
    // the shape is used to compute output shape to pad.
    return (0, _fill.fill)({
        backend,
        attrs: {
            shape: outShape,
            value: constantValue,
            dtype: x.dtype
        }
    });
    const xId = backend.dataIdMap.get(x.dataId).id;
    const out = backend.makeOutput(outShape, x.dtype);
    const outTensorData = backend.dataIdMap.get(out.dataId);
    const outId = outTensorData.id;
    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);
    const prePaddingsFlat = paddings.map((padTuple)=>padTuple[0]);
    const postPaddingsFlat = paddings.map((padTuple)=>padTuple[1]);
    const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);
    const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);
    wasmPadV2(xId, xShapeBytes, x.shape.length, (0, _types.CppDType)[x.dtype], prePaddingsBytes, postPaddingsBytes, constantValue, outId);
    return out;
}
const padV2Config = {
    kernelName: (0, _tfjsCore.PadV2),
    backendName: "wasm",
    kernelFunc: pad,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","./Fill":"1vlVC","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bSGJS":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powConfig", ()=>powConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = false;
const powConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Pow), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSMVr":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "preluConfig", ()=>preluConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
let wasmPrelu;
function setup(backend) {
    wasmPrelu = backend.wasm.cwrap((0, _tfjsCore.Prelu), null, [
        "number",
        "number",
        "number" // out_id
    ]);
}
function prelu(args) {
    const { inputs, backend } = args;
    const { x, alpha } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const weightsId = backend.dataIdMap.get(alpha.dataId).id;
    let inputId = xId;
    const input = x;
    let castedInput = input;
    if (input.dtype !== "float32") {
        castedInput = (0, _cast.cast)({
            backend,
            inputs: {
                x
            },
            attrs: {
                dtype: "float32"
            }
        });
        inputId = backend.dataIdMap.get(castedInput.dataId).id;
    }
    const out = backend.makeOutput(x.shape, "float32");
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmPrelu(inputId, weightsId, outId);
    if (input.dtype !== "float32") backend.disposeData(castedInput.dataId);
    return out;
}
const preluConfig = {
    kernelName: (0, _tfjsCore.Prelu),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: prelu
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chYZC":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prodConfig", ()=>prodConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
var _types = require("./types");
let wasmProd;
function setup(backend) {
    wasmProd = backend.wasm.cwrap((0, _tfjsCore.Prod), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function prod(args) {
    const { backend, inputs, attrs } = args;
    const { axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    let reductionAxes = axes;
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        if (transposedId !== xId) {
            // transpose was not a no-op. We will need to dispose of this
            // once we are done.
            input = transposed;
            inputId = transposedId;
            reductionAxes = (0, _tfjsCore.backend_util).getInnerMostAxes(reductionAxes.length, input.shape.length);
        }
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("prod", reductionAxes, input.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, reductionAxes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const out = backend.makeOutput(outShape, input.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmProd(inputId, reduceSize, (0, _types.CppDType)[out.dtype], outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    return out;
}
const prodConfig = {
    kernelName: (0, _tfjsCore.Prod),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: prod
};

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6REW1":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "range", ()=>range);
parcelHelpers.export(exports, "rangeConfig", ()=>rangeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
const range = (args)=>{
    const { backend, attrs } = args;
    const { start, stop, step, dtype } = attrs;
    const values = (0, _shared.rangeImplCPU)(start, stop, step, dtype);
    const out = backend.makeOutput([
        values.length
    ], dtype);
    const outVals = backend.typedArrayFromHeap(out);
    outVals.set(values);
    return out;
};
const rangeConfig = {
    kernelName: (0, _tfjsCore.Range),
    backendName: "wasm",
    kernelFunc: range
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gwfv9":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "realDivConfig", ()=>realDivConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = true;
const realDivConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.RealDiv), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1DML7":[function(require,module,exports) {
/**
 * @license
 * Copyright 2022 The TensorFlow Authors. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reciprocalConfig", ()=>reciprocalConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const reciprocalConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Reciprocal));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zGPs":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reluConfig", ()=>reluConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const reluConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Relu));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2dox4":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "relu6Config", ()=>relu6Config);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const relu6Config = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Relu6));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2q19B":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeBilinearConfig", ()=>resizeBilinearConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
let wasmResizeBilinear;
function setup(backend) {
    wasmResizeBilinear = backend.wasm.cwrap((0, _tfjsCore.ResizeBilinear), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number" // outId
    ]);
}
function resizeBilinear(args) {
    const { backend, inputs, attrs } = args;
    const { images } = inputs;
    const { alignCorners, halfPixelCenters, size } = attrs;
    const [newHeight, newWidth] = size;
    const [batch, oldHeight, oldWidth, numChannels] = images.shape;
    const outShape = [
        batch,
        newHeight,
        newWidth,
        numChannels
    ];
    let xData = backend.dataIdMap.get(images.dataId);
    let castedData;
    if (xData.dtype !== "float32") {
        castedData = (0, _cast.cast)({
            backend,
            inputs: {
                x: images
            },
            attrs: {
                dtype: "float32"
            }
        });
        xData = backend.dataIdMap.get(castedData.dataId);
    }
    const xId = xData.id;
    const out = backend.makeOutput(outShape, "float32");
    if ((0, _tfjsCore.util).sizeFromShape(images.shape) === 0) return out;
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmResizeBilinear(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);
    if (castedData != null) backend.disposeData(castedData.dataId);
    return out;
}
const resizeBilinearConfig = {
    kernelName: (0, _tfjsCore.ResizeBilinear),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: resizeBilinear
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oPq8":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeBilinearGradConfig", ()=>resizeBilinearGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
let wasmResizeBilinearGrad;
function setup(backend) {
    wasmResizeBilinearGrad = backend.wasm.cwrap((0, _tfjsCore.ResizeBilinearGrad), null, [
        "number",
        "number",
        "number",
        "array",
        "array",
        "boolean"
    ]);
}
function resizeBilinearGrad(args) {
    const { inputs, backend, attrs } = args;
    const { images, dy } = inputs;
    const { alignCorners } = attrs;
    const dx = backend.makeOutput(images.shape, "float32");
    let xData = backend.dataIdMap.get(images.dataId);
    let castedData;
    if (xData.dtype !== "float32") {
        castedData = (0, _cast.cast)({
            backend,
            inputs: {
                x: images
            },
            attrs: {
                dtype: "float32"
            }
        });
        xData = backend.dataIdMap.get(castedData.dataId);
    }
    wasmResizeBilinearGrad(backend.dataIdMap.get(images.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, new Uint8Array(new Int32Array(images.shape).buffer), new Uint8Array(new Int32Array(dy.shape).buffer), alignCorners);
    if (castedData != null) backend.disposeData(castedData.dataId);
    return dx;
}
const resizeBilinearGradConfig = {
    kernelName: (0, _tfjsCore.ResizeBilinearGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: resizeBilinearGrad
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcTrG":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeNearestNeighborConfig", ()=>resizeNearestNeighborConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
let wasmResizeNearestNeighbor;
function setup(backend) {
    wasmResizeNearestNeighbor = backend.wasm.cwrap((0, _tfjsCore.ResizeNearestNeighbor), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function resizeNearestNeighbor(args) {
    const { backend, inputs, attrs } = args;
    const { images } = inputs;
    const { alignCorners, halfPixelCenters, size } = attrs;
    const [newHeight, newWidth] = size;
    const [batch, oldHeight, oldWidth, numChannels] = images.shape;
    const outShape = [
        batch,
        newHeight,
        newWidth,
        numChannels
    ];
    const out = backend.makeOutput(outShape, "float32");
    if ((0, _tfjsCore.util).sizeFromShape(images.shape) === 0) return out;
    let xData = backend.dataIdMap.get(images.dataId);
    let castedData;
    if (xData.dtype !== "float32") {
        castedData = (0, _cast.cast)({
            backend,
            inputs: {
                x: images
            },
            attrs: {
                dtype: "float32"
            }
        });
        xData = backend.dataIdMap.get(castedData.dataId);
    }
    const xId = xData.id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmResizeNearestNeighbor(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);
    if (castedData != null) backend.disposeData(castedData.dataId);
    return out;
}
const resizeNearestNeighborConfig = {
    kernelName: (0, _tfjsCore.ResizeNearestNeighbor),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: resizeNearestNeighbor
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqviW":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resizeNearestNeighborGradConfig", ()=>resizeNearestNeighborGradConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _cast = require("./Cast");
let wasmResizeNearestNeighborGrad;
function setup(backend) {
    wasmResizeNearestNeighborGrad = backend.wasm.cwrap((0, _tfjsCore.ResizeNearestNeighborGrad), null, [
        "number",
        "number",
        "number",
        "array",
        "array",
        "boolean"
    ]);
}
function resizeNearestNeighborGrad(args) {
    const { inputs, backend, attrs } = args;
    const { images, dy } = inputs;
    const { alignCorners } = attrs;
    const dx = backend.makeOutput(images.shape, "float32");
    let xData = backend.dataIdMap.get(images.dataId);
    let castedData;
    if (xData.dtype !== "float32") {
        castedData = (0, _cast.cast)({
            backend,
            inputs: {
                x: images
            },
            attrs: {
                dtype: "float32"
            }
        });
        xData = backend.dataIdMap.get(castedData.dataId);
    }
    wasmResizeNearestNeighborGrad(backend.dataIdMap.get(images.dataId).id, backend.dataIdMap.get(dy.dataId).id, backend.dataIdMap.get(dx.dataId).id, new Uint8Array(new Int32Array(images.shape).buffer), new Uint8Array(new Int32Array(dy.shape).buffer), alignCorners);
    if (castedData != null) backend.disposeData(castedData.dataId);
    return dx;
}
const resizeNearestNeighborGradConfig = {
    kernelName: (0, _tfjsCore.ResizeNearestNeighborGrad),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: resizeNearestNeighborGrad
};

},{"@tensorflow/tfjs-core":"2votT","./Cast":"gJKP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1bIb":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reverse", ()=>reverse);
parcelHelpers.export(exports, "reverseConfig", ()=>reverseConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _identity = require("./Identity");
var _reshape = require("./Reshape");
let wasmReverse;
function setup(backend) {
    wasmReverse = backend.wasm.cwrap((0, _tfjsCore.Reverse), null, [
        "number",
        "array",
        "number",
        "array",
        "number",
        "number" // out_id
    ]);
}
function reverse(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { dims } = attrs;
    const axes = (0, _tfjsCore.util).parseAxisParam(dims, x.shape);
    if (x.shape.length === 0) return (0, _identity.identity)({
        inputs: {
            x
        },
        backend
    });
    const out = backend.makeOutput(x.shape, x.dtype);
    const xId = backend.dataIdMap.get(x.dataId).id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    const axesBytes = new Uint8Array(new Int32Array(axes).buffer);
    const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);
    wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);
    const reshaped = (0, _reshape.reshape)({
        inputs: {
            x: out
        },
        attrs: {
            shape: x.shape
        },
        backend
    });
    backend.disposeData(out.dataId);
    return reshaped;
}
const reverseConfig = {
    kernelName: (0, _tfjsCore.Reverse),
    backendName: "wasm",
    kernelFunc: reverse,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","./Identity":"cKt0J","./Reshape":"iRXb9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kNgCn":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateWithOffset", ()=>rotateWithOffset);
parcelHelpers.export(exports, "rotateWithOffsetConfig", ()=>rotateWithOffsetConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmRotate;
function setup(backend) {
    wasmRotate = backend.wasm.cwrap((0, _tfjsCore.RotateWithOffset), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "array",
        "number",
        "number"
    ]);
}
function rotateWithOffset(args) {
    const { inputs, backend, attrs } = args;
    const { image } = inputs;
    const { radians, fillValue, center } = attrs;
    const out = backend.makeOutput(image.shape, image.dtype);
    const imageId = backend.dataIdMap.get(image.dataId).id;
    const outId = backend.dataIdMap.get(out.dataId).id;
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    const [centerX, centerY] = (0, _tfjsCore.backend_util).getImageCenter(center, imageHeight, imageWidth);
    const fillIsBlack = fillValue === 0;
    const fullOpacityValue = 255;
    const fillValues = typeof fillValue === "number" ? [
        fillValue,
        fillValue,
        fillValue,
        fillIsBlack ? 0 : fullOpacityValue
    ] : [
        ...fillValue,
        fullOpacityValue
    ];
    const fillBytes = new Uint8Array(new Int32Array(fillValues).buffer);
    wasmRotate(imageId, batch, imageHeight, imageWidth, numChannels, radians, centerX, centerY, fillBytes, fillValues.length, outId);
    return out;
}
const rotateWithOffsetConfig = {
    kernelName: (0, _tfjsCore.RotateWithOffset),
    backendName: "wasm",
    kernelFunc: rotateWithOffset,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kbM3V":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "roundConfig", ()=>roundConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const roundConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Round));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kChui":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rsqrtConfig", ()=>rsqrtConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const rsqrtConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Rsqrt));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bNnq7":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scatterNdConfig", ()=>scatterNdConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmScatterNd;
function setup(backend) {
    wasmScatterNd = backend.wasm.cwrap((0, _tfjsCore.ScatterNd), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "array",
        "number",
        "number" // outId
    ]);
}
function scatterNd(args) {
    const { backend, inputs, attrs } = args;
    const { indices, updates } = inputs;
    const { shape } = attrs;
    const out = backend.makeOutput(shape, updates.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(shape) === 0) return out;
    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = (0, _tfjsCore.scatter_util).calculateShapes(updates, indices, shape);
    const indicesData = backend.dataIdMap.get(indices.dataId);
    const indicesId = indicesData.id;
    const updatesData = backend.dataIdMap.get(updates.dataId);
    const updatesId = updatesData.id;
    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmScatterNd(indicesId, updatesId, (0, _types.CppDType)[updates.dtype], sliceRank, numUpdates, sliceSize, stridesBytes, outputSize, outId);
    return out;
}
const scatterNdConfig = {
    kernelName: (0, _tfjsCore.ScatterNd),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: scatterNd
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4yg1b":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "searchSortedConfig", ()=>searchSortedConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmSearchSorted;
function setup(backend) {
    wasmSearchSorted = backend.wasm.cwrap((0, _tfjsCore.SearchSorted), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "bool",
        "number"
    ]);
}
function searchSorted(args) {
    const { inputs, backend, attrs } = args;
    const { sortedSequence, values } = inputs;
    const { side } = attrs;
    if (sortedSequence.dtype !== values.dtype) throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${sortedSequence.dtype} and ${values.dtype}`);
    const out = backend.makeOutput(values.shape, "int32");
    function tensorId(x) {
        return backend.dataIdMap.get(x.dataId).id;
    }
    wasmSearchSorted(tensorId(sortedSequence), tensorId(values), /*batchSize=*/ sortedSequence.shape[0], /*sequenceSize=*/ sortedSequence.shape[1], /*valuesSize=*/ values.shape[1], /*dtype=*/ (0, _types.CppDType)[sortedSequence.dtype], /*isSideLeft=*/ side === "left", tensorId(out));
    return out;
}
const searchSortedConfig = {
    kernelName: (0, _tfjsCore.SearchSorted),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: searchSorted
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lxm4v":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "selectConfig", ()=>selectConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmSelect;
function setup(backend) {
    wasmSelect = backend.wasm.cwrap("SelectV2", null, [
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function select(args) {
    const { inputs, backend } = args;
    const { condition, t, e } = inputs;
    const conditionId = backend.dataIdMap.get(condition.dataId).id;
    const tId = backend.dataIdMap.get(t.dataId).id;
    const eId = backend.dataIdMap.get(e.dataId).id;
    const out = backend.makeOutput(t.shape, t.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const cRank = condition.shape.length;
    const tRank = t.shape.length;
    const offset = cRank === 0 || cRank > 1 || tRank === 1 ? 1 : (0, _tfjsCore.util).sizeFromShape(t.shape.slice(1));
    wasmSelect(conditionId, tId, eId, offset, outId);
    return out;
}
const selectConfig = {
    kernelName: (0, _tfjsCore.Select),
    backendName: "wasm",
    kernelFunc: select,
    setupFunc: setup
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dHQKF":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "seluConfig", ()=>seluConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const seluConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Selu));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9JnBj":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sigmoidConfig", ()=>sigmoidConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmFunc;
function setup(backend) {
    wasmFunc = backend.wasm.cwrap((0, _tfjsCore.Sigmoid), null, [
        "number",
        "number"
    ]);
}
function sigmoid(args) {
    const { backend, inputs: { x } } = args;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const out = backend.makeOutput(x.shape, x.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    // Short-circuit zero-sized tensors.
    if ((0, _tfjsCore.util).sizeFromShape(out.shape) === 0) return out;
    wasmFunc(xId, outId);
    return out;
}
const sigmoidConfig = {
    kernelName: "Sigmoid",
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: sigmoid
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDOTb":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signConfig", ()=>signConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const signConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Sign));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRRaT":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinConfig", ()=>sinConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const sinConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Sin));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ghhNP":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sinhConfig", ()=>sinhConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const sinhConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Sinh));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1IxGM":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "softplusConfig", ()=>softplusConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const softplusConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Softplus));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1xG5H":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spaceToBatchNDConfig", ()=>spaceToBatchNDConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _padV2 = require("./PadV2");
var _reshape = require("./Reshape");
var _transpose = require("./Transpose");
function spaceToBatchND(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const { blockShape, paddings } = attrs;
    const prod = (0, _tfjsCore.util).sizeFromShape(blockShape);
    const completePaddings = [
        [
            0,
            0
        ]
    ];
    completePaddings.push(...paddings);
    for(let i = 1 + blockShape.length; i < x.shape.length; ++i)completePaddings.push([
        0,
        0
    ]);
    const paddedX = (0, _padV2.padV2Config).kernelFunc({
        inputs: {
            x
        },
        backend,
        attrs: {
            paddings: completePaddings,
            constantValue: 0
        }
    });
    const reshapedPaddedShape = (0, _tfjsCore.backend_util).getReshaped(paddedX.shape, blockShape, prod, false);
    const permutedReshapedPaddedPermutation = (0, _tfjsCore.backend_util).getPermuted(reshapedPaddedShape.length, blockShape.length, false);
    const flattenShape = (0, _tfjsCore.backend_util).getReshapedPermuted(paddedX.shape, blockShape, prod, false);
    const reshapeInputs = {
        x: paddedX
    };
    const reshapeAttrs = {
        shape: reshapedPaddedShape
    };
    const paddedXReshaped = (0, _reshape.reshape)({
        inputs: reshapeInputs,
        backend,
        attrs: reshapeAttrs
    });
    const transposeInputs = {
        x: paddedXReshaped
    };
    const transposeAttrs = {
        perm: permutedReshapedPaddedPermutation
    };
    const paddedXT = (0, _transpose.transpose)({
        inputs: transposeInputs,
        backend,
        attrs: transposeAttrs
    });
    const resultReshapeInputs = {
        x: paddedXT
    };
    const resultReshapeAttrs = {
        shape: flattenShape
    };
    const result = (0, _reshape.reshape)({
        inputs: resultReshapeInputs,
        backend,
        attrs: resultReshapeAttrs
    });
    backend.disposeData(paddedX.dataId);
    backend.disposeData(paddedXReshaped.dataId);
    backend.disposeData(paddedXT.dataId);
    return result;
}
const spaceToBatchNDConfig = {
    kernelName: (0, _tfjsCore.SpaceToBatchND),
    backendName: "wasm",
    kernelFunc: spaceToBatchND
};

},{"@tensorflow/tfjs-core":"2votT","./PadV2":"3d5wK","./Reshape":"iRXb9","./Transpose":"f63sH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ee9PK":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setup", ()=>setup);
parcelHelpers.export(exports, "sparseFillEmptyRows", ()=>sparseFillEmptyRows);
parcelHelpers.export(exports, "sparseFillEmptyRowsConfig", ()=>sparseFillEmptyRowsConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _slice = require("./Slice");
var _types = require("./types");
let wasmSparseFillEmptyRows;
function setup(backend) {
    wasmSparseFillEmptyRows = backend.wasm.cwrap("SparseFillEmptyRows", "number", [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function sparseFillEmptyRows(args) {
    const { backend, inputs } = args;
    const { indices, values, denseShape, defaultValue } = inputs;
    const indicesCount = indices.shape[0];
    const rank = indices.shape[1];
    const denseRows = backend.readSync(denseShape.dataId)[0];
    // Set output size to maximum possible and resize later (actual result
    // might be smaller).
    const maxOutputIndicesShape = [
        indicesCount + denseRows,
        rank
    ];
    const indicesId = backend.dataIdMap.get(indices.dataId).id;
    const valuesId = backend.dataIdMap.get(values.dataId).id;
    const defaultValueId = backend.dataIdMap.get(defaultValue.dataId).id;
    const outputIndices = backend.makeOutput(maxOutputIndicesShape, indices.dtype);
    const outputIndicesId = backend.dataIdMap.get(outputIndices.dataId).id;
    const outputValues = backend.makeOutput(maxOutputIndicesShape.slice(0, 1), values.dtype);
    const outputValuesId = backend.dataIdMap.get(outputValues.dataId).id;
    const emptyRowIndicator = backend.makeOutput([
        denseRows
    ], "bool");
    const emptyRowIndicatorId = backend.dataIdMap.get(emptyRowIndicator.dataId).id;
    const reverseIndexMap = backend.makeOutput([
        indicesCount
    ], indices.dtype);
    const reverseIndexMapId = backend.dataIdMap.get(reverseIndexMap.dataId).id;
    const exceptionValues = backend.makeOutput([
        4
    ], "int32");
    const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;
    const outputRows = wasmSparseFillEmptyRows(indicesId, valuesId, (0, _types.CppDType)[values.dtype], indicesCount, denseRows, rank, defaultValueId, outputIndicesId, outputValuesId, emptyRowIndicatorId, reverseIndexMapId, exceptionValuesId);
    const exceptionValuesArray = backend.readSync(exceptionValues.dataId);
    let exceptionMessage;
    switch(exceptionValuesArray[0]){
        case 1:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseFillEmptyRowsIndicesDenseShapeMismatch(exceptionValuesArray[1]);
            break;
        case 2:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseFillEmptyRowsNegativeIndexErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);
            break;
        case 3:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2], exceptionValuesArray[3]);
            break;
        default:
            exceptionMessage = "";
    }
    backend.disposeData(exceptionValues.dataId);
    if (exceptionMessage) {
        backend.disposeData(outputIndices.dataId);
        backend.disposeData(outputValues.dataId);
        backend.disposeData(emptyRowIndicator.dataId);
        backend.disposeData(reverseIndexMap.dataId);
        throw new Error(exceptionMessage);
    }
    let resizedIndices = outputIndices;
    let resizedValues = outputValues;
    // Overestimated output size.
    if (outputRows !== maxOutputIndicesShape[0]) {
        resizedIndices = (0, _slice.slice)({
            inputs: {
                x: outputIndices
            },
            attrs: {
                begin: 0,
                size: [
                    outputRows,
                    rank
                ]
            },
            backend
        });
        resizedValues = (0, _slice.slice)({
            inputs: {
                x: outputValues
            },
            attrs: {
                begin: 0,
                size: outputRows
            },
            backend
        });
        backend.disposeData(outputIndices.dataId);
        backend.disposeData(outputValues.dataId);
    }
    return [
        resizedIndices,
        resizedValues,
        emptyRowIndicator,
        reverseIndexMap
    ];
}
const sparseFillEmptyRowsConfig = {
    kernelName: (0, _tfjsCore.SparseFillEmptyRows),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: sparseFillEmptyRows
};

},{"@tensorflow/tfjs-core":"2votT","./Slice":"aahzO","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"esy5z":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseReshapeConfig", ()=>sparseReshapeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmSparseReshape;
function setup(backend) {
    wasmSparseReshape = backend.wasm.cwrap((0, _tfjsCore.SparseReshape), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function sparseReshape(args) {
    const { backend, inputs } = args;
    const { inputIndices, inputShape, newShape } = inputs;
    if (inputIndices.shape.length !== 2) throw new Error(`Input indices should be a matrix but received shape
        ${inputIndices.shape}`);
    if (inputShape.shape.length !== 1) throw new Error(`Input shape should be a vector but received shape
        ${inputShape.shape}`);
    if (newShape.shape.length !== 1) throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);
    const inputIndicesId = backend.dataIdMap.get(inputIndices.dataId).id;
    const inputShapeId = backend.dataIdMap.get(inputShape.dataId).id;
    const newShapeId = backend.dataIdMap.get(newShape.dataId).id;
    const nnz = inputIndices.shape[0];
    const outputRank = (0, _tfjsCore.util).sizeFromShape(newShape.shape);
    const newIndices = backend.makeOutput([
        nnz,
        outputRank
    ], inputIndices.dtype);
    const newIndicesId = backend.dataIdMap.get(newIndices.dataId).id;
    const outputShape = backend.makeOutput([
        outputRank
    ], newShape.dtype);
    const outputShapeId = backend.dataIdMap.get(outputShape.dataId).id;
    const exceptionValues = backend.makeOutput([
        3
    ], "int32");
    const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;
    wasmSparseReshape(inputIndicesId, inputShapeId, newShapeId, nnz, newIndicesId, outputShapeId, exceptionValuesId);
    const exceptionValuesArray = backend.readSync(exceptionValues.dataId);
    let exceptionMessage;
    switch(exceptionValuesArray[0]){
        case 0:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);
            break;
        case 1:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseReshapeNegativeOutputDimErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);
            break;
        case 2:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();
            break;
        case 3:
            {
                const inputShapeValues = Array.from(backend.readSync(inputShape.dataId)), outputShapeValues = Array.from(backend.readSync(outputShape.dataId));
                exceptionMessage = (0, _tfjsCore.backend_util).getSparseReshapeInputOutputMultipleErrorMessage(inputShapeValues, outputShapeValues);
                break;
            }
        case 4:
            {
                const inputShapeValues = Array.from(backend.readSync(inputShape.dataId)), outputShapeValues = Array.from(backend.readSync(outputShape.dataId));
                exceptionMessage = (0, _tfjsCore.backend_util).getSparseReshapeInputOutputMismatchErrorMessage(inputShapeValues, outputShapeValues);
                break;
            }
        default:
            exceptionMessage = "";
    }
    backend.disposeData(exceptionValues.dataId);
    if (exceptionMessage) {
        backend.disposeData(newIndices.dataId);
        backend.disposeData(outputShape.dataId);
        throw new Error(exceptionMessage);
    }
    return [
        newIndices,
        outputShape
    ];
}
const sparseReshapeConfig = {
    kernelName: (0, _tfjsCore.SparseReshape),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: sparseReshape
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Zem2":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentMeanConfig", ()=>sparseSegmentMeanConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _sparseSegmentReduction = require("./SparseSegmentReduction");
function sparseSegmentMean(args) {
    return (0, _sparseSegmentReduction.sparseSegmentReduction)(args, true);
}
const sparseSegmentMeanConfig = {
    kernelName: (0, _tfjsCore.SparseSegmentMean),
    backendName: "wasm",
    setupFunc: (0, _sparseSegmentReduction.setup),
    kernelFunc: sparseSegmentMean
};

},{"@tensorflow/tfjs-core":"2votT","./SparseSegmentReduction":"6Fauw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Fauw":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setup", ()=>setup);
parcelHelpers.export(exports, "sparseSegmentReduction", ()=>sparseSegmentReduction);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmSparseSegmentReduction;
function setup(backend) {
    wasmSparseSegmentReduction = backend.wasm.cwrap("SparseSegmentReduction", null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number"
    ]);
}
function sparseSegmentReduction(args, isMean) {
    const { backend, inputs } = args;
    const { data, indices, segmentIds } = inputs;
    const numIndices = indices.shape[0];
    const segmentIdsBack = backend.readSync(segmentIds.dataId, numIndices - 1, numIndices)[0];
    const lastSegmentIdPlusOne = numIndices > 0 ? segmentIdsBack + 1 : 0;
    const outputRows = lastSegmentIdPlusOne;
    if (outputRows < 0) throw new Error((0, _tfjsCore.backend_util).getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
    const outputShape = data.shape.slice();
    outputShape[0] = outputRows;
    const dataId = backend.dataIdMap.get(data.dataId).id;
    const indicesId = backend.dataIdMap.get(indices.dataId).id;
    const segmentIdsId = backend.dataIdMap.get(segmentIds.dataId).id;
    const output = backend.makeOutput(outputShape, data.dtype);
    const outputId = backend.dataIdMap.get(output.dataId).id;
    const exceptionValues = backend.makeOutput([
        4
    ], "int32");
    const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;
    wasmSparseSegmentReduction(dataId, (0, _types.CppDType)[data.dtype], data.shape[0], indicesId, segmentIdsId, outputId, exceptionValuesId, isMean, 0);
    const exceptionValuesArray = backend.readSync(exceptionValues.dataId);
    let exceptionMessage;
    switch(exceptionValuesArray[0]){
        case 0:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseSegmentReductionNegativeSegmentIdsErrorMessage();
            break;
        case 1:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();
            break;
        case 2:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);
            break;
        case 3:
            exceptionMessage = (0, _tfjsCore.backend_util).getSparseSegmentReductionIndicesOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2], exceptionValuesArray[3]);
            break;
        default:
            exceptionMessage = "";
    }
    backend.disposeData(exceptionValues.dataId);
    if (exceptionMessage) {
        backend.disposeData(output.dataId);
        throw new Error(exceptionMessage);
    }
    return output;
}

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lBYRU":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseSegmentSumConfig", ()=>sparseSegmentSumConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _sparseSegmentReduction = require("./SparseSegmentReduction");
function sparseSegmentSum(args) {
    return (0, _sparseSegmentReduction.sparseSegmentReduction)(args, false);
}
const sparseSegmentSumConfig = {
    kernelName: (0, _tfjsCore.SparseSegmentSum),
    backendName: "wasm",
    setupFunc: (0, _sparseSegmentReduction.setup),
    kernelFunc: sparseSegmentSum
};

},{"@tensorflow/tfjs-core":"2votT","./SparseSegmentReduction":"6Fauw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5I63k":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sparseToDenseConfig", ()=>sparseToDenseConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmSparseToDense;
function setup(backend) {
    wasmSparseToDense = backend.wasm.cwrap((0, _tfjsCore.SparseToDense), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "array",
        "number",
        "number"
    ]);
}
function sparseToDense(args) {
    const { backend, inputs, attrs } = args;
    const { sparseIndices, sparseValues, defaultValue } = inputs;
    const { outputShape } = attrs;
    const out = backend.makeOutput(outputShape, defaultValue.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(outputShape) === 0) return out;
    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = (0, _tfjsCore.backend_util).calculateShapes(sparseValues, sparseIndices, outputShape);
    const sparseIndicesId = backend.dataIdMap.get(sparseIndices.dataId).id;
    const sparseValuesId = backend.dataIdMap.get(sparseValues.dataId).id;
    const defaultValueId = backend.dataIdMap.get(defaultValue.dataId).id;
    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmSparseToDense(sparseIndicesId, sparseValuesId, sparseValues.shape.length, defaultValueId, (0, _types.CppDType)[defaultValue.dtype], sliceRank, numUpdates, sliceSize, stridesBytes, outputSize, outId);
    return out;
}
const sparseToDenseConfig = {
    kernelName: (0, _tfjsCore.SparseToDense),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: sparseToDense
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oNH7":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitV", ()=>splitV);
parcelHelpers.export(exports, "splitVConfig", ()=>splitVConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _slice = require("./Slice");
function splitV(args) {
    const { inputs, attrs, backend } = args;
    const { x } = inputs;
    const { numOrSizeSplits, axis } = attrs;
    const $axis = (0, _tfjsCore.util).parseAxisParam(axis, x.shape)[0];
    const splitSizes = (0, _tfjsCore.backend_util).prepareSplitSize(x, numOrSizeSplits, $axis);
    const begin = new Array(x.shape.length).fill(0);
    const size = x.shape.slice();
    return splitSizes.map((s)=>{
        const xSliceSize = [
            ...size
        ];
        xSliceSize[$axis] = s;
        const xSlice = (0, _slice.slice)({
            inputs: {
                x
            },
            attrs: {
                begin,
                size: xSliceSize
            },
            backend
        });
        begin[$axis] += s;
        return xSlice;
    });
}
const splitVConfig = {
    kernelName: (0, _tfjsCore.SplitV),
    backendName: "wasm",
    kernelFunc: splitV
};

},{"@tensorflow/tfjs-core":"2votT","./Slice":"aahzO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aNBTd":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrtConfig", ()=>sqrtConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const sqrtConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Sqrt));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afRG5":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squareConfig", ()=>squareConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const squareConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Square));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1otjw":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "squaredDifferenceConfig", ()=>squaredDifferenceConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = true;
const squaredDifferenceConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.SquaredDifference), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ebylA":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stepConfig", ()=>stepConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmStep;
function setup(backend) {
    wasmStep = backend.wasm.cwrap((0, _tfjsCore.Step), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function step(args) {
    const { backend, inputs, attrs } = args;
    const { alpha } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const out = backend.makeOutput(x.shape, x.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmStep(xId, alpha, (0, _types.CppDType)[x.dtype], outId);
    return out;
}
const stepConfig = {
    kernelName: (0, _tfjsCore.Step),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: step
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ARUo":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stridedSlice", ()=>stridedSlice);
parcelHelpers.export(exports, "stridedSliceConfig", ()=>stridedSliceConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _reshape = require("./Reshape");
var _slice = require("./Slice");
let wasmStridedSlice;
function setup(backend) {
    wasmStridedSlice = backend.wasm.cwrap((0, _tfjsCore.StridedSlice), null, [
        "number",
        "array",
        "number",
        "array",
        "array",
        "array",
        "array",
        "array",
        "number",
        "number"
    ]);
}
function stridedSlice(args) {
    const { backend, inputs, attrs } = args;
    const { x } = inputs;
    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;
    const { finalShapeSparse, finalShape, isIdentity, sliceDim0, isSimpleSlice, begin: $begin, end: $end, strides: $strides } = (0, _tfjsCore.slice_util).sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);
    let result;
    if (isIdentity) // Optimization #1, slice is a no-op plus reshape
    result = (0, _reshape.reshape)({
        inputs: {
            x
        },
        backend,
        attrs: {
            shape: finalShape
        }
    });
    else if (sliceDim0 || isSimpleSlice) {
        // Optimization #2, slice is memory contiguous (only occurs in dim 0)
        (0, _tfjsCore.util).assert(x.shape.length >= 1, ()=>`Input must have rank at least 1, got: ${x.shape.length}`);
        const size = (0, _tfjsCore.slice_util).computeOutShape($begin, $end, $strides);
        // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).
        const sliced = (0, _slice.slice)({
            inputs: {
                x
            },
            backend,
            attrs: {
                begin: $begin,
                size
            }
        });
        result = (0, _reshape.reshape)({
            inputs: {
                x: sliced
            },
            backend,
            attrs: {
                shape: finalShape
            }
        });
        backend.disposeData(sliced.dataId);
    } else {
        const out = backend.makeOutput(finalShapeSparse, "float32");
        const xId = backend.dataIdMap.get(x.dataId).id;
        const xStridesBytes = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(x.shape)).buffer);
        const beginBytes = new Uint8Array(new Int32Array($begin).buffer);
        const endBytes = new Uint8Array(new Int32Array($end).buffer);
        const stridesBytes = new Uint8Array(new Int32Array($strides).buffer);
        const outputShapeBytes = new Uint8Array(new Int32Array(finalShapeSparse).buffer);
        const outStridesBytes = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(finalShapeSparse)).buffer);
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmStridedSlice(xId, xStridesBytes, x.shape.length, beginBytes, endBytes, stridesBytes, outputShapeBytes, outStridesBytes, finalShapeSparse.length, outId);
        result = (0, _reshape.reshape)({
            inputs: {
                x: out
            },
            backend,
            attrs: {
                shape: finalShape
            }
        });
        backend.disposeData(out.dataId);
    }
    return result;
}
const stridedSliceConfig = {
    kernelName: (0, _tfjsCore.StridedSlice),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: stridedSlice
};

},{"@tensorflow/tfjs-core":"2votT","./Reshape":"iRXb9","./Slice":"aahzO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c2J8H":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringNGramsConfig", ()=>stringNGramsConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
function stringNGrams(args) {
    const { backend, inputs, attrs } = args;
    const { data, dataSplits } = inputs;
    const { separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences } = attrs;
    const $data = backend.readSync(data.dataId);
    const $dataSplits = backend.readSync(dataSplits.dataId);
    const [nGrams, nGramsSplits] = (0, _shared.stringNGramsImplCPU)($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);
    const nGramsOut = backend.makeOutput([
        nGrams.length
    ], "string");
    const nGramsOutData = backend.dataIdMap.get(nGramsOut.dataId);
    nGramsOutData.stringBytes = nGrams;
    const nGramsSplitsOut = backend.makeOutput(dataSplits.shape, "int32");
    const nGramsSplitsOutVals = backend.typedArrayFromHeap(nGramsSplitsOut);
    nGramsSplitsOutVals.set(nGramsSplits);
    return [
        nGramsOut,
        nGramsSplitsOut
    ];
}
const stringNGramsConfig = {
    kernelName: (0, _tfjsCore.StringNGrams),
    backendName: "wasm",
    kernelFunc: stringNGrams
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Xo92":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringSplitConfig", ()=>stringSplitConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
function stringSplit(args) {
    const { backend, inputs, attrs } = args;
    const { input, delimiter } = inputs;
    const { skipEmpty } = attrs;
    const inputVals = backend.readSync(input.dataId);
    const delimiterVals = backend.readSync(delimiter.dataId);
    const [indices, values, shape] = (0, _shared.stringSplitImplCPU)(inputVals, delimiterVals[0], skipEmpty);
    const outputSize = values.length;
    const indicesOut = backend.makeOutput([
        outputSize,
        2
    ], "int32");
    const indicesOutVals = backend.typedArrayFromHeap(indicesOut);
    indicesOutVals.set(indices);
    const valuesOut = backend.makeOutput([
        outputSize
    ], "string");
    const valuesOutData = backend.dataIdMap.get(valuesOut.dataId);
    valuesOutData.stringBytes = values;
    const shapeOut = backend.makeOutput([
        2
    ], "int32");
    const shapeOutVals = backend.typedArrayFromHeap(shapeOut);
    shapeOutVals.set(shape);
    return [
        indicesOut,
        valuesOut,
        shapeOut
    ];
}
const stringSplitConfig = {
    kernelName: (0, _tfjsCore.StringSplit),
    backendName: "wasm",
    kernelFunc: stringSplit
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iN7Fc":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringToHashBucketFastConfig", ()=>stringToHashBucketFastConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
function stringToHashBucketFast(args) {
    const { backend, inputs, attrs } = args;
    const { input } = inputs;
    const { numBuckets } = attrs;
    const inputVals = backend.readSync(input.dataId);
    const values = (0, _shared.stringToHashBucketFastImplCPU)(inputVals, numBuckets);
    const out = backend.makeOutput(input.shape, "int32");
    const outVals = backend.typedArrayFromHeap(out);
    outVals.set(values);
    return out;
}
const stringToHashBucketFastConfig = {
    kernelName: (0, _tfjsCore.StringToHashBucketFast),
    backendName: "wasm",
    kernelFunc: stringToHashBucketFast
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvU1T":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subConfig", ()=>subConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _binaryKernel = require("./binary_kernel");
const supportsFullBroadcast = true;
const subConfig = (0, _binaryKernel.createBinaryKernelConfig)((0, _tfjsCore.Sub), supportsFullBroadcast);

},{"@tensorflow/tfjs-core":"2votT","./binary_kernel":"7HbPP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b5j8c":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sumConfig", ()=>sumConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _kernelUtils = require("./kernel_utils");
var _types = require("./types");
let wasmSum;
function setup(backend) {
    wasmSum = backend.wasm.cwrap((0, _tfjsCore.Sum), null, [
        "number",
        "number",
        "number",
        "number"
    ]);
}
function sum(args) {
    const { backend, inputs, attrs } = args;
    const { axis, keepDims } = attrs;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    let inputId = xId;
    let input = x;
    const { transposed, axes, originalAxes, inputWasTransposed } = (0, _kernelUtils.permuteAxesAndTranspose)(x, axis, backend);
    let reductionAxes = axes;
    if (inputWasTransposed) {
        const transposedId = backend.dataIdMap.get(transposed.dataId).id;
        if (transposedId !== xId) {
            // transpose was not a no-op. We will need to dispose of this
            // once we are done.
            input = transposed;
            inputId = transposedId;
            reductionAxes = (0, _tfjsCore.backend_util).getInnerMostAxes(reductionAxes.length, input.shape.length);
        }
    }
    (0, _tfjsCore.backend_util).assertAxesAreInnerMostDims("sum", reductionAxes, input.shape.length);
    const [outShape, reduceShape] = (0, _tfjsCore.backend_util).computeOutAndReduceShapes(input.shape, reductionAxes);
    const reduceSize = (0, _tfjsCore.util).sizeFromShape(reduceShape);
    const out = backend.makeOutput(outShape, input.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(input.shape) !== 0) {
        const outId = backend.dataIdMap.get(out.dataId).id;
        wasmSum(inputId, reduceSize, (0, _types.CppDType)[out.dtype], outId);
    }
    if (inputWasTransposed) // dispose of the transposed tensor.
    backend.disposeData(transposed.dataId);
    if (keepDims) {
        // reshape
        const newShape = (0, _tfjsCore.backend_util).expandShapeToKeepDim(out.shape, originalAxes);
        out.shape = newShape;
    }
    return out;
}
const sumConfig = {
    kernelName: (0, _tfjsCore.Sum),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: sum
};

},{"@tensorflow/tfjs-core":"2votT","./kernel_utils":"h9kCK","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hvkUo":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanConfig", ()=>tanConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const tanConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Tan));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"48W80":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tanhConfig", ()=>tanhConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _unaryKernel = require("./unary_kernel");
const tanhConfig = (0, _unaryKernel.createUnaryKernelConfig)((0, _tfjsCore.Tanh));

},{"@tensorflow/tfjs-core":"2votT","./unary_kernel":"2q58u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJV25":[function(require,module,exports) {
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tensorScatterUpdateConfig", ()=>tensorScatterUpdateConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmTensorScatterUpdate;
function setup(backend) {
    wasmTensorScatterUpdate = backend.wasm.cwrap((0, _tfjsCore.TensorScatterUpdate), null, [
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "array",
        "number",
        "number",
        "number"
    ]);
}
function tensorScatterUpdate(args) {
    const { backend, inputs, attrs } = args;
    const { tensor, indices, updates } = inputs;
    const {} = attrs;
    const out = backend.makeOutput(tensor.shape, tensor.dtype);
    if ((0, _tfjsCore.util).sizeFromShape(tensor.shape) === 0) return out;
    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = (0, _tfjsCore.scatter_util).calculateShapes(updates, indices, tensor.shape);
    const indicesData = backend.dataIdMap.get(indices.dataId);
    const indicesId = indicesData.id;
    const updatesData = backend.dataIdMap.get(updates.dataId);
    const updatesId = updatesData.id;
    const tensorData = backend.dataIdMap.get(tensor.dataId);
    const tensorId = tensorData.id;
    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmTensorScatterUpdate(indicesId, updatesId, (0, _types.CppDType)[updates.dtype], sliceRank, numUpdates, sliceSize, stridesBytes, outputSize, outId, tensorId);
    return out;
}
const tensorScatterUpdateConfig = {
    kernelName: (0, _tfjsCore.TensorScatterUpdate),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: tensorScatterUpdate
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUk4l":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tileConfig", ()=>tileConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmTile;
function setup(backend) {
    wasmTile = backend.wasm.cwrap((0, _tfjsCore.Tile), null, [
        "number",
        "array",
        "number",
        "array",
        "number",
        "number" // out_id
    ]);
}
function tile(args) {
    const { inputs, backend, attrs } = args;
    const { x } = inputs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const { reps } = attrs;
    const newShape = new Array(x.shape.length);
    for(let i = 0; i < newShape.length; i++)newShape[i] = x.shape[i] * reps[i];
    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);
    const newShapeBytes = new Uint8Array(new Int32Array(newShape).buffer);
    const out = backend.makeOutput(newShape, x.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    wasmTile(xId, xShapeBytes, x.shape.length, newShapeBytes, newShape.length, (0, _types.CppDType)[out.dtype], outId);
    return out;
}
const tileConfig = {
    kernelName: (0, _tfjsCore.Tile),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: tile
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Ml7B":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "topk", ()=>topk);
parcelHelpers.export(exports, "topKConfig", ()=>topKConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _types = require("./types");
let wasmTopK;
function setup(backend) {
    wasmTopK = backend.wasm.cwrap((0, _tfjsCore.TopK), null, [
        "number",
        "array",
        "number",
        "number",
        "number",
        "bool",
        "number",
        "number"
    ]);
}
const topk = ({ inputs, backend, attrs })=>{
    const { x } = inputs;
    const { k, sorted } = attrs;
    const xId = backend.dataIdMap.get(x.dataId).id;
    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);
    const outputShape = x.shape.slice();
    outputShape[outputShape.length - 1] = k;
    const outValues = backend.makeOutput(outputShape, x.dtype);
    const outValuesId = backend.dataIdMap.get(outValues.dataId).id;
    const outIndices = backend.makeOutput(outputShape, "int32");
    const outIndicesId = backend.dataIdMap.get(outIndices.dataId).id;
    wasmTopK(xId, xShapeBytes, x.shape.length, (0, _types.CppDType)[x.dtype], k, sorted, outValuesId, outIndicesId);
    return [
        outValues,
        outIndices
    ];
};
const topKConfig = {
    kernelName: (0, _tfjsCore.TopK),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: topk
};

},{"@tensorflow/tfjs-core":"2votT","./types":"bv6GZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dkX2q":[function(require,module,exports) {
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transformConfig", ()=>transformConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
let wasmTransform;
function setup(backend) {
    wasmTransform = backend.wasm.cwrap((0, _tfjsCore.Transform), null, [
        "number",
        "number",
        "bool",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "array",
        "number",
        "array",
        "number",
        "number",
        "number",
        "number",
        "number" // outId
    ]);
}
function transform(args) {
    const { backend, inputs, attrs } = args;
    const { image, transforms } = inputs;
    const { interpolation, fillMode, fillValue, outputShape } = attrs;
    const [batch, imageHeight, imageWidth, numChannels] = image.shape;
    const [outHeight, outWidth] = outputShape != null ? outputShape : [
        imageHeight,
        imageWidth
    ];
    const outShape = [
        batch,
        outHeight,
        outWidth,
        numChannels
    ];
    const inputStrides = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(image.shape)).buffer);
    const outputStrides = new Uint8Array(new Int32Array((0, _tfjsCore.util).computeStrides(outShape)).buffer);
    const out = backend.makeOutput(outShape, image.dtype);
    const outId = backend.dataIdMap.get(out.dataId).id;
    const imageData = backend.dataIdMap.get(image.dataId);
    const imageId = imageData.id;
    const transformsData = backend.dataIdMap.get(transforms.dataId);
    const transformsId = transformsData.id;
    const interpolationModeId = interpolation === "nearest" ? 1 : 2;
    let fillModeId;
    switch(fillMode){
        case "constant":
            fillModeId = 1;
            break;
        case "reflect":
            fillModeId = 2;
            break;
        case "wrap":
            fillModeId = 3;
            break;
        case "nearest":
            fillModeId = 4;
            break;
        default:
            fillModeId = 1;
            break;
    }
    wasmTransform(imageId, transformsId, transforms.shape[0] > 1, batch, outHeight, outWidth, numChannels, imageWidth, imageHeight, inputStrides, image.shape.length - 1, outputStrides, outShape.length - 1, interpolationModeId, fillModeId, fillValue, outId);
    return out;
}
const transformConfig = {
    kernelName: (0, _tfjsCore.Transform),
    backendName: "wasm",
    setupFunc: setup,
    kernelFunc: transform
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eBKRv":[function(require,module,exports) {
/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uniqueConfig", ()=>uniqueConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _shared = require("../kernel_utils/shared");
function unique(args) {
    const { inputs, attrs, backend } = args;
    const { axis } = attrs;
    const { x } = inputs;
    const { outputValues, outputShape, indices } = (0, _shared.uniqueImplCPU)(backend.readSync(x.dataId), axis, x.shape, x.dtype);
    return [
        backend.makeOutput(outputShape, x.dtype, /*memoryOffset=*/ undefined, outputValues),
        backend.makeOutput([
            indices.length
        ], "int32", /*memoryOffset=*/ undefined, indices)
    ];
}
const uniqueConfig = {
    kernelName: (0, _tfjsCore.Unique),
    backendName: "wasm",
    kernelFunc: unique
};

},{"@tensorflow/tfjs-core":"2votT","../kernel_utils/shared":"hqi3L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9FbYb":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unpackConfig", ()=>unpackConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
var _slice = require("./Slice");
function unpack(args) {
    const { inputs, backend, attrs } = args;
    const { value } = inputs;
    let { axis } = attrs;
    if (axis < 0) axis += value.shape.length;
    const numOutputs = value.shape[axis];
    const rank = value.shape.length;
    const outShape = new Array(rank - 1);
    let outIndex = 0;
    for(let i = 0; i < rank; i++)if (i !== axis) outShape[outIndex++] = value.shape[i];
    const outs = new Array(numOutputs);
    const begin = new Array(rank).fill(0);
    const size = value.shape.slice();
    size[axis] = 1;
    for(let i = 0; i < outs.length; i++){
        begin[axis] = i;
        outs[i] = (0, _slice.slice)({
            inputs: {
                x: value
            },
            attrs: {
                begin,
                size
            },
            backend
        });
    }
    return outs.map(({ dataId, dtype })=>({
            dataId,
            dtype,
            shape: outShape
        }));
}
const unpackConfig = {
    kernelName: (0, _tfjsCore.Unpack),
    backendName: "wasm",
    kernelFunc: unpack
};

},{"@tensorflow/tfjs-core":"2votT","./Slice":"aahzO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3fIMY":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zerosLikeConfig", ()=>zerosLikeConfig);
var _tfjsCore = require("@tensorflow/tfjs-core");
function zerosLike(args) {
    const { inputs: { x }, backend } = args;
    const out = backend.makeOutput(x.shape, x.dtype);
    const outVals = backend.typedArrayFromHeap(out);
    outVals.fill(0);
    return out;
}
const zerosLikeConfig = {
    kernelName: (0, _tfjsCore.ZerosLike),
    backendName: "wasm",
    kernelFunc: zerosLike
};

},{"@tensorflow/tfjs-core":"2votT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3UmgH":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackendWasm", ()=>(0, _backendWasm.BackendWasm));
parcelHelpers.export(exports, "getThreadsCount", ()=>(0, _backendWasm.getThreadsCount));
parcelHelpers.export(exports, "setThreadsCount", ()=>(0, _backendWasm.setThreadsCount));
parcelHelpers.export(exports, "setWasmPath", ()=>(0, _backendWasm.setWasmPath));
parcelHelpers.export(exports, "setWasmPaths", ()=>(0, _backendWasm.setWasmPaths));
parcelHelpers.export(exports, "version_wasm", ()=>(0, _version.version));
var _flagsWasm = require("./flags_wasm");
var _tfjsCore = require("@tensorflow/tfjs-core");
var _backendWasm = require("./backend_wasm");
var _version = require("./version");
const WASM_PRIORITY = 2;
(0, _tfjsCore.registerBackend)("wasm", async ()=>{
    const { wasm } = await (0, _backendWasm.init)();
    return new (0, _backendWasm.BackendWasm)(wasm);
}, WASM_PRIORITY);

},{"./flags_wasm":"gUzDd","@tensorflow/tfjs-core":"2votT","./backend_wasm":"5dO2V","./version":"jRVa9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUzDd":[function(require,module,exports) {
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
const ENV = (0, _tfjsCore.env)();
/**
 * True if SIMD is supported.
 */ // From: https://github.com/GoogleChromeLabs/wasm-feature-detect
ENV.registerFlag("WASM_HAS_SIMD_SUPPORT", async ()=>{
    try {
        // This typed array passed in to WebAssembly.validate is WebAssembly binary
        // code. In this case it is a small program that contains SIMD
        // instructions.
        return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            9,
            1,
            7,
            0,
            65,
            0,
            253,
            15,
            26,
            11
        ]));
    } catch (e) {
        return false;
    }
});
/**
 * True if threads are supported.
 */ // From: https://github.com/GoogleChromeLabs/wasm-feature-detect
ENV.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async ()=>{
    // TODO(annxingyuan): Enable node support once this is resolved:
    // https://github.com/tensorflow/tfjs/issues/3830
    if (ENV.get("IS_NODE")) return false;
    try {
        // Test for transferability of SABs (needed for Firefox)
        // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ
        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
        // This typed array is a WebAssembly program containing threaded
        // instructions.
        return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
        ]));
    } catch (e) {
        return false;
    }
});

},{"@tensorflow/tfjs-core":"2votT"}],"5dO2V":[function(require,module,exports) {
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackendWasm", ()=>BackendWasm);
/**
 * Initializes the wasm module and creates the js <--> wasm bridge.
 *
 * NOTE: We wrap the wasm module in a object with property 'wasm' instead of
 * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested
 * in Chrome 76).
 */ parcelHelpers.export(exports, "init", ()=>init);
/**
 * @deprecated Use `setWasmPaths` instead.
 * Sets the path to the `.wasm` file which will be fetched when the wasm
 * backend is initialized. See
 * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers
 * for more details.
 * @param path wasm file path or url
 * @param usePlatformFetch optional boolean to use platform fetch to download
 *     the wasm file, default to false.
 *
 * @doc {heading: 'Environment', namespace: 'wasm'}
 */ parcelHelpers.export(exports, "setWasmPath", ()=>setWasmPath);
/**
 * Configures the locations of the WASM binaries.
 *
 * ```js
 * setWasmPaths({
 *  'tfjs-backend-wasm.wasm': 'renamed.wasm',
 *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',
 *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'
 * });
 * tf.setBackend('wasm');
 * ```
 *
 * @param prefixOrFileMap This can be either a string or object:
 *  - (string) The path to the directory where the WASM binaries are located.
 *     Note that this prefix will be used to load each binary (vanilla,
 *     SIMD-enabled, threading-enabled, etc.).
 *  - (object) Mapping from names of WASM binaries to custom
 *     full paths specifying the locations of those binaries. This is useful if
 *     your WASM binaries are not all located in the same directory, or if your
 *     WASM binaries have been renamed.
 * @param usePlatformFetch optional boolean to use platform fetch to download
 *     the wasm file, default to false.
 *
 * @doc {heading: 'Environment', namespace: 'wasm'}
 */ parcelHelpers.export(exports, "setWasmPaths", ()=>setWasmPaths);
/** Used in unit tests. */ parcelHelpers.export(exports, "resetWasmPath", ()=>resetWasmPath);
/**
 * Sets the number of threads that will be used by XNNPACK to create
 * threadpool (default to the number of logical CPU cores).
 *
 * This must be called before calling `tf.setBackend('wasm')`.
 */ parcelHelpers.export(exports, "setThreadsCount", ()=>setThreadsCount);
/**
 * Gets the actual threads count that is used by XNNPACK.
 *
 * It is set after the backend is intialized.
 */ parcelHelpers.export(exports, "getThreadsCount", ()=>getThreadsCount);
var _flagsWasm = require("./flags_wasm");
var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsBackendWasmThreadedSimdJs = require("../wasm-out/tfjs-backend-wasm-threaded-simd.js");
// @ts-ignore
var _tfjsBackendWasmThreadedSimdWorkerJs = require("../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js");
var _tfjsBackendWasmJs = require("../wasm-out/tfjs-backend-wasm.js");
// This workaround is required for importing in Node.js without using
// the node bundle (for testing). This would not be necessary if we
// flipped esModuleInterop to true, but we likely can't do that since
// google3 does not use it.
const wasmFactoryThreadedSimd = _tfjsBackendWasmThreadedSimdJs.default || _tfjsBackendWasmThreadedSimdJs;
const wasmFactory = _tfjsBackendWasmJs.default || _tfjsBackendWasmJs;
class BackendWasm extends (0, _tfjsCore.KernelBackend) {
    constructor(wasm){
        super();
        this.wasm = wasm;
        // 0 is reserved for null data ids.
        this.dataIdNextNumber = 1;
        this.wasm.tfjs.initWithThreadsCount(threadsCount);
        actualThreadsCount = this.wasm.tfjs.getThreadsCount();
        this.dataIdMap = new (0, _tfjsCore.DataStorage)(this, (0, _tfjsCore.engine)());
    }
    write(values, shape, dtype) {
        const dataId = {
            id: this.dataIdNextNumber++
        };
        this.move(dataId, values, shape, dtype, 1);
        return dataId;
    }
    numDataIds() {
        return this.dataIdMap.numDataIds();
    }
    async time(f) {
        const start = (0, _tfjsCore.util).now();
        f();
        const kernelMs = (0, _tfjsCore.util).now() - start;
        return {
            kernelMs
        };
    }
    move(dataId, values, shape, dtype, refCount) {
        const id = this.dataIdNextNumber++;
        if (dtype === "string") {
            const stringBytes = values;
            this.dataIdMap.set(dataId, {
                id,
                stringBytes,
                shape,
                dtype,
                memoryOffset: null,
                refCount
            });
            return;
        }
        const size = (0, _tfjsCore.util).sizeFromShape(shape);
        const numBytes = size * (0, _tfjsCore.util).bytesPerElement(dtype);
        // `>>> 0` is needed for above 2GB allocations because wasm._malloc returns
        // a signed int32 instead of an unsigned int32.
        // https://v8.dev/blog/4gb-wasm-memory
        const memoryOffset = this.wasm._malloc(numBytes) >>> 0;
        this.dataIdMap.set(dataId, {
            id,
            memoryOffset,
            shape,
            dtype,
            refCount
        });
        this.wasm.tfjs.registerTensor(id, size, memoryOffset);
        if (values != null) this.wasm.HEAPU8.set(new Uint8Array(values.buffer, values.byteOffset, numBytes), memoryOffset);
    }
    async read(dataId) {
        return this.readSync(dataId);
    }
    readSync(dataId, start, end) {
        const { memoryOffset, dtype, shape, stringBytes } = this.dataIdMap.get(dataId);
        if (dtype === "string") {
            // Slice all elements.
            if ((start == null || start === 0) && (end == null || end >= stringBytes.length)) return stringBytes;
            return stringBytes.slice(start, end);
        }
        start = start || 0;
        end = end || (0, _tfjsCore.util).sizeFromShape(shape);
        const bytesPerElement = (0, _tfjsCore.util).bytesPerElement(dtype);
        const bytes = this.wasm.HEAPU8.slice(memoryOffset + start * bytesPerElement, memoryOffset + end * bytesPerElement);
        return typedArrayFromBuffer(bytes.buffer, dtype);
    }
    /**
     * Dispose the memory if the dataId has 0 refCount. Return true if the memory
     * is released, false otherwise.
     * @param dataId
     * @oaram force Optional, remove the data regardless of refCount
     */ disposeData(dataId, force = false) {
        if (this.dataIdMap.has(dataId)) {
            const data = this.dataIdMap.get(dataId);
            data.refCount--;
            if (!force && data.refCount > 0) return false;
            this.wasm._free(data.memoryOffset);
            this.wasm.tfjs.disposeData(data.id);
            this.dataIdMap.delete(dataId);
        }
        return true;
    }
    /** Return refCount of a `TensorData`. */ refCount(dataId) {
        if (this.dataIdMap.has(dataId)) {
            const tensorData = this.dataIdMap.get(dataId);
            return tensorData.refCount;
        }
        return 0;
    }
    incRef(dataId) {
        const data = this.dataIdMap.get(dataId);
        if (data != null) data.refCount++;
    }
    floatPrecision() {
        return 32;
    }
    // Returns the memory offset of a tensor. Useful for debugging and unit
    // testing.
    getMemoryOffset(dataId) {
        return this.dataIdMap.get(dataId).memoryOffset;
    }
    dispose() {
        this.wasm.tfjs.dispose();
        if ("PThread" in this.wasm) this.wasm.PThread.terminateAllThreads();
        this.wasm = null;
    }
    memory() {
        return {
            unreliable: false
        };
    }
    /**
     * Make a tensor info for the output of an op. If `memoryOffset` is not
     * present, this method allocates memory on the WASM heap. If `memoryOffset`
     * is present, the memory was allocated elsewhere (in c++) and we just record
     * the pointer where that memory lives.
     */ makeOutput(shape, dtype, memoryOffset, values) {
        let dataId;
        if (memoryOffset == null) dataId = this.write(values !== null && values !== void 0 ? values : null, shape, dtype);
        else {
            const id = this.dataIdNextNumber++;
            dataId = {
                id
            };
            this.dataIdMap.set(dataId, {
                id,
                memoryOffset,
                shape,
                dtype,
                refCount: 1
            });
            const size = (0, _tfjsCore.util).sizeFromShape(shape);
            this.wasm.tfjs.registerTensor(id, size, memoryOffset);
        }
        return {
            dataId,
            shape,
            dtype
        };
    }
    typedArrayFromHeap({ shape, dtype, dataId }) {
        const buffer = this.wasm.HEAPU8.buffer;
        const { memoryOffset } = this.dataIdMap.get(dataId);
        const size = (0, _tfjsCore.util).sizeFromShape(shape);
        switch(dtype){
            case "float32":
                return new Float32Array(buffer, memoryOffset, size);
            case "int32":
                return new Int32Array(buffer, memoryOffset, size);
            case "bool":
                return new Uint8Array(buffer, memoryOffset, size);
            default:
                throw new Error(`Unknown dtype ${dtype}`);
        }
    }
}
function createInstantiateWasmFunc(path) {
    // this will be replace by rollup plugin patchWechatWebAssembly in
    // minprogram's output.
    // tslint:disable-next-line:no-any
    return (imports, callback)=>{
        (0, _tfjsCore.util).fetch(path, {
            credentials: "same-origin"
        }).then((response)=>{
            if (!response["ok"]) imports.env.a(`failed to load wasm binary file at '${path}'`);
            response.arrayBuffer().then((binary)=>{
                WebAssembly.instantiate(binary, imports).then((output)=>{
                    callback(output.instance, output.module);
                });
            });
        });
        return {};
    };
}
/**
 * Returns the path of the WASM binary.
 * @param simdSupported whether SIMD is supported
 * @param threadsSupported whether multithreading is supported
 * @param wasmModuleFolder the directory containing the WASM binaries.
 */ function getPathToWasmBinary(simdSupported, threadsSupported, wasmModuleFolder) {
    if (wasmPath != null) // If wasmPath is defined, the user has supplied a full path to
    // the vanilla .wasm binary.
    return wasmPath;
    let path = "tfjs-backend-wasm.wasm";
    if (simdSupported && threadsSupported) path = "tfjs-backend-wasm-threaded-simd.wasm";
    else if (simdSupported) path = "tfjs-backend-wasm-simd.wasm";
    if (wasmFileMap != null) {
        if (wasmFileMap[path] != null) return wasmFileMap[path];
    }
    return wasmModuleFolder + path;
}
async function init() {
    const [simdSupported, threadsSupported] = await Promise.all([
        (0, _tfjsCore.env)().getAsync("WASM_HAS_SIMD_SUPPORT"),
        (0, _tfjsCore.env)().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")
    ]);
    return new Promise((resolve, reject)=>{
        const factoryConfig = {};
        /**
         * This function overrides the Emscripten module locateFile utility.
         * @param path The relative path to the file that needs to be loaded.
         * @param prefix The path to the main JavaScript file's directory.
         */ factoryConfig.locateFile = (path, prefix)=>{
            if (path.endsWith(".worker.js")) {
                // Escape '\n' because Blob will turn it into a newline.
                // There should be a setting for this, but 'endings: "native"' does
                // not seem to work.
                const response = (0, _tfjsBackendWasmThreadedSimdWorkerJs.wasmWorkerContents).replace(/\n/g, "\\n");
                const blob = new Blob([
                    response
                ], {
                    type: "application/javascript"
                });
                return URL.createObjectURL(blob);
            }
            if (path.endsWith(".wasm")) return getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : prefix);
            return prefix + path;
        };
        // Use the instantiateWasm override when system fetch is not available.
        // Reference:
        // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170
        if (customFetch) factoryConfig.instantiateWasm = createInstantiateWasmFunc(getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : ""));
        let initialized = false;
        factoryConfig.onAbort = ()=>{
            if (initialized) // Emscripten already called console.warn so no need to double log.
            return;
            if (initAborted) // Emscripten calls `onAbort` twice, resulting in double error
            // messages.
            return;
            initAborted = true;
            const rejectMsg = "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers";
            reject({
                message: rejectMsg
            });
        };
        let wasm;
        // If `wasmPath` has been defined we must initialize the vanilla module.
        if (threadsSupported && simdSupported && wasmPath == null) {
            factoryConfig.mainScriptUrlOrBlob = new Blob([
                `var WasmBackendModuleThreadedSimd = ` + wasmFactoryThreadedSimd.toString()
            ], {
                type: "text/javascript"
            });
            wasm = wasmFactoryThreadedSimd(factoryConfig);
        } else // The wasmFactory works for both vanilla and SIMD binaries.
        wasm = wasmFactory(factoryConfig);
        // The `wasm` promise will resolve to the WASM module created by
        // the factory, but it might have had errors during creation. Most
        // errors are caught by the onAbort callback defined above.
        // However, some errors, such as those occurring from a
        // failed fetch, result in this promise being rejected. These are
        // caught and re-rejected below.
        wasm.then((module)=>{
            initialized = true;
            initAborted = false;
            const voidReturnType = null;
            // Using the tfjs namespace to avoid conflict with emscripten's API.
            module.tfjs = {
                init: module.cwrap("init", null, []),
                initWithThreadsCount: module.cwrap("init_with_threads_count", null, [
                    "number"
                ]),
                getThreadsCount: module.cwrap("get_threads_count", "number", []),
                registerTensor: module.cwrap("register_tensor", null, [
                    "number",
                    "number",
                    "number"
                ]),
                disposeData: module.cwrap("dispose_data", voidReturnType, [
                    "number"
                ]),
                dispose: module.cwrap("dispose", voidReturnType, [])
            };
            resolve({
                wasm: module
            });
        }).catch(reject);
    });
}
function typedArrayFromBuffer(buffer, dtype) {
    switch(dtype){
        case "float32":
            return new Float32Array(buffer);
        case "int32":
            return new Int32Array(buffer);
        case "bool":
            return new Uint8Array(buffer);
        default:
            throw new Error(`Unknown dtype ${dtype}`);
    }
}
const wasmBinaryNames = [
    "tfjs-backend-wasm.wasm",
    "tfjs-backend-wasm-simd.wasm",
    "tfjs-backend-wasm-threaded-simd.wasm"
];
let wasmPath = null;
let wasmPathPrefix = null;
let wasmFileMap = {};
let initAborted = false;
let customFetch = false;
function setWasmPath(path, usePlatformFetch = false) {
    (0, _tfjsCore.deprecationWarn)("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release.");
    if (initAborted) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
    wasmPath = path;
    customFetch = usePlatformFetch;
}
function setWasmPaths(prefixOrFileMap, usePlatformFetch = false) {
    if (initAborted) throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
    if (typeof prefixOrFileMap === "string") wasmPathPrefix = prefixOrFileMap;
    else {
        wasmFileMap = prefixOrFileMap;
        const missingPaths = wasmBinaryNames.filter((name)=>wasmFileMap[name] == null);
        if (missingPaths.length > 0) throw new Error(`There were no entries found for the following binaries: ` + `${missingPaths.join(",")}. Please either call setWasmPaths with a ` + `map providing a path for each binary, or with a string indicating ` + `the directory where all the binaries can be found.`);
    }
    customFetch = usePlatformFetch;
}
function resetWasmPath() {
    wasmPath = null;
    wasmPathPrefix = null;
    wasmFileMap = {};
    customFetch = false;
    initAborted = false;
}
let threadsCount = -1;
let actualThreadsCount = -1;
function setThreadsCount(numThreads) {
    threadsCount = numThreads;
}
function getThreadsCount() {
    if (actualThreadsCount === -1) throw new Error(`WASM backend not initialized.`);
    return actualThreadsCount;
}

},{"./flags_wasm":"gUzDd","@tensorflow/tfjs-core":"2votT","../wasm-out/tfjs-backend-wasm-threaded-simd.js":"h01mP","../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js":"9u7sk","../wasm-out/tfjs-backend-wasm.js":"eeXMg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h01mP":[function(require,module,exports) {
var __filename = "node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm-threaded-simd.js";
var process = require("c97449055ca5d2fc");
var __dirname = "node_modules/@tensorflow/tfjs-backend-wasm/wasm-out";
var global = arguments[3];
var WasmBackendModuleThreadedSimd = (()=>{
    var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : undefined;
    if (typeof __filename !== "undefined") _scriptDir = _scriptDir || __filename;
    return function(WasmBackendModuleThreadedSimd) {
        WasmBackendModuleThreadedSimd = WasmBackendModuleThreadedSimd || {};
        function GROWABLE_HEAP_I8() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAP8;
        }
        function GROWABLE_HEAP_U8() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAPU8;
        }
        function GROWABLE_HEAP_I16() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAP16;
        }
        function GROWABLE_HEAP_I32() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAP32;
        }
        function GROWABLE_HEAP_U32() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAPU32;
        }
        function GROWABLE_HEAP_F32() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAPF32;
        }
        function GROWABLE_HEAP_F64() {
            if (wasmMemory.buffer != buffer) updateGlobalBufferAndViews(wasmMemory.buffer);
            return HEAPF64;
        }
        var Module = typeof WasmBackendModuleThreadedSimd != "undefined" ? WasmBackendModuleThreadedSimd : {};
        var readyPromiseResolve, readyPromiseReject;
        Module["ready"] = new Promise(function(resolve, reject) {
            readyPromiseResolve = resolve;
            readyPromiseReject = reject;
        });
        var beforeListeners;
        if (typeof process !== "undefined" && process.listeners) beforeListeners = {
            uncaughtException: process.listeners("uncaughtException"),
            unhandledRejection: process.listeners("unhandledRejection")
        };
        var moduleOverrides = Object.assign({}, Module);
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = (status, toThrow)=>{
            throw toThrow;
        };
        var ENVIRONMENT_IS_WEB = typeof window == "object";
        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
        var ENVIRONMENT_IS_PTHREAD = Module["ENVIRONMENT_IS_PTHREAD"] || false;
        var scriptDirectory = "";
        function locateFile(path) {
            if (Module["locateFile"]) return Module["locateFile"](path, scriptDirectory);
            return scriptDirectory + path;
        }
        var read_, readAsync, readBinary, setWindowTitle;
        function logExceptionOnExit(e) {
            if (e instanceof ExitStatus) return;
            let toLog = e;
            err("exiting due to exception: " + toLog);
        }
        if (ENVIRONMENT_IS_NODE) {
            var fs = require("9157d0e129178d4c");
            var nodePath = require("d059fbaf750b223d");
            if (ENVIRONMENT_IS_WORKER) scriptDirectory = nodePath.dirname(scriptDirectory) + "/";
            else scriptDirectory = __dirname + "/";
            read_ = (filename, binary)=>{
                filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
                return fs.readFileSync(filename, binary ? undefined : "utf8");
            };
            readBinary = (filename)=>{
                var ret = read_(filename, true);
                if (!ret.buffer) ret = new Uint8Array(ret);
                return ret;
            };
            readAsync = (filename, onload, onerror)=>{
                filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
                fs.readFile(filename, function(err, data) {
                    if (err) onerror(err);
                    else onload(data.buffer);
                });
            };
            if (process["argv"].length > 1) thisProgram = process["argv"][1].replace(/\\/g, "/");
            arguments_ = process["argv"].slice(2);
            process["on"]("uncaughtException", function(ex) {
                if (!(ex instanceof ExitStatus)) throw ex;
            });
            process["on"]("unhandledRejection", function(reason) {
                throw reason;
            });
            quit_ = (status, toThrow)=>{
                if (keepRuntimeAlive()) {
                    process["exitCode"] = status;
                    throw toThrow;
                }
                logExceptionOnExit(toThrow);
                process["exit"](status);
            };
            Module["inspect"] = function() {
                return "[Emscripten Module object]";
            };
            let nodeWorkerThreads;
            try {
                nodeWorkerThreads = require("b824e375529306ca");
            } catch (e) {
                console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?');
                throw e;
            }
            global.Worker = nodeWorkerThreads.Worker;
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) scriptDirectory = self.location.href;
            else if (typeof document != "undefined" && document.currentScript) scriptDirectory = document.currentScript.src;
            if (typeof _scriptDir !== "undefined" && _scriptDir) scriptDirectory = _scriptDir;
            if (scriptDirectory.indexOf("blob:") !== 0) scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
            else scriptDirectory = "";
            if (!ENVIRONMENT_IS_NODE) {
                read_ = (url)=>{
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", url, false);
                    xhr.send(null);
                    return xhr.responseText;
                };
                if (ENVIRONMENT_IS_WORKER) readBinary = (url)=>{
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", url, false);
                    xhr.responseType = "arraybuffer";
                    xhr.send(null);
                    return new Uint8Array(xhr.response);
                };
                readAsync = (url, onload, onerror)=>{
                    var xhr = new XMLHttpRequest;
                    xhr.open("GET", url, true);
                    xhr.responseType = "arraybuffer";
                    xhr.onload = ()=>{
                        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                            onload(xhr.response);
                            return;
                        }
                        onerror();
                    };
                    xhr.onerror = onerror;
                    xhr.send(null);
                };
            }
            setWindowTitle = (title)=>document.title = title;
        }
        if (ENVIRONMENT_IS_NODE) {
            if (typeof performance == "undefined") global.performance = require("61c738ede5584793").performance;
        }
        var defaultPrint = console.log.bind(console);
        var defaultPrintErr = console.warn.bind(console);
        if (ENVIRONMENT_IS_NODE) {
            defaultPrint = (str)=>fs.writeSync(1, str + "\n");
            defaultPrintErr = (str)=>fs.writeSync(2, str + "\n");
        }
        var out = Module["print"] || defaultPrint;
        var err = Module["printErr"] || defaultPrintErr;
        Object.assign(Module, moduleOverrides);
        moduleOverrides = null;
        if (Module["arguments"]) arguments_ = Module["arguments"];
        if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
        if (Module["quit"]) quit_ = Module["quit"];
        var POINTER_SIZE = 4;
        var Atomics_load = Atomics.load;
        var Atomics_store = Atomics.store;
        var Atomics_compareExchange = Atomics.compareExchange;
        var wasmBinary;
        if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
        var noExitRuntime = Module["noExitRuntime"] || true;
        if (typeof WebAssembly != "object") abort("no native wasm support detected");
        var wasmMemory;
        var wasmModule;
        var ABORT = false;
        var EXITSTATUS;
        function assert(condition, text) {
            if (!condition) abort(text);
        }
        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
        function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
            idx >>>= 0;
            var endIdx = idx + maxBytesToRead;
            var endPtr = idx;
            while(heapOrArray[endPtr] && !(endPtr >= endIdx))++endPtr;
            if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) return UTF8Decoder.decode(heapOrArray.buffer instanceof SharedArrayBuffer ? heapOrArray.slice(idx, endPtr) : heapOrArray.subarray(idx, endPtr));
            var str = "";
            while(idx < endPtr){
                var u0 = heapOrArray[idx++];
                if (!(u0 & 128)) {
                    str += String.fromCharCode(u0);
                    continue;
                }
                var u1 = heapOrArray[idx++] & 63;
                if ((u0 & 224) == 192) {
                    str += String.fromCharCode((u0 & 31) << 6 | u1);
                    continue;
                }
                var u2 = heapOrArray[idx++] & 63;
                if ((u0 & 240) == 224) u0 = (u0 & 15) << 12 | u1 << 6 | u2;
                else u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
                if (u0 < 65536) str += String.fromCharCode(u0);
                else {
                    var ch = u0 - 65536;
                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                }
            }
            return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
            ptr >>>= 0;
            return ptr ? UTF8ArrayToString(GROWABLE_HEAP_U8(), ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            outIdx >>>= 0;
            if (!(maxBytesToWrite > 0)) return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for(var i = 0; i < str.length; ++i){
                var u = str.charCodeAt(i);
                if (u >= 55296 && u <= 57343) {
                    var u1 = str.charCodeAt(++i);
                    u = 65536 + ((u & 1023) << 10) | u1 & 1023;
                }
                if (u <= 127) {
                    if (outIdx >= endIdx) break;
                    heap[outIdx++ >>> 0] = u;
                } else if (u <= 2047) {
                    if (outIdx + 1 >= endIdx) break;
                    heap[outIdx++ >>> 0] = 192 | u >> 6;
                    heap[outIdx++ >>> 0] = 128 | u & 63;
                } else if (u <= 65535) {
                    if (outIdx + 2 >= endIdx) break;
                    heap[outIdx++ >>> 0] = 224 | u >> 12;
                    heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
                    heap[outIdx++ >>> 0] = 128 | u & 63;
                } else {
                    if (outIdx + 3 >= endIdx) break;
                    heap[outIdx++ >>> 0] = 240 | u >> 18;
                    heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;
                    heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
                    heap[outIdx++ >>> 0] = 128 | u & 63;
                }
            }
            heap[outIdx >>> 0] = 0;
            return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
            return stringToUTF8Array(str, GROWABLE_HEAP_U8(), outPtr, maxBytesToWrite);
        }
        var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        if (ENVIRONMENT_IS_PTHREAD) buffer = Module["buffer"];
        function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module["HEAP8"] = HEAP8 = new Int8Array(buf);
            Module["HEAP16"] = HEAP16 = new Int16Array(buf);
            Module["HEAP32"] = HEAP32 = new Int32Array(buf);
            Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
            Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
            Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
            Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
            Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
        }
        var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
        if (ENVIRONMENT_IS_PTHREAD) {
            wasmMemory = Module["wasmMemory"];
            buffer = Module["buffer"];
        } else if (Module["wasmMemory"]) wasmMemory = Module["wasmMemory"];
        else {
            wasmMemory = new WebAssembly.Memory({
                "initial": INITIAL_MEMORY / 65536,
                "maximum": 65536,
                "shared": true
            });
            if (!(wasmMemory.buffer instanceof SharedArrayBuffer)) {
                err("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag");
                if (ENVIRONMENT_IS_NODE) err("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)");
                throw Error("bad memory");
            }
        }
        if (wasmMemory) buffer = wasmMemory.buffer;
        INITIAL_MEMORY = buffer.byteLength;
        updateGlobalBufferAndViews(buffer);
        var wasmTable;
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        function keepRuntimeAlive() {
            return noExitRuntime;
        }
        function preRun() {
            if (Module["preRun"]) {
                if (typeof Module["preRun"] == "function") Module["preRun"] = [
                    Module["preRun"]
                ];
                while(Module["preRun"].length)addOnPreRun(Module["preRun"].shift());
            }
            callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
            runtimeInitialized = true;
            if (ENVIRONMENT_IS_PTHREAD) return;
            callRuntimeCallbacks(__ATINIT__);
        }
        function postRun() {
            if (ENVIRONMENT_IS_PTHREAD) return;
            if (Module["postRun"]) {
                if (typeof Module["postRun"] == "function") Module["postRun"] = [
                    Module["postRun"]
                ];
                while(Module["postRun"].length)addOnPostRun(Module["postRun"].shift());
            }
            callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb);
        }
        function addOnInit(cb) {
            __ATINIT__.unshift(cb);
        }
        function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb);
        }
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        function addRunDependency(id) {
            runDependencies++;
            if (Module["monitorRunDependencies"]) Module["monitorRunDependencies"](runDependencies);
        }
        function removeRunDependency(id) {
            runDependencies--;
            if (Module["monitorRunDependencies"]) Module["monitorRunDependencies"](runDependencies);
            if (runDependencies == 0) {
                if (runDependencyWatcher !== null) {
                    clearInterval(runDependencyWatcher);
                    runDependencyWatcher = null;
                }
                if (dependenciesFulfilled) {
                    var callback = dependenciesFulfilled;
                    dependenciesFulfilled = null;
                    callback();
                }
            }
        }
        function abort(what) {
            if (Module["onAbort"]) Module["onAbort"](what);
            what = "Aborted(" + what + ")";
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            what += ". Build with -sASSERTIONS for more info.";
            var e = new WebAssembly.RuntimeError(what);
            readyPromiseReject(e);
            throw e;
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
            return filename.startsWith(dataURIPrefix);
        }
        function isFileURI(filename) {
            return filename.startsWith("file://");
        }
        var wasmBinaryFile;
        wasmBinaryFile = "tfjs-backend-wasm-threaded-simd.wasm";
        if (!isDataURI(wasmBinaryFile)) wasmBinaryFile = locateFile(wasmBinaryFile);
        function getBinary(file) {
            try {
                if (file == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(file);
                throw "both async and sync fetching of the wasm failed";
            } catch (err) {
                abort(err);
            }
        }
        function getBinaryPromise() {
            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
                if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) return fetch(wasmBinaryFile, {
                    credentials: "same-origin"
                }).then(function(response) {
                    if (!response["ok"]) throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                    return response["arrayBuffer"]();
                }).catch(function() {
                    return getBinary(wasmBinaryFile);
                });
                else {
                    if (readAsync) return new Promise(function(resolve, reject) {
                        readAsync(wasmBinaryFile, function(response) {
                            resolve(new Uint8Array(response));
                        }, reject);
                    });
                }
            }
            return Promise.resolve().then(function() {
                return getBinary(wasmBinaryFile);
            });
        }
        function createWasm() {
            var info = {
                "env": asmLibraryArg,
                "wasi_snapshot_preview1": asmLibraryArg
            };
            function receiveInstance(instance, module1) {
                var exports = instance.exports;
                Module["asm"] = exports;
                registerTLSInit(Module["asm"]["_emscripten_tls_init"]);
                wasmTable = Module["asm"]["__indirect_function_table"];
                addOnInit(Module["asm"]["__wasm_call_ctors"]);
                wasmModule = module1;
                if (!ENVIRONMENT_IS_PTHREAD) {
                    var numWorkersToLoad = PThread.unusedWorkers.length;
                    PThread.unusedWorkers.forEach(function(w) {
                        PThread.loadWasmModuleToWorker(w, function() {
                            if (!--numWorkersToLoad) removeRunDependency("wasm-instantiate");
                        });
                    });
                }
            }
            if (!ENVIRONMENT_IS_PTHREAD) addRunDependency("wasm-instantiate");
            function receiveInstantiationResult(result) {
                receiveInstance(result["instance"], result["module"]);
            }
            function instantiateArrayBuffer(receiver) {
                return getBinaryPromise().then(function(binary) {
                    return WebAssembly.instantiate(binary, info);
                }).then(function(instance) {
                    return instance;
                }).then(receiver, function(reason) {
                    err("failed to asynchronously prepare wasm: " + reason);
                    abort(reason);
                });
            }
            function instantiateAsync() {
                if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function") return fetch(wasmBinaryFile, {
                    credentials: "same-origin"
                }).then(function(response) {
                    var result = WebAssembly.instantiateStreaming(response, info);
                    return result.then(receiveInstantiationResult, function(reason) {
                        err("wasm streaming compile failed: " + reason);
                        err("falling back to ArrayBuffer instantiation");
                        return instantiateArrayBuffer(receiveInstantiationResult);
                    });
                });
                else return instantiateArrayBuffer(receiveInstantiationResult);
            }
            if (Module["instantiateWasm"]) try {
                var exports = Module["instantiateWasm"](info, receiveInstance);
                return exports;
            } catch (e) {
                err("Module.instantiateWasm callback failed with error: " + e);
                readyPromiseReject(e);
            }
            instantiateAsync().catch(readyPromiseReject);
            return {};
        }
        var tempDouble;
        var tempI64;
        var ASM_CONSTS = {};
        function ExitStatus(status) {
            this.name = "ExitStatus";
            this.message = "Program terminated with exit(" + status + ")";
            this.status = status;
        }
        function killThread(pthread_ptr) {
            var worker = PThread.pthreads[pthread_ptr];
            delete PThread.pthreads[pthread_ptr];
            worker.terminate();
            __emscripten_thread_free_data(pthread_ptr);
            PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);
            worker.pthread_ptr = 0;
        }
        function cancelThread(pthread_ptr) {
            var worker = PThread.pthreads[pthread_ptr];
            worker.postMessage({
                "cmd": "cancel"
            });
        }
        function cleanupThread(pthread_ptr) {
            var worker = PThread.pthreads[pthread_ptr];
            assert(worker);
            PThread.returnWorkerToPool(worker);
        }
        function spawnThread(threadParams) {
            var worker = PThread.getNewWorker();
            if (!worker) return 6;
            PThread.runningWorkers.push(worker);
            PThread.pthreads[threadParams.pthread_ptr] = worker;
            worker.pthread_ptr = threadParams.pthread_ptr;
            var msg = {
                "cmd": "run",
                "start_routine": threadParams.startRoutine,
                "arg": threadParams.arg,
                "pthread_ptr": threadParams.pthread_ptr
            };
            worker.runPthread = ()=>{
                if (ENVIRONMENT_IS_NODE) worker.ref();
                worker.postMessage(msg, threadParams.transferList);
                delete worker.runPthread;
            };
            if (worker.loaded) worker.runPthread();
            return 0;
        }
        var SYSCALLS = {
            varargs: undefined,
            get: function() {
                SYSCALLS.varargs += 4;
                var ret = GROWABLE_HEAP_I32()[SYSCALLS.varargs - 4 >>> 2];
                return ret;
            },
            getStr: function(ptr) {
                var ret = UTF8ToString(ptr);
                return ret;
            }
        };
        function _proc_exit(code) {
            if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(1, 1, code);
            EXITSTATUS = code;
            if (!keepRuntimeAlive()) {
                PThread.terminateAllThreads();
                if (Module["onExit"]) Module["onExit"](code);
                ABORT = true;
            }
            quit_(code, new ExitStatus(code));
        }
        function exitJS(status, implicit) {
            EXITSTATUS = status;
            if (!implicit) {
                if (ENVIRONMENT_IS_PTHREAD) {
                    exitOnMainThread(status);
                    throw "unwind";
                }
            }
            _proc_exit(status);
        }
        var _exit = exitJS;
        function handleException(e) {
            if (e instanceof ExitStatus || e == "unwind") return EXITSTATUS;
            quit_(1, e);
        }
        var PThread = {
            unusedWorkers: [],
            runningWorkers: [],
            tlsInitFunctions: [],
            pthreads: {},
            init: function() {
                if (ENVIRONMENT_IS_PTHREAD) PThread.initWorker();
                else PThread.initMainThread();
            },
            initMainThread: function() {
                var pthreadPoolSize = 8;
                while(pthreadPoolSize--)PThread.allocateUnusedWorker();
            },
            initWorker: function() {
                noExitRuntime = false;
            },
            setExitStatus: function(status) {
                EXITSTATUS = status;
            },
            terminateAllThreads: function() {
                for (var worker of Object.values(PThread.pthreads))PThread.returnWorkerToPool(worker);
                for (var worker of PThread.unusedWorkers)worker.terminate();
                PThread.unusedWorkers = [];
            },
            returnWorkerToPool: function(worker) {
                var pthread_ptr = worker.pthread_ptr;
                delete PThread.pthreads[pthread_ptr];
                PThread.unusedWorkers.push(worker);
                PThread.runningWorkers.splice(PThread.runningWorkers.indexOf(worker), 1);
                worker.pthread_ptr = 0;
                if (ENVIRONMENT_IS_NODE) worker.unref();
                __emscripten_thread_free_data(pthread_ptr);
            },
            receiveObjectTransfer: function(data) {},
            threadInitTLS: function() {
                PThread.tlsInitFunctions.forEach((f)=>f());
            },
            loadWasmModuleToWorker: function(worker, onFinishedLoading) {
                worker.onmessage = (e)=>{
                    var d = e["data"];
                    var cmd = d["cmd"];
                    if (worker.pthread_ptr) PThread.currentProxiedOperationCallerThread = worker.pthread_ptr;
                    if (d["targetThread"] && d["targetThread"] != _pthread_self()) {
                        var targetWorker = PThread.pthreads[d.targetThread];
                        if (targetWorker) targetWorker.postMessage(d, d["transferList"]);
                        else err('Internal error! Worker sent a message "' + cmd + '" to target pthread ' + d["targetThread"] + ", but that thread no longer exists!");
                        PThread.currentProxiedOperationCallerThread = undefined;
                        return;
                    }
                    if (cmd === "processProxyingQueue") executeNotifiedProxyingQueue(d["queue"]);
                    else if (cmd === "spawnThread") spawnThread(d);
                    else if (cmd === "cleanupThread") cleanupThread(d["thread"]);
                    else if (cmd === "killThread") killThread(d["thread"]);
                    else if (cmd === "cancelThread") cancelThread(d["thread"]);
                    else if (cmd === "loaded") {
                        worker.loaded = true;
                        if (ENVIRONMENT_IS_NODE) worker.unref();
                        if (onFinishedLoading) onFinishedLoading(worker);
                        if (worker.runPthread) worker.runPthread();
                    } else if (cmd === "print") out("Thread " + d["threadId"] + ": " + d["text"]);
                    else if (cmd === "printErr") err("Thread " + d["threadId"] + ": " + d["text"]);
                    else if (cmd === "alert") alert("Thread " + d["threadId"] + ": " + d["text"]);
                    else if (d.target === "setimmediate") worker.postMessage(d);
                    else if (cmd === "callHandler") Module[d["handler"]](...d["args"]);
                    else if (cmd) err("worker sent an unknown command " + cmd);
                    PThread.currentProxiedOperationCallerThread = undefined;
                };
                worker.onerror = (e)=>{
                    var message = "worker sent an error!";
                    err(message + " " + e.filename + ":" + e.lineno + ": " + e.message);
                    throw e;
                };
                if (ENVIRONMENT_IS_NODE) {
                    worker.on("message", function(data) {
                        worker.onmessage({
                            data: data
                        });
                    });
                    worker.on("error", function(e) {
                        worker.onerror(e);
                    });
                    worker.on("detachedExit", function() {});
                }
                var handlers = [];
                var knownHandlers = [
                    "onExit",
                    "onAbort",
                    "print",
                    "printErr"
                ];
                for (var handler of knownHandlers)if (Module.hasOwnProperty(handler)) handlers.push(handler);
                worker.postMessage({
                    "cmd": "load",
                    "handlers": handlers,
                    "urlOrBlob": Module["mainScriptUrlOrBlob"] || _scriptDir,
                    "wasmMemory": wasmMemory,
                    "wasmModule": wasmModule
                });
            },
            allocateUnusedWorker: function() {
                var worker;
                var pthreadMainJs = locateFile("tfjs-backend-wasm-threaded-simd.worker.js");
                worker = new Worker(pthreadMainJs);
                PThread.unusedWorkers.push(worker);
            },
            getNewWorker: function() {
                if (PThread.unusedWorkers.length == 0) {
                    PThread.allocateUnusedWorker();
                    PThread.loadWasmModuleToWorker(PThread.unusedWorkers[0]);
                }
                return PThread.unusedWorkers.pop();
            }
        };
        Module["PThread"] = PThread;
        function callRuntimeCallbacks(callbacks) {
            while(callbacks.length > 0)callbacks.shift()(Module);
        }
        function establishStackSpace() {
            var pthread_ptr = _pthread_self();
            var stackTop = GROWABLE_HEAP_I32()[pthread_ptr + 52 >>> 2];
            var stackSize = GROWABLE_HEAP_I32()[pthread_ptr + 56 >>> 2];
            var stackMax = stackTop - stackSize;
            _emscripten_stack_set_limits(stackTop, stackMax);
            stackRestore(stackTop);
        }
        Module["establishStackSpace"] = establishStackSpace;
        function exitOnMainThread(returnCode) {
            if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(2, 0, returnCode);
            try {
                _exit(returnCode);
            } catch (e) {
                handleException(e);
            }
        }
        var wasmTableMirror = [];
        function getWasmTableEntry(funcPtr) {
            var func = wasmTableMirror[funcPtr];
            if (!func) {
                if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
                wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
            }
            return func;
        }
        function invokeEntryPoint(ptr, arg) {
            var result = getWasmTableEntry(ptr)(arg);
            if (keepRuntimeAlive()) PThread.setExitStatus(result);
            else __emscripten_thread_exit(result);
        }
        Module["invokeEntryPoint"] = invokeEntryPoint;
        function registerTLSInit(tlsInitFunc) {
            PThread.tlsInitFunctions.push(tlsInitFunc);
        }
        function ___emscripten_init_main_thread_js(tb) {
            __emscripten_thread_init(tb, !ENVIRONMENT_IS_WORKER, 1, !ENVIRONMENT_IS_WEB);
            PThread.threadInitTLS();
        }
        function ___emscripten_thread_cleanup(thread) {
            if (!ENVIRONMENT_IS_PTHREAD) cleanupThread(thread);
            else postMessage({
                "cmd": "cleanupThread",
                "thread": thread
            });
        }
        function pthreadCreateProxied(pthread_ptr, attr, startRoutine, arg) {
            if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(3, 1, pthread_ptr, attr, startRoutine, arg);
            return ___pthread_create_js(pthread_ptr, attr, startRoutine, arg);
        }
        function ___pthread_create_js(pthread_ptr, attr, startRoutine, arg) {
            if (typeof SharedArrayBuffer == "undefined") {
                err("Current environment does not support SharedArrayBuffer, pthreads are not available!");
                return 6;
            }
            var transferList = [];
            var error = 0;
            if (ENVIRONMENT_IS_PTHREAD && (transferList.length === 0 || error)) return pthreadCreateProxied(pthread_ptr, attr, startRoutine, arg);
            if (error) return error;
            var threadParams = {
                startRoutine: startRoutine,
                pthread_ptr: pthread_ptr,
                arg: arg,
                transferList: transferList
            };
            if (ENVIRONMENT_IS_PTHREAD) {
                threadParams.cmd = "spawnThread";
                postMessage(threadParams, transferList);
                return 0;
            }
            return spawnThread(threadParams);
        }
        function __emscripten_default_pthread_stack_size() {
            return 65536;
        }
        var nowIsMonotonic = true;
        function __emscripten_get_now_is_monotonic() {
            return nowIsMonotonic;
        }
        function executeNotifiedProxyingQueue(queue) {
            Atomics.store(GROWABLE_HEAP_I32(), queue >> 2, 1);
            if (_pthread_self()) __emscripten_proxy_execute_task_queue(queue);
            Atomics.compareExchange(GROWABLE_HEAP_I32(), queue >> 2, 1, 0);
        }
        Module["executeNotifiedProxyingQueue"] = executeNotifiedProxyingQueue;
        function __emscripten_notify_task_queue(targetThreadId, currThreadId, mainThreadId, queue) {
            if (targetThreadId == currThreadId) setTimeout(()=>executeNotifiedProxyingQueue(queue));
            else if (ENVIRONMENT_IS_PTHREAD) postMessage({
                "targetThread": targetThreadId,
                "cmd": "processProxyingQueue",
                "queue": queue
            });
            else {
                var worker = PThread.pthreads[targetThreadId];
                if (!worker) return;
                worker.postMessage({
                    "cmd": "processProxyingQueue",
                    "queue": queue
                });
            }
            return 1;
        }
        function __emscripten_set_offscreencanvas_size(target, width, height) {
            return -1;
        }
        function _abort() {
            abort("");
        }
        function warnOnce(text) {
            if (!warnOnce.shown) warnOnce.shown = {};
            if (!warnOnce.shown[text]) {
                warnOnce.shown[text] = 1;
                if (ENVIRONMENT_IS_NODE) text = "warning: " + text;
                err(text);
            }
        }
        function _emscripten_check_blocking_allowed() {
            if (ENVIRONMENT_IS_NODE) return;
            if (ENVIRONMENT_IS_WORKER) return;
            warnOnce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
        }
        function _emscripten_date_now() {
            return Date.now();
        }
        function getHeapMax() {
            return 4294901760;
        }
        function _emscripten_get_heap_max() {
            return getHeapMax();
        }
        var _emscripten_get_now;
        if (ENVIRONMENT_IS_NODE) _emscripten_get_now = ()=>{
            var t = process["hrtime"]();
            return t[0] * 1e3 + t[1] / 1e6;
        };
        else _emscripten_get_now = ()=>performance.timeOrigin + performance.now();
        function _emscripten_memcpy_big(dest, src, num) {
            GROWABLE_HEAP_U8().copyWithin(dest >>> 0, src >>> 0, src + num >>> 0);
        }
        function _emscripten_num_logical_cores() {
            if (ENVIRONMENT_IS_NODE) return require("1a28a111b649188c").cpus().length;
            return navigator["hardwareConcurrency"];
        }
        function withStackSave(f) {
            var stack = stackSave();
            var ret = f();
            stackRestore(stack);
            return ret;
        }
        function _emscripten_proxy_to_main_thread_js(index, sync) {
            var numCallArgs = arguments.length - 2;
            var outerArgs = arguments;
            return withStackSave(()=>{
                var serializedNumCallArgs = numCallArgs;
                var args = stackAlloc(serializedNumCallArgs * 8);
                var b = args >> 3;
                for(var i = 0; i < numCallArgs; i++){
                    var arg = outerArgs[2 + i];
                    GROWABLE_HEAP_F64()[b + i >>> 0] = arg;
                }
                return _emscripten_run_in_main_runtime_thread_js(index, serializedNumCallArgs, args, sync);
            });
        }
        var _emscripten_receive_on_main_thread_js_callArgs = [];
        function _emscripten_receive_on_main_thread_js(index, numCallArgs, args) {
            _emscripten_receive_on_main_thread_js_callArgs.length = numCallArgs;
            var b = args >> 3;
            for(var i = 0; i < numCallArgs; i++)_emscripten_receive_on_main_thread_js_callArgs[i] = GROWABLE_HEAP_F64()[b + i >>> 0];
            var isEmAsmConst = index < 0;
            var func = !isEmAsmConst ? proxiedFunctionTable[index] : ASM_CONSTS[-index - 1];
            return func.apply(null, _emscripten_receive_on_main_thread_js_callArgs);
        }
        function emscripten_realloc_buffer(size) {
            try {
                wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
                updateGlobalBufferAndViews(wasmMemory.buffer);
                return 1;
            } catch (e) {}
        }
        function _emscripten_resize_heap(requestedSize) {
            var oldSize = GROWABLE_HEAP_U8().length;
            requestedSize = requestedSize >>> 0;
            if (requestedSize <= oldSize) return false;
            var maxHeapSize = getHeapMax();
            if (requestedSize > maxHeapSize) return false;
            let alignUp = (x, multiple)=>x + (multiple - x % multiple) % multiple;
            for(var cutDown = 1; cutDown <= 4; cutDown *= 2){
                var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
                overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
                var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
                var replacement = emscripten_realloc_buffer(newSize);
                if (replacement) return true;
            }
            return false;
        }
        function _emscripten_unwind_to_js_event_loop() {
            throw "unwind";
        }
        function _fd_close(fd) {
            if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(4, 1, fd);
            return 52;
        }
        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
            if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(5, 1, fd, offset_low, offset_high, whence, newOffset);
            return 70;
        }
        var printCharBuffers = [
            null,
            [],
            []
        ];
        function printChar(stream, curr) {
            var buffer = printCharBuffers[stream];
            if (curr === 0 || curr === 10) {
                (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
                buffer.length = 0;
            } else buffer.push(curr);
        }
        function _fd_write(fd, iov, iovcnt, pnum) {
            if (ENVIRONMENT_IS_PTHREAD) return _emscripten_proxy_to_main_thread_js(6, 1, fd, iov, iovcnt, pnum);
            var num = 0;
            for(var i = 0; i < iovcnt; i++){
                var ptr = GROWABLE_HEAP_U32()[iov >>> 2];
                var len = GROWABLE_HEAP_U32()[iov + 4 >>> 2];
                iov += 8;
                for(var j = 0; j < len; j++)printChar(fd, GROWABLE_HEAP_U8()[ptr + j >>> 0]);
                num += len;
            }
            GROWABLE_HEAP_U32()[pnum >>> 2] = num;
            return 0;
        }
        function getCFunc(ident) {
            var func = Module["_" + ident];
            return func;
        }
        function writeArrayToMemory(array, buffer) {
            GROWABLE_HEAP_I8().set(array, buffer >>> 0);
        }
        function ccall(ident, returnType, argTypes, args, opts) {
            var toC = {
                "string": (str)=>{
                    var ret = 0;
                    if (str !== null && str !== undefined && str !== 0) {
                        var len = (str.length << 2) + 1;
                        ret = stackAlloc(len);
                        stringToUTF8(str, ret, len);
                    }
                    return ret;
                },
                "array": (arr)=>{
                    var ret = stackAlloc(arr.length);
                    writeArrayToMemory(arr, ret);
                    return ret;
                }
            };
            function convertReturnValue(ret) {
                if (returnType === "string") return UTF8ToString(ret);
                if (returnType === "boolean") return Boolean(ret);
                return ret;
            }
            var func = getCFunc(ident);
            var cArgs = [];
            var stack = 0;
            if (args) for(var i = 0; i < args.length; i++){
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0) stack = stackSave();
                    cArgs[i] = converter(args[i]);
                } else cArgs[i] = args[i];
            }
            var ret = func.apply(null, cArgs);
            function onDone(ret) {
                if (stack !== 0) stackRestore(stack);
                return convertReturnValue(ret);
            }
            ret = onDone(ret);
            return ret;
        }
        function cwrap(ident, returnType, argTypes, opts) {
            argTypes = argTypes || [];
            var numericArgs = argTypes.every((type)=>type === "number" || type === "boolean");
            var numericRet = returnType !== "string";
            if (numericRet && numericArgs && !opts) return getCFunc(ident);
            return function() {
                return ccall(ident, returnType, argTypes, arguments, opts);
            };
        }
        PThread.init();
        var proxiedFunctionTable = [
            null,
            _proc_exit,
            exitOnMainThread,
            pthreadCreateProxied,
            _fd_close,
            _fd_seek,
            _fd_write
        ];
        var asmLibraryArg = {
            "__emscripten_init_main_thread_js": ___emscripten_init_main_thread_js,
            "__emscripten_thread_cleanup": ___emscripten_thread_cleanup,
            "__pthread_create_js": ___pthread_create_js,
            "_emscripten_default_pthread_stack_size": __emscripten_default_pthread_stack_size,
            "_emscripten_get_now_is_monotonic": __emscripten_get_now_is_monotonic,
            "_emscripten_notify_task_queue": __emscripten_notify_task_queue,
            "_emscripten_set_offscreencanvas_size": __emscripten_set_offscreencanvas_size,
            "abort": _abort,
            "emscripten_check_blocking_allowed": _emscripten_check_blocking_allowed,
            "emscripten_date_now": _emscripten_date_now,
            "emscripten_get_heap_max": _emscripten_get_heap_max,
            "emscripten_get_now": _emscripten_get_now,
            "emscripten_memcpy_big": _emscripten_memcpy_big,
            "emscripten_num_logical_cores": _emscripten_num_logical_cores,
            "emscripten_receive_on_main_thread_js": _emscripten_receive_on_main_thread_js,
            "emscripten_resize_heap": _emscripten_resize_heap,
            "emscripten_unwind_to_js_event_loop": _emscripten_unwind_to_js_event_loop,
            "exit": _exit,
            "fd_close": _fd_close,
            "fd_seek": _fd_seek,
            "fd_write": _fd_write,
            "memory": wasmMemory || Module["wasmMemory"]
        };
        var asm = createWasm();
        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
            return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
        };
        var _init = Module["_init"] = function() {
            return (_init = Module["_init"] = Module["asm"]["init"]).apply(null, arguments);
        };
        var _init_with_threads_count = Module["_init_with_threads_count"] = function() {
            return (_init_with_threads_count = Module["_init_with_threads_count"] = Module["asm"]["init_with_threads_count"]).apply(null, arguments);
        };
        var _get_threads_count = Module["_get_threads_count"] = function() {
            return (_get_threads_count = Module["_get_threads_count"] = Module["asm"]["get_threads_count"]).apply(null, arguments);
        };
        var _register_tensor = Module["_register_tensor"] = function() {
            return (_register_tensor = Module["_register_tensor"] = Module["asm"]["register_tensor"]).apply(null, arguments);
        };
        var _dispose_data = Module["_dispose_data"] = function() {
            return (_dispose_data = Module["_dispose_data"] = Module["asm"]["dispose_data"]).apply(null, arguments);
        };
        var _dispose = Module["_dispose"] = function() {
            return (_dispose = Module["_dispose"] = Module["asm"]["dispose"]).apply(null, arguments);
        };
        var _Abs = Module["_Abs"] = function() {
            return (_Abs = Module["_Abs"] = Module["asm"]["Abs"]).apply(null, arguments);
        };
        var _Acos = Module["_Acos"] = function() {
            return (_Acos = Module["_Acos"] = Module["asm"]["Acos"]).apply(null, arguments);
        };
        var _Acosh = Module["_Acosh"] = function() {
            return (_Acosh = Module["_Acosh"] = Module["asm"]["Acosh"]).apply(null, arguments);
        };
        var _Add = Module["_Add"] = function() {
            return (_Add = Module["_Add"] = Module["asm"]["Add"]).apply(null, arguments);
        };
        var _AddN = Module["_AddN"] = function() {
            return (_AddN = Module["_AddN"] = Module["asm"]["AddN"]).apply(null, arguments);
        };
        var _All = Module["_All"] = function() {
            return (_All = Module["_All"] = Module["asm"]["All"]).apply(null, arguments);
        };
        var _Any = Module["_Any"] = function() {
            return (_Any = Module["_Any"] = Module["asm"]["Any"]).apply(null, arguments);
        };
        var _ArgMax = Module["_ArgMax"] = function() {
            return (_ArgMax = Module["_ArgMax"] = Module["asm"]["ArgMax"]).apply(null, arguments);
        };
        var _ArgMin = Module["_ArgMin"] = function() {
            return (_ArgMin = Module["_ArgMin"] = Module["asm"]["ArgMin"]).apply(null, arguments);
        };
        var _Asin = Module["_Asin"] = function() {
            return (_Asin = Module["_Asin"] = Module["asm"]["Asin"]).apply(null, arguments);
        };
        var _Asinh = Module["_Asinh"] = function() {
            return (_Asinh = Module["_Asinh"] = Module["asm"]["Asinh"]).apply(null, arguments);
        };
        var _Atan = Module["_Atan"] = function() {
            return (_Atan = Module["_Atan"] = Module["asm"]["Atan"]).apply(null, arguments);
        };
        var _Atan2 = Module["_Atan2"] = function() {
            return (_Atan2 = Module["_Atan2"] = Module["asm"]["Atan2"]).apply(null, arguments);
        };
        var _Atanh = Module["_Atanh"] = function() {
            return (_Atanh = Module["_Atanh"] = Module["asm"]["Atanh"]).apply(null, arguments);
        };
        var _AvgPool = Module["_AvgPool"] = function() {
            return (_AvgPool = Module["_AvgPool"] = Module["asm"]["AvgPool"]).apply(null, arguments);
        };
        var _AvgPool3D = Module["_AvgPool3D"] = function() {
            return (_AvgPool3D = Module["_AvgPool3D"] = Module["asm"]["AvgPool3D"]).apply(null, arguments);
        };
        var _AvgPool3DGrad = Module["_AvgPool3DGrad"] = function() {
            return (_AvgPool3DGrad = Module["_AvgPool3DGrad"] = Module["asm"]["AvgPool3DGrad"]).apply(null, arguments);
        };
        var _AvgPoolGrad = Module["_AvgPoolGrad"] = function() {
            return (_AvgPoolGrad = Module["_AvgPoolGrad"] = Module["asm"]["AvgPoolGrad"]).apply(null, arguments);
        };
        var _BatchMatMul = Module["_BatchMatMul"] = function() {
            return (_BatchMatMul = Module["_BatchMatMul"] = Module["asm"]["BatchMatMul"]).apply(null, arguments);
        };
        var _Bincount = Module["_Bincount"] = function() {
            return (_Bincount = Module["_Bincount"] = Module["asm"]["Bincount"]).apply(null, arguments);
        };
        var _BitwiseAnd = Module["_BitwiseAnd"] = function() {
            return (_BitwiseAnd = Module["_BitwiseAnd"] = Module["asm"]["BitwiseAnd"]).apply(null, arguments);
        };
        var _Ceil = Module["_Ceil"] = function() {
            return (_Ceil = Module["_Ceil"] = Module["asm"]["Ceil"]).apply(null, arguments);
        };
        var _ClipByValue = Module["_ClipByValue"] = function() {
            return (_ClipByValue = Module["_ClipByValue"] = Module["asm"]["ClipByValue"]).apply(null, arguments);
        };
        var _Conv2D = Module["_Conv2D"] = function() {
            return (_Conv2D = Module["_Conv2D"] = Module["asm"]["Conv2D"]).apply(null, arguments);
        };
        var _Conv2DBackpropInput = Module["_Conv2DBackpropInput"] = function() {
            return (_Conv2DBackpropInput = Module["_Conv2DBackpropInput"] = Module["asm"]["Conv2DBackpropInput"]).apply(null, arguments);
        };
        var _Conv3D = Module["_Conv3D"] = function() {
            return (_Conv3D = Module["_Conv3D"] = Module["asm"]["Conv3D"]).apply(null, arguments);
        };
        var _Conv3DBackpropFilterV2 = Module["_Conv3DBackpropFilterV2"] = function() {
            return (_Conv3DBackpropFilterV2 = Module["_Conv3DBackpropFilterV2"] = Module["asm"]["Conv3DBackpropFilterV2"]).apply(null, arguments);
        };
        var _Conv3DBackpropInputV2 = Module["_Conv3DBackpropInputV2"] = function() {
            return (_Conv3DBackpropInputV2 = Module["_Conv3DBackpropInputV2"] = Module["asm"]["Conv3DBackpropInputV2"]).apply(null, arguments);
        };
        var _Cos = Module["_Cos"] = function() {
            return (_Cos = Module["_Cos"] = Module["asm"]["Cos"]).apply(null, arguments);
        };
        var _Cosh = Module["_Cosh"] = function() {
            return (_Cosh = Module["_Cosh"] = Module["asm"]["Cosh"]).apply(null, arguments);
        };
        var _CropAndResize = Module["_CropAndResize"] = function() {
            return (_CropAndResize = Module["_CropAndResize"] = Module["asm"]["CropAndResize"]).apply(null, arguments);
        };
        var _Cumprod = Module["_Cumprod"] = function() {
            return (_Cumprod = Module["_Cumprod"] = Module["asm"]["Cumprod"]).apply(null, arguments);
        };
        var _Cumsum = Module["_Cumsum"] = function() {
            return (_Cumsum = Module["_Cumsum"] = Module["asm"]["Cumsum"]).apply(null, arguments);
        };
        var _DenseBincount = Module["_DenseBincount"] = function() {
            return (_DenseBincount = Module["_DenseBincount"] = Module["asm"]["DenseBincount"]).apply(null, arguments);
        };
        var _DepthToSpace = Module["_DepthToSpace"] = function() {
            return (_DepthToSpace = Module["_DepthToSpace"] = Module["asm"]["DepthToSpace"]).apply(null, arguments);
        };
        var _DepthwiseConv2dNative = Module["_DepthwiseConv2dNative"] = function() {
            return (_DepthwiseConv2dNative = Module["_DepthwiseConv2dNative"] = Module["asm"]["DepthwiseConv2dNative"]).apply(null, arguments);
        };
        var _Diag = Module["_Diag"] = function() {
            return (_Diag = Module["_Diag"] = Module["asm"]["Diag"]).apply(null, arguments);
        };
        var _Dilation2D = Module["_Dilation2D"] = function() {
            return (_Dilation2D = Module["_Dilation2D"] = Module["asm"]["Dilation2D"]).apply(null, arguments);
        };
        var _Dilation2DBackpropFilter = Module["_Dilation2DBackpropFilter"] = function() {
            return (_Dilation2DBackpropFilter = Module["_Dilation2DBackpropFilter"] = Module["asm"]["Dilation2DBackpropFilter"]).apply(null, arguments);
        };
        var _Dilation2DBackpropInput = Module["_Dilation2DBackpropInput"] = function() {
            return (_Dilation2DBackpropInput = Module["_Dilation2DBackpropInput"] = Module["asm"]["Dilation2DBackpropInput"]).apply(null, arguments);
        };
        var _Elu = Module["_Elu"] = function() {
            return (_Elu = Module["_Elu"] = Module["asm"]["Elu"]).apply(null, arguments);
        };
        var _EluGrad = Module["_EluGrad"] = function() {
            return (_EluGrad = Module["_EluGrad"] = Module["asm"]["EluGrad"]).apply(null, arguments);
        };
        var _Equal = Module["_Equal"] = function() {
            return (_Equal = Module["_Equal"] = Module["asm"]["Equal"]).apply(null, arguments);
        };
        var _Erf = Module["_Erf"] = function() {
            return (_Erf = Module["_Erf"] = Module["asm"]["Erf"]).apply(null, arguments);
        };
        var _Exp = Module["_Exp"] = function() {
            return (_Exp = Module["_Exp"] = Module["asm"]["Exp"]).apply(null, arguments);
        };
        var _Expm1 = Module["_Expm1"] = function() {
            return (_Expm1 = Module["_Expm1"] = Module["asm"]["Expm1"]).apply(null, arguments);
        };
        var _FlipLeftRight = Module["_FlipLeftRight"] = function() {
            return (_FlipLeftRight = Module["_FlipLeftRight"] = Module["asm"]["FlipLeftRight"]).apply(null, arguments);
        };
        var _Floor = Module["_Floor"] = function() {
            return (_Floor = Module["_Floor"] = Module["asm"]["Floor"]).apply(null, arguments);
        };
        var _FloorDiv = Module["_FloorDiv"] = function() {
            return (_FloorDiv = Module["_FloorDiv"] = Module["asm"]["FloorDiv"]).apply(null, arguments);
        };
        var _FusedBatchNorm = Module["_FusedBatchNorm"] = function() {
            return (_FusedBatchNorm = Module["_FusedBatchNorm"] = Module["asm"]["FusedBatchNorm"]).apply(null, arguments);
        };
        var _FusedConv2D = Module["_FusedConv2D"] = function() {
            return (_FusedConv2D = Module["_FusedConv2D"] = Module["asm"]["FusedConv2D"]).apply(null, arguments);
        };
        var _FusedDepthwiseConv2D = Module["_FusedDepthwiseConv2D"] = function() {
            return (_FusedDepthwiseConv2D = Module["_FusedDepthwiseConv2D"] = Module["asm"]["FusedDepthwiseConv2D"]).apply(null, arguments);
        };
        var _Gather = Module["_Gather"] = function() {
            return (_Gather = Module["_Gather"] = Module["asm"]["Gather"]).apply(null, arguments);
        };
        var _GatherNd = Module["_GatherNd"] = function() {
            return (_GatherNd = Module["_GatherNd"] = Module["asm"]["GatherNd"]).apply(null, arguments);
        };
        var _Greater = Module["_Greater"] = function() {
            return (_Greater = Module["_Greater"] = Module["asm"]["Greater"]).apply(null, arguments);
        };
        var _GreaterEqual = Module["_GreaterEqual"] = function() {
            return (_GreaterEqual = Module["_GreaterEqual"] = Module["asm"]["GreaterEqual"]).apply(null, arguments);
        };
        var _IsFinite = Module["_IsFinite"] = function() {
            return (_IsFinite = Module["_IsFinite"] = Module["asm"]["IsFinite"]).apply(null, arguments);
        };
        var _IsInf = Module["_IsInf"] = function() {
            return (_IsInf = Module["_IsInf"] = Module["asm"]["IsInf"]).apply(null, arguments);
        };
        var _IsNan = Module["_IsNan"] = function() {
            return (_IsNan = Module["_IsNan"] = Module["asm"]["IsNan"]).apply(null, arguments);
        };
        var _LRN = Module["_LRN"] = function() {
            return (_LRN = Module["_LRN"] = Module["asm"]["LRN"]).apply(null, arguments);
        };
        var _LRNGrad = Module["_LRNGrad"] = function() {
            return (_LRNGrad = Module["_LRNGrad"] = Module["asm"]["LRNGrad"]).apply(null, arguments);
        };
        var _LeakyRelu = Module["_LeakyRelu"] = function() {
            return (_LeakyRelu = Module["_LeakyRelu"] = Module["asm"]["LeakyRelu"]).apply(null, arguments);
        };
        var _Less = Module["_Less"] = function() {
            return (_Less = Module["_Less"] = Module["asm"]["Less"]).apply(null, arguments);
        };
        var _LessEqual = Module["_LessEqual"] = function() {
            return (_LessEqual = Module["_LessEqual"] = Module["asm"]["LessEqual"]).apply(null, arguments);
        };
        var _LinSpace = Module["_LinSpace"] = function() {
            return (_LinSpace = Module["_LinSpace"] = Module["asm"]["LinSpace"]).apply(null, arguments);
        };
        var _Log = Module["_Log"] = function() {
            return (_Log = Module["_Log"] = Module["asm"]["Log"]).apply(null, arguments);
        };
        var _Log1p = Module["_Log1p"] = function() {
            return (_Log1p = Module["_Log1p"] = Module["asm"]["Log1p"]).apply(null, arguments);
        };
        var _LogicalAnd = Module["_LogicalAnd"] = function() {
            return (_LogicalAnd = Module["_LogicalAnd"] = Module["asm"]["LogicalAnd"]).apply(null, arguments);
        };
        var _LogicalNot = Module["_LogicalNot"] = function() {
            return (_LogicalNot = Module["_LogicalNot"] = Module["asm"]["LogicalNot"]).apply(null, arguments);
        };
        var _LogicalOr = Module["_LogicalOr"] = function() {
            return (_LogicalOr = Module["_LogicalOr"] = Module["asm"]["LogicalOr"]).apply(null, arguments);
        };
        var _LogicalXor = Module["_LogicalXor"] = function() {
            return (_LogicalXor = Module["_LogicalXor"] = Module["asm"]["LogicalXor"]).apply(null, arguments);
        };
        var _Max = Module["_Max"] = function() {
            return (_Max = Module["_Max"] = Module["asm"]["Max"]).apply(null, arguments);
        };
        var _MaxPool = Module["_MaxPool"] = function() {
            return (_MaxPool = Module["_MaxPool"] = Module["asm"]["MaxPool"]).apply(null, arguments);
        };
        var _MaxPool3D = Module["_MaxPool3D"] = function() {
            return (_MaxPool3D = Module["_MaxPool3D"] = Module["asm"]["MaxPool3D"]).apply(null, arguments);
        };
        var _MaxPool3DGrad = Module["_MaxPool3DGrad"] = function() {
            return (_MaxPool3DGrad = Module["_MaxPool3DGrad"] = Module["asm"]["MaxPool3DGrad"]).apply(null, arguments);
        };
        var _MaxPoolGrad = Module["_MaxPoolGrad"] = function() {
            return (_MaxPoolGrad = Module["_MaxPoolGrad"] = Module["asm"]["MaxPoolGrad"]).apply(null, arguments);
        };
        var _MaxPoolWithArgmax = Module["_MaxPoolWithArgmax"] = function() {
            return (_MaxPoolWithArgmax = Module["_MaxPoolWithArgmax"] = Module["asm"]["MaxPoolWithArgmax"]).apply(null, arguments);
        };
        var _Maximum = Module["_Maximum"] = function() {
            return (_Maximum = Module["_Maximum"] = Module["asm"]["Maximum"]).apply(null, arguments);
        };
        var _Mean = Module["_Mean"] = function() {
            return (_Mean = Module["_Mean"] = Module["asm"]["Mean"]).apply(null, arguments);
        };
        var _Min = Module["_Min"] = function() {
            return (_Min = Module["_Min"] = Module["asm"]["Min"]).apply(null, arguments);
        };
        var _Minimum = Module["_Minimum"] = function() {
            return (_Minimum = Module["_Minimum"] = Module["asm"]["Minimum"]).apply(null, arguments);
        };
        var _MirrorPad = Module["_MirrorPad"] = function() {
            return (_MirrorPad = Module["_MirrorPad"] = Module["asm"]["MirrorPad"]).apply(null, arguments);
        };
        var _Mod = Module["_Mod"] = function() {
            return (_Mod = Module["_Mod"] = Module["asm"]["Mod"]).apply(null, arguments);
        };
        var _Multinomial = Module["_Multinomial"] = function() {
            return (_Multinomial = Module["_Multinomial"] = Module["asm"]["Multinomial"]).apply(null, arguments);
        };
        var _Multiply = Module["_Multiply"] = function() {
            return (_Multiply = Module["_Multiply"] = Module["asm"]["Multiply"]).apply(null, arguments);
        };
        var _Neg = Module["_Neg"] = function() {
            return (_Neg = Module["_Neg"] = Module["asm"]["Neg"]).apply(null, arguments);
        };
        var _NonMaxSuppressionV3 = Module["_NonMaxSuppressionV3"] = function() {
            return (_NonMaxSuppressionV3 = Module["_NonMaxSuppressionV3"] = Module["asm"]["NonMaxSuppressionV3"]).apply(null, arguments);
        };
        var _NonMaxSuppressionV4 = Module["_NonMaxSuppressionV4"] = function() {
            return (_NonMaxSuppressionV4 = Module["_NonMaxSuppressionV4"] = Module["asm"]["NonMaxSuppressionV4"]).apply(null, arguments);
        };
        var _NonMaxSuppressionV5 = Module["_NonMaxSuppressionV5"] = function() {
            return (_NonMaxSuppressionV5 = Module["_NonMaxSuppressionV5"] = Module["asm"]["NonMaxSuppressionV5"]).apply(null, arguments);
        };
        var _NotEqual = Module["_NotEqual"] = function() {
            return (_NotEqual = Module["_NotEqual"] = Module["asm"]["NotEqual"]).apply(null, arguments);
        };
        var _OneHot = Module["_OneHot"] = function() {
            return (_OneHot = Module["_OneHot"] = Module["asm"]["OneHot"]).apply(null, arguments);
        };
        var _PadV2 = Module["_PadV2"] = function() {
            return (_PadV2 = Module["_PadV2"] = Module["asm"]["PadV2"]).apply(null, arguments);
        };
        var _Pow = Module["_Pow"] = function() {
            return (_Pow = Module["_Pow"] = Module["asm"]["Pow"]).apply(null, arguments);
        };
        var _Prelu = Module["_Prelu"] = function() {
            return (_Prelu = Module["_Prelu"] = Module["asm"]["Prelu"]).apply(null, arguments);
        };
        var _Prod = Module["_Prod"] = function() {
            return (_Prod = Module["_Prod"] = Module["asm"]["Prod"]).apply(null, arguments);
        };
        var _RealDiv = Module["_RealDiv"] = function() {
            return (_RealDiv = Module["_RealDiv"] = Module["asm"]["RealDiv"]).apply(null, arguments);
        };
        var _Reciprocal = Module["_Reciprocal"] = function() {
            return (_Reciprocal = Module["_Reciprocal"] = Module["asm"]["Reciprocal"]).apply(null, arguments);
        };
        var _Relu = Module["_Relu"] = function() {
            return (_Relu = Module["_Relu"] = Module["asm"]["Relu"]).apply(null, arguments);
        };
        var _Relu6 = Module["_Relu6"] = function() {
            return (_Relu6 = Module["_Relu6"] = Module["asm"]["Relu6"]).apply(null, arguments);
        };
        var _ResizeBilinear = Module["_ResizeBilinear"] = function() {
            return (_ResizeBilinear = Module["_ResizeBilinear"] = Module["asm"]["ResizeBilinear"]).apply(null, arguments);
        };
        var _ResizeBilinearGrad = Module["_ResizeBilinearGrad"] = function() {
            return (_ResizeBilinearGrad = Module["_ResizeBilinearGrad"] = Module["asm"]["ResizeBilinearGrad"]).apply(null, arguments);
        };
        var _ResizeNearestNeighbor = Module["_ResizeNearestNeighbor"] = function() {
            return (_ResizeNearestNeighbor = Module["_ResizeNearestNeighbor"] = Module["asm"]["ResizeNearestNeighbor"]).apply(null, arguments);
        };
        var _ResizeNearestNeighborGrad = Module["_ResizeNearestNeighborGrad"] = function() {
            return (_ResizeNearestNeighborGrad = Module["_ResizeNearestNeighborGrad"] = Module["asm"]["ResizeNearestNeighborGrad"]).apply(null, arguments);
        };
        var _Reverse = Module["_Reverse"] = function() {
            return (_Reverse = Module["_Reverse"] = Module["asm"]["Reverse"]).apply(null, arguments);
        };
        var _RotateWithOffset = Module["_RotateWithOffset"] = function() {
            return (_RotateWithOffset = Module["_RotateWithOffset"] = Module["asm"]["RotateWithOffset"]).apply(null, arguments);
        };
        var _Round = Module["_Round"] = function() {
            return (_Round = Module["_Round"] = Module["asm"]["Round"]).apply(null, arguments);
        };
        var _Rsqrt = Module["_Rsqrt"] = function() {
            return (_Rsqrt = Module["_Rsqrt"] = Module["asm"]["Rsqrt"]).apply(null, arguments);
        };
        var _ScatterNd = Module["_ScatterNd"] = function() {
            return (_ScatterNd = Module["_ScatterNd"] = Module["asm"]["ScatterNd"]).apply(null, arguments);
        };
        var _SearchSorted = Module["_SearchSorted"] = function() {
            return (_SearchSorted = Module["_SearchSorted"] = Module["asm"]["SearchSorted"]).apply(null, arguments);
        };
        var _SelectV2 = Module["_SelectV2"] = function() {
            return (_SelectV2 = Module["_SelectV2"] = Module["asm"]["SelectV2"]).apply(null, arguments);
        };
        var _Selu = Module["_Selu"] = function() {
            return (_Selu = Module["_Selu"] = Module["asm"]["Selu"]).apply(null, arguments);
        };
        var _Sigmoid = Module["_Sigmoid"] = function() {
            return (_Sigmoid = Module["_Sigmoid"] = Module["asm"]["Sigmoid"]).apply(null, arguments);
        };
        var _Sign = Module["_Sign"] = function() {
            return (_Sign = Module["_Sign"] = Module["asm"]["Sign"]).apply(null, arguments);
        };
        var _Sin = Module["_Sin"] = function() {
            return (_Sin = Module["_Sin"] = Module["asm"]["Sin"]).apply(null, arguments);
        };
        var _Sinh = Module["_Sinh"] = function() {
            return (_Sinh = Module["_Sinh"] = Module["asm"]["Sinh"]).apply(null, arguments);
        };
        var _Softmax = Module["_Softmax"] = function() {
            return (_Softmax = Module["_Softmax"] = Module["asm"]["Softmax"]).apply(null, arguments);
        };
        var _Softplus = Module["_Softplus"] = function() {
            return (_Softplus = Module["_Softplus"] = Module["asm"]["Softplus"]).apply(null, arguments);
        };
        var _SparseFillEmptyRows = Module["_SparseFillEmptyRows"] = function() {
            return (_SparseFillEmptyRows = Module["_SparseFillEmptyRows"] = Module["asm"]["SparseFillEmptyRows"]).apply(null, arguments);
        };
        var _SparseReshape = Module["_SparseReshape"] = function() {
            return (_SparseReshape = Module["_SparseReshape"] = Module["asm"]["SparseReshape"]).apply(null, arguments);
        };
        var _SparseSegmentReduction = Module["_SparseSegmentReduction"] = function() {
            return (_SparseSegmentReduction = Module["_SparseSegmentReduction"] = Module["asm"]["SparseSegmentReduction"]).apply(null, arguments);
        };
        var _SparseToDense = Module["_SparseToDense"] = function() {
            return (_SparseToDense = Module["_SparseToDense"] = Module["asm"]["SparseToDense"]).apply(null, arguments);
        };
        var _Sqrt = Module["_Sqrt"] = function() {
            return (_Sqrt = Module["_Sqrt"] = Module["asm"]["Sqrt"]).apply(null, arguments);
        };
        var _Square = Module["_Square"] = function() {
            return (_Square = Module["_Square"] = Module["asm"]["Square"]).apply(null, arguments);
        };
        var _SquaredDifference = Module["_SquaredDifference"] = function() {
            return (_SquaredDifference = Module["_SquaredDifference"] = Module["asm"]["SquaredDifference"]).apply(null, arguments);
        };
        var _Step = Module["_Step"] = function() {
            return (_Step = Module["_Step"] = Module["asm"]["Step"]).apply(null, arguments);
        };
        var _StridedSlice = Module["_StridedSlice"] = function() {
            return (_StridedSlice = Module["_StridedSlice"] = Module["asm"]["StridedSlice"]).apply(null, arguments);
        };
        var _Sub = Module["_Sub"] = function() {
            return (_Sub = Module["_Sub"] = Module["asm"]["Sub"]).apply(null, arguments);
        };
        var _Sum = Module["_Sum"] = function() {
            return (_Sum = Module["_Sum"] = Module["asm"]["Sum"]).apply(null, arguments);
        };
        var _Tan = Module["_Tan"] = function() {
            return (_Tan = Module["_Tan"] = Module["asm"]["Tan"]).apply(null, arguments);
        };
        var _Tanh = Module["_Tanh"] = function() {
            return (_Tanh = Module["_Tanh"] = Module["asm"]["Tanh"]).apply(null, arguments);
        };
        var _TensorScatterUpdate = Module["_TensorScatterUpdate"] = function() {
            return (_TensorScatterUpdate = Module["_TensorScatterUpdate"] = Module["asm"]["TensorScatterUpdate"]).apply(null, arguments);
        };
        var _Tile = Module["_Tile"] = function() {
            return (_Tile = Module["_Tile"] = Module["asm"]["Tile"]).apply(null, arguments);
        };
        var _TopK = Module["_TopK"] = function() {
            return (_TopK = Module["_TopK"] = Module["asm"]["TopK"]).apply(null, arguments);
        };
        var _Transform = Module["_Transform"] = function() {
            return (_Transform = Module["_Transform"] = Module["asm"]["Transform"]).apply(null, arguments);
        };
        var _Transpose = Module["_Transpose"] = function() {
            return (_Transpose = Module["_Transpose"] = Module["asm"]["Transpose"]).apply(null, arguments);
        };
        var __FusedMatMul = Module["__FusedMatMul"] = function() {
            return (__FusedMatMul = Module["__FusedMatMul"] = Module["asm"]["_FusedMatMul"]).apply(null, arguments);
        };
        var _malloc = Module["_malloc"] = function() {
            return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
        };
        var _free = Module["_free"] = function() {
            return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
        };
        var __emscripten_tls_init = Module["__emscripten_tls_init"] = function() {
            return (__emscripten_tls_init = Module["__emscripten_tls_init"] = Module["asm"]["_emscripten_tls_init"]).apply(null, arguments);
        };
        var _pthread_self = Module["_pthread_self"] = function() {
            return (_pthread_self = Module["_pthread_self"] = Module["asm"]["pthread_self"]).apply(null, arguments);
        };
        var ___errno_location = Module["___errno_location"] = function() {
            return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
        };
        var __emscripten_thread_init = Module["__emscripten_thread_init"] = function() {
            return (__emscripten_thread_init = Module["__emscripten_thread_init"] = Module["asm"]["_emscripten_thread_init"]).apply(null, arguments);
        };
        var __emscripten_thread_crashed = Module["__emscripten_thread_crashed"] = function() {
            return (__emscripten_thread_crashed = Module["__emscripten_thread_crashed"] = Module["asm"]["_emscripten_thread_crashed"]).apply(null, arguments);
        };
        var _emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = function() {
            return (_emscripten_main_thread_process_queued_calls = Module["_emscripten_main_thread_process_queued_calls"] = Module["asm"]["emscripten_main_thread_process_queued_calls"]).apply(null, arguments);
        };
        var _emscripten_main_browser_thread_id = Module["_emscripten_main_browser_thread_id"] = function() {
            return (_emscripten_main_browser_thread_id = Module["_emscripten_main_browser_thread_id"] = Module["asm"]["emscripten_main_browser_thread_id"]).apply(null, arguments);
        };
        var _emscripten_run_in_main_runtime_thread_js = Module["_emscripten_run_in_main_runtime_thread_js"] = function() {
            return (_emscripten_run_in_main_runtime_thread_js = Module["_emscripten_run_in_main_runtime_thread_js"] = Module["asm"]["emscripten_run_in_main_runtime_thread_js"]).apply(null, arguments);
        };
        var _emscripten_dispatch_to_thread_ = Module["_emscripten_dispatch_to_thread_"] = function() {
            return (_emscripten_dispatch_to_thread_ = Module["_emscripten_dispatch_to_thread_"] = Module["asm"]["emscripten_dispatch_to_thread_"]).apply(null, arguments);
        };
        var __emscripten_proxy_execute_task_queue = Module["__emscripten_proxy_execute_task_queue"] = function() {
            return (__emscripten_proxy_execute_task_queue = Module["__emscripten_proxy_execute_task_queue"] = Module["asm"]["_emscripten_proxy_execute_task_queue"]).apply(null, arguments);
        };
        var __emscripten_thread_free_data = Module["__emscripten_thread_free_data"] = function() {
            return (__emscripten_thread_free_data = Module["__emscripten_thread_free_data"] = Module["asm"]["_emscripten_thread_free_data"]).apply(null, arguments);
        };
        var __emscripten_thread_exit = Module["__emscripten_thread_exit"] = function() {
            return (__emscripten_thread_exit = Module["__emscripten_thread_exit"] = Module["asm"]["_emscripten_thread_exit"]).apply(null, arguments);
        };
        var _emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = function() {
            return (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] = Module["asm"]["emscripten_stack_set_limits"]).apply(null, arguments);
        };
        var stackSave = Module["stackSave"] = function() {
            return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
        };
        var stackRestore = Module["stackRestore"] = function() {
            return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
        };
        var stackAlloc = Module["stackAlloc"] = function() {
            return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
        };
        var dynCall_iijjiiii = Module["dynCall_iijjiiii"] = function() {
            return (dynCall_iijjiiii = Module["dynCall_iijjiiii"] = Module["asm"]["dynCall_iijjiiii"]).apply(null, arguments);
        };
        var dynCall_jiji = Module["dynCall_jiji"] = function() {
            return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
        };
        Module["keepRuntimeAlive"] = keepRuntimeAlive;
        Module["wasmMemory"] = wasmMemory;
        Module["cwrap"] = cwrap;
        Module["ExitStatus"] = ExitStatus;
        Module["PThread"] = PThread;
        var calledRun;
        dependenciesFulfilled = function runCaller() {
            if (!calledRun) run();
            if (!calledRun) dependenciesFulfilled = runCaller;
        };
        function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) return;
            if (ENVIRONMENT_IS_PTHREAD) {
                readyPromiseResolve(Module);
                initRuntime();
                startWorker(Module);
                return;
            }
            preRun();
            if (runDependencies > 0) return;
            function doRun() {
                if (calledRun) return;
                calledRun = true;
                Module["calledRun"] = true;
                if (ABORT) return;
                initRuntime();
                readyPromiseResolve(Module);
                if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
                postRun();
            }
            if (Module["setStatus"]) {
                Module["setStatus"]("Running...");
                setTimeout(function() {
                    setTimeout(function() {
                        Module["setStatus"]("");
                    }, 1);
                    doRun();
                }, 1);
            } else doRun();
        }
        if (Module["preInit"]) {
            if (typeof Module["preInit"] == "function") Module["preInit"] = [
                Module["preInit"]
            ];
            while(Module["preInit"].length > 0)Module["preInit"].pop()();
        }
        run();
        var listenersAdded;
        if (beforeListeners) listenersAdded = {
            uncaughtException: process.listeners("uncaughtException").filter(function(listener) {
                return !beforeListeners.uncaughtException.indexOf(listener) > -1;
            }),
            unhandledRejection: process.listeners("unhandledRejection").filter(function(listener) {
                return !beforeListeners.unhandledRejection.indexOf(listener) > -1;
            })
        };
        var actualModule;
        if (typeof WasmBackendModule !== "undefined") actualModule = WasmBackendModule;
        else if (typeof WasmBackendModuleThreadedSimd !== "undefined") actualModule = WasmBackendModuleThreadedSimd;
        else throw new Error("Could not find wasm module in post.js");
        if (listenersAdded) {
            var tmpDispose = actualModule["_dispose"];
            actualModule["_dispose"] = function() {
                tmpDispose();
                listenersAdded.uncaughtException.forEach(function(listener) {
                    process.removeListener("uncaughtException", listener);
                });
                listenersAdded.unhandledRejection.forEach(function(listener) {
                    process.removeListener("unhandledRejection", listener);
                });
            };
        }
        return WasmBackendModuleThreadedSimd.ready;
    };
})();
module.exports = WasmBackendModuleThreadedSimd;

},{"c97449055ca5d2fc":"d5jf4","9157d0e129178d4c":"jhUEF","d059fbaf750b223d":"jhUEF","b824e375529306ca":"jhUEF","61c738ede5584793":"jhUEF","1a28a111b649188c":"jhUEF"}],"9u7sk":[function(require,module,exports) {
module.exports.wasmWorkerContents = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`;

},{}],"eeXMg":[function(require,module,exports) {
var __filename = "node_modules/@tensorflow/tfjs-backend-wasm/wasm-out/tfjs-backend-wasm.js";
var process = require("caec8bcdfe9960aa");
var __dirname = "node_modules/@tensorflow/tfjs-backend-wasm/wasm-out";
var WasmBackendModule = (()=>{
    var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : undefined;
    if (typeof __filename !== "undefined") _scriptDir = _scriptDir || __filename;
    return function(WasmBackendModule) {
        WasmBackendModule = WasmBackendModule || {};
        var Module = typeof WasmBackendModule != "undefined" ? WasmBackendModule : {};
        var readyPromiseResolve, readyPromiseReject;
        Module["ready"] = new Promise(function(resolve, reject) {
            readyPromiseResolve = resolve;
            readyPromiseReject = reject;
        });
        var beforeListeners;
        if (typeof process !== "undefined" && process.listeners) beforeListeners = {
            uncaughtException: process.listeners("uncaughtException"),
            unhandledRejection: process.listeners("unhandledRejection")
        };
        var moduleOverrides = Object.assign({}, Module);
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = (status, toThrow)=>{
            throw toThrow;
        };
        var ENVIRONMENT_IS_WEB = typeof window == "object";
        var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
        var ENVIRONMENT_IS_NODE = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string";
        var scriptDirectory = "";
        function locateFile(path) {
            if (Module["locateFile"]) return Module["locateFile"](path, scriptDirectory);
            return scriptDirectory + path;
        }
        var read_, readAsync, readBinary, setWindowTitle;
        function logExceptionOnExit(e) {
            if (e instanceof ExitStatus) return;
            let toLog = e;
            err("exiting due to exception: " + toLog);
        }
        if (ENVIRONMENT_IS_NODE) {
            var fs = require("4a73517fc90a67e6");
            var nodePath = require("bb12b68c9d27b74");
            if (ENVIRONMENT_IS_WORKER) scriptDirectory = nodePath.dirname(scriptDirectory) + "/";
            else scriptDirectory = __dirname + "/";
            read_ = (filename, binary)=>{
                filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
                return fs.readFileSync(filename, binary ? undefined : "utf8");
            };
            readBinary = (filename)=>{
                var ret = read_(filename, true);
                if (!ret.buffer) ret = new Uint8Array(ret);
                return ret;
            };
            readAsync = (filename, onload, onerror)=>{
                filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
                fs.readFile(filename, function(err, data) {
                    if (err) onerror(err);
                    else onload(data.buffer);
                });
            };
            if (process["argv"].length > 1) thisProgram = process["argv"][1].replace(/\\/g, "/");
            arguments_ = process["argv"].slice(2);
            process["on"]("uncaughtException", function(ex) {
                if (!(ex instanceof ExitStatus)) throw ex;
            });
            process["on"]("unhandledRejection", function(reason) {
                throw reason;
            });
            quit_ = (status, toThrow)=>{
                if (keepRuntimeAlive()) {
                    process["exitCode"] = status;
                    throw toThrow;
                }
                logExceptionOnExit(toThrow);
                process["exit"](status);
            };
            Module["inspect"] = function() {
                return "[Emscripten Module object]";
            };
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) scriptDirectory = self.location.href;
            else if (typeof document != "undefined" && document.currentScript) scriptDirectory = document.currentScript.src;
            if (_scriptDir) scriptDirectory = _scriptDir;
            if (scriptDirectory.indexOf("blob:") !== 0) scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
            else scriptDirectory = "";
            read_ = (url)=>{
                var xhr = new XMLHttpRequest;
                xhr.open("GET", url, false);
                xhr.send(null);
                return xhr.responseText;
            };
            if (ENVIRONMENT_IS_WORKER) readBinary = (url)=>{
                var xhr = new XMLHttpRequest;
                xhr.open("GET", url, false);
                xhr.responseType = "arraybuffer";
                xhr.send(null);
                return new Uint8Array(xhr.response);
            };
            readAsync = (url, onload, onerror)=>{
                var xhr = new XMLHttpRequest;
                xhr.open("GET", url, true);
                xhr.responseType = "arraybuffer";
                xhr.onload = ()=>{
                    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                        onload(xhr.response);
                        return;
                    }
                    onerror();
                };
                xhr.onerror = onerror;
                xhr.send(null);
            };
            setWindowTitle = (title)=>document.title = title;
        }
        var out = Module["print"] || console.log.bind(console);
        var err = Module["printErr"] || console.warn.bind(console);
        Object.assign(Module, moduleOverrides);
        moduleOverrides = null;
        if (Module["arguments"]) arguments_ = Module["arguments"];
        if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
        if (Module["quit"]) quit_ = Module["quit"];
        var POINTER_SIZE = 4;
        var wasmBinary;
        if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
        var noExitRuntime = Module["noExitRuntime"] || true;
        if (typeof WebAssembly != "object") abort("no native wasm support detected");
        var wasmMemory;
        var ABORT = false;
        var EXITSTATUS;
        function assert(condition, text) {
            if (!condition) abort(text);
        }
        var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
        function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
            idx >>>= 0;
            var endIdx = idx + maxBytesToRead;
            var endPtr = idx;
            while(heapOrArray[endPtr] && !(endPtr >= endIdx))++endPtr;
            if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
            var str = "";
            while(idx < endPtr){
                var u0 = heapOrArray[idx++];
                if (!(u0 & 128)) {
                    str += String.fromCharCode(u0);
                    continue;
                }
                var u1 = heapOrArray[idx++] & 63;
                if ((u0 & 224) == 192) {
                    str += String.fromCharCode((u0 & 31) << 6 | u1);
                    continue;
                }
                var u2 = heapOrArray[idx++] & 63;
                if ((u0 & 240) == 224) u0 = (u0 & 15) << 12 | u1 << 6 | u2;
                else u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
                if (u0 < 65536) str += String.fromCharCode(u0);
                else {
                    var ch = u0 - 65536;
                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                }
            }
            return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
            ptr >>>= 0;
            return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            outIdx >>>= 0;
            if (!(maxBytesToWrite > 0)) return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for(var i = 0; i < str.length; ++i){
                var u = str.charCodeAt(i);
                if (u >= 55296 && u <= 57343) {
                    var u1 = str.charCodeAt(++i);
                    u = 65536 + ((u & 1023) << 10) | u1 & 1023;
                }
                if (u <= 127) {
                    if (outIdx >= endIdx) break;
                    heap[outIdx++ >>> 0] = u;
                } else if (u <= 2047) {
                    if (outIdx + 1 >= endIdx) break;
                    heap[outIdx++ >>> 0] = 192 | u >> 6;
                    heap[outIdx++ >>> 0] = 128 | u & 63;
                } else if (u <= 65535) {
                    if (outIdx + 2 >= endIdx) break;
                    heap[outIdx++ >>> 0] = 224 | u >> 12;
                    heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
                    heap[outIdx++ >>> 0] = 128 | u & 63;
                } else {
                    if (outIdx + 3 >= endIdx) break;
                    heap[outIdx++ >>> 0] = 240 | u >> 18;
                    heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;
                    heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;
                    heap[outIdx++ >>> 0] = 128 | u & 63;
                }
            }
            heap[outIdx >>> 0] = 0;
            return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
            return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
        }
        var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module["HEAP8"] = HEAP8 = new Int8Array(buf);
            Module["HEAP16"] = HEAP16 = new Int16Array(buf);
            Module["HEAP32"] = HEAP32 = new Int32Array(buf);
            Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
            Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
            Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
            Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
            Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
        }
        var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;
        var wasmTable;
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        function keepRuntimeAlive() {
            return noExitRuntime;
        }
        function preRun() {
            if (Module["preRun"]) {
                if (typeof Module["preRun"] == "function") Module["preRun"] = [
                    Module["preRun"]
                ];
                while(Module["preRun"].length)addOnPreRun(Module["preRun"].shift());
            }
            callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
            runtimeInitialized = true;
            callRuntimeCallbacks(__ATINIT__);
        }
        function postRun() {
            if (Module["postRun"]) {
                if (typeof Module["postRun"] == "function") Module["postRun"] = [
                    Module["postRun"]
                ];
                while(Module["postRun"].length)addOnPostRun(Module["postRun"].shift());
            }
            callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb);
        }
        function addOnInit(cb) {
            __ATINIT__.unshift(cb);
        }
        function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb);
        }
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        function addRunDependency(id) {
            runDependencies++;
            if (Module["monitorRunDependencies"]) Module["monitorRunDependencies"](runDependencies);
        }
        function removeRunDependency(id) {
            runDependencies--;
            if (Module["monitorRunDependencies"]) Module["monitorRunDependencies"](runDependencies);
            if (runDependencies == 0) {
                if (runDependencyWatcher !== null) {
                    clearInterval(runDependencyWatcher);
                    runDependencyWatcher = null;
                }
                if (dependenciesFulfilled) {
                    var callback = dependenciesFulfilled;
                    dependenciesFulfilled = null;
                    callback();
                }
            }
        }
        function abort(what) {
            if (Module["onAbort"]) Module["onAbort"](what);
            what = "Aborted(" + what + ")";
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            what += ". Build with -sASSERTIONS for more info.";
            var e = new WebAssembly.RuntimeError(what);
            readyPromiseReject(e);
            throw e;
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
            return filename.startsWith(dataURIPrefix);
        }
        function isFileURI(filename) {
            return filename.startsWith("file://");
        }
        var wasmBinaryFile;
        wasmBinaryFile = "tfjs-backend-wasm.wasm";
        if (!isDataURI(wasmBinaryFile)) wasmBinaryFile = locateFile(wasmBinaryFile);
        function getBinary(file) {
            try {
                if (file == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(file);
                throw "both async and sync fetching of the wasm failed";
            } catch (err) {
                abort(err);
            }
        }
        function getBinaryPromise() {
            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
                if (typeof fetch == "function" && !isFileURI(wasmBinaryFile)) return fetch(wasmBinaryFile, {
                    credentials: "same-origin"
                }).then(function(response) {
                    if (!response["ok"]) throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                    return response["arrayBuffer"]();
                }).catch(function() {
                    return getBinary(wasmBinaryFile);
                });
                else {
                    if (readAsync) return new Promise(function(resolve, reject) {
                        readAsync(wasmBinaryFile, function(response) {
                            resolve(new Uint8Array(response));
                        }, reject);
                    });
                }
            }
            return Promise.resolve().then(function() {
                return getBinary(wasmBinaryFile);
            });
        }
        function createWasm() {
            var info = {
                "env": asmLibraryArg,
                "wasi_snapshot_preview1": asmLibraryArg
            };
            function receiveInstance(instance, module1) {
                var exports = instance.exports;
                Module["asm"] = exports;
                wasmMemory = Module["asm"]["memory"];
                updateGlobalBufferAndViews(wasmMemory.buffer);
                wasmTable = Module["asm"]["__indirect_function_table"];
                addOnInit(Module["asm"]["__wasm_call_ctors"]);
                removeRunDependency("wasm-instantiate");
            }
            addRunDependency("wasm-instantiate");
            function receiveInstantiationResult(result) {
                receiveInstance(result["instance"]);
            }
            function instantiateArrayBuffer(receiver) {
                return getBinaryPromise().then(function(binary) {
                    return WebAssembly.instantiate(binary, info);
                }).then(function(instance) {
                    return instance;
                }).then(receiver, function(reason) {
                    err("failed to asynchronously prepare wasm: " + reason);
                    abort(reason);
                });
            }
            function instantiateAsync() {
                if (!wasmBinary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == "function") return fetch(wasmBinaryFile, {
                    credentials: "same-origin"
                }).then(function(response) {
                    var result = WebAssembly.instantiateStreaming(response, info);
                    return result.then(receiveInstantiationResult, function(reason) {
                        err("wasm streaming compile failed: " + reason);
                        err("falling back to ArrayBuffer instantiation");
                        return instantiateArrayBuffer(receiveInstantiationResult);
                    });
                });
                else return instantiateArrayBuffer(receiveInstantiationResult);
            }
            if (Module["instantiateWasm"]) try {
                var exports = Module["instantiateWasm"](info, receiveInstance);
                return exports;
            } catch (e) {
                err("Module.instantiateWasm callback failed with error: " + e);
                readyPromiseReject(e);
            }
            instantiateAsync().catch(readyPromiseReject);
            return {};
        }
        var tempDouble;
        var tempI64;
        function ExitStatus(status) {
            this.name = "ExitStatus";
            this.message = "Program terminated with exit(" + status + ")";
            this.status = status;
        }
        function callRuntimeCallbacks(callbacks) {
            while(callbacks.length > 0)callbacks.shift()(Module);
        }
        function _abort() {
            abort("");
        }
        function getHeapMax() {
            return 4294901760;
        }
        function _emscripten_get_heap_max() {
            return getHeapMax();
        }
        function _emscripten_memcpy_big(dest, src, num) {
            HEAPU8.copyWithin(dest >>> 0, src >>> 0, src + num >>> 0);
        }
        function emscripten_realloc_buffer(size) {
            try {
                wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
                updateGlobalBufferAndViews(wasmMemory.buffer);
                return 1;
            } catch (e) {}
        }
        function _emscripten_resize_heap(requestedSize) {
            var oldSize = HEAPU8.length;
            requestedSize = requestedSize >>> 0;
            var maxHeapSize = getHeapMax();
            if (requestedSize > maxHeapSize) return false;
            let alignUp = (x, multiple)=>x + (multiple - x % multiple) % multiple;
            for(var cutDown = 1; cutDown <= 4; cutDown *= 2){
                var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
                overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
                var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
                var replacement = emscripten_realloc_buffer(newSize);
                if (replacement) return true;
            }
            return false;
        }
        var SYSCALLS = {
            varargs: undefined,
            get: function() {
                SYSCALLS.varargs += 4;
                var ret = HEAP32[SYSCALLS.varargs - 4 >>> 2];
                return ret;
            },
            getStr: function(ptr) {
                var ret = UTF8ToString(ptr);
                return ret;
            }
        };
        function _fd_close(fd) {
            return 52;
        }
        function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
            return 70;
        }
        var printCharBuffers = [
            null,
            [],
            []
        ];
        function printChar(stream, curr) {
            var buffer = printCharBuffers[stream];
            if (curr === 0 || curr === 10) {
                (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
                buffer.length = 0;
            } else buffer.push(curr);
        }
        function _fd_write(fd, iov, iovcnt, pnum) {
            var num = 0;
            for(var i = 0; i < iovcnt; i++){
                var ptr = HEAPU32[iov >>> 2];
                var len = HEAPU32[iov + 4 >>> 2];
                iov += 8;
                for(var j = 0; j < len; j++)printChar(fd, HEAPU8[ptr + j >>> 0]);
                num += len;
            }
            HEAPU32[pnum >>> 2] = num;
            return 0;
        }
        function getCFunc(ident) {
            var func = Module["_" + ident];
            return func;
        }
        function writeArrayToMemory(array, buffer) {
            HEAP8.set(array, buffer >>> 0);
        }
        function ccall(ident, returnType, argTypes, args, opts) {
            var toC = {
                "string": (str)=>{
                    var ret = 0;
                    if (str !== null && str !== undefined && str !== 0) {
                        var len = (str.length << 2) + 1;
                        ret = stackAlloc(len);
                        stringToUTF8(str, ret, len);
                    }
                    return ret;
                },
                "array": (arr)=>{
                    var ret = stackAlloc(arr.length);
                    writeArrayToMemory(arr, ret);
                    return ret;
                }
            };
            function convertReturnValue(ret) {
                if (returnType === "string") return UTF8ToString(ret);
                if (returnType === "boolean") return Boolean(ret);
                return ret;
            }
            var func = getCFunc(ident);
            var cArgs = [];
            var stack = 0;
            if (args) for(var i = 0; i < args.length; i++){
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0) stack = stackSave();
                    cArgs[i] = converter(args[i]);
                } else cArgs[i] = args[i];
            }
            var ret = func.apply(null, cArgs);
            function onDone(ret) {
                if (stack !== 0) stackRestore(stack);
                return convertReturnValue(ret);
            }
            ret = onDone(ret);
            return ret;
        }
        function cwrap(ident, returnType, argTypes, opts) {
            argTypes = argTypes || [];
            var numericArgs = argTypes.every((type)=>type === "number" || type === "boolean");
            var numericRet = returnType !== "string";
            if (numericRet && numericArgs && !opts) return getCFunc(ident);
            return function() {
                return ccall(ident, returnType, argTypes, arguments, opts);
            };
        }
        var asmLibraryArg = {
            "abort": _abort,
            "emscripten_get_heap_max": _emscripten_get_heap_max,
            "emscripten_memcpy_big": _emscripten_memcpy_big,
            "emscripten_resize_heap": _emscripten_resize_heap,
            "fd_close": _fd_close,
            "fd_seek": _fd_seek,
            "fd_write": _fd_write
        };
        var asm = createWasm();
        var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
            return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
        };
        var _init = Module["_init"] = function() {
            return (_init = Module["_init"] = Module["asm"]["init"]).apply(null, arguments);
        };
        var _init_with_threads_count = Module["_init_with_threads_count"] = function() {
            return (_init_with_threads_count = Module["_init_with_threads_count"] = Module["asm"]["init_with_threads_count"]).apply(null, arguments);
        };
        var _get_threads_count = Module["_get_threads_count"] = function() {
            return (_get_threads_count = Module["_get_threads_count"] = Module["asm"]["get_threads_count"]).apply(null, arguments);
        };
        var _register_tensor = Module["_register_tensor"] = function() {
            return (_register_tensor = Module["_register_tensor"] = Module["asm"]["register_tensor"]).apply(null, arguments);
        };
        var _dispose_data = Module["_dispose_data"] = function() {
            return (_dispose_data = Module["_dispose_data"] = Module["asm"]["dispose_data"]).apply(null, arguments);
        };
        var _dispose = Module["_dispose"] = function() {
            return (_dispose = Module["_dispose"] = Module["asm"]["dispose"]).apply(null, arguments);
        };
        var _Abs = Module["_Abs"] = function() {
            return (_Abs = Module["_Abs"] = Module["asm"]["Abs"]).apply(null, arguments);
        };
        var _Acos = Module["_Acos"] = function() {
            return (_Acos = Module["_Acos"] = Module["asm"]["Acos"]).apply(null, arguments);
        };
        var _Acosh = Module["_Acosh"] = function() {
            return (_Acosh = Module["_Acosh"] = Module["asm"]["Acosh"]).apply(null, arguments);
        };
        var _Add = Module["_Add"] = function() {
            return (_Add = Module["_Add"] = Module["asm"]["Add"]).apply(null, arguments);
        };
        var _AddN = Module["_AddN"] = function() {
            return (_AddN = Module["_AddN"] = Module["asm"]["AddN"]).apply(null, arguments);
        };
        var _All = Module["_All"] = function() {
            return (_All = Module["_All"] = Module["asm"]["All"]).apply(null, arguments);
        };
        var _Any = Module["_Any"] = function() {
            return (_Any = Module["_Any"] = Module["asm"]["Any"]).apply(null, arguments);
        };
        var _ArgMax = Module["_ArgMax"] = function() {
            return (_ArgMax = Module["_ArgMax"] = Module["asm"]["ArgMax"]).apply(null, arguments);
        };
        var _ArgMin = Module["_ArgMin"] = function() {
            return (_ArgMin = Module["_ArgMin"] = Module["asm"]["ArgMin"]).apply(null, arguments);
        };
        var _Asin = Module["_Asin"] = function() {
            return (_Asin = Module["_Asin"] = Module["asm"]["Asin"]).apply(null, arguments);
        };
        var _Asinh = Module["_Asinh"] = function() {
            return (_Asinh = Module["_Asinh"] = Module["asm"]["Asinh"]).apply(null, arguments);
        };
        var _Atan = Module["_Atan"] = function() {
            return (_Atan = Module["_Atan"] = Module["asm"]["Atan"]).apply(null, arguments);
        };
        var _Atan2 = Module["_Atan2"] = function() {
            return (_Atan2 = Module["_Atan2"] = Module["asm"]["Atan2"]).apply(null, arguments);
        };
        var _Atanh = Module["_Atanh"] = function() {
            return (_Atanh = Module["_Atanh"] = Module["asm"]["Atanh"]).apply(null, arguments);
        };
        var _AvgPool = Module["_AvgPool"] = function() {
            return (_AvgPool = Module["_AvgPool"] = Module["asm"]["AvgPool"]).apply(null, arguments);
        };
        var _AvgPool3D = Module["_AvgPool3D"] = function() {
            return (_AvgPool3D = Module["_AvgPool3D"] = Module["asm"]["AvgPool3D"]).apply(null, arguments);
        };
        var _AvgPool3DGrad = Module["_AvgPool3DGrad"] = function() {
            return (_AvgPool3DGrad = Module["_AvgPool3DGrad"] = Module["asm"]["AvgPool3DGrad"]).apply(null, arguments);
        };
        var _AvgPoolGrad = Module["_AvgPoolGrad"] = function() {
            return (_AvgPoolGrad = Module["_AvgPoolGrad"] = Module["asm"]["AvgPoolGrad"]).apply(null, arguments);
        };
        var _BatchMatMul = Module["_BatchMatMul"] = function() {
            return (_BatchMatMul = Module["_BatchMatMul"] = Module["asm"]["BatchMatMul"]).apply(null, arguments);
        };
        var _Bincount = Module["_Bincount"] = function() {
            return (_Bincount = Module["_Bincount"] = Module["asm"]["Bincount"]).apply(null, arguments);
        };
        var _BitwiseAnd = Module["_BitwiseAnd"] = function() {
            return (_BitwiseAnd = Module["_BitwiseAnd"] = Module["asm"]["BitwiseAnd"]).apply(null, arguments);
        };
        var _Ceil = Module["_Ceil"] = function() {
            return (_Ceil = Module["_Ceil"] = Module["asm"]["Ceil"]).apply(null, arguments);
        };
        var _ClipByValue = Module["_ClipByValue"] = function() {
            return (_ClipByValue = Module["_ClipByValue"] = Module["asm"]["ClipByValue"]).apply(null, arguments);
        };
        var _Conv2D = Module["_Conv2D"] = function() {
            return (_Conv2D = Module["_Conv2D"] = Module["asm"]["Conv2D"]).apply(null, arguments);
        };
        var _Conv2DBackpropInput = Module["_Conv2DBackpropInput"] = function() {
            return (_Conv2DBackpropInput = Module["_Conv2DBackpropInput"] = Module["asm"]["Conv2DBackpropInput"]).apply(null, arguments);
        };
        var _Conv3D = Module["_Conv3D"] = function() {
            return (_Conv3D = Module["_Conv3D"] = Module["asm"]["Conv3D"]).apply(null, arguments);
        };
        var _Conv3DBackpropFilterV2 = Module["_Conv3DBackpropFilterV2"] = function() {
            return (_Conv3DBackpropFilterV2 = Module["_Conv3DBackpropFilterV2"] = Module["asm"]["Conv3DBackpropFilterV2"]).apply(null, arguments);
        };
        var _Conv3DBackpropInputV2 = Module["_Conv3DBackpropInputV2"] = function() {
            return (_Conv3DBackpropInputV2 = Module["_Conv3DBackpropInputV2"] = Module["asm"]["Conv3DBackpropInputV2"]).apply(null, arguments);
        };
        var _Cos = Module["_Cos"] = function() {
            return (_Cos = Module["_Cos"] = Module["asm"]["Cos"]).apply(null, arguments);
        };
        var _Cosh = Module["_Cosh"] = function() {
            return (_Cosh = Module["_Cosh"] = Module["asm"]["Cosh"]).apply(null, arguments);
        };
        var _CropAndResize = Module["_CropAndResize"] = function() {
            return (_CropAndResize = Module["_CropAndResize"] = Module["asm"]["CropAndResize"]).apply(null, arguments);
        };
        var _Cumprod = Module["_Cumprod"] = function() {
            return (_Cumprod = Module["_Cumprod"] = Module["asm"]["Cumprod"]).apply(null, arguments);
        };
        var _Cumsum = Module["_Cumsum"] = function() {
            return (_Cumsum = Module["_Cumsum"] = Module["asm"]["Cumsum"]).apply(null, arguments);
        };
        var _DenseBincount = Module["_DenseBincount"] = function() {
            return (_DenseBincount = Module["_DenseBincount"] = Module["asm"]["DenseBincount"]).apply(null, arguments);
        };
        var _DepthToSpace = Module["_DepthToSpace"] = function() {
            return (_DepthToSpace = Module["_DepthToSpace"] = Module["asm"]["DepthToSpace"]).apply(null, arguments);
        };
        var _DepthwiseConv2dNative = Module["_DepthwiseConv2dNative"] = function() {
            return (_DepthwiseConv2dNative = Module["_DepthwiseConv2dNative"] = Module["asm"]["DepthwiseConv2dNative"]).apply(null, arguments);
        };
        var _Diag = Module["_Diag"] = function() {
            return (_Diag = Module["_Diag"] = Module["asm"]["Diag"]).apply(null, arguments);
        };
        var _Dilation2D = Module["_Dilation2D"] = function() {
            return (_Dilation2D = Module["_Dilation2D"] = Module["asm"]["Dilation2D"]).apply(null, arguments);
        };
        var _Dilation2DBackpropFilter = Module["_Dilation2DBackpropFilter"] = function() {
            return (_Dilation2DBackpropFilter = Module["_Dilation2DBackpropFilter"] = Module["asm"]["Dilation2DBackpropFilter"]).apply(null, arguments);
        };
        var _Dilation2DBackpropInput = Module["_Dilation2DBackpropInput"] = function() {
            return (_Dilation2DBackpropInput = Module["_Dilation2DBackpropInput"] = Module["asm"]["Dilation2DBackpropInput"]).apply(null, arguments);
        };
        var _Elu = Module["_Elu"] = function() {
            return (_Elu = Module["_Elu"] = Module["asm"]["Elu"]).apply(null, arguments);
        };
        var _EluGrad = Module["_EluGrad"] = function() {
            return (_EluGrad = Module["_EluGrad"] = Module["asm"]["EluGrad"]).apply(null, arguments);
        };
        var _Equal = Module["_Equal"] = function() {
            return (_Equal = Module["_Equal"] = Module["asm"]["Equal"]).apply(null, arguments);
        };
        var _Erf = Module["_Erf"] = function() {
            return (_Erf = Module["_Erf"] = Module["asm"]["Erf"]).apply(null, arguments);
        };
        var _Exp = Module["_Exp"] = function() {
            return (_Exp = Module["_Exp"] = Module["asm"]["Exp"]).apply(null, arguments);
        };
        var _Expm1 = Module["_Expm1"] = function() {
            return (_Expm1 = Module["_Expm1"] = Module["asm"]["Expm1"]).apply(null, arguments);
        };
        var _FlipLeftRight = Module["_FlipLeftRight"] = function() {
            return (_FlipLeftRight = Module["_FlipLeftRight"] = Module["asm"]["FlipLeftRight"]).apply(null, arguments);
        };
        var _Floor = Module["_Floor"] = function() {
            return (_Floor = Module["_Floor"] = Module["asm"]["Floor"]).apply(null, arguments);
        };
        var _FloorDiv = Module["_FloorDiv"] = function() {
            return (_FloorDiv = Module["_FloorDiv"] = Module["asm"]["FloorDiv"]).apply(null, arguments);
        };
        var _FusedBatchNorm = Module["_FusedBatchNorm"] = function() {
            return (_FusedBatchNorm = Module["_FusedBatchNorm"] = Module["asm"]["FusedBatchNorm"]).apply(null, arguments);
        };
        var _FusedConv2D = Module["_FusedConv2D"] = function() {
            return (_FusedConv2D = Module["_FusedConv2D"] = Module["asm"]["FusedConv2D"]).apply(null, arguments);
        };
        var _FusedDepthwiseConv2D = Module["_FusedDepthwiseConv2D"] = function() {
            return (_FusedDepthwiseConv2D = Module["_FusedDepthwiseConv2D"] = Module["asm"]["FusedDepthwiseConv2D"]).apply(null, arguments);
        };
        var _Gather = Module["_Gather"] = function() {
            return (_Gather = Module["_Gather"] = Module["asm"]["Gather"]).apply(null, arguments);
        };
        var _GatherNd = Module["_GatherNd"] = function() {
            return (_GatherNd = Module["_GatherNd"] = Module["asm"]["GatherNd"]).apply(null, arguments);
        };
        var _Greater = Module["_Greater"] = function() {
            return (_Greater = Module["_Greater"] = Module["asm"]["Greater"]).apply(null, arguments);
        };
        var _GreaterEqual = Module["_GreaterEqual"] = function() {
            return (_GreaterEqual = Module["_GreaterEqual"] = Module["asm"]["GreaterEqual"]).apply(null, arguments);
        };
        var _IsFinite = Module["_IsFinite"] = function() {
            return (_IsFinite = Module["_IsFinite"] = Module["asm"]["IsFinite"]).apply(null, arguments);
        };
        var _IsInf = Module["_IsInf"] = function() {
            return (_IsInf = Module["_IsInf"] = Module["asm"]["IsInf"]).apply(null, arguments);
        };
        var _IsNan = Module["_IsNan"] = function() {
            return (_IsNan = Module["_IsNan"] = Module["asm"]["IsNan"]).apply(null, arguments);
        };
        var _LRN = Module["_LRN"] = function() {
            return (_LRN = Module["_LRN"] = Module["asm"]["LRN"]).apply(null, arguments);
        };
        var _LRNGrad = Module["_LRNGrad"] = function() {
            return (_LRNGrad = Module["_LRNGrad"] = Module["asm"]["LRNGrad"]).apply(null, arguments);
        };
        var _LeakyRelu = Module["_LeakyRelu"] = function() {
            return (_LeakyRelu = Module["_LeakyRelu"] = Module["asm"]["LeakyRelu"]).apply(null, arguments);
        };
        var _Less = Module["_Less"] = function() {
            return (_Less = Module["_Less"] = Module["asm"]["Less"]).apply(null, arguments);
        };
        var _LessEqual = Module["_LessEqual"] = function() {
            return (_LessEqual = Module["_LessEqual"] = Module["asm"]["LessEqual"]).apply(null, arguments);
        };
        var _LinSpace = Module["_LinSpace"] = function() {
            return (_LinSpace = Module["_LinSpace"] = Module["asm"]["LinSpace"]).apply(null, arguments);
        };
        var _Log = Module["_Log"] = function() {
            return (_Log = Module["_Log"] = Module["asm"]["Log"]).apply(null, arguments);
        };
        var _Log1p = Module["_Log1p"] = function() {
            return (_Log1p = Module["_Log1p"] = Module["asm"]["Log1p"]).apply(null, arguments);
        };
        var _LogicalAnd = Module["_LogicalAnd"] = function() {
            return (_LogicalAnd = Module["_LogicalAnd"] = Module["asm"]["LogicalAnd"]).apply(null, arguments);
        };
        var _LogicalNot = Module["_LogicalNot"] = function() {
            return (_LogicalNot = Module["_LogicalNot"] = Module["asm"]["LogicalNot"]).apply(null, arguments);
        };
        var _LogicalOr = Module["_LogicalOr"] = function() {
            return (_LogicalOr = Module["_LogicalOr"] = Module["asm"]["LogicalOr"]).apply(null, arguments);
        };
        var _LogicalXor = Module["_LogicalXor"] = function() {
            return (_LogicalXor = Module["_LogicalXor"] = Module["asm"]["LogicalXor"]).apply(null, arguments);
        };
        var _Max = Module["_Max"] = function() {
            return (_Max = Module["_Max"] = Module["asm"]["Max"]).apply(null, arguments);
        };
        var _MaxPool = Module["_MaxPool"] = function() {
            return (_MaxPool = Module["_MaxPool"] = Module["asm"]["MaxPool"]).apply(null, arguments);
        };
        var _MaxPool3D = Module["_MaxPool3D"] = function() {
            return (_MaxPool3D = Module["_MaxPool3D"] = Module["asm"]["MaxPool3D"]).apply(null, arguments);
        };
        var _MaxPool3DGrad = Module["_MaxPool3DGrad"] = function() {
            return (_MaxPool3DGrad = Module["_MaxPool3DGrad"] = Module["asm"]["MaxPool3DGrad"]).apply(null, arguments);
        };
        var _MaxPoolGrad = Module["_MaxPoolGrad"] = function() {
            return (_MaxPoolGrad = Module["_MaxPoolGrad"] = Module["asm"]["MaxPoolGrad"]).apply(null, arguments);
        };
        var _MaxPoolWithArgmax = Module["_MaxPoolWithArgmax"] = function() {
            return (_MaxPoolWithArgmax = Module["_MaxPoolWithArgmax"] = Module["asm"]["MaxPoolWithArgmax"]).apply(null, arguments);
        };
        var _Maximum = Module["_Maximum"] = function() {
            return (_Maximum = Module["_Maximum"] = Module["asm"]["Maximum"]).apply(null, arguments);
        };
        var _Mean = Module["_Mean"] = function() {
            return (_Mean = Module["_Mean"] = Module["asm"]["Mean"]).apply(null, arguments);
        };
        var _Min = Module["_Min"] = function() {
            return (_Min = Module["_Min"] = Module["asm"]["Min"]).apply(null, arguments);
        };
        var _Minimum = Module["_Minimum"] = function() {
            return (_Minimum = Module["_Minimum"] = Module["asm"]["Minimum"]).apply(null, arguments);
        };
        var _MirrorPad = Module["_MirrorPad"] = function() {
            return (_MirrorPad = Module["_MirrorPad"] = Module["asm"]["MirrorPad"]).apply(null, arguments);
        };
        var _Mod = Module["_Mod"] = function() {
            return (_Mod = Module["_Mod"] = Module["asm"]["Mod"]).apply(null, arguments);
        };
        var _Multinomial = Module["_Multinomial"] = function() {
            return (_Multinomial = Module["_Multinomial"] = Module["asm"]["Multinomial"]).apply(null, arguments);
        };
        var _Multiply = Module["_Multiply"] = function() {
            return (_Multiply = Module["_Multiply"] = Module["asm"]["Multiply"]).apply(null, arguments);
        };
        var _Neg = Module["_Neg"] = function() {
            return (_Neg = Module["_Neg"] = Module["asm"]["Neg"]).apply(null, arguments);
        };
        var _NonMaxSuppressionV3 = Module["_NonMaxSuppressionV3"] = function() {
            return (_NonMaxSuppressionV3 = Module["_NonMaxSuppressionV3"] = Module["asm"]["NonMaxSuppressionV3"]).apply(null, arguments);
        };
        var _NonMaxSuppressionV4 = Module["_NonMaxSuppressionV4"] = function() {
            return (_NonMaxSuppressionV4 = Module["_NonMaxSuppressionV4"] = Module["asm"]["NonMaxSuppressionV4"]).apply(null, arguments);
        };
        var _NonMaxSuppressionV5 = Module["_NonMaxSuppressionV5"] = function() {
            return (_NonMaxSuppressionV5 = Module["_NonMaxSuppressionV5"] = Module["asm"]["NonMaxSuppressionV5"]).apply(null, arguments);
        };
        var _NotEqual = Module["_NotEqual"] = function() {
            return (_NotEqual = Module["_NotEqual"] = Module["asm"]["NotEqual"]).apply(null, arguments);
        };
        var _OneHot = Module["_OneHot"] = function() {
            return (_OneHot = Module["_OneHot"] = Module["asm"]["OneHot"]).apply(null, arguments);
        };
        var _PadV2 = Module["_PadV2"] = function() {
            return (_PadV2 = Module["_PadV2"] = Module["asm"]["PadV2"]).apply(null, arguments);
        };
        var _Pow = Module["_Pow"] = function() {
            return (_Pow = Module["_Pow"] = Module["asm"]["Pow"]).apply(null, arguments);
        };
        var _Prelu = Module["_Prelu"] = function() {
            return (_Prelu = Module["_Prelu"] = Module["asm"]["Prelu"]).apply(null, arguments);
        };
        var _Prod = Module["_Prod"] = function() {
            return (_Prod = Module["_Prod"] = Module["asm"]["Prod"]).apply(null, arguments);
        };
        var _RealDiv = Module["_RealDiv"] = function() {
            return (_RealDiv = Module["_RealDiv"] = Module["asm"]["RealDiv"]).apply(null, arguments);
        };
        var _Reciprocal = Module["_Reciprocal"] = function() {
            return (_Reciprocal = Module["_Reciprocal"] = Module["asm"]["Reciprocal"]).apply(null, arguments);
        };
        var _Relu = Module["_Relu"] = function() {
            return (_Relu = Module["_Relu"] = Module["asm"]["Relu"]).apply(null, arguments);
        };
        var _Relu6 = Module["_Relu6"] = function() {
            return (_Relu6 = Module["_Relu6"] = Module["asm"]["Relu6"]).apply(null, arguments);
        };
        var _ResizeBilinear = Module["_ResizeBilinear"] = function() {
            return (_ResizeBilinear = Module["_ResizeBilinear"] = Module["asm"]["ResizeBilinear"]).apply(null, arguments);
        };
        var _ResizeBilinearGrad = Module["_ResizeBilinearGrad"] = function() {
            return (_ResizeBilinearGrad = Module["_ResizeBilinearGrad"] = Module["asm"]["ResizeBilinearGrad"]).apply(null, arguments);
        };
        var _ResizeNearestNeighbor = Module["_ResizeNearestNeighbor"] = function() {
            return (_ResizeNearestNeighbor = Module["_ResizeNearestNeighbor"] = Module["asm"]["ResizeNearestNeighbor"]).apply(null, arguments);
        };
        var _ResizeNearestNeighborGrad = Module["_ResizeNearestNeighborGrad"] = function() {
            return (_ResizeNearestNeighborGrad = Module["_ResizeNearestNeighborGrad"] = Module["asm"]["ResizeNearestNeighborGrad"]).apply(null, arguments);
        };
        var _Reverse = Module["_Reverse"] = function() {
            return (_Reverse = Module["_Reverse"] = Module["asm"]["Reverse"]).apply(null, arguments);
        };
        var _RotateWithOffset = Module["_RotateWithOffset"] = function() {
            return (_RotateWithOffset = Module["_RotateWithOffset"] = Module["asm"]["RotateWithOffset"]).apply(null, arguments);
        };
        var _Round = Module["_Round"] = function() {
            return (_Round = Module["_Round"] = Module["asm"]["Round"]).apply(null, arguments);
        };
        var _Rsqrt = Module["_Rsqrt"] = function() {
            return (_Rsqrt = Module["_Rsqrt"] = Module["asm"]["Rsqrt"]).apply(null, arguments);
        };
        var _ScatterNd = Module["_ScatterNd"] = function() {
            return (_ScatterNd = Module["_ScatterNd"] = Module["asm"]["ScatterNd"]).apply(null, arguments);
        };
        var _SearchSorted = Module["_SearchSorted"] = function() {
            return (_SearchSorted = Module["_SearchSorted"] = Module["asm"]["SearchSorted"]).apply(null, arguments);
        };
        var _SelectV2 = Module["_SelectV2"] = function() {
            return (_SelectV2 = Module["_SelectV2"] = Module["asm"]["SelectV2"]).apply(null, arguments);
        };
        var _Selu = Module["_Selu"] = function() {
            return (_Selu = Module["_Selu"] = Module["asm"]["Selu"]).apply(null, arguments);
        };
        var _Sigmoid = Module["_Sigmoid"] = function() {
            return (_Sigmoid = Module["_Sigmoid"] = Module["asm"]["Sigmoid"]).apply(null, arguments);
        };
        var _Sign = Module["_Sign"] = function() {
            return (_Sign = Module["_Sign"] = Module["asm"]["Sign"]).apply(null, arguments);
        };
        var _Sin = Module["_Sin"] = function() {
            return (_Sin = Module["_Sin"] = Module["asm"]["Sin"]).apply(null, arguments);
        };
        var _Sinh = Module["_Sinh"] = function() {
            return (_Sinh = Module["_Sinh"] = Module["asm"]["Sinh"]).apply(null, arguments);
        };
        var _Softmax = Module["_Softmax"] = function() {
            return (_Softmax = Module["_Softmax"] = Module["asm"]["Softmax"]).apply(null, arguments);
        };
        var _Softplus = Module["_Softplus"] = function() {
            return (_Softplus = Module["_Softplus"] = Module["asm"]["Softplus"]).apply(null, arguments);
        };
        var _SparseFillEmptyRows = Module["_SparseFillEmptyRows"] = function() {
            return (_SparseFillEmptyRows = Module["_SparseFillEmptyRows"] = Module["asm"]["SparseFillEmptyRows"]).apply(null, arguments);
        };
        var _SparseReshape = Module["_SparseReshape"] = function() {
            return (_SparseReshape = Module["_SparseReshape"] = Module["asm"]["SparseReshape"]).apply(null, arguments);
        };
        var _SparseSegmentReduction = Module["_SparseSegmentReduction"] = function() {
            return (_SparseSegmentReduction = Module["_SparseSegmentReduction"] = Module["asm"]["SparseSegmentReduction"]).apply(null, arguments);
        };
        var _SparseToDense = Module["_SparseToDense"] = function() {
            return (_SparseToDense = Module["_SparseToDense"] = Module["asm"]["SparseToDense"]).apply(null, arguments);
        };
        var _Sqrt = Module["_Sqrt"] = function() {
            return (_Sqrt = Module["_Sqrt"] = Module["asm"]["Sqrt"]).apply(null, arguments);
        };
        var _Square = Module["_Square"] = function() {
            return (_Square = Module["_Square"] = Module["asm"]["Square"]).apply(null, arguments);
        };
        var _SquaredDifference = Module["_SquaredDifference"] = function() {
            return (_SquaredDifference = Module["_SquaredDifference"] = Module["asm"]["SquaredDifference"]).apply(null, arguments);
        };
        var _Step = Module["_Step"] = function() {
            return (_Step = Module["_Step"] = Module["asm"]["Step"]).apply(null, arguments);
        };
        var _StridedSlice = Module["_StridedSlice"] = function() {
            return (_StridedSlice = Module["_StridedSlice"] = Module["asm"]["StridedSlice"]).apply(null, arguments);
        };
        var _Sub = Module["_Sub"] = function() {
            return (_Sub = Module["_Sub"] = Module["asm"]["Sub"]).apply(null, arguments);
        };
        var _Sum = Module["_Sum"] = function() {
            return (_Sum = Module["_Sum"] = Module["asm"]["Sum"]).apply(null, arguments);
        };
        var _Tan = Module["_Tan"] = function() {
            return (_Tan = Module["_Tan"] = Module["asm"]["Tan"]).apply(null, arguments);
        };
        var _Tanh = Module["_Tanh"] = function() {
            return (_Tanh = Module["_Tanh"] = Module["asm"]["Tanh"]).apply(null, arguments);
        };
        var _TensorScatterUpdate = Module["_TensorScatterUpdate"] = function() {
            return (_TensorScatterUpdate = Module["_TensorScatterUpdate"] = Module["asm"]["TensorScatterUpdate"]).apply(null, arguments);
        };
        var _Tile = Module["_Tile"] = function() {
            return (_Tile = Module["_Tile"] = Module["asm"]["Tile"]).apply(null, arguments);
        };
        var _TopK = Module["_TopK"] = function() {
            return (_TopK = Module["_TopK"] = Module["asm"]["TopK"]).apply(null, arguments);
        };
        var _Transform = Module["_Transform"] = function() {
            return (_Transform = Module["_Transform"] = Module["asm"]["Transform"]).apply(null, arguments);
        };
        var _Transpose = Module["_Transpose"] = function() {
            return (_Transpose = Module["_Transpose"] = Module["asm"]["Transpose"]).apply(null, arguments);
        };
        var __FusedMatMul = Module["__FusedMatMul"] = function() {
            return (__FusedMatMul = Module["__FusedMatMul"] = Module["asm"]["_FusedMatMul"]).apply(null, arguments);
        };
        var _malloc = Module["_malloc"] = function() {
            return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
        };
        var _free = Module["_free"] = function() {
            return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
        };
        var ___errno_location = Module["___errno_location"] = function() {
            return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
        };
        var stackSave = Module["stackSave"] = function() {
            return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
        };
        var stackRestore = Module["stackRestore"] = function() {
            return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
        };
        var stackAlloc = Module["stackAlloc"] = function() {
            return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
        };
        var dynCall_iijjiiii = Module["dynCall_iijjiiii"] = function() {
            return (dynCall_iijjiiii = Module["dynCall_iijjiiii"] = Module["asm"]["dynCall_iijjiiii"]).apply(null, arguments);
        };
        var dynCall_jiji = Module["dynCall_jiji"] = function() {
            return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
        };
        Module["cwrap"] = cwrap;
        var calledRun;
        dependenciesFulfilled = function runCaller() {
            if (!calledRun) run();
            if (!calledRun) dependenciesFulfilled = runCaller;
        };
        function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) return;
            preRun();
            if (runDependencies > 0) return;
            function doRun() {
                if (calledRun) return;
                calledRun = true;
                Module["calledRun"] = true;
                if (ABORT) return;
                initRuntime();
                readyPromiseResolve(Module);
                if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
                postRun();
            }
            if (Module["setStatus"]) {
                Module["setStatus"]("Running...");
                setTimeout(function() {
                    setTimeout(function() {
                        Module["setStatus"]("");
                    }, 1);
                    doRun();
                }, 1);
            } else doRun();
        }
        if (Module["preInit"]) {
            if (typeof Module["preInit"] == "function") Module["preInit"] = [
                Module["preInit"]
            ];
            while(Module["preInit"].length > 0)Module["preInit"].pop()();
        }
        run();
        var listenersAdded;
        if (beforeListeners) listenersAdded = {
            uncaughtException: process.listeners("uncaughtException").filter(function(listener) {
                return !beforeListeners.uncaughtException.indexOf(listener) > -1;
            }),
            unhandledRejection: process.listeners("unhandledRejection").filter(function(listener) {
                return !beforeListeners.unhandledRejection.indexOf(listener) > -1;
            })
        };
        var actualModule;
        if (typeof WasmBackendModule !== "undefined") actualModule = WasmBackendModule;
        else if (typeof WasmBackendModuleThreadedSimd !== "undefined") actualModule = WasmBackendModuleThreadedSimd;
        else throw new Error("Could not find wasm module in post.js");
        if (listenersAdded) {
            var tmpDispose = actualModule["_dispose"];
            actualModule["_dispose"] = function() {
                tmpDispose();
                listenersAdded.uncaughtException.forEach(function(listener) {
                    process.removeListener("uncaughtException", listener);
                });
                listenersAdded.unhandledRejection.forEach(function(listener) {
                    process.removeListener("unhandledRejection", listener);
                });
            };
        }
        return WasmBackendModule.ready;
    };
})();
module.exports = WasmBackendModule;

},{"caec8bcdfe9960aa":"d5jf4","4a73517fc90a67e6":"jhUEF","bb12b68c9d27b74":"jhUEF"}],"jRVa9":[function(require,module,exports) {
/** @license See the LICENSE file. */ // This code is auto-generated, do not modify this file!
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = "4.9.0";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djQBs":[function(require,module,exports) {
module.exports = require("7fdb314d94966e93").getBundleURL("ihyVp") + "tfjs-backend-wasm.1f9637bc.wasm" + "?" + Date.now();

},{"7fdb314d94966e93":"lgJ39"}],"f9gZ7":[function(require,module,exports) {
module.exports = require("1bdae66124d7c4a3").getBundleURL("ihyVp") + "tfjs-backend-wasm-simd.ed4eaac9.wasm" + "?" + Date.now();

},{"1bdae66124d7c4a3":"lgJ39"}],"hbhXF":[function(require,module,exports) {
module.exports = require("d227982f0900af05").getBundleURL("ihyVp") + "tfjs-backend-wasm-threaded-simd.bb446df7.wasm" + "?" + Date.now();

},{"d227982f0900af05":"lgJ39"}],"4Binw":[function(require,module,exports) {
var global = arguments[3];
(function() {
    "use strict";
    var v;
    function aa(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: !1,
                value: a[b++]
            } : {
                done: !0
            };
        };
    }
    var ba = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[b] = c.value;
        return a;
    };
    function ca(a) {
        a = [
            "object" == typeof globalThis && globalThis,
            a,
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global
        ];
        for(var b = 0; b < a.length; ++b){
            var c = a[b];
            if (c && c.Math == Math) return c;
        }
        throw Error("Cannot find global object");
    }
    var G = ca(this);
    function J(a, b) {
        if (b) a: {
            var c = G;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                if (!(e in c)) break a;
                c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && ba(c, a, {
                configurable: !0,
                writable: !0,
                value: b
            });
        }
    }
    J("Symbol", function(a) {
        function b(g) {
            if (this instanceof b) throw new TypeError("Symbol is not a constructor");
            return new c(d + (g || "") + "_" + e++, g);
        }
        function c(g, f) {
            this.g = g;
            ba(this, "description", {
                configurable: !0,
                writable: !0,
                value: f
            });
        }
        if (a) return a;
        c.prototype.toString = function() {
            return this.g;
        };
        var d = "jscomp_symbol_" + (1E9 * Math.random() >>> 0) + "_", e = 0;
        return b;
    });
    J("Symbol.iterator", function(a) {
        if (a) return a;
        a = Symbol("Symbol.iterator");
        for(var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++){
            var d = G[b[c]];
            "function" === typeof d && "function" != typeof d.prototype[a] && ba(d.prototype, a, {
                configurable: !0,
                writable: !0,
                value: function() {
                    return da(aa(this));
                }
            });
        }
        return a;
    });
    function da(a) {
        a = {
            next: a
        };
        a[Symbol.iterator] = function() {
            return this;
        };
        return a;
    }
    function K(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: aa(a)
        };
    }
    function L(a) {
        if (!(a instanceof Array)) {
            a = K(a);
            for(var b, c = []; !(b = a.next()).done;)c.push(b.value);
            a = c;
        }
        return a;
    }
    var ea = "function" == typeof Object.create ? Object.create : function(a) {
        function b() {}
        b.prototype = a;
        return new b;
    }, fa;
    if ("function" == typeof Object.setPrototypeOf) fa = Object.setPrototypeOf;
    else {
        var ha;
        a: {
            var ia = {
                a: !0
            }, ja = {};
            try {
                ja.__proto__ = ia;
                ha = ja.a;
                break a;
            } catch (a) {}
            ha = !1;
        }
        fa = ha ? function(a, b) {
            a.__proto__ = b;
            if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
            return a;
        } : null;
    }
    var ka = fa;
    function M(a, b) {
        a.prototype = ea(b.prototype);
        a.prototype.constructor = a;
        if (ka) ka(a, b);
        else for(var c in b)if ("prototype" != c) {
            if (Object.defineProperties) {
                var d = Object.getOwnPropertyDescriptor(b, c);
                d && Object.defineProperty(a, c, d);
            } else a[c] = b[c];
        }
        a.ea = b.prototype;
    }
    function ma() {
        this.l = !1;
        this.i = null;
        this.h = void 0;
        this.g = 1;
        this.s = this.m = 0;
        this.j = null;
    }
    function na(a) {
        if (a.l) throw new TypeError("Generator is already running");
        a.l = !0;
    }
    ma.prototype.o = function(a) {
        this.h = a;
    };
    function oa(a, b) {
        a.j = {
            U: b,
            V: !0
        };
        a.g = a.m || a.s;
    }
    ma.prototype.return = function(a) {
        this.j = {
            return: a
        };
        this.g = this.s;
    };
    function N(a, b, c) {
        a.g = c;
        return {
            value: b
        };
    }
    function pa(a) {
        this.g = new ma;
        this.h = a;
    }
    function qa(a, b) {
        na(a.g);
        var c = a.g.i;
        if (c) return ra(a, "return" in c ? c["return"] : function(d) {
            return {
                value: d,
                done: !0
            };
        }, b, a.g.return);
        a.g.return(b);
        return sa(a);
    }
    function ra(a, b, c, d) {
        try {
            var e = b.call(a.g.i, c);
            if (!(e instanceof Object)) throw new TypeError("Iterator result " + e + " is not an object");
            if (!e.done) return a.g.l = !1, e;
            var g = e.value;
        } catch (f) {
            return a.g.i = null, oa(a.g, f), sa(a);
        }
        a.g.i = null;
        d.call(a.g, g);
        return sa(a);
    }
    function sa(a) {
        for(; a.g.g;)try {
            var b = a.h(a.g);
            if (b) return a.g.l = !1, {
                value: b.value,
                done: !1
            };
        } catch (c) {
            a.g.h = void 0, oa(a.g, c);
        }
        a.g.l = !1;
        if (a.g.j) {
            b = a.g.j;
            a.g.j = null;
            if (b.V) throw b.U;
            return {
                value: b.return,
                done: !0
            };
        }
        return {
            value: void 0,
            done: !0
        };
    }
    function ta(a) {
        this.next = function(b) {
            na(a.g);
            a.g.i ? b = ra(a, a.g.i.next, b, a.g.o) : (a.g.o(b), b = sa(a));
            return b;
        };
        this.throw = function(b) {
            na(a.g);
            a.g.i ? b = ra(a, a.g.i["throw"], b, a.g.o) : (oa(a.g, b), b = sa(a));
            return b;
        };
        this.return = function(b) {
            return qa(a, b);
        };
        this[Symbol.iterator] = function() {
            return this;
        };
    }
    function O(a, b) {
        b = new ta(new pa(b));
        ka && a.prototype && ka(b, a.prototype);
        return b;
    }
    function ua(a, b) {
        a instanceof String && (a += "");
        var c = 0, d = !1, e = {
            next: function() {
                if (!d && c < a.length) {
                    var g = c++;
                    return {
                        value: b(g, a[g]),
                        done: !1
                    };
                }
                d = !0;
                return {
                    done: !0,
                    value: void 0
                };
            }
        };
        e[Symbol.iterator] = function() {
            return e;
        };
        return e;
    }
    var va = "function" == typeof Object.assign ? Object.assign : function(a, b) {
        for(var c = 1; c < arguments.length; c++){
            var d = arguments[c];
            if (d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e]);
        }
        return a;
    };
    J("Object.assign", function(a) {
        return a || va;
    });
    J("Promise", function(a) {
        function b(f) {
            this.h = 0;
            this.i = void 0;
            this.g = [];
            this.o = !1;
            var h = this.j();
            try {
                f(h.resolve, h.reject);
            } catch (k) {
                h.reject(k);
            }
        }
        function c() {
            this.g = null;
        }
        function d(f) {
            return f instanceof b ? f : new b(function(h) {
                h(f);
            });
        }
        if (a) return a;
        c.prototype.h = function(f) {
            if (null == this.g) {
                this.g = [];
                var h = this;
                this.i(function() {
                    h.l();
                });
            }
            this.g.push(f);
        };
        var e = G.setTimeout;
        c.prototype.i = function(f) {
            e(f, 0);
        };
        c.prototype.l = function() {
            for(; this.g && this.g.length;){
                var f = this.g;
                this.g = [];
                for(var h = 0; h < f.length; ++h){
                    var k = f[h];
                    f[h] = null;
                    try {
                        k();
                    } catch (l) {
                        this.j(l);
                    }
                }
            }
            this.g = null;
        };
        c.prototype.j = function(f) {
            this.i(function() {
                throw f;
            });
        };
        b.prototype.j = function() {
            function f(l) {
                return function(n) {
                    k || (k = !0, l.call(h, n));
                };
            }
            var h = this, k = !1;
            return {
                resolve: f(this.C),
                reject: f(this.l)
            };
        };
        b.prototype.C = function(f) {
            if (f === this) this.l(new TypeError("A Promise cannot resolve to itself"));
            else if (f instanceof b) this.F(f);
            else {
                a: switch(typeof f){
                    case "object":
                        var h = null != f;
                        break a;
                    case "function":
                        h = !0;
                        break a;
                    default:
                        h = !1;
                }
                h ? this.u(f) : this.m(f);
            }
        };
        b.prototype.u = function(f) {
            var h = void 0;
            try {
                h = f.then;
            } catch (k) {
                this.l(k);
                return;
            }
            "function" == typeof h ? this.G(h, f) : this.m(f);
        };
        b.prototype.l = function(f) {
            this.s(2, f);
        };
        b.prototype.m = function(f) {
            this.s(1, f);
        };
        b.prototype.s = function(f, h) {
            if (0 != this.h) throw Error("Cannot settle(" + f + ", " + h + "): Promise already settled in state" + this.h);
            this.h = f;
            this.i = h;
            2 === this.h && this.D();
            this.A();
        };
        b.prototype.D = function() {
            var f = this;
            e(function() {
                if (f.B()) {
                    var h = G.console;
                    "undefined" !== typeof h && h.error(f.i);
                }
            }, 1);
        };
        b.prototype.B = function() {
            if (this.o) return !1;
            var f = G.CustomEvent, h = G.Event, k = G.dispatchEvent;
            if ("undefined" === typeof k) return !0;
            "function" === typeof f ? f = new f("unhandledrejection", {
                cancelable: !0
            }) : "function" === typeof h ? f = new h("unhandledrejection", {
                cancelable: !0
            }) : (f = G.document.createEvent("CustomEvent"), f.initCustomEvent("unhandledrejection", !1, !0, f));
            f.promise = this;
            f.reason = this.i;
            return k(f);
        };
        b.prototype.A = function() {
            if (null != this.g) {
                for(var f = 0; f < this.g.length; ++f)g.h(this.g[f]);
                this.g = null;
            }
        };
        var g = new c;
        b.prototype.F = function(f) {
            var h = this.j();
            f.J(h.resolve, h.reject);
        };
        b.prototype.G = function(f, h) {
            var k = this.j();
            try {
                f.call(h, k.resolve, k.reject);
            } catch (l) {
                k.reject(l);
            }
        };
        b.prototype.then = function(f, h) {
            function k(w, r) {
                return "function" == typeof w ? function(y) {
                    try {
                        l(w(y));
                    } catch (m) {
                        n(m);
                    }
                } : r;
            }
            var l, n, u = new b(function(w, r) {
                l = w;
                n = r;
            });
            this.J(k(f, l), k(h, n));
            return u;
        };
        b.prototype.catch = function(f) {
            return this.then(void 0, f);
        };
        b.prototype.J = function(f, h) {
            function k() {
                switch(l.h){
                    case 1:
                        f(l.i);
                        break;
                    case 2:
                        h(l.i);
                        break;
                    default:
                        throw Error("Unexpected state: " + l.h);
                }
            }
            var l = this;
            null == this.g ? g.h(k) : this.g.push(k);
            this.o = !0;
        };
        b.resolve = d;
        b.reject = function(f) {
            return new b(function(h, k) {
                k(f);
            });
        };
        b.race = function(f) {
            return new b(function(h, k) {
                for(var l = K(f), n = l.next(); !n.done; n = l.next())d(n.value).J(h, k);
            });
        };
        b.all = function(f) {
            var h = K(f), k = h.next();
            return k.done ? d([]) : new b(function(l, n) {
                function u(y) {
                    return function(m) {
                        w[y] = m;
                        r--;
                        0 == r && l(w);
                    };
                }
                var w = [], r = 0;
                do w.push(void 0), r++, d(k.value).J(u(w.length - 1), n), k = h.next();
                while (!k.done);
            });
        };
        return b;
    });
    J("Object.is", function(a) {
        return a ? a : function(b, c) {
            return b === c ? 0 !== b || 1 / b === 1 / c : b !== b && c !== c;
        };
    });
    J("Array.prototype.includes", function(a) {
        return a ? a : function(b, c) {
            var d = this;
            d instanceof String && (d = String(d));
            var e = d.length;
            c = c || 0;
            for(0 > c && (c = Math.max(c + e, 0)); c < e; c++){
                var g = d[c];
                if (g === b || Object.is(g, b)) return !0;
            }
            return !1;
        };
    });
    J("String.prototype.includes", function(a) {
        return a ? a : function(b, c) {
            if (null == this) throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");
            if (b instanceof RegExp) throw new TypeError("First argument to String.prototype.includes must not be a regular expression");
            return -1 !== this.indexOf(b, c || 0);
        };
    });
    J("Array.prototype.keys", function(a) {
        return a ? a : function() {
            return ua(this, function(b) {
                return b;
            });
        };
    });
    var wa = this || self;
    function P(a, b) {
        a = a.split(".");
        var c = wa;
        a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
        for(var d; a.length && (d = a.shift());)a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {} : c[d] = b;
    }
    function xa(a, b) {
        b = String.fromCharCode.apply(null, b);
        return null == a ? b : a + b;
    }
    var ya, za = "undefined" !== typeof TextDecoder, Aa, Ba = "undefined" !== typeof TextEncoder;
    function Ca(a) {
        if (Ba) a = (Aa || (Aa = new TextEncoder)).encode(a);
        else {
            var b = void 0;
            b = void 0 === b ? !1 : b;
            for(var c = 0, d = new Uint8Array(3 * a.length), e = 0; e < a.length; e++){
                var g = a.charCodeAt(e);
                if (128 > g) d[c++] = g;
                else {
                    if (2048 > g) d[c++] = g >> 6 | 192;
                    else {
                        if (55296 <= g && 57343 >= g) {
                            if (56319 >= g && e < a.length) {
                                var f = a.charCodeAt(++e);
                                if (56320 <= f && 57343 >= f) {
                                    g = 1024 * (g - 55296) + f - 56320 + 65536;
                                    d[c++] = g >> 18 | 240;
                                    d[c++] = g >> 12 & 63 | 128;
                                    d[c++] = g >> 6 & 63 | 128;
                                    d[c++] = g & 63 | 128;
                                    continue;
                                } else e--;
                            }
                            if (b) throw Error("Found an unpaired surrogate");
                            g = 65533;
                        }
                        d[c++] = g >> 12 | 224;
                        d[c++] = g >> 6 & 63 | 128;
                    }
                    d[c++] = g & 63 | 128;
                }
            }
            a = d.subarray(0, c);
        }
        return a;
    }
    var Da = {}, Ea = null;
    function Fa(a, b) {
        void 0 === b && (b = 0);
        Ga();
        b = Da[b];
        for(var c = Array(Math.floor(a.length / 3)), d = b[64] || "", e = 0, g = 0; e < a.length - 2; e += 3){
            var f = a[e], h = a[e + 1], k = a[e + 2], l = b[f >> 2];
            f = b[(f & 3) << 4 | h >> 4];
            h = b[(h & 15) << 2 | k >> 6];
            k = b[k & 63];
            c[g++] = l + f + h + k;
        }
        l = 0;
        k = d;
        switch(a.length - e){
            case 2:
                l = a[e + 1], k = b[(l & 15) << 2] || d;
            case 1:
                a = a[e], c[g] = b[a >> 2] + b[(a & 3) << 4 | l >> 4] + k + d;
        }
        return c.join("");
    }
    function Ha(a) {
        var b = a.length, c = 3 * b / 4;
        c % 3 ? c = Math.floor(c) : -1 != "=.".indexOf(a[b - 1]) && (c = -1 != "=.".indexOf(a[b - 2]) ? c - 2 : c - 1);
        var d = new Uint8Array(c), e = 0;
        Ia(a, function(g) {
            d[e++] = g;
        });
        return d.subarray(0, e);
    }
    function Ia(a, b) {
        function c(k) {
            for(; d < a.length;){
                var l = a.charAt(d++), n = Ea[l];
                if (null != n) return n;
                if (!/^[\s\xa0]*$/.test(l)) throw Error("Unknown base64 encoding at char: " + l);
            }
            return k;
        }
        Ga();
        for(var d = 0;;){
            var e = c(-1), g = c(0), f = c(64), h = c(64);
            if (64 === h && -1 === e) break;
            b(e << 2 | g >> 4);
            64 != f && (b(g << 4 & 240 | f >> 2), 64 != h && b(f << 6 & 192 | h));
        }
    }
    function Ga() {
        if (!Ea) {
            Ea = {};
            for(var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = [
                "+/=",
                "+/",
                "-_=",
                "-_.",
                "-_"
            ], c = 0; 5 > c; c++){
                var d = a.concat(b[c].split(""));
                Da[c] = d;
                for(var e = 0; e < d.length; e++){
                    var g = d[e];
                    void 0 === Ea[g] && (Ea[g] = e);
                }
            }
        }
    }
    var Ja = "function" === typeof Uint8Array.prototype.slice, Ka;
    function La(a, b, c) {
        return b === c ? Ka || (Ka = new Uint8Array(0)) : Ja ? a.slice(b, c) : new Uint8Array(a.subarray(b, c));
    }
    var Q = 0, R = 0;
    function Ma(a, b) {
        b = void 0 === b ? {} : b;
        b = void 0 === b.v ? !1 : b.v;
        this.h = null;
        this.g = this.j = this.l = 0;
        this.m = !1;
        this.v = b;
        a && Na(this, a);
    }
    function Na(a, b) {
        b = b.constructor === Uint8Array ? b : b.constructor === ArrayBuffer ? new Uint8Array(b) : b.constructor === Array ? new Uint8Array(b) : b.constructor === String ? Ha(b) : b instanceof Uint8Array ? new Uint8Array(b.buffer, b.byteOffset, b.byteLength) : new Uint8Array(0);
        a.h = b;
        a.l = 0;
        a.j = a.h.length;
        a.g = a.l;
    }
    Ma.prototype.reset = function() {
        this.g = this.l;
    };
    function Oa(a) {
        for(var b = 128, c = 0, d = 0, e = 0; 4 > e && 128 <= b; e++)b = a.h[a.g++], c |= (b & 127) << 7 * e;
        128 <= b && (b = a.h[a.g++], c |= (b & 127) << 28, d |= (b & 127) >> 4);
        if (128 <= b) for(e = 0; 5 > e && 128 <= b; e++)b = a.h[a.g++], d |= (b & 127) << 7 * e + 3;
        if (128 > b) {
            a = c >>> 0;
            b = d >>> 0;
            if (d = b & 2147483648) a = ~a + 1 >>> 0, b = ~b >>> 0, 0 == a && (b = b + 1 >>> 0);
            a = 4294967296 * b + (a >>> 0);
            return d ? -a : a;
        }
        a.m = !0;
    }
    Ma.prototype.i = function() {
        var a = this.h, b = a[this.g], c = b & 127;
        if (128 > b) return this.g += 1, c;
        b = a[this.g + 1];
        c |= (b & 127) << 7;
        if (128 > b) return this.g += 2, c;
        b = a[this.g + 2];
        c |= (b & 127) << 14;
        if (128 > b) return this.g += 3, c;
        b = a[this.g + 3];
        c |= (b & 127) << 21;
        if (128 > b) return this.g += 4, c;
        b = a[this.g + 4];
        c |= (b & 15) << 28;
        if (128 > b) return this.g += 5, c >>> 0;
        this.g += 5;
        128 <= a[this.g++] && 128 <= a[this.g++] && 128 <= a[this.g++] && 128 <= a[this.g++] && this.g++;
        return c;
    };
    Ma.prototype.o = function() {
        var a = this.h[this.g], b = this.h[this.g + 1];
        var c = this.h[this.g + 2];
        var d = this.h[this.g + 3];
        this.g += 4;
        c = (a << 0 | b << 8 | c << 16 | d << 24) >>> 0;
        a = 2 * (c >> 31) + 1;
        b = c >>> 23 & 255;
        c &= 8388607;
        return 255 == b ? c ? NaN : Infinity * a : 0 == b ? a * Math.pow(2, -149) * c : a * Math.pow(2, b - 150) * (c + Math.pow(2, 23));
    };
    var Pa = [];
    function Qa() {
        this.g = new Uint8Array(64);
        this.h = 0;
    }
    Qa.prototype.push = function(a) {
        if (!(this.h + 1 < this.g.length)) {
            var b = this.g;
            this.g = new Uint8Array(Math.ceil(1 + 2 * this.g.length));
            this.g.set(b);
        }
        this.g[this.h++] = a;
    };
    Qa.prototype.length = function() {
        return this.h;
    };
    Qa.prototype.end = function() {
        var a = this.g, b = this.h;
        this.h = 0;
        return La(a, 0, b);
    };
    function Ra(a, b) {
        for(; 127 < b;)a.push(b & 127 | 128), b >>>= 7;
        a.push(b);
    }
    function Sa(a) {
        var b = {}, c = void 0 === b.N ? !1 : b.N;
        this.o = {
            v: void 0 === b.v ? !1 : b.v
        };
        this.N = c;
        b = this.o;
        Pa.length ? (c = Pa.pop(), b && (c.v = b.v), a && Na(c, a), a = c) : a = new Ma(a, b);
        this.g = a;
        this.m = this.g.g;
        this.h = this.i = this.l = -1;
        this.j = !1;
    }
    Sa.prototype.reset = function() {
        this.g.reset();
        this.h = this.l = -1;
    };
    function S(a) {
        var b = a.g;
        (b = b.g == b.j) || (b = a.j) || (b = a.g, b = b.m || 0 > b.g || b.g > b.j);
        if (b) return !1;
        a.m = a.g.g;
        b = a.g.i();
        var c = b & 7;
        if (0 != c && 5 != c && 1 != c && 2 != c && 3 != c && 4 != c) return a.j = !0, !1;
        a.i = b;
        a.l = b >>> 3;
        a.h = c;
        return !0;
    }
    function Ta(a) {
        switch(a.h){
            case 0:
                if (0 != a.h) Ta(a);
                else {
                    for(a = a.g; a.h[a.g] & 128;)a.g++;
                    a.g++;
                }
                break;
            case 1:
                1 != a.h ? Ta(a) : (a = a.g, a.g += 8);
                break;
            case 2:
                if (2 != a.h) Ta(a);
                else {
                    var b = a.g.i();
                    a = a.g;
                    a.g += b;
                }
                break;
            case 5:
                5 != a.h ? Ta(a) : (a = a.g, a.g += 4);
                break;
            case 3:
                b = a.l;
                do {
                    if (!S(a)) {
                        a.j = !0;
                        break;
                    }
                    if (4 == a.h) {
                        a.l != b && (a.j = !0);
                        break;
                    }
                    Ta(a);
                }while (1);
                break;
            default:
                a.j = !0;
        }
    }
    function Ua(a, b, c) {
        var d = a.g.j, e = a.g.i(), g = a.g.g + e;
        a.g.j = g;
        c(b, a);
        c = g - a.g.g;
        if (0 !== c) throw Error("Message parsing ended unexpectedly. Expected to read " + e + " bytes, instead read " + (e - c) + " bytes, either the data ended unexpectedly or the message misreported its own length");
        a.g.g = g;
        a.g.j = d;
        return b;
    }
    function T(a) {
        return a.g.o();
    }
    function Va(a) {
        var b = a.g.i();
        a = a.g;
        var c = a.g;
        a.g += b;
        a = a.h;
        var d;
        if (za) (d = ya) || (d = ya = new TextDecoder("utf-8", {
            fatal: !1
        })), d = d.decode(a.subarray(c, c + b));
        else {
            b = c + b;
            for(var e = [], g = null, f, h, k; c < b;)f = a[c++], 128 > f ? e.push(f) : 224 > f ? c >= b ? e.push(65533) : (h = a[c++], 194 > f || 128 !== (h & 192) ? (c--, e.push(65533)) : e.push((f & 31) << 6 | h & 63)) : 240 > f ? c >= b - 1 ? e.push(65533) : (h = a[c++], 128 !== (h & 192) || 224 === f && 160 > h || 237 === f && 160 <= h || 128 !== ((d = a[c++]) & 192) ? (c--, e.push(65533)) : e.push((f & 15) << 12 | (h & 63) << 6 | d & 63)) : 244 >= f ? c >= b - 2 ? e.push(65533) : (h = a[c++], 128 !== (h & 192) || 0 !== (f << 28) + (h - 144) >> 30 || 128 !== ((d = a[c++]) & 192) || 128 !== ((k = a[c++]) & 192) ? (c--, e.push(65533)) : (f = (f & 7) << 18 | (h & 63) << 12 | (d & 63) << 6 | k & 63, f -= 65536, e.push((f >> 10 & 1023) + 55296, (f & 1023) + 56320))) : e.push(65533), 8192 <= e.length && (g = xa(g, e), e.length = 0);
            d = xa(g, e);
        }
        return d;
    }
    function Wa(a, b, c) {
        var d = a.g.i();
        for(d = a.g.g + d; a.g.g < d;)c.push(b.call(a.g));
    }
    function Xa(a, b) {
        2 == a.h ? Wa(a, Ma.prototype.o, b) : b.push(T(a));
    }
    function Ya() {
        this.h = [];
        this.i = 0;
        this.g = new Qa;
    }
    function Za(a, b) {
        0 !== b.length && (a.h.push(b), a.i += b.length);
    }
    function $a(a) {
        var b = a.i + a.g.length();
        if (0 === b) return new Uint8Array(0);
        b = new Uint8Array(b);
        for(var c = a.h, d = c.length, e = 0, g = 0; g < d; g++){
            var f = c[g];
            0 !== f.length && (b.set(f, e), e += f.length);
        }
        c = a.g;
        d = c.h;
        0 !== d && (b.set(c.g.subarray(0, d), e), c.h = 0);
        a.h = [
            b
        ];
        return b;
    }
    function U(a, b, c) {
        if (null != c) {
            Ra(a.g, 8 * b + 5);
            a = a.g;
            var d = c;
            d = (c = 0 > d ? 1 : 0) ? -d : d;
            0 === d ? 0 < 1 / d ? Q = R = 0 : (R = 0, Q = 2147483648) : isNaN(d) ? (R = 0, Q = 2147483647) : 3.4028234663852886E38 < d ? (R = 0, Q = (c << 31 | 2139095040) >>> 0) : 1.1754943508222875E-38 > d ? (d = Math.round(d / Math.pow(2, -149)), R = 0, Q = (c << 31 | d) >>> 0) : (b = Math.floor(Math.log(d) / Math.LN2), d *= Math.pow(2, -b), d = Math.round(8388608 * d), 16777216 <= d && ++b, R = 0, Q = (c << 31 | b + 127 << 23 | d & 8388607) >>> 0);
            c = Q;
            a.push(c >>> 0 & 255);
            a.push(c >>> 8 & 255);
            a.push(c >>> 16 & 255);
            a.push(c >>> 24 & 255);
        }
    }
    var ab = "function" === typeof Uint8Array;
    function bb(a, b, c) {
        if (null != a) return "object" === typeof a ? ab && a instanceof Uint8Array ? c(a) : cb(a, b, c) : b(a);
    }
    function cb(a, b, c) {
        if (Array.isArray(a)) {
            for(var d = Array(a.length), e = 0; e < a.length; e++)d[e] = bb(a[e], b, c);
            Array.isArray(a) && a.W && db(d);
            return d;
        }
        d = {};
        for(e in a)d[e] = bb(a[e], b, c);
        return d;
    }
    function eb(a) {
        return "number" === typeof a ? isFinite(a) ? a : String(a) : a;
    }
    var fb = {
        W: {
            value: !0,
            configurable: !0
        }
    };
    function db(a) {
        Array.isArray(a) && !Object.isFrozen(a) && Object.defineProperties(a, fb);
        return a;
    }
    var gb;
    function V(a, b, c) {
        var d = gb;
        gb = null;
        a || (a = d);
        d = this.constructor.ca;
        a || (a = d ? [
            d
        ] : []);
        this.j = d ? 0 : -1;
        this.m = this.g = null;
        this.h = a;
        a: {
            d = this.h.length;
            a = d - 1;
            if (d && (d = this.h[a], !(null === d || "object" != typeof d || Array.isArray(d) || ab && d instanceof Uint8Array))) {
                this.l = a - this.j;
                this.i = d;
                break a;
            }
            void 0 !== b && -1 < b ? (this.l = Math.max(b, a + 1 - this.j), this.i = null) : this.l = Number.MAX_VALUE;
        }
        if (c) for(b = 0; b < c.length; b++)a = c[b], a < this.l ? (a += this.j, (d = this.h[a]) ? db(d) : this.h[a] = hb) : (ib(this), (d = this.i[a]) ? db(d) : this.i[a] = hb);
    }
    var hb = Object.freeze(db([]));
    function ib(a) {
        var b = a.l + a.j;
        a.h[b] || (a.i = a.h[b] = {});
    }
    function W(a, b, c) {
        return -1 === b ? null : (void 0 === c ? 0 : c) || b >= a.l ? a.i ? a.i[b] : void 0 : a.h[b + a.j];
    }
    function jb(a, b) {
        var c = void 0 === c ? !1 : c;
        var d = W(a, b, c);
        null == d && (d = hb);
        d === hb && (d = db([]), X(a, b, d, c));
        return d;
    }
    function kb(a) {
        var b = jb(a, 3);
        a.m || (a.m = {});
        if (!a.m[3]) {
            for(var c = 0; c < b.length; c++)b[c] = +b[c];
            a.m[3] = !0;
        }
        return b;
    }
    function lb(a, b, c) {
        a = W(a, b);
        return null == a ? c : a;
    }
    function Y(a, b, c) {
        a = W(a, b);
        a = null == a ? a : +a;
        return null == a ? void 0 === c ? 0 : c : a;
    }
    function X(a, b, c, d) {
        (void 0 === d ? 0 : d) || b >= a.l ? (ib(a), a.i[b] = c) : a.h[b + a.j] = c;
    }
    function mb(a, b, c) {
        if (-1 === c) return null;
        a.g || (a.g = {});
        if (!a.g[c]) {
            var d = W(a, c, !1);
            d && (a.g[c] = new b(d));
        }
        return a.g[c];
    }
    function nb(a, b) {
        a.g || (a.g = {});
        var c = a.g[1];
        if (!c) {
            var d = jb(a, 1);
            c = [];
            for(var e = 0; e < d.length; e++)c[e] = new b(d[e]);
            a.g[1] = c;
        }
        return c;
    }
    function ob(a, b, c) {
        var d = void 0 === d ? !1 : d;
        a.g || (a.g = {});
        var e = c ? pb(c, !1) : c;
        a.g[b] = c;
        X(a, b, e, d);
    }
    function qb(a, b, c, d) {
        var e = nb(a, c);
        b = b ? b : new c;
        a = jb(a, 1);
        void 0 != d ? (e.splice(d, 0, b), a.splice(d, 0, pb(b, !1))) : (e.push(b), a.push(pb(b, !1)));
    }
    V.prototype.toJSON = function() {
        var a = pb(this, !1);
        return cb(a, eb, Fa);
    };
    function pb(a, b) {
        if (a.g) for(var c in a.g){
            var d = a.g[c];
            if (Array.isArray(d)) for(var e = 0; e < d.length; e++)d[e] && pb(d[e], b);
            else d && pb(d, b);
        }
        return a.h;
    }
    V.prototype.toString = function() {
        return pb(this, !1).toString();
    };
    function rb(a, b) {
        if (a = a.o) {
            Za(b, b.g.end());
            for(var c = 0; c < a.length; c++)Za(b, a[c]);
        }
    }
    function sb(a, b) {
        if (4 == b.h) return !1;
        var c = b.m;
        Ta(b);
        b.N || (b = La(b.g.h, c, b.g.g), (c = a.o) ? c.push(b) : a.o = [
            b
        ]);
        return !0;
    }
    function tb(a) {
        V.call(this, a, -1, ub);
    }
    M(tb, V);
    tb.prototype.getRows = function() {
        return W(this, 1);
    };
    tb.prototype.getCols = function() {
        return W(this, 2);
    };
    tb.prototype.getPackedDataList = function() {
        return kb(this);
    };
    tb.prototype.getLayout = function() {
        return lb(this, 4, 0);
    };
    function vb(a, b) {
        for(; S(b);)switch(b.i){
            case 8:
                var c = b.g.i();
                X(a, 1, c);
                break;
            case 16:
                c = b.g.i();
                X(a, 2, c);
                break;
            case 29:
            case 26:
                Xa(b, a.getPackedDataList());
                break;
            case 32:
                c = Oa(b.g);
                X(a, 4, c);
                break;
            default:
                if (!sb(a, b)) return a;
        }
        return a;
    }
    var ub = [
        3
    ];
    function Z(a, b) {
        var c = void 0;
        return new (c || (c = Promise))(function(d, e) {
            function g(k) {
                try {
                    h(b.next(k));
                } catch (l) {
                    e(l);
                }
            }
            function f(k) {
                try {
                    h(b["throw"](k));
                } catch (l) {
                    e(l);
                }
            }
            function h(k) {
                k.done ? d(k.value) : new c(function(l) {
                    l(k.value);
                }).then(g, f);
            }
            h((b = b.apply(a, void 0)).next());
        });
    }
    function wb(a) {
        V.call(this, a);
    }
    M(wb, V);
    function xb(a, b) {
        for(; S(b);)switch(b.i){
            case 8:
                var c = b.g.i();
                X(a, 1, c);
                break;
            case 21:
                c = T(b);
                X(a, 2, c);
                break;
            case 26:
                c = Va(b);
                X(a, 3, c);
                break;
            case 34:
                c = Va(b);
                X(a, 4, c);
                break;
            default:
                if (!sb(a, b)) return a;
        }
        return a;
    }
    function yb(a) {
        V.call(this, a, -1, zb);
    }
    M(yb, V);
    yb.prototype.addClassification = function(a, b) {
        qb(this, a, wb, b);
        return this;
    };
    var zb = [
        1
    ];
    function Ab(a) {
        V.call(this, a);
    }
    M(Ab, V);
    function Bb(a, b) {
        for(; S(b);)switch(b.i){
            case 13:
                var c = T(b);
                X(a, 1, c);
                break;
            case 21:
                c = T(b);
                X(a, 2, c);
                break;
            case 29:
                c = T(b);
                X(a, 3, c);
                break;
            case 37:
                c = T(b);
                X(a, 4, c);
                break;
            case 45:
                c = T(b);
                X(a, 5, c);
                break;
            default:
                if (!sb(a, b)) return a;
        }
        return a;
    }
    function Cb(a) {
        V.call(this, a, -1, Db);
    }
    M(Cb, V);
    function Eb(a) {
        a: {
            var b = new Cb;
            for(a = new Sa(a); S(a);)switch(a.i){
                case 10:
                    var c = Ua(a, new Ab, Bb);
                    qb(b, c, Ab, void 0);
                    break;
                default:
                    if (!sb(b, a)) break a;
            }
        }
        return b;
    }
    var Db = [
        1
    ];
    function Fb(a) {
        V.call(this, a);
    }
    M(Fb, V);
    function Gb(a) {
        V.call(this, a, -1, Hb);
    }
    M(Gb, V);
    Gb.prototype.getVertexType = function() {
        return lb(this, 1, 0);
    };
    Gb.prototype.getPrimitiveType = function() {
        return lb(this, 2, 0);
    };
    Gb.prototype.getVertexBufferList = function() {
        return kb(this);
    };
    Gb.prototype.getIndexBufferList = function() {
        return jb(this, 4);
    };
    function Ib(a, b) {
        for(; S(b);)switch(b.i){
            case 8:
                var c = Oa(b.g);
                X(a, 1, c);
                break;
            case 16:
                c = Oa(b.g);
                X(a, 2, c);
                break;
            case 29:
            case 26:
                Xa(b, a.getVertexBufferList());
                break;
            case 32:
            case 34:
                c = b;
                var d = a.getIndexBufferList();
                2 == c.h ? Wa(c, Ma.prototype.i, d) : d.push(c.g.i());
                break;
            default:
                if (!sb(a, b)) return a;
        }
        return a;
    }
    var Hb = [
        3,
        4
    ];
    function Jb(a) {
        V.call(this, a);
    }
    M(Jb, V);
    Jb.prototype.getMesh = function() {
        return mb(this, Gb, 1);
    };
    Jb.prototype.getPoseTransformMatrix = function() {
        return mb(this, tb, 2);
    };
    function Kb(a) {
        a: {
            var b = new Jb;
            for(a = new Sa(a); S(a);)switch(a.i){
                case 10:
                    var c = Ua(a, new Gb, Ib);
                    ob(b, 1, c);
                    break;
                case 18:
                    c = Ua(a, new tb, vb);
                    ob(b, 2, c);
                    break;
                default:
                    if (!sb(b, a)) break a;
            }
        }
        return b;
    }
    function Lb(a, b, c) {
        c = a.createShader(0 === c ? a.VERTEX_SHADER : a.FRAGMENT_SHADER);
        a.shaderSource(c, b);
        a.compileShader(c);
        if (!a.getShaderParameter(c, a.COMPILE_STATUS)) throw Error("Could not compile WebGL shader.\n\n" + a.getShaderInfoLog(c));
        return c;
    }
    function Mb(a) {
        return nb(a, wb).map(function(b) {
            return {
                index: lb(b, 1, 0),
                Y: Y(b, 2),
                label: null != W(b, 3) ? lb(b, 3, "") : void 0,
                displayName: null != W(b, 4) ? lb(b, 4, "") : void 0
            };
        });
    }
    function Nb(a) {
        return {
            x: Y(a, 1),
            y: Y(a, 2),
            z: Y(a, 3),
            visibility: null != W(a, 4) ? Y(a, 4) : void 0
        };
    }
    function Ob(a, b) {
        this.h = a;
        this.g = b;
        this.l = 0;
    }
    function Pb(a, b, c) {
        Qb(a, b);
        if ("function" === typeof a.g.canvas.transferToImageBitmap) return Promise.resolve(a.g.canvas.transferToImageBitmap());
        if (c) return Promise.resolve(a.g.canvas);
        if ("function" === typeof createImageBitmap) return createImageBitmap(a.g.canvas);
        void 0 === a.i && (a.i = document.createElement("canvas"));
        return new Promise(function(d) {
            a.i.height = a.g.canvas.height;
            a.i.width = a.g.canvas.width;
            a.i.getContext("2d", {}).drawImage(a.g.canvas, 0, 0, a.g.canvas.width, a.g.canvas.height);
            d(a.i);
        });
    }
    function Qb(a, b) {
        var c = a.g;
        if (void 0 === a.m) {
            var d = Lb(c, "\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }", 0), e = Lb(c, "\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }", 1), g = c.createProgram();
            c.attachShader(g, d);
            c.attachShader(g, e);
            c.linkProgram(g);
            if (!c.getProgramParameter(g, c.LINK_STATUS)) throw Error("Could not compile WebGL program.\n\n" + c.getProgramInfoLog(g));
            d = a.m = g;
            c.useProgram(d);
            e = c.getUniformLocation(d, "sampler0");
            a.j = {
                I: c.getAttribLocation(d, "aVertex"),
                H: c.getAttribLocation(d, "aTex"),
                da: e
            };
            a.s = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, a.s);
            c.enableVertexAttribArray(a.j.I);
            c.vertexAttribPointer(a.j.I, 2, c.FLOAT, !1, 0, 0);
            c.bufferData(c.ARRAY_BUFFER, new Float32Array([
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1
            ]), c.STATIC_DRAW);
            c.bindBuffer(c.ARRAY_BUFFER, null);
            a.o = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, a.o);
            c.enableVertexAttribArray(a.j.H);
            c.vertexAttribPointer(a.j.H, 2, c.FLOAT, !1, 0, 0);
            c.bufferData(c.ARRAY_BUFFER, new Float32Array([
                0,
                1,
                0,
                0,
                1,
                0,
                1,
                1
            ]), c.STATIC_DRAW);
            c.bindBuffer(c.ARRAY_BUFFER, null);
            c.uniform1i(e, 0);
        }
        d = a.j;
        c.useProgram(a.m);
        c.canvas.width = b.width;
        c.canvas.height = b.height;
        c.viewport(0, 0, b.width, b.height);
        c.activeTexture(c.TEXTURE0);
        a.h.bindTexture2d(b.glName);
        c.enableVertexAttribArray(d.I);
        c.bindBuffer(c.ARRAY_BUFFER, a.s);
        c.vertexAttribPointer(d.I, 2, c.FLOAT, !1, 0, 0);
        c.enableVertexAttribArray(d.H);
        c.bindBuffer(c.ARRAY_BUFFER, a.o);
        c.vertexAttribPointer(d.H, 2, c.FLOAT, !1, 0, 0);
        c.bindFramebuffer(c.DRAW_FRAMEBUFFER ? c.DRAW_FRAMEBUFFER : c.FRAMEBUFFER, null);
        c.clearColor(0, 0, 0, 0);
        c.clear(c.COLOR_BUFFER_BIT);
        c.colorMask(!0, !0, !0, !0);
        c.drawArrays(c.TRIANGLE_FAN, 0, 4);
        c.disableVertexAttribArray(d.I);
        c.disableVertexAttribArray(d.H);
        c.bindBuffer(c.ARRAY_BUFFER, null);
        a.h.bindTexture2d(0);
    }
    function Rb(a) {
        this.g = a;
    }
    var Sb = new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        4,
        1,
        96,
        0,
        0,
        3,
        2,
        1,
        0,
        10,
        9,
        1,
        7,
        0,
        65,
        0,
        253,
        15,
        26,
        11
    ]);
    function Tb(a, b) {
        return b + a;
    }
    function Ub(a, b) {
        window[a] = b;
    }
    function Vb(a) {
        var b = document.createElement("script");
        b.setAttribute("src", a);
        b.setAttribute("crossorigin", "anonymous");
        return new Promise(function(c) {
            b.addEventListener("load", function() {
                c();
            }, !1);
            b.addEventListener("error", function() {
                c();
            }, !1);
            document.body.appendChild(b);
        });
    }
    function Wb() {
        return Z(this, function b() {
            return O(b, function(c) {
                switch(c.g){
                    case 1:
                        return c.m = 2, N(c, WebAssembly.instantiate(Sb), 4);
                    case 4:
                        c.g = 3;
                        c.m = 0;
                        break;
                    case 2:
                        return c.m = 0, c.j = null, c.return(!1);
                    case 3:
                        return c.return(!0);
                }
            });
        });
    }
    function Xb(a) {
        this.g = a;
        this.listeners = {};
        this.j = {};
        this.F = {};
        this.m = {};
        this.s = {};
        this.G = this.o = this.R = !0;
        this.C = Promise.resolve();
        this.P = "";
        this.B = {};
        this.locateFile = a && a.locateFile || Tb;
        if ("object" === typeof window) var b = window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/";
        else if ("undefined" !== typeof location) b = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/";
        else throw Error("solutions can only be loaded on a web page or in a web worker");
        this.S = b;
        if (a.options) {
            b = K(Object.keys(a.options));
            for(var c = b.next(); !c.done; c = b.next()){
                c = c.value;
                var d = a.options[c].default;
                void 0 !== d && (this.j[c] = "function" === typeof d ? d() : d);
            }
        }
    }
    v = Xb.prototype;
    v.close = function() {
        this.i && this.i.delete();
        return Promise.resolve();
    };
    function Yb(a, b) {
        return void 0 === a.g.files ? [] : "function" === typeof a.g.files ? a.g.files(b) : a.g.files;
    }
    function Zb(a) {
        return Z(a, function c() {
            var d = this, e, g, f, h, k, l, n, u, w, r, y;
            return O(c, function(m) {
                switch(m.g){
                    case 1:
                        e = d;
                        if (!d.R) return m.return();
                        g = Yb(d, d.j);
                        return N(m, Wb(), 2);
                    case 2:
                        f = m.h;
                        if ("object" === typeof window) return Ub("createMediapipeSolutionsWasm", {
                            locateFile: d.locateFile
                        }), Ub("createMediapipeSolutionsPackedAssets", {
                            locateFile: d.locateFile
                        }), l = g.filter(function(t) {
                            return void 0 !== t.data;
                        }), n = g.filter(function(t) {
                            return void 0 === t.data;
                        }), u = Promise.all(l.map(function(t) {
                            var x = $b(e, t.url);
                            if (void 0 !== t.path) {
                                var z = t.path;
                                x = x.then(function(E) {
                                    e.overrideFile(z, E);
                                    return Promise.resolve(E);
                                });
                            }
                            return x;
                        })), w = Promise.all(n.map(function(t) {
                            return void 0 === t.simd || t.simd && f || !t.simd && !f ? Vb(e.locateFile(t.url, e.S)) : Promise.resolve();
                        })).then(function() {
                            return Z(e, function x() {
                                var z, E, F = this;
                                return O(x, function(I) {
                                    if (1 == I.g) return z = window.createMediapipeSolutionsWasm, E = window.createMediapipeSolutionsPackedAssets, N(I, z(E), 2);
                                    F.h = I.h;
                                    I.g = 0;
                                });
                            });
                        }), r = function() {
                            return Z(e, function x() {
                                var z = this;
                                return O(x, function(E) {
                                    z.g.graph && z.g.graph.url ? E = N(E, $b(z, z.g.graph.url), 0) : (E.g = 0, E = void 0);
                                    return E;
                                });
                            });
                        }(), N(m, Promise.all([
                            w,
                            u,
                            r
                        ]), 7);
                        if ("function" !== typeof importScripts) throw Error("solutions can only be loaded on a web page or in a web worker");
                        h = g.filter(function(t) {
                            return void 0 === t.simd || t.simd && f || !t.simd && !f;
                        }).map(function(t) {
                            return e.locateFile(t.url, e.S);
                        });
                        importScripts.apply(null, L(h));
                        return N(m, createMediapipeSolutionsWasm(Module), 6);
                    case 6:
                        d.h = m.h;
                        d.l = new OffscreenCanvas(1, 1);
                        d.h.canvas = d.l;
                        k = d.h.GL.createContext(d.l, {
                            antialias: !1,
                            alpha: !1,
                            ba: "undefined" !== typeof WebGL2RenderingContext ? 2 : 1
                        });
                        d.h.GL.makeContextCurrent(k);
                        m.g = 4;
                        break;
                    case 7:
                        d.l = document.createElement("canvas");
                        y = d.l.getContext("webgl2", {});
                        if (!y && (y = d.l.getContext("webgl", {}), !y)) return alert("Failed to create WebGL canvas context when passing video frame."), m.return();
                        d.D = y;
                        d.h.canvas = d.l;
                        d.h.createContext(d.l, !0, !0, {});
                    case 4:
                        d.i = new d.h.SolutionWasm, d.R = !1, m.g = 0;
                }
            });
        });
    }
    function ac(a) {
        return Z(a, function c() {
            var d = this, e, g, f, h, k, l, n, u;
            return O(c, function(w) {
                if (1 == w.g) {
                    if (d.g.graph && d.g.graph.url && d.P === d.g.graph.url) return w.return();
                    d.o = !0;
                    if (!d.g.graph || !d.g.graph.url) {
                        w.g = 2;
                        return;
                    }
                    d.P = d.g.graph.url;
                    return N(w, $b(d, d.g.graph.url), 3);
                }
                2 != w.g && (e = w.h, d.i.loadGraph(e));
                g = K(Object.keys(d.B));
                for(f = g.next(); !f.done; f = g.next())h = f.value, d.i.overrideFile(h, d.B[h]);
                d.B = {};
                if (d.g.listeners) for(k = K(d.g.listeners), l = k.next(); !l.done; l = k.next())n = l.value, bc(d, n);
                u = d.j;
                d.j = {};
                d.setOptions(u);
                w.g = 0;
            });
        });
    }
    v.reset = function() {
        return Z(this, function b() {
            var c = this;
            return O(b, function(d) {
                c.i && (c.i.reset(), c.m = {}, c.s = {});
                d.g = 0;
            });
        });
    };
    v.setOptions = function(a, b) {
        var c = this;
        if (b = b || this.g.options) {
            for(var d = [], e = [], g = {}, f = K(Object.keys(a)), h = f.next(); !h.done; g = {
                K: g.K,
                L: g.L
            }, h = f.next()){
                var k = h.value;
                k in this.j && this.j[k] === a[k] || (this.j[k] = a[k], h = b[k], void 0 !== h && (h.onChange && (g.K = h.onChange, g.L = a[k], d.push(function(l) {
                    return function() {
                        return Z(c, function u() {
                            var w, r = this;
                            return O(u, function(y) {
                                if (1 == y.g) return N(y, l.K(l.L), 2);
                                w = y.h;
                                !0 === w && (r.o = !0);
                                y.g = 0;
                            });
                        });
                    };
                }(g))), h.graphOptionXref && (k = {
                    valueNumber: 1 === h.type ? a[k] : 0,
                    valueBoolean: 0 === h.type ? a[k] : !1,
                    valueString: 2 === h.type ? a[k] : ""
                }, h = Object.assign(Object.assign(Object.assign({}, {
                    calculatorName: "",
                    calculatorIndex: 0
                }), h.graphOptionXref), k), e.push(h))));
            }
            if (0 !== d.length || 0 !== e.length) this.o = !0, this.A = (void 0 === this.A ? [] : this.A).concat(e), this.u = (void 0 === this.u ? [] : this.u).concat(d);
        }
    };
    function cc(a) {
        return Z(a, function c() {
            var d = this, e, g, f, h, k, l, n;
            return O(c, function(u) {
                switch(u.g){
                    case 1:
                        if (!d.o) return u.return();
                        if (!d.u) {
                            u.g = 2;
                            break;
                        }
                        e = K(d.u);
                        g = e.next();
                    case 3:
                        if (g.done) {
                            u.g = 5;
                            break;
                        }
                        f = g.value;
                        return N(u, f(), 4);
                    case 4:
                        g = e.next();
                        u.g = 3;
                        break;
                    case 5:
                        d.u = void 0;
                    case 2:
                        if (d.A) {
                            h = new d.h.GraphOptionChangeRequestList;
                            k = K(d.A);
                            for(l = k.next(); !l.done; l = k.next())n = l.value, h.push_back(n);
                            d.i.changeOptions(h);
                            h.delete();
                            d.A = void 0;
                        }
                        d.o = !1;
                        u.g = 0;
                }
            });
        });
    }
    v.initialize = function() {
        return Z(this, function b() {
            var c = this;
            return O(b, function(d) {
                return 1 == d.g ? N(d, Zb(c), 2) : 3 != d.g ? N(d, ac(c), 3) : N(d, cc(c), 0);
            });
        });
    };
    function $b(a, b) {
        return Z(a, function d() {
            var e = this, g, f;
            return O(d, function(h) {
                if (b in e.F) return h.return(e.F[b]);
                g = e.locateFile(b, "");
                f = fetch(g).then(function(k) {
                    return k.arrayBuffer();
                });
                e.F[b] = f;
                return h.return(f);
            });
        });
    }
    v.overrideFile = function(a, b) {
        this.i ? this.i.overrideFile(a, b) : this.B[a] = b;
    };
    v.clearOverriddenFiles = function() {
        this.B = {};
        this.i && this.i.clearOverriddenFiles();
    };
    v.send = function(a, b) {
        return Z(this, function d() {
            var e = this, g, f, h, k, l, n, u, w, r;
            return O(d, function(y) {
                switch(y.g){
                    case 1:
                        if (!e.g.inputs) return y.return();
                        g = 1E3 * (void 0 === b || null === b ? performance.now() : b);
                        return N(y, e.C, 2);
                    case 2:
                        return N(y, e.initialize(), 3);
                    case 3:
                        f = new e.h.PacketDataList;
                        h = K(Object.keys(a));
                        for(k = h.next(); !k.done; k = h.next())if (l = k.value, n = e.g.inputs[l]) {
                            a: {
                                var m = e;
                                var t = a[l];
                                switch(n.type){
                                    case "video":
                                        var x = m.m[n.stream];
                                        x || (x = new Ob(m.h, m.D), m.m[n.stream] = x);
                                        m = x;
                                        0 === m.l && (m.l = m.h.createTexture());
                                        if ("undefined" !== typeof HTMLVideoElement && t instanceof HTMLVideoElement) {
                                            var z = t.videoWidth;
                                            x = t.videoHeight;
                                        } else "undefined" !== typeof HTMLImageElement && t instanceof HTMLImageElement ? (z = t.naturalWidth, x = t.naturalHeight) : (z = t.width, x = t.height);
                                        x = {
                                            glName: m.l,
                                            width: z,
                                            height: x
                                        };
                                        z = m.g;
                                        z.canvas.width = x.width;
                                        z.canvas.height = x.height;
                                        z.activeTexture(z.TEXTURE0);
                                        m.h.bindTexture2d(m.l);
                                        z.texImage2D(z.TEXTURE_2D, 0, z.RGBA, z.RGBA, z.UNSIGNED_BYTE, t);
                                        m.h.bindTexture2d(0);
                                        m = x;
                                        break a;
                                    case "detections":
                                        x = m.m[n.stream];
                                        x || (x = new Rb(m.h), m.m[n.stream] = x);
                                        m = x;
                                        m.data || (m.data = new m.g.DetectionListData);
                                        m.data.reset(t.length);
                                        for(x = 0; x < t.length; ++x){
                                            z = t[x];
                                            var E = m.data, F = E.setBoundingBox, I = x;
                                            var H = z.T;
                                            var p = new Fb;
                                            X(p, 1, H.Z);
                                            X(p, 2, H.$);
                                            X(p, 3, H.height);
                                            X(p, 4, H.width);
                                            X(p, 5, H.rotation);
                                            X(p, 6, H.X);
                                            var A = H = new Ya;
                                            U(A, 1, W(p, 1));
                                            U(A, 2, W(p, 2));
                                            U(A, 3, W(p, 3));
                                            U(A, 4, W(p, 4));
                                            U(A, 5, W(p, 5));
                                            var C = W(p, 6);
                                            if (null != C && null != C) {
                                                Ra(A.g, 48);
                                                var q = A.g, B = C;
                                                C = 0 > B;
                                                B = Math.abs(B);
                                                var D = B >>> 0;
                                                B = Math.floor((B - D) / 4294967296);
                                                B >>>= 0;
                                                C && (B = ~B >>> 0, D = (~D >>> 0) + 1, 4294967295 < D && (D = 0, B++, 4294967295 < B && (B = 0)));
                                                Q = D;
                                                R = B;
                                                C = Q;
                                                for(D = R; 0 < D || 127 < C;)q.push(C & 127 | 128), C = (C >>> 7 | D << 25) >>> 0, D >>>= 7;
                                                q.push(C);
                                            }
                                            rb(p, A);
                                            H = $a(H);
                                            F.call(E, I, H);
                                            if (z.O) for(E = 0; E < z.O.length; ++E)p = z.O[E], A = p.visibility ? !0 : !1, F = m.data, I = F.addNormalizedLandmark, H = x, p = Object.assign(Object.assign({}, p), {
                                                visibility: A ? p.visibility : 0
                                            }), A = new Ab, X(A, 1, p.x), X(A, 2, p.y), X(A, 3, p.z), p.visibility && X(A, 4, p.visibility), q = p = new Ya, U(q, 1, W(A, 1)), U(q, 2, W(A, 2)), U(q, 3, W(A, 3)), U(q, 4, W(A, 4)), U(q, 5, W(A, 5)), rb(A, q), p = $a(p), I.call(F, H, p);
                                            if (z.M) for(E = 0; E < z.M.length; ++E){
                                                F = m.data;
                                                I = F.addClassification;
                                                H = x;
                                                p = z.M[E];
                                                A = new wb;
                                                X(A, 2, p.Y);
                                                p.index && X(A, 1, p.index);
                                                p.label && X(A, 3, p.label);
                                                p.displayName && X(A, 4, p.displayName);
                                                q = p = new Ya;
                                                D = W(A, 1);
                                                if (null != D && null != D) {
                                                    if (Ra(q.g, 8), C = q.g, 0 <= D) Ra(C, D);
                                                    else {
                                                        for(B = 0; 9 > B; B++)C.push(D & 127 | 128), D >>= 7;
                                                        C.push(1);
                                                    }
                                                }
                                                U(q, 2, W(A, 2));
                                                C = W(A, 3);
                                                null != C && (C = Ca(C), Ra(q.g, 26), Ra(q.g, C.length), Za(q, q.g.end()), Za(q, C));
                                                C = W(A, 4);
                                                null != C && (C = Ca(C), Ra(q.g, 34), Ra(q.g, C.length), Za(q, q.g.end()), Za(q, C));
                                                rb(A, q);
                                                p = $a(p);
                                                I.call(F, H, p);
                                            }
                                        }
                                        m = m.data;
                                        break a;
                                    default:
                                        m = {};
                                }
                            }
                            u = m;
                            w = n.stream;
                            switch(n.type){
                                case "video":
                                    f.pushTexture2d(Object.assign(Object.assign({}, u), {
                                        stream: w,
                                        timestamp: g
                                    }));
                                    break;
                                case "detections":
                                    r = u;
                                    r.stream = w;
                                    r.timestamp = g;
                                    f.pushDetectionList(r);
                                    break;
                                default:
                                    throw Error("Unknown input config type: '" + n.type + "'");
                            }
                        }
                        e.i.send(f);
                        return N(y, e.C, 4);
                    case 4:
                        f.delete(), y.g = 0;
                }
            });
        });
    };
    function dc(a, b, c) {
        return Z(a, function e() {
            var g, f, h, k, l, n, u = this, w, r, y, m, t, x, z, E;
            return O(e, function(F) {
                switch(F.g){
                    case 1:
                        if (!c) return F.return(b);
                        g = {};
                        f = 0;
                        h = K(Object.keys(c));
                        for(k = h.next(); !k.done; k = h.next())l = k.value, n = c[l], "string" !== typeof n && "texture" === n.type && void 0 !== b[n.stream] && ++f;
                        1 < f && (u.G = !1);
                        w = K(Object.keys(c));
                        k = w.next();
                    case 2:
                        if (k.done) {
                            F.g = 4;
                            break;
                        }
                        r = k.value;
                        y = c[r];
                        if ("string" === typeof y) return z = g, E = r, N(F, ec(u, r, b[y]), 14);
                        m = b[y.stream];
                        if ("detection_list" === y.type) {
                            if (m) {
                                var I = m.getRectList();
                                for(var H = m.getLandmarksList(), p = m.getClassificationsList(), A = [], C = 0; C < I.size(); ++C){
                                    var q = I.get(C);
                                    a: {
                                        var B = new Fb;
                                        for(q = new Sa(q); S(q);)switch(q.i){
                                            case 13:
                                                var D = T(q);
                                                X(B, 1, D);
                                                break;
                                            case 21:
                                                D = T(q);
                                                X(B, 2, D);
                                                break;
                                            case 29:
                                                D = T(q);
                                                X(B, 3, D);
                                                break;
                                            case 37:
                                                D = T(q);
                                                X(B, 4, D);
                                                break;
                                            case 45:
                                                D = T(q);
                                                X(B, 5, D);
                                                break;
                                            case 48:
                                                D = Oa(q.g);
                                                X(B, 6, D);
                                                break;
                                            default:
                                                if (!sb(B, q)) break a;
                                        }
                                    }
                                    B = {
                                        Z: Y(B, 1),
                                        $: Y(B, 2),
                                        height: Y(B, 3),
                                        width: Y(B, 4),
                                        rotation: Y(B, 5, 0),
                                        X: lb(B, 6, 0)
                                    };
                                    q = nb(Eb(H.get(C)), Ab).map(Nb);
                                    var la = p.get(C);
                                    a: for(D = new yb, la = new Sa(la); S(la);)switch(la.i){
                                        case 10:
                                            D.addClassification(Ua(la, new wb, xb));
                                            break;
                                        default:
                                            if (!sb(D, la)) break a;
                                    }
                                    B = {
                                        T: B,
                                        O: q,
                                        M: Mb(D)
                                    };
                                    A.push(B);
                                }
                                I = A;
                            } else I = [];
                            g[r] = I;
                            F.g = 7;
                            break;
                        }
                        if ("proto_list" === y.type) {
                            if (m) {
                                I = Array(m.size());
                                for(H = 0; H < m.size(); H++)I[H] = m.get(H);
                                m.delete();
                            } else I = [];
                            g[r] = I;
                            F.g = 7;
                            break;
                        }
                        if (void 0 === m) {
                            F.g = 3;
                            break;
                        }
                        if ("float_list" === y.type) {
                            g[r] = m;
                            F.g = 7;
                            break;
                        }
                        if ("proto" === y.type) {
                            g[r] = m;
                            F.g = 7;
                            break;
                        }
                        if ("texture" !== y.type) throw Error("Unknown output config type: '" + y.type + "'");
                        t = u.s[r];
                        t || (t = new Ob(u.h, u.D), u.s[r] = t);
                        return N(F, Pb(t, m, u.G), 13);
                    case 13:
                        x = F.h, g[r] = x;
                    case 7:
                        y.transform && g[r] && (g[r] = y.transform(g[r]));
                        F.g = 3;
                        break;
                    case 14:
                        z[E] = F.h;
                    case 3:
                        k = w.next();
                        F.g = 2;
                        break;
                    case 4:
                        return F.return(g);
                }
            });
        });
    }
    function ec(a, b, c) {
        return Z(a, function e() {
            var g = this, f;
            return O(e, function(h) {
                return "number" === typeof c || c instanceof Uint8Array || c instanceof g.h.Uint8BlobList ? h.return(c) : c instanceof g.h.Texture2dDataOut ? (f = g.s[b], f || (f = new Ob(g.h, g.D), g.s[b] = f), h.return(Pb(f, c, g.G))) : h.return(void 0);
            });
        });
    }
    function bc(a, b) {
        for(var c = b.name || "$", d = [].concat(L(b.wants)), e = new a.h.StringList, g = K(b.wants), f = g.next(); !f.done; f = g.next())e.push_back(f.value);
        g = a.h.PacketListener.implement({
            onResults: function(h) {
                for(var k = {}, l = 0; l < b.wants.length; ++l)k[d[l]] = h.get(l);
                var n = a.listeners[c];
                n && (a.C = dc(a, k, b.outs).then(function(u) {
                    u = n(u);
                    for(var w = 0; w < b.wants.length; ++w){
                        var r = k[d[w]];
                        "object" === typeof r && r.hasOwnProperty && r.hasOwnProperty("delete") && r.delete();
                    }
                    u && (a.C = u);
                }));
            }
        });
        a.i.attachMultiListener(e, g);
        e.delete();
    }
    v.onResults = function(a, b) {
        this.listeners[b || "$"] = a;
    };
    P("Solution", Xb);
    P("OptionType", {
        BOOL: 0,
        NUMBER: 1,
        aa: 2,
        0: "BOOL",
        1: "NUMBER",
        2: "STRING"
    });
    function fc(a) {
        a = Kb(a);
        var b = a.getMesh();
        if (!b) return a;
        var c = new Float32Array(b.getVertexBufferList());
        b.getVertexBufferList = function() {
            return c;
        };
        var d = new Uint32Array(b.getIndexBufferList());
        b.getIndexBufferList = function() {
            return d;
        };
        return a;
    }
    var gc = {
        files: [
            {
                url: "face_mesh_solution_packed_assets_loader.js"
            },
            {
                simd: !0,
                url: "face_mesh_solution_simd_wasm_bin.js"
            },
            {
                simd: !1,
                url: "face_mesh_solution_wasm_bin.js"
            }
        ],
        graph: {
            url: "face_mesh.binarypb"
        },
        listeners: [
            {
                wants: [
                    "multi_face_geometry",
                    "image_transformed",
                    "multi_face_landmarks"
                ],
                outs: {
                    image: "image_transformed",
                    multiFaceGeometry: {
                        type: "proto_list",
                        stream: "multi_face_geometry",
                        transform: function(a) {
                            return a.map(fc);
                        }
                    },
                    multiFaceLandmarks: {
                        type: "proto_list",
                        stream: "multi_face_landmarks",
                        transform: function(a) {
                            return a.map(function(b) {
                                return nb(Eb(b), Ab).map(Nb);
                            });
                        }
                    }
                }
            }
        ],
        inputs: {
            image: {
                type: "video",
                stream: "input_frames_gpu"
            }
        },
        options: {
            useCpuInference: {
                type: 0,
                graphOptionXref: {
                    calculatorType: "InferenceCalculator",
                    fieldName: "use_cpu_inference"
                },
                default: "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document
            },
            enableFaceGeometry: {
                type: 0,
                graphOptionXref: {
                    calculatorName: "EnableFaceGeometryConstant",
                    calculatorType: "ConstantSidePacketCalculator",
                    fieldName: "bool_value"
                }
            },
            selfieMode: {
                type: 0,
                graphOptionXref: {
                    calculatorType: "GlScalerCalculator",
                    calculatorIndex: 1,
                    fieldName: "flip_horizontal"
                }
            },
            maxNumFaces: {
                type: 1,
                graphOptionXref: {
                    calculatorType: "ConstantSidePacketCalculator",
                    calculatorName: "ConstantSidePacketCalculatorNumFaces",
                    fieldName: "int_value"
                }
            },
            refineLandmarks: {
                type: 0,
                graphOptionXref: {
                    calculatorType: "ConstantSidePacketCalculator",
                    calculatorName: "ConstantSidePacketCalculatorRefineLandmarks",
                    fieldName: "bool_value"
                }
            },
            minDetectionConfidence: {
                type: 1,
                graphOptionXref: {
                    calculatorType: "TensorsToDetectionsCalculator",
                    calculatorName: "facelandmarkfrontgpu__facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator",
                    fieldName: "min_score_thresh"
                }
            },
            minTrackingConfidence: {
                type: 1,
                graphOptionXref: {
                    calculatorType: "ThresholdingCalculator",
                    calculatorName: "facelandmarkfrontgpu__facelandmarkgpu__ThresholdingCalculator",
                    fieldName: "threshold"
                }
            },
            cameraNear: {
                type: 1,
                graphOptionXref: {
                    calculatorType: "FaceGeometryEnvGeneratorCalculator",
                    fieldName: "near"
                }
            },
            cameraFar: {
                type: 1,
                graphOptionXref: {
                    calculatorType: "FaceGeometryEnvGeneratorCalculator",
                    fieldName: "far"
                }
            },
            cameraVerticalFovDegrees: {
                type: 1,
                graphOptionXref: {
                    calculatorType: "FaceGeometryEnvGeneratorCalculator",
                    fieldName: "vertical_fov_degrees"
                }
            }
        }
    };
    var hc = [
        [
            61,
            146
        ],
        [
            146,
            91
        ],
        [
            91,
            181
        ],
        [
            181,
            84
        ],
        [
            84,
            17
        ],
        [
            17,
            314
        ],
        [
            314,
            405
        ],
        [
            405,
            321
        ],
        [
            321,
            375
        ],
        [
            375,
            291
        ],
        [
            61,
            185
        ],
        [
            185,
            40
        ],
        [
            40,
            39
        ],
        [
            39,
            37
        ],
        [
            37,
            0
        ],
        [
            0,
            267
        ],
        [
            267,
            269
        ],
        [
            269,
            270
        ],
        [
            270,
            409
        ],
        [
            409,
            291
        ],
        [
            78,
            95
        ],
        [
            95,
            88
        ],
        [
            88,
            178
        ],
        [
            178,
            87
        ],
        [
            87,
            14
        ],
        [
            14,
            317
        ],
        [
            317,
            402
        ],
        [
            402,
            318
        ],
        [
            318,
            324
        ],
        [
            324,
            308
        ],
        [
            78,
            191
        ],
        [
            191,
            80
        ],
        [
            80,
            81
        ],
        [
            81,
            82
        ],
        [
            82,
            13
        ],
        [
            13,
            312
        ],
        [
            312,
            311
        ],
        [
            311,
            310
        ],
        [
            310,
            415
        ],
        [
            415,
            308
        ]
    ], ic = [
        [
            263,
            249
        ],
        [
            249,
            390
        ],
        [
            390,
            373
        ],
        [
            373,
            374
        ],
        [
            374,
            380
        ],
        [
            380,
            381
        ],
        [
            381,
            382
        ],
        [
            382,
            362
        ],
        [
            263,
            466
        ],
        [
            466,
            388
        ],
        [
            388,
            387
        ],
        [
            387,
            386
        ],
        [
            386,
            385
        ],
        [
            385,
            384
        ],
        [
            384,
            398
        ],
        [
            398,
            362
        ]
    ], jc = [
        [
            276,
            283
        ],
        [
            283,
            282
        ],
        [
            282,
            295
        ],
        [
            295,
            285
        ],
        [
            300,
            293
        ],
        [
            293,
            334
        ],
        [
            334,
            296
        ],
        [
            296,
            336
        ]
    ], kc = [
        [
            33,
            7
        ],
        [
            7,
            163
        ],
        [
            163,
            144
        ],
        [
            144,
            145
        ],
        [
            145,
            153
        ],
        [
            153,
            154
        ],
        [
            154,
            155
        ],
        [
            155,
            133
        ],
        [
            33,
            246
        ],
        [
            246,
            161
        ],
        [
            161,
            160
        ],
        [
            160,
            159
        ],
        [
            159,
            158
        ],
        [
            158,
            157
        ],
        [
            157,
            173
        ],
        [
            173,
            133
        ]
    ], lc = [
        [
            46,
            53
        ],
        [
            53,
            52
        ],
        [
            52,
            65
        ],
        [
            65,
            55
        ],
        [
            70,
            63
        ],
        [
            63,
            105
        ],
        [
            105,
            66
        ],
        [
            66,
            107
        ]
    ], mc = [
        [
            10,
            338
        ],
        [
            338,
            297
        ],
        [
            297,
            332
        ],
        [
            332,
            284
        ],
        [
            284,
            251
        ],
        [
            251,
            389
        ],
        [
            389,
            356
        ],
        [
            356,
            454
        ],
        [
            454,
            323
        ],
        [
            323,
            361
        ],
        [
            361,
            288
        ],
        [
            288,
            397
        ],
        [
            397,
            365
        ],
        [
            365,
            379
        ],
        [
            379,
            378
        ],
        [
            378,
            400
        ],
        [
            400,
            377
        ],
        [
            377,
            152
        ],
        [
            152,
            148
        ],
        [
            148,
            176
        ],
        [
            176,
            149
        ],
        [
            149,
            150
        ],
        [
            150,
            136
        ],
        [
            136,
            172
        ],
        [
            172,
            58
        ],
        [
            58,
            132
        ],
        [
            132,
            93
        ],
        [
            93,
            234
        ],
        [
            234,
            127
        ],
        [
            127,
            162
        ],
        [
            162,
            21
        ],
        [
            21,
            54
        ],
        [
            54,
            103
        ],
        [
            103,
            67
        ],
        [
            67,
            109
        ],
        [
            109,
            10
        ]
    ], nc = [].concat(L(hc), L(ic), L(jc), L(kc), L(lc), L(mc));
    function oc(a) {
        a = a || {};
        a = Object.assign(Object.assign({}, gc), a);
        this.g = new Xb(a);
    }
    v = oc.prototype;
    v.close = function() {
        this.g.close();
        return Promise.resolve();
    };
    v.onResults = function(a) {
        this.g.onResults(a);
    };
    v.initialize = function() {
        return Z(this, function b() {
            var c = this;
            return O(b, function(d) {
                return N(d, c.g.initialize(), 0);
            });
        });
    };
    v.reset = function() {
        this.g.reset();
    };
    v.send = function(a) {
        return Z(this, function c() {
            var d = this;
            return O(c, function(e) {
                return N(e, d.g.send(a), 0);
            });
        });
    };
    v.setOptions = function(a) {
        this.g.setOptions(a);
    };
    P("FACE_GEOMETRY", {
        Layout: {
            COLUMN_MAJOR: 0,
            ROW_MAJOR: 1,
            0: "COLUMN_MAJOR",
            1: "ROW_MAJOR"
        },
        PrimitiveType: {
            TRIANGLE: 0,
            0: "TRIANGLE"
        },
        VertexType: {
            VERTEX_PT: 0,
            0: "VERTEX_PT"
        },
        DEFAULT_CAMERA_PARAMS: {
            verticalFovDegrees: 63,
            near: 1,
            far: 1E4
        }
    });
    P("FaceMesh", oc);
    P("FACEMESH_LIPS", hc);
    P("FACEMESH_LEFT_EYE", ic);
    P("FACEMESH_LEFT_EYEBROW", jc);
    P("FACEMESH_LEFT_IRIS", [
        [
            474,
            475
        ],
        [
            475,
            476
        ],
        [
            476,
            477
        ],
        [
            477,
            474
        ]
    ]);
    P("FACEMESH_RIGHT_EYE", kc);
    P("FACEMESH_RIGHT_EYEBROW", lc);
    P("FACEMESH_RIGHT_IRIS", [
        [
            469,
            470
        ],
        [
            470,
            471
        ],
        [
            471,
            472
        ],
        [
            472,
            469
        ]
    ]);
    P("FACEMESH_FACE_OVAL", mc);
    P("FACEMESH_CONTOURS", nc);
    P("FACEMESH_TESSELATION", [
        [
            127,
            34
        ],
        [
            34,
            139
        ],
        [
            139,
            127
        ],
        [
            11,
            0
        ],
        [
            0,
            37
        ],
        [
            37,
            11
        ],
        [
            232,
            231
        ],
        [
            231,
            120
        ],
        [
            120,
            232
        ],
        [
            72,
            37
        ],
        [
            37,
            39
        ],
        [
            39,
            72
        ],
        [
            128,
            121
        ],
        [
            121,
            47
        ],
        [
            47,
            128
        ],
        [
            232,
            121
        ],
        [
            121,
            128
        ],
        [
            128,
            232
        ],
        [
            104,
            69
        ],
        [
            69,
            67
        ],
        [
            67,
            104
        ],
        [
            175,
            171
        ],
        [
            171,
            148
        ],
        [
            148,
            175
        ],
        [
            118,
            50
        ],
        [
            50,
            101
        ],
        [
            101,
            118
        ],
        [
            73,
            39
        ],
        [
            39,
            40
        ],
        [
            40,
            73
        ],
        [
            9,
            151
        ],
        [
            151,
            108
        ],
        [
            108,
            9
        ],
        [
            48,
            115
        ],
        [
            115,
            131
        ],
        [
            131,
            48
        ],
        [
            194,
            204
        ],
        [
            204,
            211
        ],
        [
            211,
            194
        ],
        [
            74,
            40
        ],
        [
            40,
            185
        ],
        [
            185,
            74
        ],
        [
            80,
            42
        ],
        [
            42,
            183
        ],
        [
            183,
            80
        ],
        [
            40,
            92
        ],
        [
            92,
            186
        ],
        [
            186,
            40
        ],
        [
            230,
            229
        ],
        [
            229,
            118
        ],
        [
            118,
            230
        ],
        [
            202,
            212
        ],
        [
            212,
            214
        ],
        [
            214,
            202
        ],
        [
            83,
            18
        ],
        [
            18,
            17
        ],
        [
            17,
            83
        ],
        [
            76,
            61
        ],
        [
            61,
            146
        ],
        [
            146,
            76
        ],
        [
            160,
            29
        ],
        [
            29,
            30
        ],
        [
            30,
            160
        ],
        [
            56,
            157
        ],
        [
            157,
            173
        ],
        [
            173,
            56
        ],
        [
            106,
            204
        ],
        [
            204,
            194
        ],
        [
            194,
            106
        ],
        [
            135,
            214
        ],
        [
            214,
            192
        ],
        [
            192,
            135
        ],
        [
            203,
            165
        ],
        [
            165,
            98
        ],
        [
            98,
            203
        ],
        [
            21,
            71
        ],
        [
            71,
            68
        ],
        [
            68,
            21
        ],
        [
            51,
            45
        ],
        [
            45,
            4
        ],
        [
            4,
            51
        ],
        [
            144,
            24
        ],
        [
            24,
            23
        ],
        [
            23,
            144
        ],
        [
            77,
            146
        ],
        [
            146,
            91
        ],
        [
            91,
            77
        ],
        [
            205,
            50
        ],
        [
            50,
            187
        ],
        [
            187,
            205
        ],
        [
            201,
            200
        ],
        [
            200,
            18
        ],
        [
            18,
            201
        ],
        [
            91,
            106
        ],
        [
            106,
            182
        ],
        [
            182,
            91
        ],
        [
            90,
            91
        ],
        [
            91,
            181
        ],
        [
            181,
            90
        ],
        [
            85,
            84
        ],
        [
            84,
            17
        ],
        [
            17,
            85
        ],
        [
            206,
            203
        ],
        [
            203,
            36
        ],
        [
            36,
            206
        ],
        [
            148,
            171
        ],
        [
            171,
            140
        ],
        [
            140,
            148
        ],
        [
            92,
            40
        ],
        [
            40,
            39
        ],
        [
            39,
            92
        ],
        [
            193,
            189
        ],
        [
            189,
            244
        ],
        [
            244,
            193
        ],
        [
            159,
            158
        ],
        [
            158,
            28
        ],
        [
            28,
            159
        ],
        [
            247,
            246
        ],
        [
            246,
            161
        ],
        [
            161,
            247
        ],
        [
            236,
            3
        ],
        [
            3,
            196
        ],
        [
            196,
            236
        ],
        [
            54,
            68
        ],
        [
            68,
            104
        ],
        [
            104,
            54
        ],
        [
            193,
            168
        ],
        [
            168,
            8
        ],
        [
            8,
            193
        ],
        [
            117,
            228
        ],
        [
            228,
            31
        ],
        [
            31,
            117
        ],
        [
            189,
            193
        ],
        [
            193,
            55
        ],
        [
            55,
            189
        ],
        [
            98,
            97
        ],
        [
            97,
            99
        ],
        [
            99,
            98
        ],
        [
            126,
            47
        ],
        [
            47,
            100
        ],
        [
            100,
            126
        ],
        [
            166,
            79
        ],
        [
            79,
            218
        ],
        [
            218,
            166
        ],
        [
            155,
            154
        ],
        [
            154,
            26
        ],
        [
            26,
            155
        ],
        [
            209,
            49
        ],
        [
            49,
            131
        ],
        [
            131,
            209
        ],
        [
            135,
            136
        ],
        [
            136,
            150
        ],
        [
            150,
            135
        ],
        [
            47,
            126
        ],
        [
            126,
            217
        ],
        [
            217,
            47
        ],
        [
            223,
            52
        ],
        [
            52,
            53
        ],
        [
            53,
            223
        ],
        [
            45,
            51
        ],
        [
            51,
            134
        ],
        [
            134,
            45
        ],
        [
            211,
            170
        ],
        [
            170,
            140
        ],
        [
            140,
            211
        ],
        [
            67,
            69
        ],
        [
            69,
            108
        ],
        [
            108,
            67
        ],
        [
            43,
            106
        ],
        [
            106,
            91
        ],
        [
            91,
            43
        ],
        [
            230,
            119
        ],
        [
            119,
            120
        ],
        [
            120,
            230
        ],
        [
            226,
            130
        ],
        [
            130,
            247
        ],
        [
            247,
            226
        ],
        [
            63,
            53
        ],
        [
            53,
            52
        ],
        [
            52,
            63
        ],
        [
            238,
            20
        ],
        [
            20,
            242
        ],
        [
            242,
            238
        ],
        [
            46,
            70
        ],
        [
            70,
            156
        ],
        [
            156,
            46
        ],
        [
            78,
            62
        ],
        [
            62,
            96
        ],
        [
            96,
            78
        ],
        [
            46,
            53
        ],
        [
            53,
            63
        ],
        [
            63,
            46
        ],
        [
            143,
            34
        ],
        [
            34,
            227
        ],
        [
            227,
            143
        ],
        [
            123,
            117
        ],
        [
            117,
            111
        ],
        [
            111,
            123
        ],
        [
            44,
            125
        ],
        [
            125,
            19
        ],
        [
            19,
            44
        ],
        [
            236,
            134
        ],
        [
            134,
            51
        ],
        [
            51,
            236
        ],
        [
            216,
            206
        ],
        [
            206,
            205
        ],
        [
            205,
            216
        ],
        [
            154,
            153
        ],
        [
            153,
            22
        ],
        [
            22,
            154
        ],
        [
            39,
            37
        ],
        [
            37,
            167
        ],
        [
            167,
            39
        ],
        [
            200,
            201
        ],
        [
            201,
            208
        ],
        [
            208,
            200
        ],
        [
            36,
            142
        ],
        [
            142,
            100
        ],
        [
            100,
            36
        ],
        [
            57,
            212
        ],
        [
            212,
            202
        ],
        [
            202,
            57
        ],
        [
            20,
            60
        ],
        [
            60,
            99
        ],
        [
            99,
            20
        ],
        [
            28,
            158
        ],
        [
            158,
            157
        ],
        [
            157,
            28
        ],
        [
            35,
            226
        ],
        [
            226,
            113
        ],
        [
            113,
            35
        ],
        [
            160,
            159
        ],
        [
            159,
            27
        ],
        [
            27,
            160
        ],
        [
            204,
            202
        ],
        [
            202,
            210
        ],
        [
            210,
            204
        ],
        [
            113,
            225
        ],
        [
            225,
            46
        ],
        [
            46,
            113
        ],
        [
            43,
            202
        ],
        [
            202,
            204
        ],
        [
            204,
            43
        ],
        [
            62,
            76
        ],
        [
            76,
            77
        ],
        [
            77,
            62
        ],
        [
            137,
            123
        ],
        [
            123,
            116
        ],
        [
            116,
            137
        ],
        [
            41,
            38
        ],
        [
            38,
            72
        ],
        [
            72,
            41
        ],
        [
            203,
            129
        ],
        [
            129,
            142
        ],
        [
            142,
            203
        ],
        [
            64,
            98
        ],
        [
            98,
            240
        ],
        [
            240,
            64
        ],
        [
            49,
            102
        ],
        [
            102,
            64
        ],
        [
            64,
            49
        ],
        [
            41,
            73
        ],
        [
            73,
            74
        ],
        [
            74,
            41
        ],
        [
            212,
            216
        ],
        [
            216,
            207
        ],
        [
            207,
            212
        ],
        [
            42,
            74
        ],
        [
            74,
            184
        ],
        [
            184,
            42
        ],
        [
            169,
            170
        ],
        [
            170,
            211
        ],
        [
            211,
            169
        ],
        [
            170,
            149
        ],
        [
            149,
            176
        ],
        [
            176,
            170
        ],
        [
            105,
            66
        ],
        [
            66,
            69
        ],
        [
            69,
            105
        ],
        [
            122,
            6
        ],
        [
            6,
            168
        ],
        [
            168,
            122
        ],
        [
            123,
            147
        ],
        [
            147,
            187
        ],
        [
            187,
            123
        ],
        [
            96,
            77
        ],
        [
            77,
            90
        ],
        [
            90,
            96
        ],
        [
            65,
            55
        ],
        [
            55,
            107
        ],
        [
            107,
            65
        ],
        [
            89,
            90
        ],
        [
            90,
            180
        ],
        [
            180,
            89
        ],
        [
            101,
            100
        ],
        [
            100,
            120
        ],
        [
            120,
            101
        ],
        [
            63,
            105
        ],
        [
            105,
            104
        ],
        [
            104,
            63
        ],
        [
            93,
            137
        ],
        [
            137,
            227
        ],
        [
            227,
            93
        ],
        [
            15,
            86
        ],
        [
            86,
            85
        ],
        [
            85,
            15
        ],
        [
            129,
            102
        ],
        [
            102,
            49
        ],
        [
            49,
            129
        ],
        [
            14,
            87
        ],
        [
            87,
            86
        ],
        [
            86,
            14
        ],
        [
            55,
            8
        ],
        [
            8,
            9
        ],
        [
            9,
            55
        ],
        [
            100,
            47
        ],
        [
            47,
            121
        ],
        [
            121,
            100
        ],
        [
            145,
            23
        ],
        [
            23,
            22
        ],
        [
            22,
            145
        ],
        [
            88,
            89
        ],
        [
            89,
            179
        ],
        [
            179,
            88
        ],
        [
            6,
            122
        ],
        [
            122,
            196
        ],
        [
            196,
            6
        ],
        [
            88,
            95
        ],
        [
            95,
            96
        ],
        [
            96,
            88
        ],
        [
            138,
            172
        ],
        [
            172,
            136
        ],
        [
            136,
            138
        ],
        [
            215,
            58
        ],
        [
            58,
            172
        ],
        [
            172,
            215
        ],
        [
            115,
            48
        ],
        [
            48,
            219
        ],
        [
            219,
            115
        ],
        [
            42,
            80
        ],
        [
            80,
            81
        ],
        [
            81,
            42
        ],
        [
            195,
            3
        ],
        [
            3,
            51
        ],
        [
            51,
            195
        ],
        [
            43,
            146
        ],
        [
            146,
            61
        ],
        [
            61,
            43
        ],
        [
            171,
            175
        ],
        [
            175,
            199
        ],
        [
            199,
            171
        ],
        [
            81,
            82
        ],
        [
            82,
            38
        ],
        [
            38,
            81
        ],
        [
            53,
            46
        ],
        [
            46,
            225
        ],
        [
            225,
            53
        ],
        [
            144,
            163
        ],
        [
            163,
            110
        ],
        [
            110,
            144
        ],
        [
            52,
            65
        ],
        [
            65,
            66
        ],
        [
            66,
            52
        ],
        [
            229,
            228
        ],
        [
            228,
            117
        ],
        [
            117,
            229
        ],
        [
            34,
            127
        ],
        [
            127,
            234
        ],
        [
            234,
            34
        ],
        [
            107,
            108
        ],
        [
            108,
            69
        ],
        [
            69,
            107
        ],
        [
            109,
            108
        ],
        [
            108,
            151
        ],
        [
            151,
            109
        ],
        [
            48,
            64
        ],
        [
            64,
            235
        ],
        [
            235,
            48
        ],
        [
            62,
            78
        ],
        [
            78,
            191
        ],
        [
            191,
            62
        ],
        [
            129,
            209
        ],
        [
            209,
            126
        ],
        [
            126,
            129
        ],
        [
            111,
            35
        ],
        [
            35,
            143
        ],
        [
            143,
            111
        ],
        [
            117,
            123
        ],
        [
            123,
            50
        ],
        [
            50,
            117
        ],
        [
            222,
            65
        ],
        [
            65,
            52
        ],
        [
            52,
            222
        ],
        [
            19,
            125
        ],
        [
            125,
            141
        ],
        [
            141,
            19
        ],
        [
            221,
            55
        ],
        [
            55,
            65
        ],
        [
            65,
            221
        ],
        [
            3,
            195
        ],
        [
            195,
            197
        ],
        [
            197,
            3
        ],
        [
            25,
            7
        ],
        [
            7,
            33
        ],
        [
            33,
            25
        ],
        [
            220,
            237
        ],
        [
            237,
            44
        ],
        [
            44,
            220
        ],
        [
            70,
            71
        ],
        [
            71,
            139
        ],
        [
            139,
            70
        ],
        [
            122,
            193
        ],
        [
            193,
            245
        ],
        [
            245,
            122
        ],
        [
            247,
            130
        ],
        [
            130,
            33
        ],
        [
            33,
            247
        ],
        [
            71,
            21
        ],
        [
            21,
            162
        ],
        [
            162,
            71
        ],
        [
            170,
            169
        ],
        [
            169,
            150
        ],
        [
            150,
            170
        ],
        [
            188,
            174
        ],
        [
            174,
            196
        ],
        [
            196,
            188
        ],
        [
            216,
            186
        ],
        [
            186,
            92
        ],
        [
            92,
            216
        ],
        [
            2,
            97
        ],
        [
            97,
            167
        ],
        [
            167,
            2
        ],
        [
            141,
            125
        ],
        [
            125,
            241
        ],
        [
            241,
            141
        ],
        [
            164,
            167
        ],
        [
            167,
            37
        ],
        [
            37,
            164
        ],
        [
            72,
            38
        ],
        [
            38,
            12
        ],
        [
            12,
            72
        ],
        [
            38,
            82
        ],
        [
            82,
            13
        ],
        [
            13,
            38
        ],
        [
            63,
            68
        ],
        [
            68,
            71
        ],
        [
            71,
            63
        ],
        [
            226,
            35
        ],
        [
            35,
            111
        ],
        [
            111,
            226
        ],
        [
            101,
            50
        ],
        [
            50,
            205
        ],
        [
            205,
            101
        ],
        [
            206,
            92
        ],
        [
            92,
            165
        ],
        [
            165,
            206
        ],
        [
            209,
            198
        ],
        [
            198,
            217
        ],
        [
            217,
            209
        ],
        [
            165,
            167
        ],
        [
            167,
            97
        ],
        [
            97,
            165
        ],
        [
            220,
            115
        ],
        [
            115,
            218
        ],
        [
            218,
            220
        ],
        [
            133,
            112
        ],
        [
            112,
            243
        ],
        [
            243,
            133
        ],
        [
            239,
            238
        ],
        [
            238,
            241
        ],
        [
            241,
            239
        ],
        [
            214,
            135
        ],
        [
            135,
            169
        ],
        [
            169,
            214
        ],
        [
            190,
            173
        ],
        [
            173,
            133
        ],
        [
            133,
            190
        ],
        [
            171,
            208
        ],
        [
            208,
            32
        ],
        [
            32,
            171
        ],
        [
            125,
            44
        ],
        [
            44,
            237
        ],
        [
            237,
            125
        ],
        [
            86,
            87
        ],
        [
            87,
            178
        ],
        [
            178,
            86
        ],
        [
            85,
            86
        ],
        [
            86,
            179
        ],
        [
            179,
            85
        ],
        [
            84,
            85
        ],
        [
            85,
            180
        ],
        [
            180,
            84
        ],
        [
            83,
            84
        ],
        [
            84,
            181
        ],
        [
            181,
            83
        ],
        [
            201,
            83
        ],
        [
            83,
            182
        ],
        [
            182,
            201
        ],
        [
            137,
            93
        ],
        [
            93,
            132
        ],
        [
            132,
            137
        ],
        [
            76,
            62
        ],
        [
            62,
            183
        ],
        [
            183,
            76
        ],
        [
            61,
            76
        ],
        [
            76,
            184
        ],
        [
            184,
            61
        ],
        [
            57,
            61
        ],
        [
            61,
            185
        ],
        [
            185,
            57
        ],
        [
            212,
            57
        ],
        [
            57,
            186
        ],
        [
            186,
            212
        ],
        [
            214,
            207
        ],
        [
            207,
            187
        ],
        [
            187,
            214
        ],
        [
            34,
            143
        ],
        [
            143,
            156
        ],
        [
            156,
            34
        ],
        [
            79,
            239
        ],
        [
            239,
            237
        ],
        [
            237,
            79
        ],
        [
            123,
            137
        ],
        [
            137,
            177
        ],
        [
            177,
            123
        ],
        [
            44,
            1
        ],
        [
            1,
            4
        ],
        [
            4,
            44
        ],
        [
            201,
            194
        ],
        [
            194,
            32
        ],
        [
            32,
            201
        ],
        [
            64,
            102
        ],
        [
            102,
            129
        ],
        [
            129,
            64
        ],
        [
            213,
            215
        ],
        [
            215,
            138
        ],
        [
            138,
            213
        ],
        [
            59,
            166
        ],
        [
            166,
            219
        ],
        [
            219,
            59
        ],
        [
            242,
            99
        ],
        [
            99,
            97
        ],
        [
            97,
            242
        ],
        [
            2,
            94
        ],
        [
            94,
            141
        ],
        [
            141,
            2
        ],
        [
            75,
            59
        ],
        [
            59,
            235
        ],
        [
            235,
            75
        ],
        [
            24,
            110
        ],
        [
            110,
            228
        ],
        [
            228,
            24
        ],
        [
            25,
            130
        ],
        [
            130,
            226
        ],
        [
            226,
            25
        ],
        [
            23,
            24
        ],
        [
            24,
            229
        ],
        [
            229,
            23
        ],
        [
            22,
            23
        ],
        [
            23,
            230
        ],
        [
            230,
            22
        ],
        [
            26,
            22
        ],
        [
            22,
            231
        ],
        [
            231,
            26
        ],
        [
            112,
            26
        ],
        [
            26,
            232
        ],
        [
            232,
            112
        ],
        [
            189,
            190
        ],
        [
            190,
            243
        ],
        [
            243,
            189
        ],
        [
            221,
            56
        ],
        [
            56,
            190
        ],
        [
            190,
            221
        ],
        [
            28,
            56
        ],
        [
            56,
            221
        ],
        [
            221,
            28
        ],
        [
            27,
            28
        ],
        [
            28,
            222
        ],
        [
            222,
            27
        ],
        [
            29,
            27
        ],
        [
            27,
            223
        ],
        [
            223,
            29
        ],
        [
            30,
            29
        ],
        [
            29,
            224
        ],
        [
            224,
            30
        ],
        [
            247,
            30
        ],
        [
            30,
            225
        ],
        [
            225,
            247
        ],
        [
            238,
            79
        ],
        [
            79,
            20
        ],
        [
            20,
            238
        ],
        [
            166,
            59
        ],
        [
            59,
            75
        ],
        [
            75,
            166
        ],
        [
            60,
            75
        ],
        [
            75,
            240
        ],
        [
            240,
            60
        ],
        [
            147,
            177
        ],
        [
            177,
            215
        ],
        [
            215,
            147
        ],
        [
            20,
            79
        ],
        [
            79,
            166
        ],
        [
            166,
            20
        ],
        [
            187,
            147
        ],
        [
            147,
            213
        ],
        [
            213,
            187
        ],
        [
            112,
            233
        ],
        [
            233,
            244
        ],
        [
            244,
            112
        ],
        [
            233,
            128
        ],
        [
            128,
            245
        ],
        [
            245,
            233
        ],
        [
            128,
            114
        ],
        [
            114,
            188
        ],
        [
            188,
            128
        ],
        [
            114,
            217
        ],
        [
            217,
            174
        ],
        [
            174,
            114
        ],
        [
            131,
            115
        ],
        [
            115,
            220
        ],
        [
            220,
            131
        ],
        [
            217,
            198
        ],
        [
            198,
            236
        ],
        [
            236,
            217
        ],
        [
            198,
            131
        ],
        [
            131,
            134
        ],
        [
            134,
            198
        ],
        [
            177,
            132
        ],
        [
            132,
            58
        ],
        [
            58,
            177
        ],
        [
            143,
            35
        ],
        [
            35,
            124
        ],
        [
            124,
            143
        ],
        [
            110,
            163
        ],
        [
            163,
            7
        ],
        [
            7,
            110
        ],
        [
            228,
            110
        ],
        [
            110,
            25
        ],
        [
            25,
            228
        ],
        [
            356,
            389
        ],
        [
            389,
            368
        ],
        [
            368,
            356
        ],
        [
            11,
            302
        ],
        [
            302,
            267
        ],
        [
            267,
            11
        ],
        [
            452,
            350
        ],
        [
            350,
            349
        ],
        [
            349,
            452
        ],
        [
            302,
            303
        ],
        [
            303,
            269
        ],
        [
            269,
            302
        ],
        [
            357,
            343
        ],
        [
            343,
            277
        ],
        [
            277,
            357
        ],
        [
            452,
            453
        ],
        [
            453,
            357
        ],
        [
            357,
            452
        ],
        [
            333,
            332
        ],
        [
            332,
            297
        ],
        [
            297,
            333
        ],
        [
            175,
            152
        ],
        [
            152,
            377
        ],
        [
            377,
            175
        ],
        [
            347,
            348
        ],
        [
            348,
            330
        ],
        [
            330,
            347
        ],
        [
            303,
            304
        ],
        [
            304,
            270
        ],
        [
            270,
            303
        ],
        [
            9,
            336
        ],
        [
            336,
            337
        ],
        [
            337,
            9
        ],
        [
            278,
            279
        ],
        [
            279,
            360
        ],
        [
            360,
            278
        ],
        [
            418,
            262
        ],
        [
            262,
            431
        ],
        [
            431,
            418
        ],
        [
            304,
            408
        ],
        [
            408,
            409
        ],
        [
            409,
            304
        ],
        [
            310,
            415
        ],
        [
            415,
            407
        ],
        [
            407,
            310
        ],
        [
            270,
            409
        ],
        [
            409,
            410
        ],
        [
            410,
            270
        ],
        [
            450,
            348
        ],
        [
            348,
            347
        ],
        [
            347,
            450
        ],
        [
            422,
            430
        ],
        [
            430,
            434
        ],
        [
            434,
            422
        ],
        [
            313,
            314
        ],
        [
            314,
            17
        ],
        [
            17,
            313
        ],
        [
            306,
            307
        ],
        [
            307,
            375
        ],
        [
            375,
            306
        ],
        [
            387,
            388
        ],
        [
            388,
            260
        ],
        [
            260,
            387
        ],
        [
            286,
            414
        ],
        [
            414,
            398
        ],
        [
            398,
            286
        ],
        [
            335,
            406
        ],
        [
            406,
            418
        ],
        [
            418,
            335
        ],
        [
            364,
            367
        ],
        [
            367,
            416
        ],
        [
            416,
            364
        ],
        [
            423,
            358
        ],
        [
            358,
            327
        ],
        [
            327,
            423
        ],
        [
            251,
            284
        ],
        [
            284,
            298
        ],
        [
            298,
            251
        ],
        [
            281,
            5
        ],
        [
            5,
            4
        ],
        [
            4,
            281
        ],
        [
            373,
            374
        ],
        [
            374,
            253
        ],
        [
            253,
            373
        ],
        [
            307,
            320
        ],
        [
            320,
            321
        ],
        [
            321,
            307
        ],
        [
            425,
            427
        ],
        [
            427,
            411
        ],
        [
            411,
            425
        ],
        [
            421,
            313
        ],
        [
            313,
            18
        ],
        [
            18,
            421
        ],
        [
            321,
            405
        ],
        [
            405,
            406
        ],
        [
            406,
            321
        ],
        [
            320,
            404
        ],
        [
            404,
            405
        ],
        [
            405,
            320
        ],
        [
            315,
            16
        ],
        [
            16,
            17
        ],
        [
            17,
            315
        ],
        [
            426,
            425
        ],
        [
            425,
            266
        ],
        [
            266,
            426
        ],
        [
            377,
            400
        ],
        [
            400,
            369
        ],
        [
            369,
            377
        ],
        [
            322,
            391
        ],
        [
            391,
            269
        ],
        [
            269,
            322
        ],
        [
            417,
            465
        ],
        [
            465,
            464
        ],
        [
            464,
            417
        ],
        [
            386,
            257
        ],
        [
            257,
            258
        ],
        [
            258,
            386
        ],
        [
            466,
            260
        ],
        [
            260,
            388
        ],
        [
            388,
            466
        ],
        [
            456,
            399
        ],
        [
            399,
            419
        ],
        [
            419,
            456
        ],
        [
            284,
            332
        ],
        [
            332,
            333
        ],
        [
            333,
            284
        ],
        [
            417,
            285
        ],
        [
            285,
            8
        ],
        [
            8,
            417
        ],
        [
            346,
            340
        ],
        [
            340,
            261
        ],
        [
            261,
            346
        ],
        [
            413,
            441
        ],
        [
            441,
            285
        ],
        [
            285,
            413
        ],
        [
            327,
            460
        ],
        [
            460,
            328
        ],
        [
            328,
            327
        ],
        [
            355,
            371
        ],
        [
            371,
            329
        ],
        [
            329,
            355
        ],
        [
            392,
            439
        ],
        [
            439,
            438
        ],
        [
            438,
            392
        ],
        [
            382,
            341
        ],
        [
            341,
            256
        ],
        [
            256,
            382
        ],
        [
            429,
            420
        ],
        [
            420,
            360
        ],
        [
            360,
            429
        ],
        [
            364,
            394
        ],
        [
            394,
            379
        ],
        [
            379,
            364
        ],
        [
            277,
            343
        ],
        [
            343,
            437
        ],
        [
            437,
            277
        ],
        [
            443,
            444
        ],
        [
            444,
            283
        ],
        [
            283,
            443
        ],
        [
            275,
            440
        ],
        [
            440,
            363
        ],
        [
            363,
            275
        ],
        [
            431,
            262
        ],
        [
            262,
            369
        ],
        [
            369,
            431
        ],
        [
            297,
            338
        ],
        [
            338,
            337
        ],
        [
            337,
            297
        ],
        [
            273,
            375
        ],
        [
            375,
            321
        ],
        [
            321,
            273
        ],
        [
            450,
            451
        ],
        [
            451,
            349
        ],
        [
            349,
            450
        ],
        [
            446,
            342
        ],
        [
            342,
            467
        ],
        [
            467,
            446
        ],
        [
            293,
            334
        ],
        [
            334,
            282
        ],
        [
            282,
            293
        ],
        [
            458,
            461
        ],
        [
            461,
            462
        ],
        [
            462,
            458
        ],
        [
            276,
            353
        ],
        [
            353,
            383
        ],
        [
            383,
            276
        ],
        [
            308,
            324
        ],
        [
            324,
            325
        ],
        [
            325,
            308
        ],
        [
            276,
            300
        ],
        [
            300,
            293
        ],
        [
            293,
            276
        ],
        [
            372,
            345
        ],
        [
            345,
            447
        ],
        [
            447,
            372
        ],
        [
            352,
            345
        ],
        [
            345,
            340
        ],
        [
            340,
            352
        ],
        [
            274,
            1
        ],
        [
            1,
            19
        ],
        [
            19,
            274
        ],
        [
            456,
            248
        ],
        [
            248,
            281
        ],
        [
            281,
            456
        ],
        [
            436,
            427
        ],
        [
            427,
            425
        ],
        [
            425,
            436
        ],
        [
            381,
            256
        ],
        [
            256,
            252
        ],
        [
            252,
            381
        ],
        [
            269,
            391
        ],
        [
            391,
            393
        ],
        [
            393,
            269
        ],
        [
            200,
            199
        ],
        [
            199,
            428
        ],
        [
            428,
            200
        ],
        [
            266,
            330
        ],
        [
            330,
            329
        ],
        [
            329,
            266
        ],
        [
            287,
            273
        ],
        [
            273,
            422
        ],
        [
            422,
            287
        ],
        [
            250,
            462
        ],
        [
            462,
            328
        ],
        [
            328,
            250
        ],
        [
            258,
            286
        ],
        [
            286,
            384
        ],
        [
            384,
            258
        ],
        [
            265,
            353
        ],
        [
            353,
            342
        ],
        [
            342,
            265
        ],
        [
            387,
            259
        ],
        [
            259,
            257
        ],
        [
            257,
            387
        ],
        [
            424,
            431
        ],
        [
            431,
            430
        ],
        [
            430,
            424
        ],
        [
            342,
            353
        ],
        [
            353,
            276
        ],
        [
            276,
            342
        ],
        [
            273,
            335
        ],
        [
            335,
            424
        ],
        [
            424,
            273
        ],
        [
            292,
            325
        ],
        [
            325,
            307
        ],
        [
            307,
            292
        ],
        [
            366,
            447
        ],
        [
            447,
            345
        ],
        [
            345,
            366
        ],
        [
            271,
            303
        ],
        [
            303,
            302
        ],
        [
            302,
            271
        ],
        [
            423,
            266
        ],
        [
            266,
            371
        ],
        [
            371,
            423
        ],
        [
            294,
            455
        ],
        [
            455,
            460
        ],
        [
            460,
            294
        ],
        [
            279,
            278
        ],
        [
            278,
            294
        ],
        [
            294,
            279
        ],
        [
            271,
            272
        ],
        [
            272,
            304
        ],
        [
            304,
            271
        ],
        [
            432,
            434
        ],
        [
            434,
            427
        ],
        [
            427,
            432
        ],
        [
            272,
            407
        ],
        [
            407,
            408
        ],
        [
            408,
            272
        ],
        [
            394,
            430
        ],
        [
            430,
            431
        ],
        [
            431,
            394
        ],
        [
            395,
            369
        ],
        [
            369,
            400
        ],
        [
            400,
            395
        ],
        [
            334,
            333
        ],
        [
            333,
            299
        ],
        [
            299,
            334
        ],
        [
            351,
            417
        ],
        [
            417,
            168
        ],
        [
            168,
            351
        ],
        [
            352,
            280
        ],
        [
            280,
            411
        ],
        [
            411,
            352
        ],
        [
            325,
            319
        ],
        [
            319,
            320
        ],
        [
            320,
            325
        ],
        [
            295,
            296
        ],
        [
            296,
            336
        ],
        [
            336,
            295
        ],
        [
            319,
            403
        ],
        [
            403,
            404
        ],
        [
            404,
            319
        ],
        [
            330,
            348
        ],
        [
            348,
            349
        ],
        [
            349,
            330
        ],
        [
            293,
            298
        ],
        [
            298,
            333
        ],
        [
            333,
            293
        ],
        [
            323,
            454
        ],
        [
            454,
            447
        ],
        [
            447,
            323
        ],
        [
            15,
            16
        ],
        [
            16,
            315
        ],
        [
            315,
            15
        ],
        [
            358,
            429
        ],
        [
            429,
            279
        ],
        [
            279,
            358
        ],
        [
            14,
            15
        ],
        [
            15,
            316
        ],
        [
            316,
            14
        ],
        [
            285,
            336
        ],
        [
            336,
            9
        ],
        [
            9,
            285
        ],
        [
            329,
            349
        ],
        [
            349,
            350
        ],
        [
            350,
            329
        ],
        [
            374,
            380
        ],
        [
            380,
            252
        ],
        [
            252,
            374
        ],
        [
            318,
            402
        ],
        [
            402,
            403
        ],
        [
            403,
            318
        ],
        [
            6,
            197
        ],
        [
            197,
            419
        ],
        [
            419,
            6
        ],
        [
            318,
            319
        ],
        [
            319,
            325
        ],
        [
            325,
            318
        ],
        [
            367,
            364
        ],
        [
            364,
            365
        ],
        [
            365,
            367
        ],
        [
            435,
            367
        ],
        [
            367,
            397
        ],
        [
            397,
            435
        ],
        [
            344,
            438
        ],
        [
            438,
            439
        ],
        [
            439,
            344
        ],
        [
            272,
            271
        ],
        [
            271,
            311
        ],
        [
            311,
            272
        ],
        [
            195,
            5
        ],
        [
            5,
            281
        ],
        [
            281,
            195
        ],
        [
            273,
            287
        ],
        [
            287,
            291
        ],
        [
            291,
            273
        ],
        [
            396,
            428
        ],
        [
            428,
            199
        ],
        [
            199,
            396
        ],
        [
            311,
            271
        ],
        [
            271,
            268
        ],
        [
            268,
            311
        ],
        [
            283,
            444
        ],
        [
            444,
            445
        ],
        [
            445,
            283
        ],
        [
            373,
            254
        ],
        [
            254,
            339
        ],
        [
            339,
            373
        ],
        [
            282,
            334
        ],
        [
            334,
            296
        ],
        [
            296,
            282
        ],
        [
            449,
            347
        ],
        [
            347,
            346
        ],
        [
            346,
            449
        ],
        [
            264,
            447
        ],
        [
            447,
            454
        ],
        [
            454,
            264
        ],
        [
            336,
            296
        ],
        [
            296,
            299
        ],
        [
            299,
            336
        ],
        [
            338,
            10
        ],
        [
            10,
            151
        ],
        [
            151,
            338
        ],
        [
            278,
            439
        ],
        [
            439,
            455
        ],
        [
            455,
            278
        ],
        [
            292,
            407
        ],
        [
            407,
            415
        ],
        [
            415,
            292
        ],
        [
            358,
            371
        ],
        [
            371,
            355
        ],
        [
            355,
            358
        ],
        [
            340,
            345
        ],
        [
            345,
            372
        ],
        [
            372,
            340
        ],
        [
            346,
            347
        ],
        [
            347,
            280
        ],
        [
            280,
            346
        ],
        [
            442,
            443
        ],
        [
            443,
            282
        ],
        [
            282,
            442
        ],
        [
            19,
            94
        ],
        [
            94,
            370
        ],
        [
            370,
            19
        ],
        [
            441,
            442
        ],
        [
            442,
            295
        ],
        [
            295,
            441
        ],
        [
            248,
            419
        ],
        [
            419,
            197
        ],
        [
            197,
            248
        ],
        [
            263,
            255
        ],
        [
            255,
            359
        ],
        [
            359,
            263
        ],
        [
            440,
            275
        ],
        [
            275,
            274
        ],
        [
            274,
            440
        ],
        [
            300,
            383
        ],
        [
            383,
            368
        ],
        [
            368,
            300
        ],
        [
            351,
            412
        ],
        [
            412,
            465
        ],
        [
            465,
            351
        ],
        [
            263,
            467
        ],
        [
            467,
            466
        ],
        [
            466,
            263
        ],
        [
            301,
            368
        ],
        [
            368,
            389
        ],
        [
            389,
            301
        ],
        [
            395,
            378
        ],
        [
            378,
            379
        ],
        [
            379,
            395
        ],
        [
            412,
            351
        ],
        [
            351,
            419
        ],
        [
            419,
            412
        ],
        [
            436,
            426
        ],
        [
            426,
            322
        ],
        [
            322,
            436
        ],
        [
            2,
            164
        ],
        [
            164,
            393
        ],
        [
            393,
            2
        ],
        [
            370,
            462
        ],
        [
            462,
            461
        ],
        [
            461,
            370
        ],
        [
            164,
            0
        ],
        [
            0,
            267
        ],
        [
            267,
            164
        ],
        [
            302,
            11
        ],
        [
            11,
            12
        ],
        [
            12,
            302
        ],
        [
            268,
            12
        ],
        [
            12,
            13
        ],
        [
            13,
            268
        ],
        [
            293,
            300
        ],
        [
            300,
            301
        ],
        [
            301,
            293
        ],
        [
            446,
            261
        ],
        [
            261,
            340
        ],
        [
            340,
            446
        ],
        [
            330,
            266
        ],
        [
            266,
            425
        ],
        [
            425,
            330
        ],
        [
            426,
            423
        ],
        [
            423,
            391
        ],
        [
            391,
            426
        ],
        [
            429,
            355
        ],
        [
            355,
            437
        ],
        [
            437,
            429
        ],
        [
            391,
            327
        ],
        [
            327,
            326
        ],
        [
            326,
            391
        ],
        [
            440,
            457
        ],
        [
            457,
            438
        ],
        [
            438,
            440
        ],
        [
            341,
            382
        ],
        [
            382,
            362
        ],
        [
            362,
            341
        ],
        [
            459,
            457
        ],
        [
            457,
            461
        ],
        [
            461,
            459
        ],
        [
            434,
            430
        ],
        [
            430,
            394
        ],
        [
            394,
            434
        ],
        [
            414,
            463
        ],
        [
            463,
            362
        ],
        [
            362,
            414
        ],
        [
            396,
            369
        ],
        [
            369,
            262
        ],
        [
            262,
            396
        ],
        [
            354,
            461
        ],
        [
            461,
            457
        ],
        [
            457,
            354
        ],
        [
            316,
            403
        ],
        [
            403,
            402
        ],
        [
            402,
            316
        ],
        [
            315,
            404
        ],
        [
            404,
            403
        ],
        [
            403,
            315
        ],
        [
            314,
            405
        ],
        [
            405,
            404
        ],
        [
            404,
            314
        ],
        [
            313,
            406
        ],
        [
            406,
            405
        ],
        [
            405,
            313
        ],
        [
            421,
            418
        ],
        [
            418,
            406
        ],
        [
            406,
            421
        ],
        [
            366,
            401
        ],
        [
            401,
            361
        ],
        [
            361,
            366
        ],
        [
            306,
            408
        ],
        [
            408,
            407
        ],
        [
            407,
            306
        ],
        [
            291,
            409
        ],
        [
            409,
            408
        ],
        [
            408,
            291
        ],
        [
            287,
            410
        ],
        [
            410,
            409
        ],
        [
            409,
            287
        ],
        [
            432,
            436
        ],
        [
            436,
            410
        ],
        [
            410,
            432
        ],
        [
            434,
            416
        ],
        [
            416,
            411
        ],
        [
            411,
            434
        ],
        [
            264,
            368
        ],
        [
            368,
            383
        ],
        [
            383,
            264
        ],
        [
            309,
            438
        ],
        [
            438,
            457
        ],
        [
            457,
            309
        ],
        [
            352,
            376
        ],
        [
            376,
            401
        ],
        [
            401,
            352
        ],
        [
            274,
            275
        ],
        [
            275,
            4
        ],
        [
            4,
            274
        ],
        [
            421,
            428
        ],
        [
            428,
            262
        ],
        [
            262,
            421
        ],
        [
            294,
            327
        ],
        [
            327,
            358
        ],
        [
            358,
            294
        ],
        [
            433,
            416
        ],
        [
            416,
            367
        ],
        [
            367,
            433
        ],
        [
            289,
            455
        ],
        [
            455,
            439
        ],
        [
            439,
            289
        ],
        [
            462,
            370
        ],
        [
            370,
            326
        ],
        [
            326,
            462
        ],
        [
            2,
            326
        ],
        [
            326,
            370
        ],
        [
            370,
            2
        ],
        [
            305,
            460
        ],
        [
            460,
            455
        ],
        [
            455,
            305
        ],
        [
            254,
            449
        ],
        [
            449,
            448
        ],
        [
            448,
            254
        ],
        [
            255,
            261
        ],
        [
            261,
            446
        ],
        [
            446,
            255
        ],
        [
            253,
            450
        ],
        [
            450,
            449
        ],
        [
            449,
            253
        ],
        [
            252,
            451
        ],
        [
            451,
            450
        ],
        [
            450,
            252
        ],
        [
            256,
            452
        ],
        [
            452,
            451
        ],
        [
            451,
            256
        ],
        [
            341,
            453
        ],
        [
            453,
            452
        ],
        [
            452,
            341
        ],
        [
            413,
            464
        ],
        [
            464,
            463
        ],
        [
            463,
            413
        ],
        [
            441,
            413
        ],
        [
            413,
            414
        ],
        [
            414,
            441
        ],
        [
            258,
            442
        ],
        [
            442,
            441
        ],
        [
            441,
            258
        ],
        [
            257,
            443
        ],
        [
            443,
            442
        ],
        [
            442,
            257
        ],
        [
            259,
            444
        ],
        [
            444,
            443
        ],
        [
            443,
            259
        ],
        [
            260,
            445
        ],
        [
            445,
            444
        ],
        [
            444,
            260
        ],
        [
            467,
            342
        ],
        [
            342,
            445
        ],
        [
            445,
            467
        ],
        [
            459,
            458
        ],
        [
            458,
            250
        ],
        [
            250,
            459
        ],
        [
            289,
            392
        ],
        [
            392,
            290
        ],
        [
            290,
            289
        ],
        [
            290,
            328
        ],
        [
            328,
            460
        ],
        [
            460,
            290
        ],
        [
            376,
            433
        ],
        [
            433,
            435
        ],
        [
            435,
            376
        ],
        [
            250,
            290
        ],
        [
            290,
            392
        ],
        [
            392,
            250
        ],
        [
            411,
            416
        ],
        [
            416,
            433
        ],
        [
            433,
            411
        ],
        [
            341,
            463
        ],
        [
            463,
            464
        ],
        [
            464,
            341
        ],
        [
            453,
            464
        ],
        [
            464,
            465
        ],
        [
            465,
            453
        ],
        [
            357,
            465
        ],
        [
            465,
            412
        ],
        [
            412,
            357
        ],
        [
            343,
            412
        ],
        [
            412,
            399
        ],
        [
            399,
            343
        ],
        [
            360,
            363
        ],
        [
            363,
            440
        ],
        [
            440,
            360
        ],
        [
            437,
            399
        ],
        [
            399,
            456
        ],
        [
            456,
            437
        ],
        [
            420,
            456
        ],
        [
            456,
            363
        ],
        [
            363,
            420
        ],
        [
            401,
            435
        ],
        [
            435,
            288
        ],
        [
            288,
            401
        ],
        [
            372,
            383
        ],
        [
            383,
            353
        ],
        [
            353,
            372
        ],
        [
            339,
            255
        ],
        [
            255,
            249
        ],
        [
            249,
            339
        ],
        [
            448,
            261
        ],
        [
            261,
            255
        ],
        [
            255,
            448
        ],
        [
            133,
            243
        ],
        [
            243,
            190
        ],
        [
            190,
            133
        ],
        [
            133,
            155
        ],
        [
            155,
            112
        ],
        [
            112,
            133
        ],
        [
            33,
            246
        ],
        [
            246,
            247
        ],
        [
            247,
            33
        ],
        [
            33,
            130
        ],
        [
            130,
            25
        ],
        [
            25,
            33
        ],
        [
            398,
            384
        ],
        [
            384,
            286
        ],
        [
            286,
            398
        ],
        [
            362,
            398
        ],
        [
            398,
            414
        ],
        [
            414,
            362
        ],
        [
            362,
            463
        ],
        [
            463,
            341
        ],
        [
            341,
            362
        ],
        [
            263,
            359
        ],
        [
            359,
            467
        ],
        [
            467,
            263
        ],
        [
            263,
            249
        ],
        [
            249,
            255
        ],
        [
            255,
            263
        ],
        [
            466,
            467
        ],
        [
            467,
            260
        ],
        [
            260,
            466
        ],
        [
            75,
            60
        ],
        [
            60,
            166
        ],
        [
            166,
            75
        ],
        [
            238,
            239
        ],
        [
            239,
            79
        ],
        [
            79,
            238
        ],
        [
            162,
            127
        ],
        [
            127,
            139
        ],
        [
            139,
            162
        ],
        [
            72,
            11
        ],
        [
            11,
            37
        ],
        [
            37,
            72
        ],
        [
            121,
            232
        ],
        [
            232,
            120
        ],
        [
            120,
            121
        ],
        [
            73,
            72
        ],
        [
            72,
            39
        ],
        [
            39,
            73
        ],
        [
            114,
            128
        ],
        [
            128,
            47
        ],
        [
            47,
            114
        ],
        [
            233,
            232
        ],
        [
            232,
            128
        ],
        [
            128,
            233
        ],
        [
            103,
            104
        ],
        [
            104,
            67
        ],
        [
            67,
            103
        ],
        [
            152,
            175
        ],
        [
            175,
            148
        ],
        [
            148,
            152
        ],
        [
            119,
            118
        ],
        [
            118,
            101
        ],
        [
            101,
            119
        ],
        [
            74,
            73
        ],
        [
            73,
            40
        ],
        [
            40,
            74
        ],
        [
            107,
            9
        ],
        [
            9,
            108
        ],
        [
            108,
            107
        ],
        [
            49,
            48
        ],
        [
            48,
            131
        ],
        [
            131,
            49
        ],
        [
            32,
            194
        ],
        [
            194,
            211
        ],
        [
            211,
            32
        ],
        [
            184,
            74
        ],
        [
            74,
            185
        ],
        [
            185,
            184
        ],
        [
            191,
            80
        ],
        [
            80,
            183
        ],
        [
            183,
            191
        ],
        [
            185,
            40
        ],
        [
            40,
            186
        ],
        [
            186,
            185
        ],
        [
            119,
            230
        ],
        [
            230,
            118
        ],
        [
            118,
            119
        ],
        [
            210,
            202
        ],
        [
            202,
            214
        ],
        [
            214,
            210
        ],
        [
            84,
            83
        ],
        [
            83,
            17
        ],
        [
            17,
            84
        ],
        [
            77,
            76
        ],
        [
            76,
            146
        ],
        [
            146,
            77
        ],
        [
            161,
            160
        ],
        [
            160,
            30
        ],
        [
            30,
            161
        ],
        [
            190,
            56
        ],
        [
            56,
            173
        ],
        [
            173,
            190
        ],
        [
            182,
            106
        ],
        [
            106,
            194
        ],
        [
            194,
            182
        ],
        [
            138,
            135
        ],
        [
            135,
            192
        ],
        [
            192,
            138
        ],
        [
            129,
            203
        ],
        [
            203,
            98
        ],
        [
            98,
            129
        ],
        [
            54,
            21
        ],
        [
            21,
            68
        ],
        [
            68,
            54
        ],
        [
            5,
            51
        ],
        [
            51,
            4
        ],
        [
            4,
            5
        ],
        [
            145,
            144
        ],
        [
            144,
            23
        ],
        [
            23,
            145
        ],
        [
            90,
            77
        ],
        [
            77,
            91
        ],
        [
            91,
            90
        ],
        [
            207,
            205
        ],
        [
            205,
            187
        ],
        [
            187,
            207
        ],
        [
            83,
            201
        ],
        [
            201,
            18
        ],
        [
            18,
            83
        ],
        [
            181,
            91
        ],
        [
            91,
            182
        ],
        [
            182,
            181
        ],
        [
            180,
            90
        ],
        [
            90,
            181
        ],
        [
            181,
            180
        ],
        [
            16,
            85
        ],
        [
            85,
            17
        ],
        [
            17,
            16
        ],
        [
            205,
            206
        ],
        [
            206,
            36
        ],
        [
            36,
            205
        ],
        [
            176,
            148
        ],
        [
            148,
            140
        ],
        [
            140,
            176
        ],
        [
            165,
            92
        ],
        [
            92,
            39
        ],
        [
            39,
            165
        ],
        [
            245,
            193
        ],
        [
            193,
            244
        ],
        [
            244,
            245
        ],
        [
            27,
            159
        ],
        [
            159,
            28
        ],
        [
            28,
            27
        ],
        [
            30,
            247
        ],
        [
            247,
            161
        ],
        [
            161,
            30
        ],
        [
            174,
            236
        ],
        [
            236,
            196
        ],
        [
            196,
            174
        ],
        [
            103,
            54
        ],
        [
            54,
            104
        ],
        [
            104,
            103
        ],
        [
            55,
            193
        ],
        [
            193,
            8
        ],
        [
            8,
            55
        ],
        [
            111,
            117
        ],
        [
            117,
            31
        ],
        [
            31,
            111
        ],
        [
            221,
            189
        ],
        [
            189,
            55
        ],
        [
            55,
            221
        ],
        [
            240,
            98
        ],
        [
            98,
            99
        ],
        [
            99,
            240
        ],
        [
            142,
            126
        ],
        [
            126,
            100
        ],
        [
            100,
            142
        ],
        [
            219,
            166
        ],
        [
            166,
            218
        ],
        [
            218,
            219
        ],
        [
            112,
            155
        ],
        [
            155,
            26
        ],
        [
            26,
            112
        ],
        [
            198,
            209
        ],
        [
            209,
            131
        ],
        [
            131,
            198
        ],
        [
            169,
            135
        ],
        [
            135,
            150
        ],
        [
            150,
            169
        ],
        [
            114,
            47
        ],
        [
            47,
            217
        ],
        [
            217,
            114
        ],
        [
            224,
            223
        ],
        [
            223,
            53
        ],
        [
            53,
            224
        ],
        [
            220,
            45
        ],
        [
            45,
            134
        ],
        [
            134,
            220
        ],
        [
            32,
            211
        ],
        [
            211,
            140
        ],
        [
            140,
            32
        ],
        [
            109,
            67
        ],
        [
            67,
            108
        ],
        [
            108,
            109
        ],
        [
            146,
            43
        ],
        [
            43,
            91
        ],
        [
            91,
            146
        ],
        [
            231,
            230
        ],
        [
            230,
            120
        ],
        [
            120,
            231
        ],
        [
            113,
            226
        ],
        [
            226,
            247
        ],
        [
            247,
            113
        ],
        [
            105,
            63
        ],
        [
            63,
            52
        ],
        [
            52,
            105
        ],
        [
            241,
            238
        ],
        [
            238,
            242
        ],
        [
            242,
            241
        ],
        [
            124,
            46
        ],
        [
            46,
            156
        ],
        [
            156,
            124
        ],
        [
            95,
            78
        ],
        [
            78,
            96
        ],
        [
            96,
            95
        ],
        [
            70,
            46
        ],
        [
            46,
            63
        ],
        [
            63,
            70
        ],
        [
            116,
            143
        ],
        [
            143,
            227
        ],
        [
            227,
            116
        ],
        [
            116,
            123
        ],
        [
            123,
            111
        ],
        [
            111,
            116
        ],
        [
            1,
            44
        ],
        [
            44,
            19
        ],
        [
            19,
            1
        ],
        [
            3,
            236
        ],
        [
            236,
            51
        ],
        [
            51,
            3
        ],
        [
            207,
            216
        ],
        [
            216,
            205
        ],
        [
            205,
            207
        ],
        [
            26,
            154
        ],
        [
            154,
            22
        ],
        [
            22,
            26
        ],
        [
            165,
            39
        ],
        [
            39,
            167
        ],
        [
            167,
            165
        ],
        [
            199,
            200
        ],
        [
            200,
            208
        ],
        [
            208,
            199
        ],
        [
            101,
            36
        ],
        [
            36,
            100
        ],
        [
            100,
            101
        ],
        [
            43,
            57
        ],
        [
            57,
            202
        ],
        [
            202,
            43
        ],
        [
            242,
            20
        ],
        [
            20,
            99
        ],
        [
            99,
            242
        ],
        [
            56,
            28
        ],
        [
            28,
            157
        ],
        [
            157,
            56
        ],
        [
            124,
            35
        ],
        [
            35,
            113
        ],
        [
            113,
            124
        ],
        [
            29,
            160
        ],
        [
            160,
            27
        ],
        [
            27,
            29
        ],
        [
            211,
            204
        ],
        [
            204,
            210
        ],
        [
            210,
            211
        ],
        [
            124,
            113
        ],
        [
            113,
            46
        ],
        [
            46,
            124
        ],
        [
            106,
            43
        ],
        [
            43,
            204
        ],
        [
            204,
            106
        ],
        [
            96,
            62
        ],
        [
            62,
            77
        ],
        [
            77,
            96
        ],
        [
            227,
            137
        ],
        [
            137,
            116
        ],
        [
            116,
            227
        ],
        [
            73,
            41
        ],
        [
            41,
            72
        ],
        [
            72,
            73
        ],
        [
            36,
            203
        ],
        [
            203,
            142
        ],
        [
            142,
            36
        ],
        [
            235,
            64
        ],
        [
            64,
            240
        ],
        [
            240,
            235
        ],
        [
            48,
            49
        ],
        [
            49,
            64
        ],
        [
            64,
            48
        ],
        [
            42,
            41
        ],
        [
            41,
            74
        ],
        [
            74,
            42
        ],
        [
            214,
            212
        ],
        [
            212,
            207
        ],
        [
            207,
            214
        ],
        [
            183,
            42
        ],
        [
            42,
            184
        ],
        [
            184,
            183
        ],
        [
            210,
            169
        ],
        [
            169,
            211
        ],
        [
            211,
            210
        ],
        [
            140,
            170
        ],
        [
            170,
            176
        ],
        [
            176,
            140
        ],
        [
            104,
            105
        ],
        [
            105,
            69
        ],
        [
            69,
            104
        ],
        [
            193,
            122
        ],
        [
            122,
            168
        ],
        [
            168,
            193
        ],
        [
            50,
            123
        ],
        [
            123,
            187
        ],
        [
            187,
            50
        ],
        [
            89,
            96
        ],
        [
            96,
            90
        ],
        [
            90,
            89
        ],
        [
            66,
            65
        ],
        [
            65,
            107
        ],
        [
            107,
            66
        ],
        [
            179,
            89
        ],
        [
            89,
            180
        ],
        [
            180,
            179
        ],
        [
            119,
            101
        ],
        [
            101,
            120
        ],
        [
            120,
            119
        ],
        [
            68,
            63
        ],
        [
            63,
            104
        ],
        [
            104,
            68
        ],
        [
            234,
            93
        ],
        [
            93,
            227
        ],
        [
            227,
            234
        ],
        [
            16,
            15
        ],
        [
            15,
            85
        ],
        [
            85,
            16
        ],
        [
            209,
            129
        ],
        [
            129,
            49
        ],
        [
            49,
            209
        ],
        [
            15,
            14
        ],
        [
            14,
            86
        ],
        [
            86,
            15
        ],
        [
            107,
            55
        ],
        [
            55,
            9
        ],
        [
            9,
            107
        ],
        [
            120,
            100
        ],
        [
            100,
            121
        ],
        [
            121,
            120
        ],
        [
            153,
            145
        ],
        [
            145,
            22
        ],
        [
            22,
            153
        ],
        [
            178,
            88
        ],
        [
            88,
            179
        ],
        [
            179,
            178
        ],
        [
            197,
            6
        ],
        [
            6,
            196
        ],
        [
            196,
            197
        ],
        [
            89,
            88
        ],
        [
            88,
            96
        ],
        [
            96,
            89
        ],
        [
            135,
            138
        ],
        [
            138,
            136
        ],
        [
            136,
            135
        ],
        [
            138,
            215
        ],
        [
            215,
            172
        ],
        [
            172,
            138
        ],
        [
            218,
            115
        ],
        [
            115,
            219
        ],
        [
            219,
            218
        ],
        [
            41,
            42
        ],
        [
            42,
            81
        ],
        [
            81,
            41
        ],
        [
            5,
            195
        ],
        [
            195,
            51
        ],
        [
            51,
            5
        ],
        [
            57,
            43
        ],
        [
            43,
            61
        ],
        [
            61,
            57
        ],
        [
            208,
            171
        ],
        [
            171,
            199
        ],
        [
            199,
            208
        ],
        [
            41,
            81
        ],
        [
            81,
            38
        ],
        [
            38,
            41
        ],
        [
            224,
            53
        ],
        [
            53,
            225
        ],
        [
            225,
            224
        ],
        [
            24,
            144
        ],
        [
            144,
            110
        ],
        [
            110,
            24
        ],
        [
            105,
            52
        ],
        [
            52,
            66
        ],
        [
            66,
            105
        ],
        [
            118,
            229
        ],
        [
            229,
            117
        ],
        [
            117,
            118
        ],
        [
            227,
            34
        ],
        [
            34,
            234
        ],
        [
            234,
            227
        ],
        [
            66,
            107
        ],
        [
            107,
            69
        ],
        [
            69,
            66
        ],
        [
            10,
            109
        ],
        [
            109,
            151
        ],
        [
            151,
            10
        ],
        [
            219,
            48
        ],
        [
            48,
            235
        ],
        [
            235,
            219
        ],
        [
            183,
            62
        ],
        [
            62,
            191
        ],
        [
            191,
            183
        ],
        [
            142,
            129
        ],
        [
            129,
            126
        ],
        [
            126,
            142
        ],
        [
            116,
            111
        ],
        [
            111,
            143
        ],
        [
            143,
            116
        ],
        [
            118,
            117
        ],
        [
            117,
            50
        ],
        [
            50,
            118
        ],
        [
            223,
            222
        ],
        [
            222,
            52
        ],
        [
            52,
            223
        ],
        [
            94,
            19
        ],
        [
            19,
            141
        ],
        [
            141,
            94
        ],
        [
            222,
            221
        ],
        [
            221,
            65
        ],
        [
            65,
            222
        ],
        [
            196,
            3
        ],
        [
            3,
            197
        ],
        [
            197,
            196
        ],
        [
            45,
            220
        ],
        [
            220,
            44
        ],
        [
            44,
            45
        ],
        [
            156,
            70
        ],
        [
            70,
            139
        ],
        [
            139,
            156
        ],
        [
            188,
            122
        ],
        [
            122,
            245
        ],
        [
            245,
            188
        ],
        [
            139,
            71
        ],
        [
            71,
            162
        ],
        [
            162,
            139
        ],
        [
            149,
            170
        ],
        [
            170,
            150
        ],
        [
            150,
            149
        ],
        [
            122,
            188
        ],
        [
            188,
            196
        ],
        [
            196,
            122
        ],
        [
            206,
            216
        ],
        [
            216,
            92
        ],
        [
            92,
            206
        ],
        [
            164,
            2
        ],
        [
            2,
            167
        ],
        [
            167,
            164
        ],
        [
            242,
            141
        ],
        [
            141,
            241
        ],
        [
            241,
            242
        ],
        [
            0,
            164
        ],
        [
            164,
            37
        ],
        [
            37,
            0
        ],
        [
            11,
            72
        ],
        [
            72,
            12
        ],
        [
            12,
            11
        ],
        [
            12,
            38
        ],
        [
            38,
            13
        ],
        [
            13,
            12
        ],
        [
            70,
            63
        ],
        [
            63,
            71
        ],
        [
            71,
            70
        ],
        [
            31,
            226
        ],
        [
            226,
            111
        ],
        [
            111,
            31
        ],
        [
            36,
            101
        ],
        [
            101,
            205
        ],
        [
            205,
            36
        ],
        [
            203,
            206
        ],
        [
            206,
            165
        ],
        [
            165,
            203
        ],
        [
            126,
            209
        ],
        [
            209,
            217
        ],
        [
            217,
            126
        ],
        [
            98,
            165
        ],
        [
            165,
            97
        ],
        [
            97,
            98
        ],
        [
            237,
            220
        ],
        [
            220,
            218
        ],
        [
            218,
            237
        ],
        [
            237,
            239
        ],
        [
            239,
            241
        ],
        [
            241,
            237
        ],
        [
            210,
            214
        ],
        [
            214,
            169
        ],
        [
            169,
            210
        ],
        [
            140,
            171
        ],
        [
            171,
            32
        ],
        [
            32,
            140
        ],
        [
            241,
            125
        ],
        [
            125,
            237
        ],
        [
            237,
            241
        ],
        [
            179,
            86
        ],
        [
            86,
            178
        ],
        [
            178,
            179
        ],
        [
            180,
            85
        ],
        [
            85,
            179
        ],
        [
            179,
            180
        ],
        [
            181,
            84
        ],
        [
            84,
            180
        ],
        [
            180,
            181
        ],
        [
            182,
            83
        ],
        [
            83,
            181
        ],
        [
            181,
            182
        ],
        [
            194,
            201
        ],
        [
            201,
            182
        ],
        [
            182,
            194
        ],
        [
            177,
            137
        ],
        [
            137,
            132
        ],
        [
            132,
            177
        ],
        [
            184,
            76
        ],
        [
            76,
            183
        ],
        [
            183,
            184
        ],
        [
            185,
            61
        ],
        [
            61,
            184
        ],
        [
            184,
            185
        ],
        [
            186,
            57
        ],
        [
            57,
            185
        ],
        [
            185,
            186
        ],
        [
            216,
            212
        ],
        [
            212,
            186
        ],
        [
            186,
            216
        ],
        [
            192,
            214
        ],
        [
            214,
            187
        ],
        [
            187,
            192
        ],
        [
            139,
            34
        ],
        [
            34,
            156
        ],
        [
            156,
            139
        ],
        [
            218,
            79
        ],
        [
            79,
            237
        ],
        [
            237,
            218
        ],
        [
            147,
            123
        ],
        [
            123,
            177
        ],
        [
            177,
            147
        ],
        [
            45,
            44
        ],
        [
            44,
            4
        ],
        [
            4,
            45
        ],
        [
            208,
            201
        ],
        [
            201,
            32
        ],
        [
            32,
            208
        ],
        [
            98,
            64
        ],
        [
            64,
            129
        ],
        [
            129,
            98
        ],
        [
            192,
            213
        ],
        [
            213,
            138
        ],
        [
            138,
            192
        ],
        [
            235,
            59
        ],
        [
            59,
            219
        ],
        [
            219,
            235
        ],
        [
            141,
            242
        ],
        [
            242,
            97
        ],
        [
            97,
            141
        ],
        [
            97,
            2
        ],
        [
            2,
            141
        ],
        [
            141,
            97
        ],
        [
            240,
            75
        ],
        [
            75,
            235
        ],
        [
            235,
            240
        ],
        [
            229,
            24
        ],
        [
            24,
            228
        ],
        [
            228,
            229
        ],
        [
            31,
            25
        ],
        [
            25,
            226
        ],
        [
            226,
            31
        ],
        [
            230,
            23
        ],
        [
            23,
            229
        ],
        [
            229,
            230
        ],
        [
            231,
            22
        ],
        [
            22,
            230
        ],
        [
            230,
            231
        ],
        [
            232,
            26
        ],
        [
            26,
            231
        ],
        [
            231,
            232
        ],
        [
            233,
            112
        ],
        [
            112,
            232
        ],
        [
            232,
            233
        ],
        [
            244,
            189
        ],
        [
            189,
            243
        ],
        [
            243,
            244
        ],
        [
            189,
            221
        ],
        [
            221,
            190
        ],
        [
            190,
            189
        ],
        [
            222,
            28
        ],
        [
            28,
            221
        ],
        [
            221,
            222
        ],
        [
            223,
            27
        ],
        [
            27,
            222
        ],
        [
            222,
            223
        ],
        [
            224,
            29
        ],
        [
            29,
            223
        ],
        [
            223,
            224
        ],
        [
            225,
            30
        ],
        [
            30,
            224
        ],
        [
            224,
            225
        ],
        [
            113,
            247
        ],
        [
            247,
            225
        ],
        [
            225,
            113
        ],
        [
            99,
            60
        ],
        [
            60,
            240
        ],
        [
            240,
            99
        ],
        [
            213,
            147
        ],
        [
            147,
            215
        ],
        [
            215,
            213
        ],
        [
            60,
            20
        ],
        [
            20,
            166
        ],
        [
            166,
            60
        ],
        [
            192,
            187
        ],
        [
            187,
            213
        ],
        [
            213,
            192
        ],
        [
            243,
            112
        ],
        [
            112,
            244
        ],
        [
            244,
            243
        ],
        [
            244,
            233
        ],
        [
            233,
            245
        ],
        [
            245,
            244
        ],
        [
            245,
            128
        ],
        [
            128,
            188
        ],
        [
            188,
            245
        ],
        [
            188,
            114
        ],
        [
            114,
            174
        ],
        [
            174,
            188
        ],
        [
            134,
            131
        ],
        [
            131,
            220
        ],
        [
            220,
            134
        ],
        [
            174,
            217
        ],
        [
            217,
            236
        ],
        [
            236,
            174
        ],
        [
            236,
            198
        ],
        [
            198,
            134
        ],
        [
            134,
            236
        ],
        [
            215,
            177
        ],
        [
            177,
            58
        ],
        [
            58,
            215
        ],
        [
            156,
            143
        ],
        [
            143,
            124
        ],
        [
            124,
            156
        ],
        [
            25,
            110
        ],
        [
            110,
            7
        ],
        [
            7,
            25
        ],
        [
            31,
            228
        ],
        [
            228,
            25
        ],
        [
            25,
            31
        ],
        [
            264,
            356
        ],
        [
            356,
            368
        ],
        [
            368,
            264
        ],
        [
            0,
            11
        ],
        [
            11,
            267
        ],
        [
            267,
            0
        ],
        [
            451,
            452
        ],
        [
            452,
            349
        ],
        [
            349,
            451
        ],
        [
            267,
            302
        ],
        [
            302,
            269
        ],
        [
            269,
            267
        ],
        [
            350,
            357
        ],
        [
            357,
            277
        ],
        [
            277,
            350
        ],
        [
            350,
            452
        ],
        [
            452,
            357
        ],
        [
            357,
            350
        ],
        [
            299,
            333
        ],
        [
            333,
            297
        ],
        [
            297,
            299
        ],
        [
            396,
            175
        ],
        [
            175,
            377
        ],
        [
            377,
            396
        ],
        [
            280,
            347
        ],
        [
            347,
            330
        ],
        [
            330,
            280
        ],
        [
            269,
            303
        ],
        [
            303,
            270
        ],
        [
            270,
            269
        ],
        [
            151,
            9
        ],
        [
            9,
            337
        ],
        [
            337,
            151
        ],
        [
            344,
            278
        ],
        [
            278,
            360
        ],
        [
            360,
            344
        ],
        [
            424,
            418
        ],
        [
            418,
            431
        ],
        [
            431,
            424
        ],
        [
            270,
            304
        ],
        [
            304,
            409
        ],
        [
            409,
            270
        ],
        [
            272,
            310
        ],
        [
            310,
            407
        ],
        [
            407,
            272
        ],
        [
            322,
            270
        ],
        [
            270,
            410
        ],
        [
            410,
            322
        ],
        [
            449,
            450
        ],
        [
            450,
            347
        ],
        [
            347,
            449
        ],
        [
            432,
            422
        ],
        [
            422,
            434
        ],
        [
            434,
            432
        ],
        [
            18,
            313
        ],
        [
            313,
            17
        ],
        [
            17,
            18
        ],
        [
            291,
            306
        ],
        [
            306,
            375
        ],
        [
            375,
            291
        ],
        [
            259,
            387
        ],
        [
            387,
            260
        ],
        [
            260,
            259
        ],
        [
            424,
            335
        ],
        [
            335,
            418
        ],
        [
            418,
            424
        ],
        [
            434,
            364
        ],
        [
            364,
            416
        ],
        [
            416,
            434
        ],
        [
            391,
            423
        ],
        [
            423,
            327
        ],
        [
            327,
            391
        ],
        [
            301,
            251
        ],
        [
            251,
            298
        ],
        [
            298,
            301
        ],
        [
            275,
            281
        ],
        [
            281,
            4
        ],
        [
            4,
            275
        ],
        [
            254,
            373
        ],
        [
            373,
            253
        ],
        [
            253,
            254
        ],
        [
            375,
            307
        ],
        [
            307,
            321
        ],
        [
            321,
            375
        ],
        [
            280,
            425
        ],
        [
            425,
            411
        ],
        [
            411,
            280
        ],
        [
            200,
            421
        ],
        [
            421,
            18
        ],
        [
            18,
            200
        ],
        [
            335,
            321
        ],
        [
            321,
            406
        ],
        [
            406,
            335
        ],
        [
            321,
            320
        ],
        [
            320,
            405
        ],
        [
            405,
            321
        ],
        [
            314,
            315
        ],
        [
            315,
            17
        ],
        [
            17,
            314
        ],
        [
            423,
            426
        ],
        [
            426,
            266
        ],
        [
            266,
            423
        ],
        [
            396,
            377
        ],
        [
            377,
            369
        ],
        [
            369,
            396
        ],
        [
            270,
            322
        ],
        [
            322,
            269
        ],
        [
            269,
            270
        ],
        [
            413,
            417
        ],
        [
            417,
            464
        ],
        [
            464,
            413
        ],
        [
            385,
            386
        ],
        [
            386,
            258
        ],
        [
            258,
            385
        ],
        [
            248,
            456
        ],
        [
            456,
            419
        ],
        [
            419,
            248
        ],
        [
            298,
            284
        ],
        [
            284,
            333
        ],
        [
            333,
            298
        ],
        [
            168,
            417
        ],
        [
            417,
            8
        ],
        [
            8,
            168
        ],
        [
            448,
            346
        ],
        [
            346,
            261
        ],
        [
            261,
            448
        ],
        [
            417,
            413
        ],
        [
            413,
            285
        ],
        [
            285,
            417
        ],
        [
            326,
            327
        ],
        [
            327,
            328
        ],
        [
            328,
            326
        ],
        [
            277,
            355
        ],
        [
            355,
            329
        ],
        [
            329,
            277
        ],
        [
            309,
            392
        ],
        [
            392,
            438
        ],
        [
            438,
            309
        ],
        [
            381,
            382
        ],
        [
            382,
            256
        ],
        [
            256,
            381
        ],
        [
            279,
            429
        ],
        [
            429,
            360
        ],
        [
            360,
            279
        ],
        [
            365,
            364
        ],
        [
            364,
            379
        ],
        [
            379,
            365
        ],
        [
            355,
            277
        ],
        [
            277,
            437
        ],
        [
            437,
            355
        ],
        [
            282,
            443
        ],
        [
            443,
            283
        ],
        [
            283,
            282
        ],
        [
            281,
            275
        ],
        [
            275,
            363
        ],
        [
            363,
            281
        ],
        [
            395,
            431
        ],
        [
            431,
            369
        ],
        [
            369,
            395
        ],
        [
            299,
            297
        ],
        [
            297,
            337
        ],
        [
            337,
            299
        ],
        [
            335,
            273
        ],
        [
            273,
            321
        ],
        [
            321,
            335
        ],
        [
            348,
            450
        ],
        [
            450,
            349
        ],
        [
            349,
            348
        ],
        [
            359,
            446
        ],
        [
            446,
            467
        ],
        [
            467,
            359
        ],
        [
            283,
            293
        ],
        [
            293,
            282
        ],
        [
            282,
            283
        ],
        [
            250,
            458
        ],
        [
            458,
            462
        ],
        [
            462,
            250
        ],
        [
            300,
            276
        ],
        [
            276,
            383
        ],
        [
            383,
            300
        ],
        [
            292,
            308
        ],
        [
            308,
            325
        ],
        [
            325,
            292
        ],
        [
            283,
            276
        ],
        [
            276,
            293
        ],
        [
            293,
            283
        ],
        [
            264,
            372
        ],
        [
            372,
            447
        ],
        [
            447,
            264
        ],
        [
            346,
            352
        ],
        [
            352,
            340
        ],
        [
            340,
            346
        ],
        [
            354,
            274
        ],
        [
            274,
            19
        ],
        [
            19,
            354
        ],
        [
            363,
            456
        ],
        [
            456,
            281
        ],
        [
            281,
            363
        ],
        [
            426,
            436
        ],
        [
            436,
            425
        ],
        [
            425,
            426
        ],
        [
            380,
            381
        ],
        [
            381,
            252
        ],
        [
            252,
            380
        ],
        [
            267,
            269
        ],
        [
            269,
            393
        ],
        [
            393,
            267
        ],
        [
            421,
            200
        ],
        [
            200,
            428
        ],
        [
            428,
            421
        ],
        [
            371,
            266
        ],
        [
            266,
            329
        ],
        [
            329,
            371
        ],
        [
            432,
            287
        ],
        [
            287,
            422
        ],
        [
            422,
            432
        ],
        [
            290,
            250
        ],
        [
            250,
            328
        ],
        [
            328,
            290
        ],
        [
            385,
            258
        ],
        [
            258,
            384
        ],
        [
            384,
            385
        ],
        [
            446,
            265
        ],
        [
            265,
            342
        ],
        [
            342,
            446
        ],
        [
            386,
            387
        ],
        [
            387,
            257
        ],
        [
            257,
            386
        ],
        [
            422,
            424
        ],
        [
            424,
            430
        ],
        [
            430,
            422
        ],
        [
            445,
            342
        ],
        [
            342,
            276
        ],
        [
            276,
            445
        ],
        [
            422,
            273
        ],
        [
            273,
            424
        ],
        [
            424,
            422
        ],
        [
            306,
            292
        ],
        [
            292,
            307
        ],
        [
            307,
            306
        ],
        [
            352,
            366
        ],
        [
            366,
            345
        ],
        [
            345,
            352
        ],
        [
            268,
            271
        ],
        [
            271,
            302
        ],
        [
            302,
            268
        ],
        [
            358,
            423
        ],
        [
            423,
            371
        ],
        [
            371,
            358
        ],
        [
            327,
            294
        ],
        [
            294,
            460
        ],
        [
            460,
            327
        ],
        [
            331,
            279
        ],
        [
            279,
            294
        ],
        [
            294,
            331
        ],
        [
            303,
            271
        ],
        [
            271,
            304
        ],
        [
            304,
            303
        ],
        [
            436,
            432
        ],
        [
            432,
            427
        ],
        [
            427,
            436
        ],
        [
            304,
            272
        ],
        [
            272,
            408
        ],
        [
            408,
            304
        ],
        [
            395,
            394
        ],
        [
            394,
            431
        ],
        [
            431,
            395
        ],
        [
            378,
            395
        ],
        [
            395,
            400
        ],
        [
            400,
            378
        ],
        [
            296,
            334
        ],
        [
            334,
            299
        ],
        [
            299,
            296
        ],
        [
            6,
            351
        ],
        [
            351,
            168
        ],
        [
            168,
            6
        ],
        [
            376,
            352
        ],
        [
            352,
            411
        ],
        [
            411,
            376
        ],
        [
            307,
            325
        ],
        [
            325,
            320
        ],
        [
            320,
            307
        ],
        [
            285,
            295
        ],
        [
            295,
            336
        ],
        [
            336,
            285
        ],
        [
            320,
            319
        ],
        [
            319,
            404
        ],
        [
            404,
            320
        ],
        [
            329,
            330
        ],
        [
            330,
            349
        ],
        [
            349,
            329
        ],
        [
            334,
            293
        ],
        [
            293,
            333
        ],
        [
            333,
            334
        ],
        [
            366,
            323
        ],
        [
            323,
            447
        ],
        [
            447,
            366
        ],
        [
            316,
            15
        ],
        [
            15,
            315
        ],
        [
            315,
            316
        ],
        [
            331,
            358
        ],
        [
            358,
            279
        ],
        [
            279,
            331
        ],
        [
            317,
            14
        ],
        [
            14,
            316
        ],
        [
            316,
            317
        ],
        [
            8,
            285
        ],
        [
            285,
            9
        ],
        [
            9,
            8
        ],
        [
            277,
            329
        ],
        [
            329,
            350
        ],
        [
            350,
            277
        ],
        [
            253,
            374
        ],
        [
            374,
            252
        ],
        [
            252,
            253
        ],
        [
            319,
            318
        ],
        [
            318,
            403
        ],
        [
            403,
            319
        ],
        [
            351,
            6
        ],
        [
            6,
            419
        ],
        [
            419,
            351
        ],
        [
            324,
            318
        ],
        [
            318,
            325
        ],
        [
            325,
            324
        ],
        [
            397,
            367
        ],
        [
            367,
            365
        ],
        [
            365,
            397
        ],
        [
            288,
            435
        ],
        [
            435,
            397
        ],
        [
            397,
            288
        ],
        [
            278,
            344
        ],
        [
            344,
            439
        ],
        [
            439,
            278
        ],
        [
            310,
            272
        ],
        [
            272,
            311
        ],
        [
            311,
            310
        ],
        [
            248,
            195
        ],
        [
            195,
            281
        ],
        [
            281,
            248
        ],
        [
            375,
            273
        ],
        [
            273,
            291
        ],
        [
            291,
            375
        ],
        [
            175,
            396
        ],
        [
            396,
            199
        ],
        [
            199,
            175
        ],
        [
            312,
            311
        ],
        [
            311,
            268
        ],
        [
            268,
            312
        ],
        [
            276,
            283
        ],
        [
            283,
            445
        ],
        [
            445,
            276
        ],
        [
            390,
            373
        ],
        [
            373,
            339
        ],
        [
            339,
            390
        ],
        [
            295,
            282
        ],
        [
            282,
            296
        ],
        [
            296,
            295
        ],
        [
            448,
            449
        ],
        [
            449,
            346
        ],
        [
            346,
            448
        ],
        [
            356,
            264
        ],
        [
            264,
            454
        ],
        [
            454,
            356
        ],
        [
            337,
            336
        ],
        [
            336,
            299
        ],
        [
            299,
            337
        ],
        [
            337,
            338
        ],
        [
            338,
            151
        ],
        [
            151,
            337
        ],
        [
            294,
            278
        ],
        [
            278,
            455
        ],
        [
            455,
            294
        ],
        [
            308,
            292
        ],
        [
            292,
            415
        ],
        [
            415,
            308
        ],
        [
            429,
            358
        ],
        [
            358,
            355
        ],
        [
            355,
            429
        ],
        [
            265,
            340
        ],
        [
            340,
            372
        ],
        [
            372,
            265
        ],
        [
            352,
            346
        ],
        [
            346,
            280
        ],
        [
            280,
            352
        ],
        [
            295,
            442
        ],
        [
            442,
            282
        ],
        [
            282,
            295
        ],
        [
            354,
            19
        ],
        [
            19,
            370
        ],
        [
            370,
            354
        ],
        [
            285,
            441
        ],
        [
            441,
            295
        ],
        [
            295,
            285
        ],
        [
            195,
            248
        ],
        [
            248,
            197
        ],
        [
            197,
            195
        ],
        [
            457,
            440
        ],
        [
            440,
            274
        ],
        [
            274,
            457
        ],
        [
            301,
            300
        ],
        [
            300,
            368
        ],
        [
            368,
            301
        ],
        [
            417,
            351
        ],
        [
            351,
            465
        ],
        [
            465,
            417
        ],
        [
            251,
            301
        ],
        [
            301,
            389
        ],
        [
            389,
            251
        ],
        [
            394,
            395
        ],
        [
            395,
            379
        ],
        [
            379,
            394
        ],
        [
            399,
            412
        ],
        [
            412,
            419
        ],
        [
            419,
            399
        ],
        [
            410,
            436
        ],
        [
            436,
            322
        ],
        [
            322,
            410
        ],
        [
            326,
            2
        ],
        [
            2,
            393
        ],
        [
            393,
            326
        ],
        [
            354,
            370
        ],
        [
            370,
            461
        ],
        [
            461,
            354
        ],
        [
            393,
            164
        ],
        [
            164,
            267
        ],
        [
            267,
            393
        ],
        [
            268,
            302
        ],
        [
            302,
            12
        ],
        [
            12,
            268
        ],
        [
            312,
            268
        ],
        [
            268,
            13
        ],
        [
            13,
            312
        ],
        [
            298,
            293
        ],
        [
            293,
            301
        ],
        [
            301,
            298
        ],
        [
            265,
            446
        ],
        [
            446,
            340
        ],
        [
            340,
            265
        ],
        [
            280,
            330
        ],
        [
            330,
            425
        ],
        [
            425,
            280
        ],
        [
            322,
            426
        ],
        [
            426,
            391
        ],
        [
            391,
            322
        ],
        [
            420,
            429
        ],
        [
            429,
            437
        ],
        [
            437,
            420
        ],
        [
            393,
            391
        ],
        [
            391,
            326
        ],
        [
            326,
            393
        ],
        [
            344,
            440
        ],
        [
            440,
            438
        ],
        [
            438,
            344
        ],
        [
            458,
            459
        ],
        [
            459,
            461
        ],
        [
            461,
            458
        ],
        [
            364,
            434
        ],
        [
            434,
            394
        ],
        [
            394,
            364
        ],
        [
            428,
            396
        ],
        [
            396,
            262
        ],
        [
            262,
            428
        ],
        [
            274,
            354
        ],
        [
            354,
            457
        ],
        [
            457,
            274
        ],
        [
            317,
            316
        ],
        [
            316,
            402
        ],
        [
            402,
            317
        ],
        [
            316,
            315
        ],
        [
            315,
            403
        ],
        [
            403,
            316
        ],
        [
            315,
            314
        ],
        [
            314,
            404
        ],
        [
            404,
            315
        ],
        [
            314,
            313
        ],
        [
            313,
            405
        ],
        [
            405,
            314
        ],
        [
            313,
            421
        ],
        [
            421,
            406
        ],
        [
            406,
            313
        ],
        [
            323,
            366
        ],
        [
            366,
            361
        ],
        [
            361,
            323
        ],
        [
            292,
            306
        ],
        [
            306,
            407
        ],
        [
            407,
            292
        ],
        [
            306,
            291
        ],
        [
            291,
            408
        ],
        [
            408,
            306
        ],
        [
            291,
            287
        ],
        [
            287,
            409
        ],
        [
            409,
            291
        ],
        [
            287,
            432
        ],
        [
            432,
            410
        ],
        [
            410,
            287
        ],
        [
            427,
            434
        ],
        [
            434,
            411
        ],
        [
            411,
            427
        ],
        [
            372,
            264
        ],
        [
            264,
            383
        ],
        [
            383,
            372
        ],
        [
            459,
            309
        ],
        [
            309,
            457
        ],
        [
            457,
            459
        ],
        [
            366,
            352
        ],
        [
            352,
            401
        ],
        [
            401,
            366
        ],
        [
            1,
            274
        ],
        [
            274,
            4
        ],
        [
            4,
            1
        ],
        [
            418,
            421
        ],
        [
            421,
            262
        ],
        [
            262,
            418
        ],
        [
            331,
            294
        ],
        [
            294,
            358
        ],
        [
            358,
            331
        ],
        [
            435,
            433
        ],
        [
            433,
            367
        ],
        [
            367,
            435
        ],
        [
            392,
            289
        ],
        [
            289,
            439
        ],
        [
            439,
            392
        ],
        [
            328,
            462
        ],
        [
            462,
            326
        ],
        [
            326,
            328
        ],
        [
            94,
            2
        ],
        [
            2,
            370
        ],
        [
            370,
            94
        ],
        [
            289,
            305
        ],
        [
            305,
            455
        ],
        [
            455,
            289
        ],
        [
            339,
            254
        ],
        [
            254,
            448
        ],
        [
            448,
            339
        ],
        [
            359,
            255
        ],
        [
            255,
            446
        ],
        [
            446,
            359
        ],
        [
            254,
            253
        ],
        [
            253,
            449
        ],
        [
            449,
            254
        ],
        [
            253,
            252
        ],
        [
            252,
            450
        ],
        [
            450,
            253
        ],
        [
            252,
            256
        ],
        [
            256,
            451
        ],
        [
            451,
            252
        ],
        [
            256,
            341
        ],
        [
            341,
            452
        ],
        [
            452,
            256
        ],
        [
            414,
            413
        ],
        [
            413,
            463
        ],
        [
            463,
            414
        ],
        [
            286,
            441
        ],
        [
            441,
            414
        ],
        [
            414,
            286
        ],
        [
            286,
            258
        ],
        [
            258,
            441
        ],
        [
            441,
            286
        ],
        [
            258,
            257
        ],
        [
            257,
            442
        ],
        [
            442,
            258
        ],
        [
            257,
            259
        ],
        [
            259,
            443
        ],
        [
            443,
            257
        ],
        [
            259,
            260
        ],
        [
            260,
            444
        ],
        [
            444,
            259
        ],
        [
            260,
            467
        ],
        [
            467,
            445
        ],
        [
            445,
            260
        ],
        [
            309,
            459
        ],
        [
            459,
            250
        ],
        [
            250,
            309
        ],
        [
            305,
            289
        ],
        [
            289,
            290
        ],
        [
            290,
            305
        ],
        [
            305,
            290
        ],
        [
            290,
            460
        ],
        [
            460,
            305
        ],
        [
            401,
            376
        ],
        [
            376,
            435
        ],
        [
            435,
            401
        ],
        [
            309,
            250
        ],
        [
            250,
            392
        ],
        [
            392,
            309
        ],
        [
            376,
            411
        ],
        [
            411,
            433
        ],
        [
            433,
            376
        ],
        [
            453,
            341
        ],
        [
            341,
            464
        ],
        [
            464,
            453
        ],
        [
            357,
            453
        ],
        [
            453,
            465
        ],
        [
            465,
            357
        ],
        [
            343,
            357
        ],
        [
            357,
            412
        ],
        [
            412,
            343
        ],
        [
            437,
            343
        ],
        [
            343,
            399
        ],
        [
            399,
            437
        ],
        [
            344,
            360
        ],
        [
            360,
            440
        ],
        [
            440,
            344
        ],
        [
            420,
            437
        ],
        [
            437,
            456
        ],
        [
            456,
            420
        ],
        [
            360,
            420
        ],
        [
            420,
            363
        ],
        [
            363,
            360
        ],
        [
            361,
            401
        ],
        [
            401,
            288
        ],
        [
            288,
            361
        ],
        [
            265,
            372
        ],
        [
            372,
            353
        ],
        [
            353,
            265
        ],
        [
            390,
            339
        ],
        [
            339,
            249
        ],
        [
            249,
            390
        ],
        [
            339,
            448
        ],
        [
            448,
            255
        ],
        [
            255,
            339
        ]
    ]);
    P("matrixDataToMatrix", function(a) {
        for(var b = a.getCols(), c = a.getRows(), d = a.getPackedDataList(), e = [], g = 0; g < c; g++)e.push(Array(b));
        for(g = 0; g < c; g++)for(var f = 0; f < b; f++){
            var h = 1 === a.getLayout() ? g * b + f : f * c + g;
            e[g][f] = d[h];
        }
        return e;
    });
    P("VERSION", "0.4.1633559619");
}).call(this);

},{}],"bzeQv":[function(require,module,exports) {
/**
    * @license
    * Copyright 2023 Google LLC. All Rights Reserved.
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * =============================================================================
    */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MediaPipeFaceDetectorMediaPipe", ()=>z);
parcelHelpers.export(exports, "MediaPipeFaceDetectorTfjs", ()=>Z);
parcelHelpers.export(exports, "SupportedModels", ()=>Q);
parcelHelpers.export(exports, "createDetector", ()=>te);
var _faceDetection = require("@mediapipe/face_detection");
var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsConverter = require("@tensorflow/tfjs-converter");
var b = function() {
    return b = Object.assign || function(e) {
        for(var t, n = 1, i = arguments.length; n < i; n++)for(var o in t = arguments[n])Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
        return e;
    }, b.apply(this, arguments);
};
function T(e, t, n, i) {
    return new (n || (n = Promise))(function(o, r) {
        function a(e) {
            try {
                h(i.next(e));
            } catch (e) {
                r(e);
            }
        }
        function s(e) {
            try {
                h(i.throw(e));
            } catch (e) {
                r(e);
            }
        }
        function h(e) {
            var t;
            e.done ? o(e.value) : (t = e.value, t instanceof n ? t : new n(function(e) {
                e(t);
            })).then(a, s);
        }
        h((i = i.apply(e, t || [])).next());
    });
}
function C(e, t) {
    var n, i, o, r, a = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    };
    return r = {
        next: s(0),
        throw: s(1),
        return: s(2)
    }, "function" == typeof Symbol && (r[Symbol.iterator] = function() {
        return this;
    }), r;
    function s(r) {
        return function(s) {
            return function(r) {
                if (n) throw new TypeError("Generator is already executing.");
                for(; a;)try {
                    if (n = 1, i && (o = 2 & r[0] ? i.return : r[0] ? i.throw || ((o = i.return) && o.call(i), 0) : i.next) && !(o = o.call(i, r[1])).done) return o;
                    switch(i = 0, o && (r = [
                        2 & r[0],
                        o.value
                    ]), r[0]){
                        case 0:
                        case 1:
                            o = r;
                            break;
                        case 4:
                            return a.label++, {
                                value: r[1],
                                done: !1
                            };
                        case 5:
                            a.label++, i = r[1], r = [
                                0
                            ];
                            continue;
                        case 7:
                            r = a.ops.pop(), a.trys.pop();
                            continue;
                        default:
                            if (!(o = a.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== r[0] && 2 !== r[0])) {
                                a = 0;
                                continue;
                            }
                            if (3 === r[0] && (!o || r[1] > o[0] && r[1] < o[3])) {
                                a.label = r[1];
                                break;
                            }
                            if (6 === r[0] && a.label < o[1]) {
                                a.label = o[1], o = r;
                                break;
                            }
                            if (o && a.label < o[2]) {
                                a.label = o[2], a.ops.push(r);
                                break;
                            }
                            o[2] && a.ops.pop(), a.trys.pop();
                            continue;
                    }
                    r = t.call(e, a);
                } catch (e) {
                    r = [
                        6,
                        e
                    ], i = 0;
                } finally{
                    n = o = 0;
                }
                if (5 & r[0]) throw r[1];
                return {
                    value: r[0] ? r[1] : void 0,
                    done: !0
                };
            }([
                r,
                s
            ]);
        };
    }
}
var O = [
    "rightEye",
    "leftEye",
    "noseTip",
    "mouthCenter",
    "rightEarTragion",
    "leftEarTragion"
];
var B = {
    modelType: "short",
    runtime: "mediapipe",
    maxFaces: 1
};
var z = function() {
    function i(t) {
        var n = this;
        this.width = 0, this.height = 0, this.selfieMode = !1, this.faceDetectorSolution = new (0, _faceDetection.FaceDetection)({
            locateFile: function(e, n) {
                if (t.solutionPath) {
                    var i = t.solutionPath.replace(/\/+$/, "");
                    return "".concat(i, "/").concat(e);
                }
                return "".concat(n, "/").concat(e);
            }
        }), this.faceDetectorSolution.setOptions({
            selfieMode: this.selfieMode,
            model: t.modelType
        }), this.faceDetectorSolution.onResults(function(e) {
            if (n.height = e.image.height, n.width = e.image.width, n.faces = [], null !== e.detections) for(var t = 0, i = e.detections; t < i.length; t++){
                var o = i[t];
                n.faces.push(n.normalizedToAbsolute(o.landmarks, (r = o.boundingBox, a = void 0, s = void 0, h = void 0, a = r.xCenter - r.width / 2, s = a + r.width, h = r.yCenter - r.height / 2, {
                    xMin: a,
                    xMax: s,
                    yMin: h,
                    yMax: h + r.height,
                    width: r.width,
                    height: r.height
                })));
            }
            var r, a, s, h;
        });
    }
    return i.prototype.normalizedToAbsolute = function(e, t) {
        var n = this;
        return {
            keypoints: e.map(function(e, t) {
                return {
                    x: e.x * n.width,
                    y: e.y * n.height,
                    name: O[t]
                };
            }),
            box: {
                xMin: t.xMin * this.width,
                yMin: t.yMin * this.height,
                xMax: t.xMax * this.width,
                yMax: t.yMax * this.height,
                width: t.width * this.width,
                height: t.height * this.height
            }
        };
    }, i.prototype.estimateFaces = function(e, i) {
        return T(this, void 0, void 0, function() {
            var o, r;
            return C(this, function(a) {
                switch(a.label){
                    case 0:
                        return i && i.flipHorizontal && i.flipHorizontal !== this.selfieMode && (this.selfieMode = i.flipHorizontal, this.faceDetectorSolution.setOptions({
                            selfieMode: this.selfieMode
                        })), e instanceof (0, _tfjsCore.Tensor) ? (r = ImageData.bind, [
                            4,
                            (0, _tfjsCore.browser).toPixels(e)
                        ]) : [
                            3,
                            2
                        ];
                    case 1:
                        return o = new (r.apply(ImageData, [
                            void 0,
                            a.sent(),
                            e.shape[1],
                            e.shape[0]
                        ])), [
                            3,
                            3
                        ];
                    case 2:
                        o = e, a.label = 3;
                    case 3:
                        return e = o, [
                            4,
                            this.faceDetectorSolution.send({
                                image: e
                            })
                        ];
                    case 4:
                        return a.sent(), [
                            2,
                            this.faces
                        ];
                }
            });
        });
    }, i.prototype.dispose = function() {
        this.faceDetectorSolution.close();
    }, i.prototype.reset = function() {
        this.faceDetectorSolution.reset(), this.width = 0, this.height = 0, this.faces = null, this.selfieMode = !1;
    }, i.prototype.initialize = function() {
        return this.faceDetectorSolution.initialize();
    }, i;
}();
function D(e) {
    return T(this, void 0, void 0, function() {
        var t, n;
        return C(this, function(i) {
            switch(i.label){
                case 0:
                    return t = function(e) {
                        if (null == e) return b({}, B);
                        var t = b({}, e);
                        return t.runtime = "mediapipe", null == t.modelType && (t.modelType = B.modelType), null == t.maxFaces && (t.maxFaces = B.maxFaces), t;
                    }(e), [
                        4,
                        (n = new z(t)).initialize()
                    ];
                case 1:
                    return i.sent(), [
                        2,
                        n
                    ];
            }
        });
    });
}
function A(e, t, n, i) {
    var o = e.width, r = e.height, a = i ? -1 : 1, s = Math.cos(e.rotation), h = Math.sin(e.rotation), u = e.xCenter, c = e.yCenter, l = 1 / t, f = 1 / n, d = new Array(16);
    return d[0] = o * s * a * l, d[1] = -r * h * l, d[2] = 0, d[3] = (-0.5 * o * s * a + .5 * r * h + u) * l, d[4] = o * h * a * f, d[5] = r * s * f, d[6] = 0, d[7] = (-0.5 * r * s - .5 * o * h * a + c) * f, d[8] = 0, d[9] = 0, d[10] = o * l, d[11] = 0, d[12] = 0, d[13] = 0, d[14] = 0, d[15] = 1, function(e) {
        if (16 !== e.length) throw new Error("Array length must be 16 but got ".concat(e.length));
        return [
            [
                e[0],
                e[1],
                e[2],
                e[3]
            ],
            [
                e[4],
                e[5],
                e[6],
                e[7]
            ],
            [
                e[8],
                e[9],
                e[10],
                e[11]
            ],
            [
                e[12],
                e[13],
                e[14],
                e[15]
            ]
        ];
    }(d);
}
function F(e) {
    return e instanceof (0, _tfjsCore.Tensor) ? {
        height: e.shape[0],
        width: e.shape[1]
    } : {
        height: e.height,
        width: e.width
    };
}
function E(e) {
    return e instanceof (0, _tfjsCore.Tensor) ? e : (0, _tfjsCore.browser).fromPixels(e);
}
function R(e, t) {
    (0, _tfjsCore.util).assert(0 !== e.width, function() {
        return "".concat(t, " width cannot be 0.");
    }), (0, _tfjsCore.util).assert(0 !== e.height, function() {
        return "".concat(t, " height cannot be 0.");
    });
}
function L(e, t) {
    var n = function(e, t, n, i) {
        var o = t - e, r = i - n;
        if (0 === o) throw new Error("Original min and max are both ".concat(e, ", range cannot be 0."));
        var a = r / o;
        return {
            scale: a,
            offset: n - e * a
        };
    }(0, 255, t[0], t[1]);
    return (0, _tfjsCore.tidy)(function() {
        return (0, _tfjsCore.add)((0, _tfjsCore.mul)(e, n.scale), n.offset);
    });
}
function K(e, t, n) {
    var i = t.outputTensorSize, r = t.keepAspectRatio, a = t.borderMode, l = t.outputTensorFloatRange, f = F(e), d = function(e, t) {
        return t ? {
            xCenter: t.xCenter * e.width,
            yCenter: t.yCenter * e.height,
            width: t.width * e.width,
            height: t.height * e.height,
            rotation: t.rotation
        } : {
            xCenter: .5 * e.width,
            yCenter: .5 * e.height,
            width: e.width,
            height: e.height,
            rotation: 0
        };
    }(f, n), p = function(e, t, n) {
        if (void 0 === n && (n = !1), !n) return {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
        };
        var i = t.height, o = t.width;
        R(t, "targetSize"), R(e, "roi");
        var r, a, s = i / o, h = e.height / e.width, u = 0, c = 0;
        return s > h ? (r = e.width, a = e.width * s, c = (1 - h / s) / 2) : (r = e.height / s, a = e.height, u = (1 - s / h) / 2), e.width = r, e.height = a, {
            top: c,
            left: u,
            right: u,
            bottom: c
        };
    }(d, i, r), m = A(d, f.width, f.height, !1), x = (0, _tfjsCore.tidy)(function() {
        var t = E(e), n = (0, _tfjsCore.tensor2d)(function(e, t, n) {
            return R(n, "inputResolution"), [
                1 / n.width * e[0][0] * t.width,
                1 / n.height * e[0][1] * t.width,
                e[0][3] * t.width,
                1 / n.width * e[1][0] * t.height,
                1 / n.height * e[1][1] * t.height,
                e[1][3] * t.height,
                0,
                0
            ];
        }(m, f, i), [
            1,
            8
        ]), o = "zero" === a ? "constant" : "nearest", r = (0, _tfjsCore.image).transform((0, _tfjsCore.expandDims)((0, _tfjsCore.cast)(t, "float32")), n, "bilinear", o, 0, [
            i.height,
            i.width
        ]);
        return null != l ? L(r, l) : r;
    });
    return {
        imageTensor: x,
        padding: p,
        transformationMatrix: m
    };
}
function k(e) {
    null == e.reduceBoxesInLowestLayer && (e.reduceBoxesInLowestLayer = !1), null == e.interpolatedScaleAspectRatio && (e.interpolatedScaleAspectRatio = 1), null == e.fixedAnchorSize && (e.fixedAnchorSize = !1);
    for(var t = [], n = 0; n < e.numLayers;){
        for(var i = [], o = [], r = [], a = [], s = n; s < e.strides.length && e.strides[s] === e.strides[n];){
            var h = P(e.minScale, e.maxScale, s, e.strides.length);
            if (0 === s && e.reduceBoxesInLowestLayer) r.push(1), r.push(2), r.push(.5), a.push(.1), a.push(h), a.push(h);
            else {
                for(var u = 0; u < e.aspectRatios.length; ++u)r.push(e.aspectRatios[u]), a.push(h);
                if (e.interpolatedScaleAspectRatio > 0) {
                    var c = s === e.strides.length - 1 ? 1 : P(e.minScale, e.maxScale, s + 1, e.strides.length);
                    a.push(Math.sqrt(h * c)), r.push(e.interpolatedScaleAspectRatio);
                }
            }
            s++;
        }
        for(var l = 0; l < r.length; ++l){
            var f = Math.sqrt(r[l]);
            i.push(a[l] / f), o.push(a[l] * f);
        }
        var d = 0, p = 0;
        if (e.featureMapHeight.length > 0) d = e.featureMapHeight[n], p = e.featureMapWidth[n];
        else {
            var m = e.strides[n];
            d = Math.ceil(e.inputSizeHeight / m), p = Math.ceil(e.inputSizeWidth / m);
        }
        for(var x = 0; x < d; ++x)for(var g = 0; g < p; ++g)for(var y = 0; y < i.length; ++y){
            var v = {
                xCenter: (g + e.anchorOffsetX) / p,
                yCenter: (x + e.anchorOffsetY) / d,
                width: 0,
                height: 0
            };
            e.fixedAnchorSize ? (v.width = 1, v.height = 1) : (v.width = o[y], v.height = i[y]), t.push(v);
        }
        n = s;
    }
    return t;
}
function P(e, t, n, i) {
    return 1 === i ? .5 * (e + t) : e + (t - e) * n / (i - 1);
}
function V(e, t) {
    var n = t[0], i = t[1];
    return [
        n * e[0] + i * e[1] + e[3],
        n * e[4] + i * e[5] + e[7]
    ];
}
function H(e) {
    return (0, _tfjsCore.tidy)(function() {
        var t = function(e) {
            return (0, _tfjsCore.tidy)(function() {
                return [
                    (0, _tfjsCore.slice)(e, [
                        0,
                        0,
                        0
                    ], [
                        1,
                        -1,
                        1
                    ]),
                    (0, _tfjsCore.slice)(e, [
                        0,
                        0,
                        1
                    ], [
                        1,
                        -1,
                        -1
                    ])
                ];
            });
        }(e), n = t[0], i = t[1];
        return {
            boxes: (0, _tfjsCore.squeeze)(i),
            logits: (0, _tfjsCore.squeeze)(n)
        };
    });
}
function U(e, t, n, i) {
    return T(this, void 0, void 0, function() {
        var i, o, r, a, u;
        return C(this, function(c) {
            switch(c.label){
                case 0:
                    return e.sort(function(e, t) {
                        return Math.max.apply(Math, t.score) - Math.max.apply(Math, e.score);
                    }), i = (0, _tfjsCore.tensor2d)(e.map(function(e) {
                        return [
                            e.locationData.relativeBoundingBox.yMin,
                            e.locationData.relativeBoundingBox.xMin,
                            e.locationData.relativeBoundingBox.yMax,
                            e.locationData.relativeBoundingBox.xMax
                        ];
                    })), o = (0, _tfjsCore.tensor1d)(e.map(function(e) {
                        return e.score[0];
                    })), [
                        4,
                        (0, _tfjsCore.image).nonMaxSuppressionAsync(i, o, t, n)
                    ];
                case 1:
                    return [
                        4,
                        (r = c.sent()).array()
                    ];
                case 2:
                    return a = c.sent(), u = e.filter(function(e, t) {
                        return a.indexOf(t) > -1;
                    }), (0, _tfjsCore.dispose)([
                        i,
                        o,
                        r
                    ]), [
                        2,
                        u
                    ];
            }
        });
    });
}
function j(e, t, n) {
    return T(this, void 0, void 0, function() {
        var i, s, h, u, c;
        return C(this, function(p) {
            switch(p.label){
                case 0:
                    return i = e[0], s = e[1], h = function(e, t, n) {
                        return (0, _tfjsCore.tidy)(function() {
                            var i, o, s, h;
                            n.reverseOutputOrder ? (o = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 0
                            ], [
                                -1,
                                1
                            ])), i = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 1
                            ], [
                                -1,
                                1
                            ])), h = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 2
                            ], [
                                -1,
                                1
                            ])), s = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 3
                            ], [
                                -1,
                                1
                            ]))) : (i = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 0
                            ], [
                                -1,
                                1
                            ])), o = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 1
                            ], [
                                -1,
                                1
                            ])), s = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 2
                            ], [
                                -1,
                                1
                            ])), h = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                0,
                                n.boxCoordOffset + 3
                            ], [
                                -1,
                                1
                            ]))), o = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(o, n.xScale), t.w), t.x), i = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(i, n.yScale), t.h), t.y), n.applyExponentialOnBoxSize ? (s = (0, _tfjsCore.mul)((0, _tfjsCore.exp)((0, _tfjsCore.div)(s, n.hScale)), t.h), h = (0, _tfjsCore.mul)((0, _tfjsCore.exp)((0, _tfjsCore.div)(h, n.wScale)), t.w)) : (s = (0, _tfjsCore.mul)((0, _tfjsCore.div)(s, n.hScale), t.h), h = (0, _tfjsCore.mul)((0, _tfjsCore.div)(h, n.wScale), t.h));
                            var u = (0, _tfjsCore.sub)(i, (0, _tfjsCore.div)(s, 2)), c = (0, _tfjsCore.sub)(o, (0, _tfjsCore.div)(h, 2)), d = (0, _tfjsCore.add)(i, (0, _tfjsCore.div)(s, 2)), p = (0, _tfjsCore.add)(o, (0, _tfjsCore.div)(h, 2)), w = (0, _tfjsCore.concat)([
                                (0, _tfjsCore.reshape)(u, [
                                    n.numBoxes,
                                    1
                                ]),
                                (0, _tfjsCore.reshape)(c, [
                                    n.numBoxes,
                                    1
                                ]),
                                (0, _tfjsCore.reshape)(d, [
                                    n.numBoxes,
                                    1
                                ]),
                                (0, _tfjsCore.reshape)(p, [
                                    n.numBoxes,
                                    1
                                ])
                            ], 1);
                            if (n.numKeypoints) for(var M = 0; M < n.numKeypoints; ++M){
                                var S = n.keypointCoordOffset + M * n.numValuesPerKeypoint, b = void 0, T = void 0;
                                n.reverseOutputOrder ? (b = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                    0,
                                    S
                                ], [
                                    -1,
                                    1
                                ])), T = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                    0,
                                    S + 1
                                ], [
                                    -1,
                                    1
                                ]))) : (T = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                    0,
                                    S
                                ], [
                                    -1,
                                    1
                                ])), b = (0, _tfjsCore.squeeze)((0, _tfjsCore.slice)(e, [
                                    0,
                                    S + 1
                                ], [
                                    -1,
                                    1
                                ])));
                                var C = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(b, n.xScale), t.w), t.x), O = (0, _tfjsCore.add)((0, _tfjsCore.mul)((0, _tfjsCore.div)(T, n.yScale), t.h), t.y);
                                w = (0, _tfjsCore.concat)([
                                    w,
                                    (0, _tfjsCore.reshape)(C, [
                                        n.numBoxes,
                                        1
                                    ]),
                                    (0, _tfjsCore.reshape)(O, [
                                        n.numBoxes,
                                        1
                                    ])
                                ], 1);
                            }
                            return w;
                        });
                    }(s, t, n), u = (0, _tfjsCore.tidy)(function() {
                        var e = i;
                        return n.sigmoidScore ? (null != n.scoreClippingThresh && (e = (0, _tfjsCore.clipByValue)(i, -n.scoreClippingThresh, n.scoreClippingThresh)), e = (0, _tfjsCore.sigmoid)(e)) : e;
                    }), [
                        4,
                        I(h, u, n)
                    ];
                case 1:
                    return c = p.sent(), (0, _tfjsCore.dispose)([
                        h,
                        u
                    ]), [
                        2,
                        c
                    ];
            }
        });
    });
}
function I(e, t, n) {
    return T(this, void 0, void 0, function() {
        var i, o, r, a, s, h, u, c, l, f, d, p;
        return C(this, function(m) {
            switch(m.label){
                case 0:
                    return i = [], [
                        4,
                        e.data()
                    ];
                case 1:
                    return o = m.sent(), [
                        4,
                        t.data()
                    ];
                case 2:
                    for(r = m.sent(), a = 0; a < n.numBoxes; ++a)if (!(null != n.minScoreThresh && r[a] < n.minScoreThresh || (s = a * n.numCoords, h = _(o[s + 0], o[s + 1], o[s + 2], o[s + 3], r[a], n.flipVertically, a), (u = h.locationData.relativeBoundingBox).width < 0 || u.height < 0))) {
                        if (n.numKeypoints > 0) for((c = h.locationData).relativeKeypoints = [], l = n.numKeypoints * n.numValuesPerKeypoint, f = 0; f < l; f += n.numValuesPerKeypoint)d = s + n.keypointCoordOffset + f, p = {
                            x: o[d + 0],
                            y: n.flipVertically ? 1 - o[d + 1] : o[d + 1]
                        }, c.relativeKeypoints.push(p);
                        i.push(h);
                    }
                    return [
                        2,
                        i
                    ];
            }
        });
    });
}
function _(e, t, n, i, o, r, a) {
    return {
        score: [
            o
        ],
        ind: a,
        locationData: {
            relativeBoundingBox: {
                xMin: t,
                yMin: r ? 1 - n : e,
                xMax: i,
                yMax: r ? 1 - e : n,
                width: i - t,
                height: n - e
            }
        }
    };
}
var N = {
    reduceBoxesInLowestLayer: !1,
    interpolatedScaleAspectRatio: 1,
    featureMapHeight: [],
    featureMapWidth: [],
    numLayers: 4,
    minScale: .1484375,
    maxScale: .75,
    inputSizeHeight: 128,
    inputSizeWidth: 128,
    anchorOffsetX: .5,
    anchorOffsetY: .5,
    strides: [
        8,
        16,
        16,
        16
    ],
    aspectRatios: [
        1
    ],
    fixedAnchorSize: !0
}, W = {
    reduceBoxesInLowestLayer: !1,
    interpolatedScaleAspectRatio: 0,
    featureMapHeight: [],
    featureMapWidth: [],
    numLayers: 1,
    minScale: .1484375,
    maxScale: .75,
    inputSizeHeight: 192,
    inputSizeWidth: 192,
    anchorOffsetX: .5,
    anchorOffsetY: .5,
    strides: [
        4
    ],
    aspectRatios: [
        1
    ],
    fixedAnchorSize: !0
}, X = {
    runtime: "tfjs",
    modelType: "short",
    maxFaces: 1,
    detectorModelUrl: "https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1"
}, Y = {
    applyExponentialOnBoxSize: !1,
    flipVertically: !1,
    ignoreClasses: [],
    numClasses: 1,
    numBoxes: 896,
    numCoords: 16,
    boxCoordOffset: 0,
    keypointCoordOffset: 4,
    numKeypoints: 6,
    numValuesPerKeypoint: 2,
    sigmoidScore: !0,
    scoreClippingThresh: 100,
    reverseOutputOrder: !0,
    xScale: 128,
    yScale: 128,
    hScale: 128,
    wScale: 128,
    minScoreThresh: .5
}, q = {
    applyExponentialOnBoxSize: !1,
    flipVertically: !1,
    ignoreClasses: [],
    numClasses: 1,
    numBoxes: 2304,
    numCoords: 16,
    boxCoordOffset: 0,
    keypointCoordOffset: 4,
    numKeypoints: 6,
    numValuesPerKeypoint: 2,
    sigmoidScore: !0,
    scoreClippingThresh: 100,
    reverseOutputOrder: !0,
    xScale: 192,
    yScale: 192,
    hScale: 192,
    wScale: 192,
    minScoreThresh: .6
}, G = .3, $ = {
    outputTensorSize: {
        width: 128,
        height: 128
    },
    keepAspectRatio: !0,
    outputTensorFloatRange: [
        -1,
        1
    ],
    borderMode: "zero"
}, J = {
    outputTensorSize: {
        width: 192,
        height: 192
    },
    keepAspectRatio: !0,
    outputTensorFloatRange: [
        -1,
        1
    ],
    borderMode: "zero"
};
var Q, Z = function() {
    function e(e, t, n) {
        this.detectorModel = t, this.maxFaces = n, "full" === e ? (this.imageToTensorConfig = J, this.tensorsToDetectionConfig = q, this.anchors = k(W)) : (this.imageToTensorConfig = $, this.tensorsToDetectionConfig = Y, this.anchors = k(N));
        var i = (0, _tfjsCore.tensor1d)(this.anchors.map(function(e) {
            return e.width;
        })), o = (0, _tfjsCore.tensor1d)(this.anchors.map(function(e) {
            return e.height;
        })), r = (0, _tfjsCore.tensor1d)(this.anchors.map(function(e) {
            return e.xCenter;
        })), a = (0, _tfjsCore.tensor1d)(this.anchors.map(function(e) {
            return e.yCenter;
        }));
        this.anchorTensor = {
            x: r,
            y: a,
            w: i,
            h: o
        };
    }
    return e.prototype.dispose = function() {
        this.detectorModel.dispose(), (0, _tfjsCore.dispose)([
            this.anchorTensor.x,
            this.anchorTensor.y,
            this.anchorTensor.w,
            this.anchorTensor.h
        ]);
    }, e.prototype.reset = function() {}, e.prototype.detectFaces = function(e, t) {
        return void 0 === t && (t = !1), T(this, void 0, void 0, function() {
            var n, i, r, a, s, l, p, m, x, g, y;
            return C(this, function(v) {
                switch(v.label){
                    case 0:
                        return null == e ? (this.reset(), [
                            2,
                            []
                        ]) : (n = (0, _tfjsCore.tidy)(function() {
                            var n = (0, _tfjsCore.cast)(E(e), "float32");
                            if (t) n = (0, _tfjsCore.squeeze)((0, _tfjsCore.image).flipLeftRight((0, _tfjsCore.expandDims)(n, 0)), [
                                0
                            ]);
                            return n;
                        }), i = K(n, this.imageToTensorConfig), r = i.imageTensor, a = i.transformationMatrix, s = this.detectorModel.execute(r, "Identity:0"), l = H(s), p = l.boxes, [
                            4,
                            j([
                                m = l.logits,
                                p
                            ], this.anchorTensor, this.tensorsToDetectionConfig)
                        ]);
                    case 1:
                        return 0 === (x = v.sent()).length ? ((0, _tfjsCore.dispose)([
                            n,
                            r,
                            s,
                            m,
                            p
                        ]), [
                            2,
                            x
                        ]) : [
                            4,
                            U(x, this.maxFaces, G)
                        ];
                    case 2:
                        return g = v.sent(), y = function(e, t) {
                            void 0 === e && (e = []);
                            var n, i = (n = t, [].concat.apply([], n));
                            return e.forEach(function(e) {
                                var t = e.locationData;
                                t.relativeKeypoints.forEach(function(e) {
                                    var t = V(i, [
                                        e.x,
                                        e.y
                                    ]), n = t[0], o = t[1];
                                    e.x = n, e.y = o;
                                });
                                var n = t.relativeBoundingBox, o = Number.MAX_VALUE, r = Number.MAX_VALUE, a = Number.MIN_VALUE, s = Number.MIN_VALUE;
                                [
                                    [
                                        n.xMin,
                                        n.yMin
                                    ],
                                    [
                                        n.xMin + n.width,
                                        n.yMin
                                    ],
                                    [
                                        n.xMin + n.width,
                                        n.yMin + n.height
                                    ],
                                    [
                                        n.xMin,
                                        n.yMin + n.height
                                    ]
                                ].forEach(function(e) {
                                    var t = V(i, e), n = t[0], h = t[1];
                                    o = Math.min(o, n), a = Math.max(a, n), r = Math.min(r, h), s = Math.max(s, h);
                                }), t.relativeBoundingBox = {
                                    xMin: o,
                                    xMax: a,
                                    yMin: r,
                                    yMax: s,
                                    width: a - o,
                                    height: s - r
                                };
                            }), e;
                        }(g, a), (0, _tfjsCore.dispose)([
                            n,
                            r,
                            s,
                            m,
                            p
                        ]), [
                            2,
                            y
                        ];
                }
            });
        });
    }, e.prototype.estimateFaces = function(e, t) {
        return T(this, void 0, void 0, function() {
            var n, i;
            return C(this, function(o) {
                return n = F(e), i = !!t && t.flipHorizontal, [
                    2,
                    this.detectFaces(e, i).then(function(e) {
                        return e.map(function(e) {
                            for(var t = e.locationData.relativeKeypoints.map(function(e, t) {
                                return b(b({}, e), {
                                    x: e.x * n.width,
                                    y: e.y * n.height,
                                    name: O[t]
                                });
                            }), i = e.locationData.relativeBoundingBox, o = 0, r = [
                                "width",
                                "xMax",
                                "xMin"
                            ]; o < r.length; o++)i[r[o]] *= n.width;
                            for(var a = 0, s = [
                                "height",
                                "yMax",
                                "yMin"
                            ]; a < s.length; a++)i[s[a]] *= n.height;
                            return {
                                keypoints: t,
                                box: i
                            };
                        });
                    })
                ];
            });
        });
    }, e;
}();
function ee(e) {
    return T(this, void 0, void 0, function() {
        var t, n, i;
        return C(this, function(o) {
            switch(o.label){
                case 0:
                    return t = function(e) {
                        if (null == e) return b({}, X);
                        var t = b({}, e);
                        null == t.modelType && (t.modelType = X.modelType), null == t.maxFaces && (t.maxFaces = X.maxFaces), null == t.detectorModelUrl && ("full" === t.modelType ? t.detectorModelUrl = "https://tfhub.dev/mediapipe/tfjs-model/face_detection/full/1" : t.detectorModelUrl = "https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1");
                        return t;
                    }(e), n = "string" == typeof t.detectorModelUrl && t.detectorModelUrl.indexOf("https://tfhub.dev") > -1, [
                        4,
                        (0, _tfjsConverter.loadGraphModel)(t.detectorModelUrl, {
                            fromTFHub: n
                        })
                    ];
                case 1:
                    return i = o.sent(), [
                        2,
                        new Z(t.modelType, i, t.maxFaces)
                    ];
            }
        });
    });
}
function te(e, t) {
    return T(this, void 0, void 0, function() {
        var n, i;
        return C(this, function(o) {
            if (e === Q.MediaPipeFaceDetector) {
                if (i = void 0, null != (n = t)) {
                    if ("tfjs" === n.runtime) return [
                        2,
                        ee(n)
                    ];
                    if ("mediapipe" === n.runtime) return [
                        2,
                        D(n)
                    ];
                    i = n.runtime;
                }
                throw new Error("Expect modelConfig.runtime to be either 'tfjs' " + "or 'mediapipe', but got ".concat(i));
            }
            throw new Error("".concat(e, " is not a supported model name."));
        });
    });
}
!function(e) {
    e.MediaPipeFaceDetector = "MediaPipeFaceDetector";
}(Q || (Q = {}));

},{"@mediapipe/face_detection":"cg6OA","@tensorflow/tfjs-core":"2votT","@tensorflow/tfjs-converter":"f24HS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cg6OA":[function(require,module,exports) {
var global = arguments[3];
(function() {
    "use strict";
    var x;
    function aa(a) {
        var b = 0;
        return function() {
            return b < a.length ? {
                done: !1,
                value: a[b++]
            } : {
                done: !0
            };
        };
    }
    var ba = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
        if (a == Array.prototype || a == Object.prototype) return a;
        a[b] = c.value;
        return a;
    };
    function ca(a) {
        a = [
            "object" == typeof globalThis && globalThis,
            a,
            "object" == typeof window && window,
            "object" == typeof self && self,
            "object" == typeof global && global
        ];
        for(var b = 0; b < a.length; ++b){
            var c = a[b];
            if (c && c.Math == Math) return c;
        }
        throw Error("Cannot find global object");
    }
    var y = ca(this);
    function B(a, b) {
        if (b) a: {
            var c = y;
            a = a.split(".");
            for(var d = 0; d < a.length - 1; d++){
                var e = a[d];
                if (!(e in c)) break a;
                c = c[e];
            }
            a = a[a.length - 1];
            d = c[a];
            b = b(d);
            b != d && null != b && ba(c, a, {
                configurable: !0,
                writable: !0,
                value: b
            });
        }
    }
    B("Symbol", function(a) {
        function b(g) {
            if (this instanceof b) throw new TypeError("Symbol is not a constructor");
            return new c(d + (g || "") + "_" + e++, g);
        }
        function c(g, f) {
            this.g = g;
            ba(this, "description", {
                configurable: !0,
                writable: !0,
                value: f
            });
        }
        if (a) return a;
        c.prototype.toString = function() {
            return this.g;
        };
        var d = "jscomp_symbol_" + (1E9 * Math.random() >>> 0) + "_", e = 0;
        return b;
    });
    B("Symbol.iterator", function(a) {
        if (a) return a;
        a = Symbol("Symbol.iterator");
        for(var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++){
            var d = y[b[c]];
            "function" === typeof d && "function" != typeof d.prototype[a] && ba(d.prototype, a, {
                configurable: !0,
                writable: !0,
                value: function() {
                    return da(aa(this));
                }
            });
        }
        return a;
    });
    function da(a) {
        a = {
            next: a
        };
        a[Symbol.iterator] = function() {
            return this;
        };
        return a;
    }
    function C(a) {
        var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
        return b ? b.call(a) : {
            next: aa(a)
        };
    }
    function D(a) {
        if (!(a instanceof Array)) {
            a = C(a);
            for(var b, c = []; !(b = a.next()).done;)c.push(b.value);
            a = c;
        }
        return a;
    }
    var ea = "function" == typeof Object.create ? Object.create : function(a) {
        function b() {}
        b.prototype = a;
        return new b;
    }, fa;
    if ("function" == typeof Object.setPrototypeOf) fa = Object.setPrototypeOf;
    else {
        var ha;
        a: {
            var ia = {
                a: !0
            }, ja = {};
            try {
                ja.__proto__ = ia;
                ha = ja.a;
                break a;
            } catch (a) {}
            ha = !1;
        }
        fa = ha ? function(a, b) {
            a.__proto__ = b;
            if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
            return a;
        } : null;
    }
    var ka = fa;
    function E(a, b) {
        a.prototype = ea(b.prototype);
        a.prototype.constructor = a;
        if (ka) ka(a, b);
        else for(var c in b)if ("prototype" != c) {
            if (Object.defineProperties) {
                var d = Object.getOwnPropertyDescriptor(b, c);
                d && Object.defineProperty(a, c, d);
            } else a[c] = b[c];
        }
        a.na = b.prototype;
    }
    function la() {
        this.l = !1;
        this.i = null;
        this.h = void 0;
        this.g = 1;
        this.u = this.o = 0;
        this.j = null;
    }
    function ma(a) {
        if (a.l) throw new TypeError("Generator is already running");
        a.l = !0;
    }
    la.prototype.s = function(a) {
        this.h = a;
    };
    function na(a, b) {
        a.j = {
            da: b,
            ea: !0
        };
        a.g = a.o || a.u;
    }
    la.prototype.return = function(a) {
        this.j = {
            return: a
        };
        this.g = this.u;
    };
    function G(a, b, c) {
        a.g = c;
        return {
            value: b
        };
    }
    function oa(a) {
        this.g = new la;
        this.h = a;
    }
    function pa(a, b) {
        ma(a.g);
        var c = a.g.i;
        if (c) return qa(a, "return" in c ? c["return"] : function(d) {
            return {
                value: d,
                done: !0
            };
        }, b, a.g.return);
        a.g.return(b);
        return H(a);
    }
    function qa(a, b, c, d) {
        try {
            var e = b.call(a.g.i, c);
            if (!(e instanceof Object)) throw new TypeError("Iterator result " + e + " is not an object");
            if (!e.done) return a.g.l = !1, e;
            var g = e.value;
        } catch (f) {
            return a.g.i = null, na(a.g, f), H(a);
        }
        a.g.i = null;
        d.call(a.g, g);
        return H(a);
    }
    function H(a) {
        for(; a.g.g;)try {
            var b = a.h(a.g);
            if (b) return a.g.l = !1, {
                value: b.value,
                done: !1
            };
        } catch (c) {
            a.g.h = void 0, na(a.g, c);
        }
        a.g.l = !1;
        if (a.g.j) {
            b = a.g.j;
            a.g.j = null;
            if (b.ea) throw b.da;
            return {
                value: b.return,
                done: !0
            };
        }
        return {
            value: void 0,
            done: !0
        };
    }
    function ra(a) {
        this.next = function(b) {
            ma(a.g);
            a.g.i ? b = qa(a, a.g.i.next, b, a.g.s) : (a.g.s(b), b = H(a));
            return b;
        };
        this.throw = function(b) {
            ma(a.g);
            a.g.i ? b = qa(a, a.g.i["throw"], b, a.g.s) : (na(a.g, b), b = H(a));
            return b;
        };
        this.return = function(b) {
            return pa(a, b);
        };
        this[Symbol.iterator] = function() {
            return this;
        };
    }
    function sa(a) {
        function b(d) {
            return a.next(d);
        }
        function c(d) {
            return a.throw(d);
        }
        return new Promise(function(d, e) {
            function g(f) {
                f.done ? d(f.value) : Promise.resolve(f.value).then(b, c).then(g, e);
            }
            g(a.next());
        });
    }
    function J(a) {
        return sa(new ra(new oa(a)));
    }
    B("Promise", function(a) {
        function b(f) {
            this.h = 0;
            this.i = void 0;
            this.g = [];
            this.s = !1;
            var h = this.j();
            try {
                f(h.resolve, h.reject);
            } catch (k) {
                h.reject(k);
            }
        }
        function c() {
            this.g = null;
        }
        function d(f) {
            return f instanceof b ? f : new b(function(h) {
                h(f);
            });
        }
        if (a) return a;
        c.prototype.h = function(f) {
            if (null == this.g) {
                this.g = [];
                var h = this;
                this.i(function() {
                    h.l();
                });
            }
            this.g.push(f);
        };
        var e = y.setTimeout;
        c.prototype.i = function(f) {
            e(f, 0);
        };
        c.prototype.l = function() {
            for(; this.g && this.g.length;){
                var f = this.g;
                this.g = [];
                for(var h = 0; h < f.length; ++h){
                    var k = f[h];
                    f[h] = null;
                    try {
                        k();
                    } catch (l) {
                        this.j(l);
                    }
                }
            }
            this.g = null;
        };
        c.prototype.j = function(f) {
            this.i(function() {
                throw f;
            });
        };
        b.prototype.j = function() {
            function f(l) {
                return function(m) {
                    k || (k = !0, l.call(h, m));
                };
            }
            var h = this, k = !1;
            return {
                resolve: f(this.D),
                reject: f(this.l)
            };
        };
        b.prototype.D = function(f) {
            if (f === this) this.l(new TypeError("A Promise cannot resolve to itself"));
            else if (f instanceof b) this.H(f);
            else {
                a: switch(typeof f){
                    case "object":
                        var h = null != f;
                        break a;
                    case "function":
                        h = !0;
                        break a;
                    default:
                        h = !1;
                }
                h ? this.A(f) : this.o(f);
            }
        };
        b.prototype.A = function(f) {
            var h = void 0;
            try {
                h = f.then;
            } catch (k) {
                this.l(k);
                return;
            }
            "function" == typeof h ? this.I(h, f) : this.o(f);
        };
        b.prototype.l = function(f) {
            this.u(2, f);
        };
        b.prototype.o = function(f) {
            this.u(1, f);
        };
        b.prototype.u = function(f, h) {
            if (0 != this.h) throw Error("Cannot settle(" + f + ", " + h + "): Promise already settled in state" + this.h);
            this.h = f;
            this.i = h;
            2 === this.h && this.G();
            this.B();
        };
        b.prototype.G = function() {
            var f = this;
            e(function() {
                if (f.C()) {
                    var h = y.console;
                    "undefined" !== typeof h && h.error(f.i);
                }
            }, 1);
        };
        b.prototype.C = function() {
            if (this.s) return !1;
            var f = y.CustomEvent, h = y.Event, k = y.dispatchEvent;
            if ("undefined" === typeof k) return !0;
            "function" === typeof f ? f = new f("unhandledrejection", {
                cancelable: !0
            }) : "function" === typeof h ? f = new h("unhandledrejection", {
                cancelable: !0
            }) : (f = y.document.createEvent("CustomEvent"), f.initCustomEvent("unhandledrejection", !1, !0, f));
            f.promise = this;
            f.reason = this.i;
            return k(f);
        };
        b.prototype.B = function() {
            if (null != this.g) {
                for(var f = 0; f < this.g.length; ++f)g.h(this.g[f]);
                this.g = null;
            }
        };
        var g = new c;
        b.prototype.H = function(f) {
            var h = this.j();
            f.M(h.resolve, h.reject);
        };
        b.prototype.I = function(f, h) {
            var k = this.j();
            try {
                f.call(h, k.resolve, k.reject);
            } catch (l) {
                k.reject(l);
            }
        };
        b.prototype.then = function(f, h) {
            function k(p, n) {
                return "function" == typeof p ? function(r) {
                    try {
                        l(p(r));
                    } catch (t) {
                        m(t);
                    }
                } : n;
            }
            var l, m, q = new b(function(p, n) {
                l = p;
                m = n;
            });
            this.M(k(f, l), k(h, m));
            return q;
        };
        b.prototype.catch = function(f) {
            return this.then(void 0, f);
        };
        b.prototype.M = function(f, h) {
            function k() {
                switch(l.h){
                    case 1:
                        f(l.i);
                        break;
                    case 2:
                        h(l.i);
                        break;
                    default:
                        throw Error("Unexpected state: " + l.h);
                }
            }
            var l = this;
            null == this.g ? g.h(k) : this.g.push(k);
            this.s = !0;
        };
        b.resolve = d;
        b.reject = function(f) {
            return new b(function(h, k) {
                k(f);
            });
        };
        b.race = function(f) {
            return new b(function(h, k) {
                for(var l = C(f), m = l.next(); !m.done; m = l.next())d(m.value).M(h, k);
            });
        };
        b.all = function(f) {
            var h = C(f), k = h.next();
            return k.done ? d([]) : new b(function(l, m) {
                function q(r) {
                    return function(t) {
                        p[r] = t;
                        n--;
                        0 == n && l(p);
                    };
                }
                var p = [], n = 0;
                do p.push(void 0), n++, d(k.value).M(q(p.length - 1), m), k = h.next();
                while (!k.done);
            });
        };
        return b;
    });
    function ta(a, b) {
        a instanceof String && (a += "");
        var c = 0, d = !1, e = {
            next: function() {
                if (!d && c < a.length) {
                    var g = c++;
                    return {
                        value: b(g, a[g]),
                        done: !1
                    };
                }
                d = !0;
                return {
                    done: !0,
                    value: void 0
                };
            }
        };
        e[Symbol.iterator] = function() {
            return e;
        };
        return e;
    }
    var ua = "function" == typeof Object.assign ? Object.assign : function(a, b) {
        for(var c = 1; c < arguments.length; c++){
            var d = arguments[c];
            if (d) for(var e in d)Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e]);
        }
        return a;
    };
    B("Object.assign", function(a) {
        return a || ua;
    });
    B("Object.is", function(a) {
        return a ? a : function(b, c) {
            return b === c ? 0 !== b || 1 / b === 1 / c : b !== b && c !== c;
        };
    });
    B("Array.prototype.includes", function(a) {
        return a ? a : function(b, c) {
            var d = this;
            d instanceof String && (d = String(d));
            var e = d.length;
            c = c || 0;
            for(0 > c && (c = Math.max(c + e, 0)); c < e; c++){
                var g = d[c];
                if (g === b || Object.is(g, b)) return !0;
            }
            return !1;
        };
    });
    B("String.prototype.includes", function(a) {
        return a ? a : function(b, c) {
            if (null == this) throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");
            if (b instanceof RegExp) throw new TypeError("First argument to String.prototype.includes must not be a regular expression");
            return -1 !== this.indexOf(b, c || 0);
        };
    });
    B("Array.prototype.keys", function(a) {
        return a ? a : function() {
            return ta(this, function(b) {
                return b;
            });
        };
    });
    var va = this || self;
    function K(a, b) {
        a = a.split(".");
        var c = va;
        a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
        for(var d; a.length && (d = a.shift());)a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {} : c[d] = b;
    }
    function L() {
        throw Error("Invalid UTF8");
    }
    function wa(a, b) {
        b = String.fromCharCode.apply(null, b);
        return null == a ? b : a + b;
    }
    var xa, ya = "undefined" !== typeof TextDecoder, za, Aa = "undefined" !== typeof TextEncoder;
    var Ba = {}, M = null;
    function Ca(a) {
        var b;
        void 0 === b && (b = 0);
        Da();
        b = Ba[b];
        for(var c = Array(Math.floor(a.length / 3)), d = b[64] || "", e = 0, g = 0; e < a.length - 2; e += 3){
            var f = a[e], h = a[e + 1], k = a[e + 2], l = b[f >> 2];
            f = b[(f & 3) << 4 | h >> 4];
            h = b[(h & 15) << 2 | k >> 6];
            k = b[k & 63];
            c[g++] = l + f + h + k;
        }
        l = 0;
        k = d;
        switch(a.length - e){
            case 2:
                l = a[e + 1], k = b[(l & 15) << 2] || d;
            case 1:
                a = a[e], c[g] = b[a >> 2] + b[(a & 3) << 4 | l >> 4] + k + d;
        }
        return c.join("");
    }
    function Ea(a) {
        var b = a.length, c = 3 * b / 4;
        c % 3 ? c = Math.floor(c) : -1 != "=.".indexOf(a[b - 1]) && (c = -1 != "=.".indexOf(a[b - 2]) ? c - 2 : c - 1);
        var d = new Uint8Array(c), e = 0;
        Fa(a, function(g) {
            d[e++] = g;
        });
        return e !== c ? d.subarray(0, e) : d;
    }
    function Fa(a, b) {
        function c(k) {
            for(; d < a.length;){
                var l = a.charAt(d++), m = M[l];
                if (null != m) return m;
                if (!/^[\s\xa0]*$/.test(l)) throw Error("Unknown base64 encoding at char: " + l);
            }
            return k;
        }
        Da();
        for(var d = 0;;){
            var e = c(-1), g = c(0), f = c(64), h = c(64);
            if (64 === h && -1 === e) break;
            b(e << 2 | g >> 4);
            64 != f && (b(g << 4 & 240 | f >> 2), 64 != h && b(f << 6 & 192 | h));
        }
    }
    function Da() {
        if (!M) {
            M = {};
            for(var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = [
                "+/=",
                "+/",
                "-_=",
                "-_.",
                "-_"
            ], c = 0; 5 > c; c++){
                var d = a.concat(b[c].split(""));
                Ba[c] = d;
                for(var e = 0; e < d.length; e++){
                    var g = d[e];
                    void 0 === M[g] && (M[g] = e);
                }
            }
        }
    }
    var Ga = "function" === typeof Uint8Array;
    function Ha(a) {
        return Ga && null != a && a instanceof Uint8Array;
    }
    var Ia;
    function Ja(a) {
        this.L = a;
        if (null !== a && 0 === a.length) throw Error("ByteString should be constructed with non-empty values");
    }
    var Ka = "function" === typeof Uint8Array.prototype.slice, N = 0, O = 0;
    function La(a, b) {
        if (a.constructor === Uint8Array) return a;
        if (a.constructor === ArrayBuffer) return new Uint8Array(a);
        if (a.constructor === Array) return new Uint8Array(a);
        if (a.constructor === String) return Ea(a);
        if (a.constructor === Ja) {
            if (!b && (b = a.L) && b.constructor === Uint8Array) return b;
            b = a.L;
            b = null == b || Ha(b) ? b : "string" === typeof b ? Ea(b) : null;
            return (a = a.L = b) ? new Uint8Array(a) : Ia || (Ia = new Uint8Array(0));
        }
        if (a instanceof Uint8Array) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
        throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers");
    }
    function Ma(a, b) {
        return Error("Invalid wire type: " + a + " (at position " + b + ")");
    }
    function Na() {
        return Error("Failed to read varint, encoding is invalid.");
    }
    function Oa(a, b) {
        b = void 0 === b ? {} : b;
        b = void 0 === b.v ? !1 : b.v;
        this.h = null;
        this.g = this.i = this.j = 0;
        this.v = b;
        a && Pa(this, a);
    }
    function Pa(a, b) {
        a.h = La(b, a.v);
        a.j = 0;
        a.i = a.h.length;
        a.g = a.j;
    }
    Oa.prototype.reset = function() {
        this.g = this.j;
    };
    function P(a) {
        if (a.g > a.i) throw Error("Tried to read past the end of the data " + a.g + " > " + a.i);
    }
    function Q(a) {
        var b = a.h, c = b[a.g], d = c & 127;
        if (128 > c) return a.g += 1, P(a), d;
        c = b[a.g + 1];
        d |= (c & 127) << 7;
        if (128 > c) return a.g += 2, P(a), d;
        c = b[a.g + 2];
        d |= (c & 127) << 14;
        if (128 > c) return a.g += 3, P(a), d;
        c = b[a.g + 3];
        d |= (c & 127) << 21;
        if (128 > c) return a.g += 4, P(a), d;
        c = b[a.g + 4];
        a.g += 5;
        d |= (c & 15) << 28;
        if (128 > c) return P(a), d;
        if (128 <= b[a.g++] && 128 <= b[a.g++] && 128 <= b[a.g++] && 128 <= b[a.g++] && 128 <= b[a.g++]) throw Na();
        P(a);
        return d;
    }
    var Qa = [];
    function Ra() {
        this.g = [];
    }
    Ra.prototype.length = function() {
        return this.g.length;
    };
    Ra.prototype.end = function() {
        var a = this.g;
        this.g = [];
        return a;
    };
    function S(a, b) {
        for(; 127 < b;)a.g.push(b & 127 | 128), b >>>= 7;
        a.g.push(b);
    }
    function Sa(a) {
        var b = {}, c = void 0 === b.W ? !1 : b.W;
        this.l = {
            v: void 0 === b.v ? !1 : b.v
        };
        this.W = c;
        b = this.l;
        Qa.length ? (c = Qa.pop(), b && (c.v = b.v), a && Pa(c, a), a = c) : a = new Oa(a, b);
        this.g = a;
        this.j = this.g.g;
        this.h = this.i = -1;
    }
    Sa.prototype.reset = function() {
        this.g.reset();
        this.j = this.g.g;
        this.h = this.i = -1;
    };
    function Ta(a) {
        var b = a.g;
        if (b.g == b.i) return !1;
        a.j = a.g.g;
        var c = Q(a.g) >>> 0;
        b = c >>> 3;
        c &= 7;
        if (!(0 <= c && 5 >= c)) throw Ma(c, a.j);
        if (1 > b) throw Error("Invalid field number: " + b + " (at position " + a.j + ")");
        a.i = b;
        a.h = c;
        return !0;
    }
    function Ua(a) {
        switch(a.h){
            case 0:
                if (0 != a.h) Ua(a);
                else a: {
                    a = a.g;
                    for(var b = a.g, c = b + 10; b < c;)if (0 === (a.h[b++] & 128)) {
                        a.g = b;
                        P(a);
                        break a;
                    }
                    throw Na();
                }
                break;
            case 1:
                a = a.g;
                a.g += 8;
                P(a);
                break;
            case 2:
                2 != a.h ? Ua(a) : (b = Q(a.g) >>> 0, a = a.g, a.g += b, P(a));
                break;
            case 5:
                a = a.g;
                a.g += 4;
                P(a);
                break;
            case 3:
                b = a.i;
                do {
                    if (!Ta(a)) throw Error("Unmatched start-group tag: stream EOF");
                    if (4 == a.h) {
                        if (a.i != b) throw Error("Unmatched end-group tag");
                        break;
                    }
                    Ua(a);
                }while (1);
                break;
            default:
                throw Ma(a.h, a.j);
        }
    }
    var Va = [];
    function Wa() {
        this.i = [];
        this.h = 0;
        this.g = new Ra;
    }
    function T(a, b) {
        0 !== b.length && (a.i.push(b), a.h += b.length);
    }
    function Xa(a, b) {
        if (b = b.ba) {
            T(a, a.g.end());
            for(var c = 0; c < b.length; c++)T(a, b[c]);
        }
    }
    var U = "function" === typeof Symbol && "symbol" === typeof Symbol() ? Symbol(void 0) : void 0;
    function Ya(a, b) {
        Object.isFrozen(a) || (U ? a[U] |= b : void 0 !== a.N ? a.N |= b : Object.defineProperties(a, {
            N: {
                value: b,
                configurable: !0,
                writable: !0,
                enumerable: !1
            }
        }));
    }
    function Za(a) {
        var b;
        U ? b = a[U] : b = a.N;
        return null == b ? 0 : b;
    }
    function $a(a) {
        Ya(a, 1);
        return a;
    }
    function ab(a) {
        return Array.isArray(a) ? !!(Za(a) & 2) : !1;
    }
    function bb(a) {
        if (!Array.isArray(a)) throw Error("cannot mark non-array as immutable");
        Ya(a, 2);
    }
    function cb(a) {
        return null !== a && "object" === typeof a && !Array.isArray(a) && a.constructor === Object;
    }
    var db = Object.freeze($a([]));
    function eb(a) {
        if (ab(a.m)) throw Error("Cannot mutate an immutable Message");
    }
    var fb = "undefined" != typeof Symbol && "undefined" != typeof Symbol.hasInstance;
    function gb(a) {
        return {
            value: a,
            configurable: !1,
            writable: !1,
            enumerable: !1
        };
    }
    function V(a, b, c) {
        return -1 === b ? null : b >= a.i ? a.g ? a.g[b] : void 0 : (void 0 === c ? 0 : c) && a.g && (c = a.g[b], null != c) ? c : a.m[b + a.h];
    }
    function W(a, b, c, d) {
        d = void 0 === d ? !1 : d;
        eb(a);
        b < a.i && !d ? a.m[b + a.h] = c : (a.g || (a.g = a.m[a.i + a.h] = {}))[b] = c;
    }
    function hb(a, b, c, d) {
        c = void 0 === c ? !0 : c;
        d = void 0 === d ? !1 : d;
        var e = V(a, b, d);
        null == e && (e = db);
        if (ab(a.m)) c && (bb(e), Object.freeze(e));
        else if (e === db || ab(e)) e = $a(e.slice()), W(a, b, e, d);
        return e;
    }
    function X(a, b, c) {
        a = V(a, b);
        a = null == a ? a : +a;
        return null == a ? void 0 === c ? 0 : c : a;
    }
    function ib(a, b, c, d) {
        a.j || (a.j = {});
        var e = ab(a.m), g = a.j[c];
        if (!g) {
            d = hb(a, c, !0, void 0 === d ? !1 : d);
            g = [];
            e = e || ab(d);
            for(var f = 0; f < d.length; f++)g[f] = new b(d[f]), e && bb(g[f].m);
            e && (bb(g), Object.freeze(g));
            a.j[c] = g;
        }
        return g;
    }
    function jb(a, b, c, d, e) {
        var g = void 0 === g ? !1 : g;
        eb(a);
        g = ib(a, c, b, g);
        c = d ? d : new c;
        a = hb(a, b);
        void 0 != e ? (g.splice(e, 0, c), a.splice(e, 0, c.m)) : (g.push(c), a.push(c.m));
        return c;
    }
    function kb(a, b) {
        a = V(a, b);
        return null == a ? 0 : a;
    }
    function lb(a, b) {
        a = V(a, b);
        return null == a ? "" : a;
    }
    function mb(a) {
        switch(typeof a){
            case "number":
                return isFinite(a) ? a : String(a);
            case "object":
                if (a && !Array.isArray(a)) {
                    if (Ha(a)) return Ca(a);
                    if (a instanceof Ja) {
                        var b = a.L;
                        b = null == b || "string" === typeof b ? b : Ga && b instanceof Uint8Array ? Ca(b) : null;
                        return (a.L = b) || "";
                    }
                }
        }
        return a;
    }
    function nb(a) {
        var b = ob;
        b = void 0 === b ? pb : b;
        return qb(a, b);
    }
    function rb(a, b) {
        if (null != a) {
            if (Array.isArray(a)) a = qb(a, b);
            else if (cb(a)) {
                var c = {}, d;
                for(d in a)c[d] = rb(a[d], b);
                a = c;
            } else a = b(a);
            return a;
        }
    }
    function qb(a, b) {
        for(var c = a.slice(), d = 0; d < c.length; d++)c[d] = rb(c[d], b);
        Array.isArray(a) && Za(a) & 1 && $a(c);
        return c;
    }
    function ob(a) {
        if (a && "object" == typeof a && a.toJSON) return a.toJSON();
        a = mb(a);
        return Array.isArray(a) ? nb(a) : a;
    }
    function pb(a) {
        return Ha(a) ? new Uint8Array(a) : a;
    }
    function sb(a, b, c) {
        a || (a = tb);
        tb = null;
        var d = this.constructor.h;
        a || (a = d ? [
            d
        ] : []);
        this.h = (d ? 0 : -1) - (this.constructor.g || 0);
        this.j = void 0;
        this.m = a;
        a: {
            d = this.m.length;
            a = d - 1;
            if (d && (d = this.m[a], cb(d))) {
                this.i = a - this.h;
                this.g = d;
                break a;
            }
            void 0 !== b && -1 < b ? (this.i = Math.max(b, a + 1 - this.h), this.g = void 0) : this.i = Number.MAX_VALUE;
        }
        if (c) for(b = 0; b < c.length; b++)if (a = c[b], a < this.i) a += this.h, (d = this.m[a]) ? Array.isArray(d) && $a(d) : this.m[a] = db;
        else {
            d = this.g || (this.g = this.m[this.i + this.h] = {});
            var e = d[a];
            e ? Array.isArray(e) && $a(e) : d[a] = db;
        }
    }
    sb.prototype.toJSON = function() {
        return nb(this.m);
    };
    sb.prototype.toString = function() {
        return this.m.toString();
    };
    var tb;
    function ub() {
        sb.apply(this, arguments);
    }
    E(ub, sb);
    if (fb) {
        var vb = {};
        Object.defineProperties(ub, (vb[Symbol.hasInstance] = gb(function() {
            throw Error("Cannot perform instanceof checks for MutableMessage");
        }), vb));
    }
    function wb(a, b, c) {
        if (c) {
            var d = {}, e;
            for(e in c){
                var g = c[e], f = g.ha;
                f || (d.F = g.la || g.fa.P, g.aa ? (d.U = xb(g.aa), f = function(h) {
                    return function(k, l, m) {
                        return h.F(k, l, m, h.U);
                    };
                }(d)) : g.ca ? (d.T = yb(g.X.g, g.ca), f = function(h) {
                    return function(k, l, m) {
                        return h.F(k, l, m, h.T);
                    };
                }(d)) : f = d.F, g.ha = f);
                f(b, a, g.X);
                d = {
                    F: d.F,
                    U: d.U,
                    T: d.T
                };
            }
        }
        Xa(b, a);
    }
    var zb = Symbol();
    function Ab(a, b, c) {
        return a[zb] || (a[zb] = function(d, e) {
            return b(d, e, c);
        });
    }
    function Bb(a) {
        var b = a[zb];
        if (!b) {
            var c = Cb(a);
            b = function(d, e) {
                return Db(d, e, c);
            };
            a[zb] = b;
        }
        return b;
    }
    function Eb(a) {
        var b = a.aa;
        if (b) return Bb(b);
        if (b = a.ka) return Ab(a.X.g, b, a.ca);
    }
    function Fb(a) {
        var b = Eb(a), c = a.X, d = a.fa.O;
        return b ? function(e, g) {
            return d(e, g, c, b);
        } : function(e, g) {
            return d(e, g, c);
        };
    }
    function Gb(a, b, c, d, e, g) {
        a = a();
        var f = 0;
        a.length && "number" !== typeof a[0] && (c(b, a[0]), f++);
        for(; f < a.length;){
            c = a[f++];
            for(var h = f + 1; h < a.length && "number" !== typeof a[h];)h++;
            var k = a[f++];
            h -= f;
            switch(h){
                case 0:
                    d(b, c, k);
                    break;
                case 1:
                    d(b, c, k, a[f++]);
                    break;
                case 2:
                    e(b, c, k, a[f++], a[f++]);
                    break;
                case 3:
                    h = a[f++];
                    var l = a[f++], m = a[f++];
                    Array.isArray(m) ? e(b, c, k, h, l, m) : g(b, c, k, h, l, m);
                    break;
                case 4:
                    g(b, c, k, a[f++], a[f++], a[f++], a[f++]);
                    break;
                default:
                    throw Error("unexpected number of binary field arguments: " + h);
            }
        }
        return b;
    }
    var Hb = Symbol();
    function xb(a) {
        var b = a[Hb];
        if (!b) {
            var c = Ib(a);
            b = function(d, e) {
                return Jb(d, e, c);
            };
            a[Hb] = b;
        }
        return b;
    }
    function yb(a, b) {
        var c = a[Hb];
        c || (c = function(d, e) {
            return wb(d, e, b);
        }, a[Hb] = c);
        return c;
    }
    var Kb = Symbol();
    function Lb(a, b) {
        a.push(b);
    }
    function Mb(a, b, c) {
        a.push(b, c.P);
    }
    function Nb(a, b, c, d, e) {
        var g = xb(e), f = c.P;
        a.push(b, function(h, k, l) {
            return f(h, k, l, d, g);
        });
    }
    function Ob(a, b, c, d, e, g) {
        var f = yb(d, g), h = c.P;
        a.push(b, function(k, l, m) {
            return h(k, l, m, d, f);
        });
    }
    function Ib(a) {
        var b = a[Kb];
        return b ? b : Gb(a, a[Kb] = [], Lb, Mb, Nb, Ob);
    }
    var Pb = Symbol();
    function Qb(a, b) {
        a[0] = b;
    }
    function Rb(a, b, c, d) {
        var e = c.O;
        a[b] = d ? function(g, f, h) {
            return e(g, f, h, d);
        } : e;
    }
    function Sb(a, b, c, d, e, g) {
        var f = c.O, h = Bb(e);
        a[b] = function(k, l, m) {
            return f(k, l, m, d, h, g);
        };
    }
    function Tb(a, b, c, d, e, g, f) {
        var h = c.O, k = Ab(d, e, g);
        a[b] = function(l, m, q) {
            return h(l, m, q, d, k, f);
        };
    }
    function Cb(a) {
        var b = a[Pb];
        return b ? b : Gb(a, a[Pb] = {}, Qb, Rb, Sb, Tb);
    }
    function Db(a, b, c) {
        for(; Ta(b) && 4 != b.h;){
            var d = b.i, e = c[d];
            if (!e) {
                var g = c[0];
                g && (g = g[d]) && (e = c[d] = Fb(g));
            }
            if (!e || !e(b, a, d)) {
                if (e = b, d = a, g = e.j, Ua(e), !e.W) {
                    var f = e.g.h;
                    e = e.g.g;
                    e = g === e ? Ia || (Ia = new Uint8Array(0)) : Ka ? f.slice(g, e) : new Uint8Array(f.subarray(g, e));
                    (g = d.ba) ? g.push(e) : d.ba = [
                        e
                    ];
                }
            }
        }
        return a;
    }
    function Ub(a, b, c) {
        if (Va.length) {
            var d = Va.pop();
            a && (Pa(d.g, a), d.i = -1, d.h = -1);
            a = d;
        } else a = new Sa(a);
        try {
            return Db(new b, a, Cb(c));
        } finally{
            b = a.g, b.h = null, b.j = 0, b.i = 0, b.g = 0, b.v = !1, a.i = -1, a.h = -1, 100 > Va.length && Va.push(a);
        }
    }
    function Jb(a, b, c) {
        for(var d = c.length, e = 1 == d % 2, g = e ? 1 : 0; g < d; g += 2)(0, c[g + 1])(b, a, c[g]);
        wb(a, b, e ? c[0] : void 0);
    }
    function Vb(a, b) {
        var c = new Wa;
        Jb(a, c, Ib(b));
        T(c, c.g.end());
        a = new Uint8Array(c.h);
        b = c.i;
        for(var d = b.length, e = 0, g = 0; g < d; g++){
            var f = b[g];
            a.set(f, e);
            e += f.length;
        }
        c.i = [
            a
        ];
        return a;
    }
    function Wb(a, b) {
        return {
            O: a,
            P: b
        };
    }
    var Y = Wb(function(a, b, c) {
        if (5 !== a.h) return !1;
        a = a.g;
        var d = a.h[a.g];
        var e = a.h[a.g + 1];
        var g = a.h[a.g + 2], f = a.h[a.g + 3];
        a.g += 4;
        P(a);
        e = (d << 0 | e << 8 | g << 16 | f << 24) >>> 0;
        a = 2 * (e >> 31) + 1;
        d = e >>> 23 & 255;
        e &= 8388607;
        W(b, c, 255 == d ? e ? NaN : Infinity * a : 0 == d ? a * Math.pow(2, -149) * e : a * Math.pow(2, d - 150) * (e + Math.pow(2, 23)));
        return !0;
    }, function(a, b, c) {
        b = V(b, c);
        if (null != b) {
            S(a.g, 8 * c + 5);
            a = a.g;
            var d = b;
            d = (c = 0 > d ? 1 : 0) ? -d : d;
            0 === d ? 0 < 1 / d ? N = O = 0 : (O = 0, N = 2147483648) : isNaN(d) ? (O = 0, N = 2147483647) : 3.4028234663852886E38 < d ? (O = 0, N = (c << 31 | 2139095040) >>> 0) : 1.1754943508222875E-38 > d ? (d = Math.round(d / Math.pow(2, -149)), O = 0, N = (c << 31 | d) >>> 0) : (b = Math.floor(Math.log(d) / Math.LN2), d *= Math.pow(2, -b), d = Math.round(8388608 * d), 16777216 <= d && ++b, O = 0, N = (c << 31 | b + 127 << 23 | d & 8388607) >>> 0);
            c = N;
            a.g.push(c >>> 0 & 255);
            a.g.push(c >>> 8 & 255);
            a.g.push(c >>> 16 & 255);
            a.g.push(c >>> 24 & 255);
        }
    }), Xb = Wb(function(a, b, c) {
        if (0 !== a.h) return !1;
        for(var d = a.g, e = 128, g = 0, f = a = 0; 4 > f && 128 <= e; f++)e = d.h[d.g++], P(d), g |= (e & 127) << 7 * f;
        128 <= e && (e = d.h[d.g++], P(d), g |= (e & 127) << 28, a |= (e & 127) >> 4);
        if (128 <= e) for(f = 0; 5 > f && 128 <= e; f++)e = d.h[d.g++], P(d), a |= (e & 127) << 7 * f + 3;
        if (128 > e) {
            d = g >>> 0;
            e = a >>> 0;
            if (a = e & 2147483648) d = ~d + 1 >>> 0, e = ~e >>> 0, 0 == d && (e = e + 1 >>> 0);
            d = 4294967296 * e + (d >>> 0);
        } else throw Na();
        W(b, c, a ? -d : d);
        return !0;
    }, function(a, b, c) {
        b = V(b, c);
        if (null != b && null != b) {
            S(a.g, 8 * c);
            a = a.g;
            var d = b;
            c = 0 > d;
            d = Math.abs(d);
            b = d >>> 0;
            d = Math.floor((d - b) / 4294967296);
            d >>>= 0;
            c && (d = ~d >>> 0, b = (~b >>> 0) + 1, 4294967295 < b && (b = 0, d++, 4294967295 < d && (d = 0)));
            N = b;
            O = d;
            c = N;
            for(b = O; 0 < b || 127 < c;)a.g.push(c & 127 | 128), c = (c >>> 7 | b << 25) >>> 0, b >>>= 7;
            a.g.push(c);
        }
    }), Yb = Wb(function(a, b, c) {
        if (0 !== a.h) return !1;
        W(b, c, Q(a.g));
        return !0;
    }, function(a, b, c) {
        b = V(b, c);
        if (null != b && null != b) {
            if (S(a.g, 8 * c), a = a.g, c = b, 0 <= c) S(a, c);
            else {
                for(b = 0; 9 > b; b++)a.g.push(c & 127 | 128), c >>= 7;
                a.g.push(1);
            }
        }
    }), Zb = Wb(function(a, b, c) {
        if (2 !== a.h) return !1;
        var d = Q(a.g) >>> 0;
        a = a.g;
        var e = a.g;
        a.g += d;
        P(a);
        a = a.h;
        var g;
        if (ya) (g = xa) || (g = xa = new TextDecoder("utf-8", {
            fatal: !0
        })), g = g.decode(a.subarray(e, e + d));
        else {
            d = e + d;
            for(var f = [], h = null, k, l, m; e < d;)k = a[e++], 128 > k ? f.push(k) : 224 > k ? e >= d ? L() : (l = a[e++], 194 > k || 128 !== (l & 192) ? (e--, L()) : f.push((k & 31) << 6 | l & 63)) : 240 > k ? e >= d - 1 ? L() : (l = a[e++], 128 !== (l & 192) || 224 === k && 160 > l || 237 === k && 160 <= l || 128 !== ((g = a[e++]) & 192) ? (e--, L()) : f.push((k & 15) << 12 | (l & 63) << 6 | g & 63)) : 244 >= k ? e >= d - 2 ? L() : (l = a[e++], 128 !== (l & 192) || 0 !== (k << 28) + (l - 144) >> 30 || 128 !== ((g = a[e++]) & 192) || 128 !== ((m = a[e++]) & 192) ? (e--, L()) : (k = (k & 7) << 18 | (l & 63) << 12 | (g & 63) << 6 | m & 63, k -= 65536, f.push((k >> 10 & 1023) + 55296, (k & 1023) + 56320))) : L(), 8192 <= f.length && (h = wa(h, f), f.length = 0);
            g = wa(h, f);
        }
        W(b, c, g);
        return !0;
    }, function(a, b, c) {
        b = V(b, c);
        if (null != b) {
            var d = !1;
            d = void 0 === d ? !1 : d;
            if (Aa) {
                if (d && /(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/.test(b)) throw Error("Found an unpaired surrogate");
                b = (za || (za = new TextEncoder)).encode(b);
            } else {
                for(var e = 0, g = new Uint8Array(3 * b.length), f = 0; f < b.length; f++){
                    var h = b.charCodeAt(f);
                    if (128 > h) g[e++] = h;
                    else {
                        if (2048 > h) g[e++] = h >> 6 | 192;
                        else {
                            if (55296 <= h && 57343 >= h) {
                                if (56319 >= h && f < b.length) {
                                    var k = b.charCodeAt(++f);
                                    if (56320 <= k && 57343 >= k) {
                                        h = 1024 * (h - 55296) + k - 56320 + 65536;
                                        g[e++] = h >> 18 | 240;
                                        g[e++] = h >> 12 & 63 | 128;
                                        g[e++] = h >> 6 & 63 | 128;
                                        g[e++] = h & 63 | 128;
                                        continue;
                                    } else f--;
                                }
                                if (d) throw Error("Found an unpaired surrogate");
                                h = 65533;
                            }
                            g[e++] = h >> 12 | 224;
                            g[e++] = h >> 6 & 63 | 128;
                        }
                        g[e++] = h & 63 | 128;
                    }
                }
                b = g.subarray(0, e);
            }
            S(a.g, 8 * c + 2);
            S(a.g, b.length);
            T(a, a.g.end());
            T(a, b);
        }
    }), $b = Wb(function(a, b, c, d, e) {
        if (2 !== a.h) return !1;
        b = jb(b, c, d);
        c = a.g.i;
        d = Q(a.g) >>> 0;
        var g = a.g.g + d, f = g - c;
        0 >= f && (a.g.i = g, e(b, a), f = g - a.g.g);
        if (f) throw Error("Message parsing ended unexpectedly. Expected to read " + (d + " bytes, instead read " + (d - f) + " bytes, either the data ended unexpectedly or the message misreported its own length"));
        a.g.g = g;
        a.g.i = c;
        return !0;
    }, function(a, b, c, d, e) {
        b = ib(b, d, c);
        if (null != b) for(d = 0; d < b.length; d++){
            var g = a;
            S(g.g, 8 * c + 2);
            var f = g.g.end();
            T(g, f);
            f.push(g.h);
            g = f;
            e(b[d], a);
            f = a;
            var h = g.pop();
            for(h = f.h + f.g.length() - h; 127 < h;)g.push(h & 127 | 128), h >>>= 7, f.h++;
            g.push(h);
            f.h++;
        }
    });
    function Z() {
        ub.apply(this, arguments);
    }
    E(Z, ub);
    if (fb) {
        var ac = {};
        Object.defineProperties(Z, (ac[Symbol.hasInstance] = gb(Object[Symbol.hasInstance]), ac));
    }
    function bc(a) {
        Z.call(this, a);
    }
    E(bc, Z);
    function cc() {
        return [
            1,
            Yb,
            2,
            Y,
            3,
            Zb,
            4,
            Zb
        ];
    }
    function dc(a) {
        Z.call(this, a, -1, ec);
    }
    E(dc, Z);
    dc.prototype.addClassification = function(a, b) {
        jb(this, 1, bc, a, b);
        return this;
    };
    function fc() {
        return [
            1,
            $b,
            bc,
            cc
        ];
    }
    var ec = [
        1
    ];
    function gc(a) {
        Z.call(this, a);
    }
    E(gc, Z);
    function hc() {
        return [
            1,
            Y,
            2,
            Y,
            3,
            Y,
            4,
            Y,
            5,
            Y
        ];
    }
    function ic(a) {
        Z.call(this, a, -1, jc);
    }
    E(ic, Z);
    function kc() {
        return [
            1,
            $b,
            gc,
            hc
        ];
    }
    var jc = [
        1
    ];
    function lc(a) {
        Z.call(this, a);
    }
    E(lc, Z);
    function mc() {
        return [
            1,
            Y,
            2,
            Y,
            3,
            Y,
            4,
            Y,
            5,
            Y,
            6,
            Xb
        ];
    }
    var nc = [
        [
            61,
            146
        ],
        [
            146,
            91
        ],
        [
            91,
            181
        ],
        [
            181,
            84
        ],
        [
            84,
            17
        ],
        [
            17,
            314
        ],
        [
            314,
            405
        ],
        [
            405,
            321
        ],
        [
            321,
            375
        ],
        [
            375,
            291
        ],
        [
            61,
            185
        ],
        [
            185,
            40
        ],
        [
            40,
            39
        ],
        [
            39,
            37
        ],
        [
            37,
            0
        ],
        [
            0,
            267
        ],
        [
            267,
            269
        ],
        [
            269,
            270
        ],
        [
            270,
            409
        ],
        [
            409,
            291
        ],
        [
            78,
            95
        ],
        [
            95,
            88
        ],
        [
            88,
            178
        ],
        [
            178,
            87
        ],
        [
            87,
            14
        ],
        [
            14,
            317
        ],
        [
            317,
            402
        ],
        [
            402,
            318
        ],
        [
            318,
            324
        ],
        [
            324,
            308
        ],
        [
            78,
            191
        ],
        [
            191,
            80
        ],
        [
            80,
            81
        ],
        [
            81,
            82
        ],
        [
            82,
            13
        ],
        [
            13,
            312
        ],
        [
            312,
            311
        ],
        [
            311,
            310
        ],
        [
            310,
            415
        ],
        [
            415,
            308
        ]
    ], oc = [
        [
            263,
            249
        ],
        [
            249,
            390
        ],
        [
            390,
            373
        ],
        [
            373,
            374
        ],
        [
            374,
            380
        ],
        [
            380,
            381
        ],
        [
            381,
            382
        ],
        [
            382,
            362
        ],
        [
            263,
            466
        ],
        [
            466,
            388
        ],
        [
            388,
            387
        ],
        [
            387,
            386
        ],
        [
            386,
            385
        ],
        [
            385,
            384
        ],
        [
            384,
            398
        ],
        [
            398,
            362
        ]
    ], pc = [
        [
            276,
            283
        ],
        [
            283,
            282
        ],
        [
            282,
            295
        ],
        [
            295,
            285
        ],
        [
            300,
            293
        ],
        [
            293,
            334
        ],
        [
            334,
            296
        ],
        [
            296,
            336
        ]
    ], qc = [
        [
            33,
            7
        ],
        [
            7,
            163
        ],
        [
            163,
            144
        ],
        [
            144,
            145
        ],
        [
            145,
            153
        ],
        [
            153,
            154
        ],
        [
            154,
            155
        ],
        [
            155,
            133
        ],
        [
            33,
            246
        ],
        [
            246,
            161
        ],
        [
            161,
            160
        ],
        [
            160,
            159
        ],
        [
            159,
            158
        ],
        [
            158,
            157
        ],
        [
            157,
            173
        ],
        [
            173,
            133
        ]
    ], rc = [
        [
            46,
            53
        ],
        [
            53,
            52
        ],
        [
            52,
            65
        ],
        [
            65,
            55
        ],
        [
            70,
            63
        ],
        [
            63,
            105
        ],
        [
            105,
            66
        ],
        [
            66,
            107
        ]
    ], sc = [
        [
            10,
            338
        ],
        [
            338,
            297
        ],
        [
            297,
            332
        ],
        [
            332,
            284
        ],
        [
            284,
            251
        ],
        [
            251,
            389
        ],
        [
            389,
            356
        ],
        [
            356,
            454
        ],
        [
            454,
            323
        ],
        [
            323,
            361
        ],
        [
            361,
            288
        ],
        [
            288,
            397
        ],
        [
            397,
            365
        ],
        [
            365,
            379
        ],
        [
            379,
            378
        ],
        [
            378,
            400
        ],
        [
            400,
            377
        ],
        [
            377,
            152
        ],
        [
            152,
            148
        ],
        [
            148,
            176
        ],
        [
            176,
            149
        ],
        [
            149,
            150
        ],
        [
            150,
            136
        ],
        [
            136,
            172
        ],
        [
            172,
            58
        ],
        [
            58,
            132
        ],
        [
            132,
            93
        ],
        [
            93,
            234
        ],
        [
            234,
            127
        ],
        [
            127,
            162
        ],
        [
            162,
            21
        ],
        [
            21,
            54
        ],
        [
            54,
            103
        ],
        [
            103,
            67
        ],
        [
            67,
            109
        ],
        [
            109,
            10
        ]
    ], tc = [].concat(D(nc), D(oc), D(pc), D(qc), D(rc), D(sc));
    function uc(a, b, c) {
        c = a.createShader(0 === c ? a.VERTEX_SHADER : a.FRAGMENT_SHADER);
        a.shaderSource(c, b);
        a.compileShader(c);
        if (!a.getShaderParameter(c, a.COMPILE_STATUS)) throw Error("Could not compile WebGL shader.\n\n" + a.getShaderInfoLog(c));
        return c;
    }
    function vc(a) {
        return ib(a, bc, 1).map(function(b) {
            return {
                index: kb(b, 1),
                ga: X(b, 2),
                label: null != V(b, 3) ? lb(b, 3) : void 0,
                displayName: null != V(b, 4) ? lb(b, 4) : void 0
            };
        });
    }
    function wc(a) {
        return {
            x: X(a, 1),
            y: X(a, 2),
            z: X(a, 3),
            visibility: null != V(a, 4) ? X(a, 4) : void 0
        };
    }
    function xc(a, b) {
        this.h = a;
        this.g = b;
        this.l = 0;
    }
    function yc(a, b, c) {
        zc(a, b);
        if ("function" === typeof a.g.canvas.transferToImageBitmap) return Promise.resolve(a.g.canvas.transferToImageBitmap());
        if (c) return Promise.resolve(a.g.canvas);
        if ("function" === typeof createImageBitmap) return createImageBitmap(a.g.canvas);
        void 0 === a.i && (a.i = document.createElement("canvas"));
        return new Promise(function(d) {
            a.i.height = a.g.canvas.height;
            a.i.width = a.g.canvas.width;
            a.i.getContext("2d", {}).drawImage(a.g.canvas, 0, 0, a.g.canvas.width, a.g.canvas.height);
            d(a.i);
        });
    }
    function zc(a, b) {
        var c = a.g;
        if (void 0 === a.o) {
            var d = uc(c, "\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }", 0), e = uc(c, "\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }", 1), g = c.createProgram();
            c.attachShader(g, d);
            c.attachShader(g, e);
            c.linkProgram(g);
            if (!c.getProgramParameter(g, c.LINK_STATUS)) throw Error("Could not compile WebGL program.\n\n" + c.getProgramInfoLog(g));
            d = a.o = g;
            c.useProgram(d);
            e = c.getUniformLocation(d, "sampler0");
            a.j = {
                K: c.getAttribLocation(d, "aVertex"),
                J: c.getAttribLocation(d, "aTex"),
                ma: e
            };
            a.u = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, a.u);
            c.enableVertexAttribArray(a.j.K);
            c.vertexAttribPointer(a.j.K, 2, c.FLOAT, !1, 0, 0);
            c.bufferData(c.ARRAY_BUFFER, new Float32Array([
                -1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1
            ]), c.STATIC_DRAW);
            c.bindBuffer(c.ARRAY_BUFFER, null);
            a.s = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, a.s);
            c.enableVertexAttribArray(a.j.J);
            c.vertexAttribPointer(a.j.J, 2, c.FLOAT, !1, 0, 0);
            c.bufferData(c.ARRAY_BUFFER, new Float32Array([
                0,
                1,
                0,
                0,
                1,
                0,
                1,
                1
            ]), c.STATIC_DRAW);
            c.bindBuffer(c.ARRAY_BUFFER, null);
            c.uniform1i(e, 0);
        }
        d = a.j;
        c.useProgram(a.o);
        c.canvas.width = b.width;
        c.canvas.height = b.height;
        c.viewport(0, 0, b.width, b.height);
        c.activeTexture(c.TEXTURE0);
        a.h.bindTexture2d(b.glName);
        c.enableVertexAttribArray(d.K);
        c.bindBuffer(c.ARRAY_BUFFER, a.u);
        c.vertexAttribPointer(d.K, 2, c.FLOAT, !1, 0, 0);
        c.enableVertexAttribArray(d.J);
        c.bindBuffer(c.ARRAY_BUFFER, a.s);
        c.vertexAttribPointer(d.J, 2, c.FLOAT, !1, 0, 0);
        c.bindFramebuffer(c.DRAW_FRAMEBUFFER ? c.DRAW_FRAMEBUFFER : c.FRAMEBUFFER, null);
        c.clearColor(0, 0, 0, 0);
        c.clear(c.COLOR_BUFFER_BIT);
        c.colorMask(!0, !0, !0, !0);
        c.drawArrays(c.TRIANGLE_FAN, 0, 4);
        c.disableVertexAttribArray(d.K);
        c.disableVertexAttribArray(d.J);
        c.bindBuffer(c.ARRAY_BUFFER, null);
        a.h.bindTexture2d(0);
    }
    function Ac(a) {
        this.g = a;
    }
    var Bc = new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        4,
        1,
        96,
        0,
        0,
        3,
        2,
        1,
        0,
        10,
        9,
        1,
        7,
        0,
        65,
        0,
        253,
        15,
        26,
        11
    ]);
    function Cc(a, b) {
        return b + a;
    }
    function Dc(a, b) {
        window[a] = b;
    }
    function Ec(a) {
        var b = document.createElement("script");
        b.setAttribute("src", a);
        b.setAttribute("crossorigin", "anonymous");
        return new Promise(function(c) {
            b.addEventListener("load", function() {
                c();
            }, !1);
            b.addEventListener("error", function() {
                c();
            }, !1);
            document.body.appendChild(b);
        });
    }
    function Fc() {
        return J(function(a) {
            switch(a.g){
                case 1:
                    return a.o = 2, G(a, WebAssembly.instantiate(Bc), 4);
                case 4:
                    a.g = 3;
                    a.o = 0;
                    break;
                case 2:
                    return a.o = 0, a.j = null, a.return(!1);
                case 3:
                    return a.return(!0);
            }
        });
    }
    function Gc(a) {
        this.g = a;
        this.listeners = {};
        this.j = {};
        this.H = {};
        this.o = {};
        this.u = {};
        this.I = this.s = this.Z = !0;
        this.D = Promise.resolve();
        this.Y = "";
        this.C = {};
        this.locateFile = a && a.locateFile || Cc;
        if ("object" === typeof window) var b = window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/";
        else if ("undefined" !== typeof location) b = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/";
        else throw Error("solutions can only be loaded on a web page or in a web worker");
        this.$ = b;
        if (a.options) {
            b = C(Object.keys(a.options));
            for(var c = b.next(); !c.done; c = b.next()){
                c = c.value;
                var d = a.options[c].default;
                void 0 !== d && (this.j[c] = "function" === typeof d ? d() : d);
            }
        }
    }
    x = Gc.prototype;
    x.close = function() {
        this.i && this.i.delete();
        return Promise.resolve();
    };
    function Hc(a) {
        var b, c, d, e, g, f, h, k, l, m, q;
        return J(function(p) {
            switch(p.g){
                case 1:
                    if (!a.Z) return p.return();
                    b = void 0 === a.g.files ? [] : "function" === typeof a.g.files ? a.g.files(a.j) : a.g.files;
                    return G(p, Fc(), 2);
                case 2:
                    c = p.h;
                    if ("object" === typeof window) return Dc("createMediapipeSolutionsWasm", {
                        locateFile: a.locateFile
                    }), Dc("createMediapipeSolutionsPackedAssets", {
                        locateFile: a.locateFile
                    }), f = b.filter(function(n) {
                        return void 0 !== n.data;
                    }), h = b.filter(function(n) {
                        return void 0 === n.data;
                    }), k = Promise.all(f.map(function(n) {
                        var r = Ic(a, n.url);
                        if (void 0 !== n.path) {
                            var t = n.path;
                            r = r.then(function(w) {
                                a.overrideFile(t, w);
                                return Promise.resolve(w);
                            });
                        }
                        return r;
                    })), l = Promise.all(h.map(function(n) {
                        return void 0 === n.simd || n.simd && c || !n.simd && !c ? Ec(a.locateFile(n.url, a.$)) : Promise.resolve();
                    })).then(function() {
                        var n, r, t;
                        return J(function(w) {
                            if (1 == w.g) return n = window.createMediapipeSolutionsWasm, r = window.createMediapipeSolutionsPackedAssets, t = a, G(w, n(r), 2);
                            t.h = w.h;
                            w.g = 0;
                        });
                    }), m = function() {
                        return J(function(n) {
                            a.g.graph && a.g.graph.url ? n = G(n, Ic(a, a.g.graph.url), 0) : (n.g = 0, n = void 0);
                            return n;
                        });
                    }(), G(p, Promise.all([
                        l,
                        k,
                        m
                    ]), 7);
                    if ("function" !== typeof importScripts) throw Error("solutions can only be loaded on a web page or in a web worker");
                    d = b.filter(function(n) {
                        return void 0 === n.simd || n.simd && c || !n.simd && !c;
                    }).map(function(n) {
                        return a.locateFile(n.url, a.$);
                    });
                    importScripts.apply(null, D(d));
                    e = a;
                    return G(p, createMediapipeSolutionsWasm(Module), 6);
                case 6:
                    e.h = p.h;
                    a.l = new OffscreenCanvas(1, 1);
                    a.h.canvas = a.l;
                    g = a.h.GL.createContext(a.l, {
                        antialias: !1,
                        alpha: !1,
                        ja: "undefined" !== typeof WebGL2RenderingContext ? 2 : 1
                    });
                    a.h.GL.makeContextCurrent(g);
                    p.g = 4;
                    break;
                case 7:
                    a.l = document.createElement("canvas");
                    q = a.l.getContext("webgl2", {});
                    if (!q && (q = a.l.getContext("webgl", {}), !q)) return alert("Failed to create WebGL canvas context when passing video frame."), p.return();
                    a.G = q;
                    a.h.canvas = a.l;
                    a.h.createContext(a.l, !0, !0, {});
                case 4:
                    a.i = new a.h.SolutionWasm, a.Z = !1, p.g = 0;
            }
        });
    }
    function Jc(a) {
        var b, c, d, e, g, f, h, k;
        return J(function(l) {
            if (1 == l.g) {
                if (a.g.graph && a.g.graph.url && a.Y === a.g.graph.url) return l.return();
                a.s = !0;
                if (!a.g.graph || !a.g.graph.url) {
                    l.g = 2;
                    return;
                }
                a.Y = a.g.graph.url;
                return G(l, Ic(a, a.g.graph.url), 3);
            }
            2 != l.g && (b = l.h, a.i.loadGraph(b));
            c = C(Object.keys(a.C));
            for(d = c.next(); !d.done; d = c.next())e = d.value, a.i.overrideFile(e, a.C[e]);
            a.C = {};
            if (a.g.listeners) for(g = C(a.g.listeners), f = g.next(); !f.done; f = g.next())h = f.value, Kc(a, h);
            k = a.j;
            a.j = {};
            a.setOptions(k);
            l.g = 0;
        });
    }
    x.reset = function() {
        var a = this;
        return J(function(b) {
            a.i && (a.i.reset(), a.o = {}, a.u = {});
            b.g = 0;
        });
    };
    x.setOptions = function(a, b) {
        var c = this;
        if (b = b || this.g.options) {
            for(var d = [], e = [], g = {}, f = C(Object.keys(a)), h = f.next(); !h.done; g = {
                R: g.R,
                S: g.S
            }, h = f.next()){
                var k = h.value;
                k in this.j && this.j[k] === a[k] || (this.j[k] = a[k], h = b[k], void 0 !== h && (h.onChange && (g.R = h.onChange, g.S = a[k], d.push(function(l) {
                    return function() {
                        var m;
                        return J(function(q) {
                            if (1 == q.g) return G(q, l.R(l.S), 2);
                            m = q.h;
                            !0 === m && (c.s = !0);
                            q.g = 0;
                        });
                    };
                }(g))), h.graphOptionXref && (k = {
                    valueNumber: 1 === h.type ? a[k] : 0,
                    valueBoolean: 0 === h.type ? a[k] : !1,
                    valueString: 2 === h.type ? a[k] : ""
                }, h = Object.assign(Object.assign(Object.assign({}, {
                    calculatorName: "",
                    calculatorIndex: 0
                }), h.graphOptionXref), k), e.push(h))));
            }
            if (0 !== d.length || 0 !== e.length) this.s = !0, this.B = (void 0 === this.B ? [] : this.B).concat(e), this.A = (void 0 === this.A ? [] : this.A).concat(d);
        }
    };
    function Lc(a) {
        var b, c, d, e, g, f, h;
        return J(function(k) {
            switch(k.g){
                case 1:
                    if (!a.s) return k.return();
                    if (!a.A) {
                        k.g = 2;
                        break;
                    }
                    b = C(a.A);
                    c = b.next();
                case 3:
                    if (c.done) {
                        k.g = 5;
                        break;
                    }
                    d = c.value;
                    return G(k, d(), 4);
                case 4:
                    c = b.next();
                    k.g = 3;
                    break;
                case 5:
                    a.A = void 0;
                case 2:
                    if (a.B) {
                        e = new a.h.GraphOptionChangeRequestList;
                        g = C(a.B);
                        for(f = g.next(); !f.done; f = g.next())h = f.value, e.push_back(h);
                        a.i.changeOptions(e);
                        e.delete();
                        a.B = void 0;
                    }
                    a.s = !1;
                    k.g = 0;
            }
        });
    }
    x.initialize = function() {
        var a = this;
        return J(function(b) {
            return 1 == b.g ? G(b, Hc(a), 2) : 3 != b.g ? G(b, Jc(a), 3) : G(b, Lc(a), 0);
        });
    };
    function Ic(a, b) {
        var c, d;
        return J(function(e) {
            if (b in a.H) return e.return(a.H[b]);
            c = a.locateFile(b, "");
            d = fetch(c).then(function(g) {
                return g.arrayBuffer();
            });
            a.H[b] = d;
            return e.return(d);
        });
    }
    x.overrideFile = function(a, b) {
        this.i ? this.i.overrideFile(a, b) : this.C[a] = b;
    };
    x.clearOverriddenFiles = function() {
        this.C = {};
        this.i && this.i.clearOverriddenFiles();
    };
    x.send = function(a, b) {
        var c = this, d, e, g, f, h, k, l, m, q;
        return J(function(p) {
            switch(p.g){
                case 1:
                    if (!c.g.inputs) return p.return();
                    d = 1E3 * (void 0 === b || null === b ? performance.now() : b);
                    return G(p, c.D, 2);
                case 2:
                    return G(p, c.initialize(), 3);
                case 3:
                    e = new c.h.PacketDataList;
                    g = C(Object.keys(a));
                    for(f = g.next(); !f.done; f = g.next())if (h = f.value, k = c.g.inputs[h]) {
                        a: {
                            var n = a[h];
                            switch(k.type){
                                case "video":
                                    var r = c.o[k.stream];
                                    r || (r = new xc(c.h, c.G), c.o[k.stream] = r);
                                    0 === r.l && (r.l = r.h.createTexture());
                                    if ("undefined" !== typeof HTMLVideoElement && n instanceof HTMLVideoElement) {
                                        var t = n.videoWidth;
                                        var w = n.videoHeight;
                                    } else "undefined" !== typeof HTMLImageElement && n instanceof HTMLImageElement ? (t = n.naturalWidth, w = n.naturalHeight) : (t = n.width, w = n.height);
                                    w = {
                                        glName: r.l,
                                        width: t,
                                        height: w
                                    };
                                    t = r.g;
                                    t.canvas.width = w.width;
                                    t.canvas.height = w.height;
                                    t.activeTexture(t.TEXTURE0);
                                    r.h.bindTexture2d(r.l);
                                    t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, n);
                                    r.h.bindTexture2d(0);
                                    r = w;
                                    break a;
                                case "detections":
                                    r = c.o[k.stream];
                                    r || (r = new Ac(c.h), c.o[k.stream] = r);
                                    r.data || (r.data = new r.g.DetectionListData);
                                    r.data.reset(n.length);
                                    for(w = 0; w < n.length; ++w){
                                        t = n[w];
                                        var v = r.data, A = v.setBoundingBox, I = w;
                                        var F = t.boundingBox;
                                        var u = new lc;
                                        W(u, 1, F.xCenter);
                                        W(u, 2, F.yCenter);
                                        W(u, 3, F.height);
                                        W(u, 4, F.width);
                                        W(u, 5, F.rotation);
                                        W(u, 6, F.rectId);
                                        F = Vb(u, mc);
                                        A.call(v, I, F);
                                        if (t.landmarks) for(v = 0; v < t.landmarks.length; ++v){
                                            u = t.landmarks[v];
                                            var z = u.visibility ? !0 : !1;
                                            A = r.data;
                                            I = A.addNormalizedLandmark;
                                            F = w;
                                            u = Object.assign(Object.assign({}, u), {
                                                visibility: z ? u.visibility : 0
                                            });
                                            z = new gc;
                                            W(z, 1, u.x);
                                            W(z, 2, u.y);
                                            W(z, 3, u.z);
                                            u.visibility && W(z, 4, u.visibility);
                                            u = Vb(z, hc);
                                            I.call(A, F, u);
                                        }
                                        if (t.V) for(v = 0; v < t.V.length; ++v)A = r.data, I = A.addClassification, F = w, u = t.V[v], z = new bc, W(z, 2, u.ga), u.index && W(z, 1, u.index), u.label && W(z, 3, u.label), u.displayName && W(z, 4, u.displayName), u = Vb(z, cc), I.call(A, F, u);
                                    }
                                    r = r.data;
                                    break a;
                                default:
                                    r = {};
                            }
                        }
                        l = r;
                        m = k.stream;
                        switch(k.type){
                            case "video":
                                e.pushTexture2d(Object.assign(Object.assign({}, l), {
                                    stream: m,
                                    timestamp: d
                                }));
                                break;
                            case "detections":
                                q = l;
                                q.stream = m;
                                q.timestamp = d;
                                e.pushDetectionList(q);
                                break;
                            default:
                                throw Error("Unknown input config type: '" + k.type + "'");
                        }
                    }
                    c.i.send(e);
                    return G(p, c.D, 4);
                case 4:
                    e.delete(), p.g = 0;
            }
        });
    };
    function Mc(a, b, c) {
        var d, e, g, f, h, k, l, m, q, p, n, r, t, w;
        return J(function(v) {
            switch(v.g){
                case 1:
                    if (!c) return v.return(b);
                    d = {};
                    e = 0;
                    g = C(Object.keys(c));
                    for(f = g.next(); !f.done; f = g.next())h = f.value, k = c[h], "string" !== typeof k && "texture" === k.type && void 0 !== b[k.stream] && ++e;
                    1 < e && (a.I = !1);
                    l = C(Object.keys(c));
                    f = l.next();
                case 2:
                    if (f.done) {
                        v.g = 4;
                        break;
                    }
                    m = f.value;
                    q = c[m];
                    if ("string" === typeof q) return t = d, w = m, G(v, Nc(a, m, b[q]), 14);
                    p = b[q.stream];
                    if ("detection_list" === q.type) {
                        if (p) {
                            var A = p.getRectList();
                            for(var I = p.getLandmarksList(), F = p.getClassificationsList(), u = [], z = 0; z < A.size(); ++z){
                                var R = Ub(A.get(z), lc, mc);
                                R = {
                                    boundingBox: {
                                        xCenter: X(R, 1),
                                        yCenter: X(R, 2),
                                        height: X(R, 3),
                                        width: X(R, 4),
                                        rotation: X(R, 5, 0),
                                        rectId: kb(R, 6)
                                    },
                                    landmarks: ib(Ub(I.get(z), ic, kc), gc, 1).map(wc),
                                    V: vc(Ub(F.get(z), dc, fc))
                                };
                                u.push(R);
                            }
                            A = u;
                        } else A = [];
                        d[m] = A;
                        v.g = 7;
                        break;
                    }
                    if ("proto_list" === q.type) {
                        if (p) {
                            A = Array(p.size());
                            for(I = 0; I < p.size(); I++)A[I] = p.get(I);
                            p.delete();
                        } else A = [];
                        d[m] = A;
                        v.g = 7;
                        break;
                    }
                    if (void 0 === p) {
                        v.g = 3;
                        break;
                    }
                    if ("float_list" === q.type) {
                        d[m] = p;
                        v.g = 7;
                        break;
                    }
                    if ("proto" === q.type) {
                        d[m] = p;
                        v.g = 7;
                        break;
                    }
                    if ("texture" !== q.type) throw Error("Unknown output config type: '" + q.type + "'");
                    n = a.u[m];
                    n || (n = new xc(a.h, a.G), a.u[m] = n);
                    return G(v, yc(n, p, a.I), 13);
                case 13:
                    r = v.h, d[m] = r;
                case 7:
                    q.transform && d[m] && (d[m] = q.transform(d[m]));
                    v.g = 3;
                    break;
                case 14:
                    t[w] = v.h;
                case 3:
                    f = l.next();
                    v.g = 2;
                    break;
                case 4:
                    return v.return(d);
            }
        });
    }
    function Nc(a, b, c) {
        var d;
        return J(function(e) {
            return "number" === typeof c || c instanceof Uint8Array || c instanceof a.h.Uint8BlobList ? e.return(c) : c instanceof a.h.Texture2dDataOut ? (d = a.u[b], d || (d = new xc(a.h, a.G), a.u[b] = d), e.return(yc(d, c, a.I))) : e.return(void 0);
        });
    }
    function Kc(a, b) {
        for(var c = b.name || "$", d = [].concat(D(b.wants)), e = new a.h.StringList, g = C(b.wants), f = g.next(); !f.done; f = g.next())e.push_back(f.value);
        g = a.h.PacketListener.implement({
            onResults: function(h) {
                for(var k = {}, l = 0; l < b.wants.length; ++l)k[d[l]] = h.get(l);
                var m = a.listeners[c];
                m && (a.D = Mc(a, k, b.outs).then(function(q) {
                    q = m(q);
                    for(var p = 0; p < b.wants.length; ++p){
                        var n = k[d[p]];
                        "object" === typeof n && n.hasOwnProperty && n.hasOwnProperty("delete") && n.delete();
                    }
                    q && (a.D = q);
                }));
            }
        });
        a.i.attachMultiListener(e, g);
        e.delete();
    }
    x.onResults = function(a, b) {
        this.listeners[b || "$"] = a;
    };
    K("Solution", Gc);
    K("OptionType", {
        BOOL: 0,
        NUMBER: 1,
        ia: 2,
        0: "BOOL",
        1: "NUMBER",
        2: "STRING"
    });
    function Oc(a) {
        var b = this;
        a = a || {};
        var c = {
            url: "face_detection_short.binarypb"
        }, d = {
            type: 1,
            graphOptionXref: {
                calculatorType: "TensorsToDetectionsCalculator",
                calculatorName: "facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator",
                fieldName: "min_score_thresh"
            }
        };
        this.g = new Gc({
            locateFile: a.locateFile,
            files: [
                {
                    data: !0,
                    url: "face_detection_short.binarypb"
                },
                {
                    data: !0,
                    url: "face_detection_short_range.tflite"
                },
                {
                    simd: !0,
                    url: "face_detection_solution_simd_wasm_bin.js"
                },
                {
                    simd: !1,
                    url: "face_detection_solution_wasm_bin.js"
                }
            ],
            graph: c,
            listeners: [
                {
                    wants: [
                        "detections",
                        "image_transformed"
                    ],
                    outs: {
                        image: "image_transformed",
                        detections: {
                            type: "detection_list",
                            stream: "detections"
                        }
                    }
                }
            ],
            inputs: {
                image: {
                    type: "video",
                    stream: "input_frames_gpu"
                }
            },
            options: {
                useCpuInference: {
                    type: 0,
                    graphOptionXref: {
                        calculatorType: "InferenceCalculator",
                        fieldName: "use_cpu_inference"
                    },
                    default: "object" !== typeof window || void 0 === window.navigator ? !1 : "iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document
                },
                selfieMode: {
                    type: 0,
                    graphOptionXref: {
                        calculatorType: "GlScalerCalculator",
                        calculatorIndex: 1,
                        fieldName: "flip_horizontal"
                    }
                },
                model: {
                    type: 0,
                    onChange: function(e) {
                        var g, f, h, k, l, m;
                        return J(function(q) {
                            switch(q.g){
                                case 1:
                                    g = "short" === e ? [
                                        "face_detection_short_range.tflite"
                                    ] : [
                                        "face_detection_full_range_sparse.tflite"
                                    ], f = C(g), h = f.next();
                                case 2:
                                    if (h.done) {
                                        q.g = 4;
                                        break;
                                    }
                                    k = h.value;
                                    l = "third_party/mediapipe/modules/face_detection/" + k;
                                    return G(q, Ic(b.g, k), 5);
                                case 5:
                                    m = q.h;
                                    b.g.overrideFile(l, m);
                                    h = f.next();
                                    q.g = 2;
                                    break;
                                case 4:
                                    return c.url = "short" === e ? "face_detection_short.binarypb" : "face_detection_full.binarypb", d.graphOptionXref.calculatorName = "short" === e ? "facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator" : "facedetectionfullrangegpu__facedetectionfullrangecommon__TensorsToDetectionsCalculator", q.return(!0);
                            }
                        });
                    }
                },
                minDetectionConfidence: d
            }
        });
    }
    x = Oc.prototype;
    x.close = function() {
        this.g.close();
        return Promise.resolve();
    };
    x.onResults = function(a) {
        this.g.onResults(a);
    };
    x.initialize = function() {
        var a = this;
        return J(function(b) {
            return G(b, a.g.initialize(), 0);
        });
    };
    x.reset = function() {
        this.g.reset();
    };
    x.send = function(a) {
        var b = this;
        return J(function(c) {
            return G(c, b.g.send(a), 0);
        });
    };
    x.setOptions = function(a) {
        this.g.setOptions(a);
    };
    K("FaceDetection", Oc);
    K("FACEDETECTION_LIPS", nc);
    K("FACEDETECTION_LEFT_EYE", oc);
    K("FACEDETECTION_LEFT_EYEBROW", pc);
    K("FACEDETECTION_RIGHT_EYE", qc);
    K("FACEDETECTION_RIGHT_EYEBROW", rc);
    K("FACEDETECTION_FACE_OVAL", sc);
    K("FACEDETECTION_CONTOURS", tc);
    K("FACEDETECTION_TESSELATION", [
        [
            127,
            34
        ],
        [
            34,
            139
        ],
        [
            139,
            127
        ],
        [
            11,
            0
        ],
        [
            0,
            37
        ],
        [
            37,
            11
        ],
        [
            232,
            231
        ],
        [
            231,
            120
        ],
        [
            120,
            232
        ],
        [
            72,
            37
        ],
        [
            37,
            39
        ],
        [
            39,
            72
        ],
        [
            128,
            121
        ],
        [
            121,
            47
        ],
        [
            47,
            128
        ],
        [
            232,
            121
        ],
        [
            121,
            128
        ],
        [
            128,
            232
        ],
        [
            104,
            69
        ],
        [
            69,
            67
        ],
        [
            67,
            104
        ],
        [
            175,
            171
        ],
        [
            171,
            148
        ],
        [
            148,
            175
        ],
        [
            118,
            50
        ],
        [
            50,
            101
        ],
        [
            101,
            118
        ],
        [
            73,
            39
        ],
        [
            39,
            40
        ],
        [
            40,
            73
        ],
        [
            9,
            151
        ],
        [
            151,
            108
        ],
        [
            108,
            9
        ],
        [
            48,
            115
        ],
        [
            115,
            131
        ],
        [
            131,
            48
        ],
        [
            194,
            204
        ],
        [
            204,
            211
        ],
        [
            211,
            194
        ],
        [
            74,
            40
        ],
        [
            40,
            185
        ],
        [
            185,
            74
        ],
        [
            80,
            42
        ],
        [
            42,
            183
        ],
        [
            183,
            80
        ],
        [
            40,
            92
        ],
        [
            92,
            186
        ],
        [
            186,
            40
        ],
        [
            230,
            229
        ],
        [
            229,
            118
        ],
        [
            118,
            230
        ],
        [
            202,
            212
        ],
        [
            212,
            214
        ],
        [
            214,
            202
        ],
        [
            83,
            18
        ],
        [
            18,
            17
        ],
        [
            17,
            83
        ],
        [
            76,
            61
        ],
        [
            61,
            146
        ],
        [
            146,
            76
        ],
        [
            160,
            29
        ],
        [
            29,
            30
        ],
        [
            30,
            160
        ],
        [
            56,
            157
        ],
        [
            157,
            173
        ],
        [
            173,
            56
        ],
        [
            106,
            204
        ],
        [
            204,
            194
        ],
        [
            194,
            106
        ],
        [
            135,
            214
        ],
        [
            214,
            192
        ],
        [
            192,
            135
        ],
        [
            203,
            165
        ],
        [
            165,
            98
        ],
        [
            98,
            203
        ],
        [
            21,
            71
        ],
        [
            71,
            68
        ],
        [
            68,
            21
        ],
        [
            51,
            45
        ],
        [
            45,
            4
        ],
        [
            4,
            51
        ],
        [
            144,
            24
        ],
        [
            24,
            23
        ],
        [
            23,
            144
        ],
        [
            77,
            146
        ],
        [
            146,
            91
        ],
        [
            91,
            77
        ],
        [
            205,
            50
        ],
        [
            50,
            187
        ],
        [
            187,
            205
        ],
        [
            201,
            200
        ],
        [
            200,
            18
        ],
        [
            18,
            201
        ],
        [
            91,
            106
        ],
        [
            106,
            182
        ],
        [
            182,
            91
        ],
        [
            90,
            91
        ],
        [
            91,
            181
        ],
        [
            181,
            90
        ],
        [
            85,
            84
        ],
        [
            84,
            17
        ],
        [
            17,
            85
        ],
        [
            206,
            203
        ],
        [
            203,
            36
        ],
        [
            36,
            206
        ],
        [
            148,
            171
        ],
        [
            171,
            140
        ],
        [
            140,
            148
        ],
        [
            92,
            40
        ],
        [
            40,
            39
        ],
        [
            39,
            92
        ],
        [
            193,
            189
        ],
        [
            189,
            244
        ],
        [
            244,
            193
        ],
        [
            159,
            158
        ],
        [
            158,
            28
        ],
        [
            28,
            159
        ],
        [
            247,
            246
        ],
        [
            246,
            161
        ],
        [
            161,
            247
        ],
        [
            236,
            3
        ],
        [
            3,
            196
        ],
        [
            196,
            236
        ],
        [
            54,
            68
        ],
        [
            68,
            104
        ],
        [
            104,
            54
        ],
        [
            193,
            168
        ],
        [
            168,
            8
        ],
        [
            8,
            193
        ],
        [
            117,
            228
        ],
        [
            228,
            31
        ],
        [
            31,
            117
        ],
        [
            189,
            193
        ],
        [
            193,
            55
        ],
        [
            55,
            189
        ],
        [
            98,
            97
        ],
        [
            97,
            99
        ],
        [
            99,
            98
        ],
        [
            126,
            47
        ],
        [
            47,
            100
        ],
        [
            100,
            126
        ],
        [
            166,
            79
        ],
        [
            79,
            218
        ],
        [
            218,
            166
        ],
        [
            155,
            154
        ],
        [
            154,
            26
        ],
        [
            26,
            155
        ],
        [
            209,
            49
        ],
        [
            49,
            131
        ],
        [
            131,
            209
        ],
        [
            135,
            136
        ],
        [
            136,
            150
        ],
        [
            150,
            135
        ],
        [
            47,
            126
        ],
        [
            126,
            217
        ],
        [
            217,
            47
        ],
        [
            223,
            52
        ],
        [
            52,
            53
        ],
        [
            53,
            223
        ],
        [
            45,
            51
        ],
        [
            51,
            134
        ],
        [
            134,
            45
        ],
        [
            211,
            170
        ],
        [
            170,
            140
        ],
        [
            140,
            211
        ],
        [
            67,
            69
        ],
        [
            69,
            108
        ],
        [
            108,
            67
        ],
        [
            43,
            106
        ],
        [
            106,
            91
        ],
        [
            91,
            43
        ],
        [
            230,
            119
        ],
        [
            119,
            120
        ],
        [
            120,
            230
        ],
        [
            226,
            130
        ],
        [
            130,
            247
        ],
        [
            247,
            226
        ],
        [
            63,
            53
        ],
        [
            53,
            52
        ],
        [
            52,
            63
        ],
        [
            238,
            20
        ],
        [
            20,
            242
        ],
        [
            242,
            238
        ],
        [
            46,
            70
        ],
        [
            70,
            156
        ],
        [
            156,
            46
        ],
        [
            78,
            62
        ],
        [
            62,
            96
        ],
        [
            96,
            78
        ],
        [
            46,
            53
        ],
        [
            53,
            63
        ],
        [
            63,
            46
        ],
        [
            143,
            34
        ],
        [
            34,
            227
        ],
        [
            227,
            143
        ],
        [
            123,
            117
        ],
        [
            117,
            111
        ],
        [
            111,
            123
        ],
        [
            44,
            125
        ],
        [
            125,
            19
        ],
        [
            19,
            44
        ],
        [
            236,
            134
        ],
        [
            134,
            51
        ],
        [
            51,
            236
        ],
        [
            216,
            206
        ],
        [
            206,
            205
        ],
        [
            205,
            216
        ],
        [
            154,
            153
        ],
        [
            153,
            22
        ],
        [
            22,
            154
        ],
        [
            39,
            37
        ],
        [
            37,
            167
        ],
        [
            167,
            39
        ],
        [
            200,
            201
        ],
        [
            201,
            208
        ],
        [
            208,
            200
        ],
        [
            36,
            142
        ],
        [
            142,
            100
        ],
        [
            100,
            36
        ],
        [
            57,
            212
        ],
        [
            212,
            202
        ],
        [
            202,
            57
        ],
        [
            20,
            60
        ],
        [
            60,
            99
        ],
        [
            99,
            20
        ],
        [
            28,
            158
        ],
        [
            158,
            157
        ],
        [
            157,
            28
        ],
        [
            35,
            226
        ],
        [
            226,
            113
        ],
        [
            113,
            35
        ],
        [
            160,
            159
        ],
        [
            159,
            27
        ],
        [
            27,
            160
        ],
        [
            204,
            202
        ],
        [
            202,
            210
        ],
        [
            210,
            204
        ],
        [
            113,
            225
        ],
        [
            225,
            46
        ],
        [
            46,
            113
        ],
        [
            43,
            202
        ],
        [
            202,
            204
        ],
        [
            204,
            43
        ],
        [
            62,
            76
        ],
        [
            76,
            77
        ],
        [
            77,
            62
        ],
        [
            137,
            123
        ],
        [
            123,
            116
        ],
        [
            116,
            137
        ],
        [
            41,
            38
        ],
        [
            38,
            72
        ],
        [
            72,
            41
        ],
        [
            203,
            129
        ],
        [
            129,
            142
        ],
        [
            142,
            203
        ],
        [
            64,
            98
        ],
        [
            98,
            240
        ],
        [
            240,
            64
        ],
        [
            49,
            102
        ],
        [
            102,
            64
        ],
        [
            64,
            49
        ],
        [
            41,
            73
        ],
        [
            73,
            74
        ],
        [
            74,
            41
        ],
        [
            212,
            216
        ],
        [
            216,
            207
        ],
        [
            207,
            212
        ],
        [
            42,
            74
        ],
        [
            74,
            184
        ],
        [
            184,
            42
        ],
        [
            169,
            170
        ],
        [
            170,
            211
        ],
        [
            211,
            169
        ],
        [
            170,
            149
        ],
        [
            149,
            176
        ],
        [
            176,
            170
        ],
        [
            105,
            66
        ],
        [
            66,
            69
        ],
        [
            69,
            105
        ],
        [
            122,
            6
        ],
        [
            6,
            168
        ],
        [
            168,
            122
        ],
        [
            123,
            147
        ],
        [
            147,
            187
        ],
        [
            187,
            123
        ],
        [
            96,
            77
        ],
        [
            77,
            90
        ],
        [
            90,
            96
        ],
        [
            65,
            55
        ],
        [
            55,
            107
        ],
        [
            107,
            65
        ],
        [
            89,
            90
        ],
        [
            90,
            180
        ],
        [
            180,
            89
        ],
        [
            101,
            100
        ],
        [
            100,
            120
        ],
        [
            120,
            101
        ],
        [
            63,
            105
        ],
        [
            105,
            104
        ],
        [
            104,
            63
        ],
        [
            93,
            137
        ],
        [
            137,
            227
        ],
        [
            227,
            93
        ],
        [
            15,
            86
        ],
        [
            86,
            85
        ],
        [
            85,
            15
        ],
        [
            129,
            102
        ],
        [
            102,
            49
        ],
        [
            49,
            129
        ],
        [
            14,
            87
        ],
        [
            87,
            86
        ],
        [
            86,
            14
        ],
        [
            55,
            8
        ],
        [
            8,
            9
        ],
        [
            9,
            55
        ],
        [
            100,
            47
        ],
        [
            47,
            121
        ],
        [
            121,
            100
        ],
        [
            145,
            23
        ],
        [
            23,
            22
        ],
        [
            22,
            145
        ],
        [
            88,
            89
        ],
        [
            89,
            179
        ],
        [
            179,
            88
        ],
        [
            6,
            122
        ],
        [
            122,
            196
        ],
        [
            196,
            6
        ],
        [
            88,
            95
        ],
        [
            95,
            96
        ],
        [
            96,
            88
        ],
        [
            138,
            172
        ],
        [
            172,
            136
        ],
        [
            136,
            138
        ],
        [
            215,
            58
        ],
        [
            58,
            172
        ],
        [
            172,
            215
        ],
        [
            115,
            48
        ],
        [
            48,
            219
        ],
        [
            219,
            115
        ],
        [
            42,
            80
        ],
        [
            80,
            81
        ],
        [
            81,
            42
        ],
        [
            195,
            3
        ],
        [
            3,
            51
        ],
        [
            51,
            195
        ],
        [
            43,
            146
        ],
        [
            146,
            61
        ],
        [
            61,
            43
        ],
        [
            171,
            175
        ],
        [
            175,
            199
        ],
        [
            199,
            171
        ],
        [
            81,
            82
        ],
        [
            82,
            38
        ],
        [
            38,
            81
        ],
        [
            53,
            46
        ],
        [
            46,
            225
        ],
        [
            225,
            53
        ],
        [
            144,
            163
        ],
        [
            163,
            110
        ],
        [
            110,
            144
        ],
        [
            52,
            65
        ],
        [
            65,
            66
        ],
        [
            66,
            52
        ],
        [
            229,
            228
        ],
        [
            228,
            117
        ],
        [
            117,
            229
        ],
        [
            34,
            127
        ],
        [
            127,
            234
        ],
        [
            234,
            34
        ],
        [
            107,
            108
        ],
        [
            108,
            69
        ],
        [
            69,
            107
        ],
        [
            109,
            108
        ],
        [
            108,
            151
        ],
        [
            151,
            109
        ],
        [
            48,
            64
        ],
        [
            64,
            235
        ],
        [
            235,
            48
        ],
        [
            62,
            78
        ],
        [
            78,
            191
        ],
        [
            191,
            62
        ],
        [
            129,
            209
        ],
        [
            209,
            126
        ],
        [
            126,
            129
        ],
        [
            111,
            35
        ],
        [
            35,
            143
        ],
        [
            143,
            111
        ],
        [
            117,
            123
        ],
        [
            123,
            50
        ],
        [
            50,
            117
        ],
        [
            222,
            65
        ],
        [
            65,
            52
        ],
        [
            52,
            222
        ],
        [
            19,
            125
        ],
        [
            125,
            141
        ],
        [
            141,
            19
        ],
        [
            221,
            55
        ],
        [
            55,
            65
        ],
        [
            65,
            221
        ],
        [
            3,
            195
        ],
        [
            195,
            197
        ],
        [
            197,
            3
        ],
        [
            25,
            7
        ],
        [
            7,
            33
        ],
        [
            33,
            25
        ],
        [
            220,
            237
        ],
        [
            237,
            44
        ],
        [
            44,
            220
        ],
        [
            70,
            71
        ],
        [
            71,
            139
        ],
        [
            139,
            70
        ],
        [
            122,
            193
        ],
        [
            193,
            245
        ],
        [
            245,
            122
        ],
        [
            247,
            130
        ],
        [
            130,
            33
        ],
        [
            33,
            247
        ],
        [
            71,
            21
        ],
        [
            21,
            162
        ],
        [
            162,
            71
        ],
        [
            170,
            169
        ],
        [
            169,
            150
        ],
        [
            150,
            170
        ],
        [
            188,
            174
        ],
        [
            174,
            196
        ],
        [
            196,
            188
        ],
        [
            216,
            186
        ],
        [
            186,
            92
        ],
        [
            92,
            216
        ],
        [
            2,
            97
        ],
        [
            97,
            167
        ],
        [
            167,
            2
        ],
        [
            141,
            125
        ],
        [
            125,
            241
        ],
        [
            241,
            141
        ],
        [
            164,
            167
        ],
        [
            167,
            37
        ],
        [
            37,
            164
        ],
        [
            72,
            38
        ],
        [
            38,
            12
        ],
        [
            12,
            72
        ],
        [
            38,
            82
        ],
        [
            82,
            13
        ],
        [
            13,
            38
        ],
        [
            63,
            68
        ],
        [
            68,
            71
        ],
        [
            71,
            63
        ],
        [
            226,
            35
        ],
        [
            35,
            111
        ],
        [
            111,
            226
        ],
        [
            101,
            50
        ],
        [
            50,
            205
        ],
        [
            205,
            101
        ],
        [
            206,
            92
        ],
        [
            92,
            165
        ],
        [
            165,
            206
        ],
        [
            209,
            198
        ],
        [
            198,
            217
        ],
        [
            217,
            209
        ],
        [
            165,
            167
        ],
        [
            167,
            97
        ],
        [
            97,
            165
        ],
        [
            220,
            115
        ],
        [
            115,
            218
        ],
        [
            218,
            220
        ],
        [
            133,
            112
        ],
        [
            112,
            243
        ],
        [
            243,
            133
        ],
        [
            239,
            238
        ],
        [
            238,
            241
        ],
        [
            241,
            239
        ],
        [
            214,
            135
        ],
        [
            135,
            169
        ],
        [
            169,
            214
        ],
        [
            190,
            173
        ],
        [
            173,
            133
        ],
        [
            133,
            190
        ],
        [
            171,
            208
        ],
        [
            208,
            32
        ],
        [
            32,
            171
        ],
        [
            125,
            44
        ],
        [
            44,
            237
        ],
        [
            237,
            125
        ],
        [
            86,
            87
        ],
        [
            87,
            178
        ],
        [
            178,
            86
        ],
        [
            85,
            86
        ],
        [
            86,
            179
        ],
        [
            179,
            85
        ],
        [
            84,
            85
        ],
        [
            85,
            180
        ],
        [
            180,
            84
        ],
        [
            83,
            84
        ],
        [
            84,
            181
        ],
        [
            181,
            83
        ],
        [
            201,
            83
        ],
        [
            83,
            182
        ],
        [
            182,
            201
        ],
        [
            137,
            93
        ],
        [
            93,
            132
        ],
        [
            132,
            137
        ],
        [
            76,
            62
        ],
        [
            62,
            183
        ],
        [
            183,
            76
        ],
        [
            61,
            76
        ],
        [
            76,
            184
        ],
        [
            184,
            61
        ],
        [
            57,
            61
        ],
        [
            61,
            185
        ],
        [
            185,
            57
        ],
        [
            212,
            57
        ],
        [
            57,
            186
        ],
        [
            186,
            212
        ],
        [
            214,
            207
        ],
        [
            207,
            187
        ],
        [
            187,
            214
        ],
        [
            34,
            143
        ],
        [
            143,
            156
        ],
        [
            156,
            34
        ],
        [
            79,
            239
        ],
        [
            239,
            237
        ],
        [
            237,
            79
        ],
        [
            123,
            137
        ],
        [
            137,
            177
        ],
        [
            177,
            123
        ],
        [
            44,
            1
        ],
        [
            1,
            4
        ],
        [
            4,
            44
        ],
        [
            201,
            194
        ],
        [
            194,
            32
        ],
        [
            32,
            201
        ],
        [
            64,
            102
        ],
        [
            102,
            129
        ],
        [
            129,
            64
        ],
        [
            213,
            215
        ],
        [
            215,
            138
        ],
        [
            138,
            213
        ],
        [
            59,
            166
        ],
        [
            166,
            219
        ],
        [
            219,
            59
        ],
        [
            242,
            99
        ],
        [
            99,
            97
        ],
        [
            97,
            242
        ],
        [
            2,
            94
        ],
        [
            94,
            141
        ],
        [
            141,
            2
        ],
        [
            75,
            59
        ],
        [
            59,
            235
        ],
        [
            235,
            75
        ],
        [
            24,
            110
        ],
        [
            110,
            228
        ],
        [
            228,
            24
        ],
        [
            25,
            130
        ],
        [
            130,
            226
        ],
        [
            226,
            25
        ],
        [
            23,
            24
        ],
        [
            24,
            229
        ],
        [
            229,
            23
        ],
        [
            22,
            23
        ],
        [
            23,
            230
        ],
        [
            230,
            22
        ],
        [
            26,
            22
        ],
        [
            22,
            231
        ],
        [
            231,
            26
        ],
        [
            112,
            26
        ],
        [
            26,
            232
        ],
        [
            232,
            112
        ],
        [
            189,
            190
        ],
        [
            190,
            243
        ],
        [
            243,
            189
        ],
        [
            221,
            56
        ],
        [
            56,
            190
        ],
        [
            190,
            221
        ],
        [
            28,
            56
        ],
        [
            56,
            221
        ],
        [
            221,
            28
        ],
        [
            27,
            28
        ],
        [
            28,
            222
        ],
        [
            222,
            27
        ],
        [
            29,
            27
        ],
        [
            27,
            223
        ],
        [
            223,
            29
        ],
        [
            30,
            29
        ],
        [
            29,
            224
        ],
        [
            224,
            30
        ],
        [
            247,
            30
        ],
        [
            30,
            225
        ],
        [
            225,
            247
        ],
        [
            238,
            79
        ],
        [
            79,
            20
        ],
        [
            20,
            238
        ],
        [
            166,
            59
        ],
        [
            59,
            75
        ],
        [
            75,
            166
        ],
        [
            60,
            75
        ],
        [
            75,
            240
        ],
        [
            240,
            60
        ],
        [
            147,
            177
        ],
        [
            177,
            215
        ],
        [
            215,
            147
        ],
        [
            20,
            79
        ],
        [
            79,
            166
        ],
        [
            166,
            20
        ],
        [
            187,
            147
        ],
        [
            147,
            213
        ],
        [
            213,
            187
        ],
        [
            112,
            233
        ],
        [
            233,
            244
        ],
        [
            244,
            112
        ],
        [
            233,
            128
        ],
        [
            128,
            245
        ],
        [
            245,
            233
        ],
        [
            128,
            114
        ],
        [
            114,
            188
        ],
        [
            188,
            128
        ],
        [
            114,
            217
        ],
        [
            217,
            174
        ],
        [
            174,
            114
        ],
        [
            131,
            115
        ],
        [
            115,
            220
        ],
        [
            220,
            131
        ],
        [
            217,
            198
        ],
        [
            198,
            236
        ],
        [
            236,
            217
        ],
        [
            198,
            131
        ],
        [
            131,
            134
        ],
        [
            134,
            198
        ],
        [
            177,
            132
        ],
        [
            132,
            58
        ],
        [
            58,
            177
        ],
        [
            143,
            35
        ],
        [
            35,
            124
        ],
        [
            124,
            143
        ],
        [
            110,
            163
        ],
        [
            163,
            7
        ],
        [
            7,
            110
        ],
        [
            228,
            110
        ],
        [
            110,
            25
        ],
        [
            25,
            228
        ],
        [
            356,
            389
        ],
        [
            389,
            368
        ],
        [
            368,
            356
        ],
        [
            11,
            302
        ],
        [
            302,
            267
        ],
        [
            267,
            11
        ],
        [
            452,
            350
        ],
        [
            350,
            349
        ],
        [
            349,
            452
        ],
        [
            302,
            303
        ],
        [
            303,
            269
        ],
        [
            269,
            302
        ],
        [
            357,
            343
        ],
        [
            343,
            277
        ],
        [
            277,
            357
        ],
        [
            452,
            453
        ],
        [
            453,
            357
        ],
        [
            357,
            452
        ],
        [
            333,
            332
        ],
        [
            332,
            297
        ],
        [
            297,
            333
        ],
        [
            175,
            152
        ],
        [
            152,
            377
        ],
        [
            377,
            175
        ],
        [
            347,
            348
        ],
        [
            348,
            330
        ],
        [
            330,
            347
        ],
        [
            303,
            304
        ],
        [
            304,
            270
        ],
        [
            270,
            303
        ],
        [
            9,
            336
        ],
        [
            336,
            337
        ],
        [
            337,
            9
        ],
        [
            278,
            279
        ],
        [
            279,
            360
        ],
        [
            360,
            278
        ],
        [
            418,
            262
        ],
        [
            262,
            431
        ],
        [
            431,
            418
        ],
        [
            304,
            408
        ],
        [
            408,
            409
        ],
        [
            409,
            304
        ],
        [
            310,
            415
        ],
        [
            415,
            407
        ],
        [
            407,
            310
        ],
        [
            270,
            409
        ],
        [
            409,
            410
        ],
        [
            410,
            270
        ],
        [
            450,
            348
        ],
        [
            348,
            347
        ],
        [
            347,
            450
        ],
        [
            422,
            430
        ],
        [
            430,
            434
        ],
        [
            434,
            422
        ],
        [
            313,
            314
        ],
        [
            314,
            17
        ],
        [
            17,
            313
        ],
        [
            306,
            307
        ],
        [
            307,
            375
        ],
        [
            375,
            306
        ],
        [
            387,
            388
        ],
        [
            388,
            260
        ],
        [
            260,
            387
        ],
        [
            286,
            414
        ],
        [
            414,
            398
        ],
        [
            398,
            286
        ],
        [
            335,
            406
        ],
        [
            406,
            418
        ],
        [
            418,
            335
        ],
        [
            364,
            367
        ],
        [
            367,
            416
        ],
        [
            416,
            364
        ],
        [
            423,
            358
        ],
        [
            358,
            327
        ],
        [
            327,
            423
        ],
        [
            251,
            284
        ],
        [
            284,
            298
        ],
        [
            298,
            251
        ],
        [
            281,
            5
        ],
        [
            5,
            4
        ],
        [
            4,
            281
        ],
        [
            373,
            374
        ],
        [
            374,
            253
        ],
        [
            253,
            373
        ],
        [
            307,
            320
        ],
        [
            320,
            321
        ],
        [
            321,
            307
        ],
        [
            425,
            427
        ],
        [
            427,
            411
        ],
        [
            411,
            425
        ],
        [
            421,
            313
        ],
        [
            313,
            18
        ],
        [
            18,
            421
        ],
        [
            321,
            405
        ],
        [
            405,
            406
        ],
        [
            406,
            321
        ],
        [
            320,
            404
        ],
        [
            404,
            405
        ],
        [
            405,
            320
        ],
        [
            315,
            16
        ],
        [
            16,
            17
        ],
        [
            17,
            315
        ],
        [
            426,
            425
        ],
        [
            425,
            266
        ],
        [
            266,
            426
        ],
        [
            377,
            400
        ],
        [
            400,
            369
        ],
        [
            369,
            377
        ],
        [
            322,
            391
        ],
        [
            391,
            269
        ],
        [
            269,
            322
        ],
        [
            417,
            465
        ],
        [
            465,
            464
        ],
        [
            464,
            417
        ],
        [
            386,
            257
        ],
        [
            257,
            258
        ],
        [
            258,
            386
        ],
        [
            466,
            260
        ],
        [
            260,
            388
        ],
        [
            388,
            466
        ],
        [
            456,
            399
        ],
        [
            399,
            419
        ],
        [
            419,
            456
        ],
        [
            284,
            332
        ],
        [
            332,
            333
        ],
        [
            333,
            284
        ],
        [
            417,
            285
        ],
        [
            285,
            8
        ],
        [
            8,
            417
        ],
        [
            346,
            340
        ],
        [
            340,
            261
        ],
        [
            261,
            346
        ],
        [
            413,
            441
        ],
        [
            441,
            285
        ],
        [
            285,
            413
        ],
        [
            327,
            460
        ],
        [
            460,
            328
        ],
        [
            328,
            327
        ],
        [
            355,
            371
        ],
        [
            371,
            329
        ],
        [
            329,
            355
        ],
        [
            392,
            439
        ],
        [
            439,
            438
        ],
        [
            438,
            392
        ],
        [
            382,
            341
        ],
        [
            341,
            256
        ],
        [
            256,
            382
        ],
        [
            429,
            420
        ],
        [
            420,
            360
        ],
        [
            360,
            429
        ],
        [
            364,
            394
        ],
        [
            394,
            379
        ],
        [
            379,
            364
        ],
        [
            277,
            343
        ],
        [
            343,
            437
        ],
        [
            437,
            277
        ],
        [
            443,
            444
        ],
        [
            444,
            283
        ],
        [
            283,
            443
        ],
        [
            275,
            440
        ],
        [
            440,
            363
        ],
        [
            363,
            275
        ],
        [
            431,
            262
        ],
        [
            262,
            369
        ],
        [
            369,
            431
        ],
        [
            297,
            338
        ],
        [
            338,
            337
        ],
        [
            337,
            297
        ],
        [
            273,
            375
        ],
        [
            375,
            321
        ],
        [
            321,
            273
        ],
        [
            450,
            451
        ],
        [
            451,
            349
        ],
        [
            349,
            450
        ],
        [
            446,
            342
        ],
        [
            342,
            467
        ],
        [
            467,
            446
        ],
        [
            293,
            334
        ],
        [
            334,
            282
        ],
        [
            282,
            293
        ],
        [
            458,
            461
        ],
        [
            461,
            462
        ],
        [
            462,
            458
        ],
        [
            276,
            353
        ],
        [
            353,
            383
        ],
        [
            383,
            276
        ],
        [
            308,
            324
        ],
        [
            324,
            325
        ],
        [
            325,
            308
        ],
        [
            276,
            300
        ],
        [
            300,
            293
        ],
        [
            293,
            276
        ],
        [
            372,
            345
        ],
        [
            345,
            447
        ],
        [
            447,
            372
        ],
        [
            352,
            345
        ],
        [
            345,
            340
        ],
        [
            340,
            352
        ],
        [
            274,
            1
        ],
        [
            1,
            19
        ],
        [
            19,
            274
        ],
        [
            456,
            248
        ],
        [
            248,
            281
        ],
        [
            281,
            456
        ],
        [
            436,
            427
        ],
        [
            427,
            425
        ],
        [
            425,
            436
        ],
        [
            381,
            256
        ],
        [
            256,
            252
        ],
        [
            252,
            381
        ],
        [
            269,
            391
        ],
        [
            391,
            393
        ],
        [
            393,
            269
        ],
        [
            200,
            199
        ],
        [
            199,
            428
        ],
        [
            428,
            200
        ],
        [
            266,
            330
        ],
        [
            330,
            329
        ],
        [
            329,
            266
        ],
        [
            287,
            273
        ],
        [
            273,
            422
        ],
        [
            422,
            287
        ],
        [
            250,
            462
        ],
        [
            462,
            328
        ],
        [
            328,
            250
        ],
        [
            258,
            286
        ],
        [
            286,
            384
        ],
        [
            384,
            258
        ],
        [
            265,
            353
        ],
        [
            353,
            342
        ],
        [
            342,
            265
        ],
        [
            387,
            259
        ],
        [
            259,
            257
        ],
        [
            257,
            387
        ],
        [
            424,
            431
        ],
        [
            431,
            430
        ],
        [
            430,
            424
        ],
        [
            342,
            353
        ],
        [
            353,
            276
        ],
        [
            276,
            342
        ],
        [
            273,
            335
        ],
        [
            335,
            424
        ],
        [
            424,
            273
        ],
        [
            292,
            325
        ],
        [
            325,
            307
        ],
        [
            307,
            292
        ],
        [
            366,
            447
        ],
        [
            447,
            345
        ],
        [
            345,
            366
        ],
        [
            271,
            303
        ],
        [
            303,
            302
        ],
        [
            302,
            271
        ],
        [
            423,
            266
        ],
        [
            266,
            371
        ],
        [
            371,
            423
        ],
        [
            294,
            455
        ],
        [
            455,
            460
        ],
        [
            460,
            294
        ],
        [
            279,
            278
        ],
        [
            278,
            294
        ],
        [
            294,
            279
        ],
        [
            271,
            272
        ],
        [
            272,
            304
        ],
        [
            304,
            271
        ],
        [
            432,
            434
        ],
        [
            434,
            427
        ],
        [
            427,
            432
        ],
        [
            272,
            407
        ],
        [
            407,
            408
        ],
        [
            408,
            272
        ],
        [
            394,
            430
        ],
        [
            430,
            431
        ],
        [
            431,
            394
        ],
        [
            395,
            369
        ],
        [
            369,
            400
        ],
        [
            400,
            395
        ],
        [
            334,
            333
        ],
        [
            333,
            299
        ],
        [
            299,
            334
        ],
        [
            351,
            417
        ],
        [
            417,
            168
        ],
        [
            168,
            351
        ],
        [
            352,
            280
        ],
        [
            280,
            411
        ],
        [
            411,
            352
        ],
        [
            325,
            319
        ],
        [
            319,
            320
        ],
        [
            320,
            325
        ],
        [
            295,
            296
        ],
        [
            296,
            336
        ],
        [
            336,
            295
        ],
        [
            319,
            403
        ],
        [
            403,
            404
        ],
        [
            404,
            319
        ],
        [
            330,
            348
        ],
        [
            348,
            349
        ],
        [
            349,
            330
        ],
        [
            293,
            298
        ],
        [
            298,
            333
        ],
        [
            333,
            293
        ],
        [
            323,
            454
        ],
        [
            454,
            447
        ],
        [
            447,
            323
        ],
        [
            15,
            16
        ],
        [
            16,
            315
        ],
        [
            315,
            15
        ],
        [
            358,
            429
        ],
        [
            429,
            279
        ],
        [
            279,
            358
        ],
        [
            14,
            15
        ],
        [
            15,
            316
        ],
        [
            316,
            14
        ],
        [
            285,
            336
        ],
        [
            336,
            9
        ],
        [
            9,
            285
        ],
        [
            329,
            349
        ],
        [
            349,
            350
        ],
        [
            350,
            329
        ],
        [
            374,
            380
        ],
        [
            380,
            252
        ],
        [
            252,
            374
        ],
        [
            318,
            402
        ],
        [
            402,
            403
        ],
        [
            403,
            318
        ],
        [
            6,
            197
        ],
        [
            197,
            419
        ],
        [
            419,
            6
        ],
        [
            318,
            319
        ],
        [
            319,
            325
        ],
        [
            325,
            318
        ],
        [
            367,
            364
        ],
        [
            364,
            365
        ],
        [
            365,
            367
        ],
        [
            435,
            367
        ],
        [
            367,
            397
        ],
        [
            397,
            435
        ],
        [
            344,
            438
        ],
        [
            438,
            439
        ],
        [
            439,
            344
        ],
        [
            272,
            271
        ],
        [
            271,
            311
        ],
        [
            311,
            272
        ],
        [
            195,
            5
        ],
        [
            5,
            281
        ],
        [
            281,
            195
        ],
        [
            273,
            287
        ],
        [
            287,
            291
        ],
        [
            291,
            273
        ],
        [
            396,
            428
        ],
        [
            428,
            199
        ],
        [
            199,
            396
        ],
        [
            311,
            271
        ],
        [
            271,
            268
        ],
        [
            268,
            311
        ],
        [
            283,
            444
        ],
        [
            444,
            445
        ],
        [
            445,
            283
        ],
        [
            373,
            254
        ],
        [
            254,
            339
        ],
        [
            339,
            373
        ],
        [
            282,
            334
        ],
        [
            334,
            296
        ],
        [
            296,
            282
        ],
        [
            449,
            347
        ],
        [
            347,
            346
        ],
        [
            346,
            449
        ],
        [
            264,
            447
        ],
        [
            447,
            454
        ],
        [
            454,
            264
        ],
        [
            336,
            296
        ],
        [
            296,
            299
        ],
        [
            299,
            336
        ],
        [
            338,
            10
        ],
        [
            10,
            151
        ],
        [
            151,
            338
        ],
        [
            278,
            439
        ],
        [
            439,
            455
        ],
        [
            455,
            278
        ],
        [
            292,
            407
        ],
        [
            407,
            415
        ],
        [
            415,
            292
        ],
        [
            358,
            371
        ],
        [
            371,
            355
        ],
        [
            355,
            358
        ],
        [
            340,
            345
        ],
        [
            345,
            372
        ],
        [
            372,
            340
        ],
        [
            346,
            347
        ],
        [
            347,
            280
        ],
        [
            280,
            346
        ],
        [
            442,
            443
        ],
        [
            443,
            282
        ],
        [
            282,
            442
        ],
        [
            19,
            94
        ],
        [
            94,
            370
        ],
        [
            370,
            19
        ],
        [
            441,
            442
        ],
        [
            442,
            295
        ],
        [
            295,
            441
        ],
        [
            248,
            419
        ],
        [
            419,
            197
        ],
        [
            197,
            248
        ],
        [
            263,
            255
        ],
        [
            255,
            359
        ],
        [
            359,
            263
        ],
        [
            440,
            275
        ],
        [
            275,
            274
        ],
        [
            274,
            440
        ],
        [
            300,
            383
        ],
        [
            383,
            368
        ],
        [
            368,
            300
        ],
        [
            351,
            412
        ],
        [
            412,
            465
        ],
        [
            465,
            351
        ],
        [
            263,
            467
        ],
        [
            467,
            466
        ],
        [
            466,
            263
        ],
        [
            301,
            368
        ],
        [
            368,
            389
        ],
        [
            389,
            301
        ],
        [
            395,
            378
        ],
        [
            378,
            379
        ],
        [
            379,
            395
        ],
        [
            412,
            351
        ],
        [
            351,
            419
        ],
        [
            419,
            412
        ],
        [
            436,
            426
        ],
        [
            426,
            322
        ],
        [
            322,
            436
        ],
        [
            2,
            164
        ],
        [
            164,
            393
        ],
        [
            393,
            2
        ],
        [
            370,
            462
        ],
        [
            462,
            461
        ],
        [
            461,
            370
        ],
        [
            164,
            0
        ],
        [
            0,
            267
        ],
        [
            267,
            164
        ],
        [
            302,
            11
        ],
        [
            11,
            12
        ],
        [
            12,
            302
        ],
        [
            268,
            12
        ],
        [
            12,
            13
        ],
        [
            13,
            268
        ],
        [
            293,
            300
        ],
        [
            300,
            301
        ],
        [
            301,
            293
        ],
        [
            446,
            261
        ],
        [
            261,
            340
        ],
        [
            340,
            446
        ],
        [
            330,
            266
        ],
        [
            266,
            425
        ],
        [
            425,
            330
        ],
        [
            426,
            423
        ],
        [
            423,
            391
        ],
        [
            391,
            426
        ],
        [
            429,
            355
        ],
        [
            355,
            437
        ],
        [
            437,
            429
        ],
        [
            391,
            327
        ],
        [
            327,
            326
        ],
        [
            326,
            391
        ],
        [
            440,
            457
        ],
        [
            457,
            438
        ],
        [
            438,
            440
        ],
        [
            341,
            382
        ],
        [
            382,
            362
        ],
        [
            362,
            341
        ],
        [
            459,
            457
        ],
        [
            457,
            461
        ],
        [
            461,
            459
        ],
        [
            434,
            430
        ],
        [
            430,
            394
        ],
        [
            394,
            434
        ],
        [
            414,
            463
        ],
        [
            463,
            362
        ],
        [
            362,
            414
        ],
        [
            396,
            369
        ],
        [
            369,
            262
        ],
        [
            262,
            396
        ],
        [
            354,
            461
        ],
        [
            461,
            457
        ],
        [
            457,
            354
        ],
        [
            316,
            403
        ],
        [
            403,
            402
        ],
        [
            402,
            316
        ],
        [
            315,
            404
        ],
        [
            404,
            403
        ],
        [
            403,
            315
        ],
        [
            314,
            405
        ],
        [
            405,
            404
        ],
        [
            404,
            314
        ],
        [
            313,
            406
        ],
        [
            406,
            405
        ],
        [
            405,
            313
        ],
        [
            421,
            418
        ],
        [
            418,
            406
        ],
        [
            406,
            421
        ],
        [
            366,
            401
        ],
        [
            401,
            361
        ],
        [
            361,
            366
        ],
        [
            306,
            408
        ],
        [
            408,
            407
        ],
        [
            407,
            306
        ],
        [
            291,
            409
        ],
        [
            409,
            408
        ],
        [
            408,
            291
        ],
        [
            287,
            410
        ],
        [
            410,
            409
        ],
        [
            409,
            287
        ],
        [
            432,
            436
        ],
        [
            436,
            410
        ],
        [
            410,
            432
        ],
        [
            434,
            416
        ],
        [
            416,
            411
        ],
        [
            411,
            434
        ],
        [
            264,
            368
        ],
        [
            368,
            383
        ],
        [
            383,
            264
        ],
        [
            309,
            438
        ],
        [
            438,
            457
        ],
        [
            457,
            309
        ],
        [
            352,
            376
        ],
        [
            376,
            401
        ],
        [
            401,
            352
        ],
        [
            274,
            275
        ],
        [
            275,
            4
        ],
        [
            4,
            274
        ],
        [
            421,
            428
        ],
        [
            428,
            262
        ],
        [
            262,
            421
        ],
        [
            294,
            327
        ],
        [
            327,
            358
        ],
        [
            358,
            294
        ],
        [
            433,
            416
        ],
        [
            416,
            367
        ],
        [
            367,
            433
        ],
        [
            289,
            455
        ],
        [
            455,
            439
        ],
        [
            439,
            289
        ],
        [
            462,
            370
        ],
        [
            370,
            326
        ],
        [
            326,
            462
        ],
        [
            2,
            326
        ],
        [
            326,
            370
        ],
        [
            370,
            2
        ],
        [
            305,
            460
        ],
        [
            460,
            455
        ],
        [
            455,
            305
        ],
        [
            254,
            449
        ],
        [
            449,
            448
        ],
        [
            448,
            254
        ],
        [
            255,
            261
        ],
        [
            261,
            446
        ],
        [
            446,
            255
        ],
        [
            253,
            450
        ],
        [
            450,
            449
        ],
        [
            449,
            253
        ],
        [
            252,
            451
        ],
        [
            451,
            450
        ],
        [
            450,
            252
        ],
        [
            256,
            452
        ],
        [
            452,
            451
        ],
        [
            451,
            256
        ],
        [
            341,
            453
        ],
        [
            453,
            452
        ],
        [
            452,
            341
        ],
        [
            413,
            464
        ],
        [
            464,
            463
        ],
        [
            463,
            413
        ],
        [
            441,
            413
        ],
        [
            413,
            414
        ],
        [
            414,
            441
        ],
        [
            258,
            442
        ],
        [
            442,
            441
        ],
        [
            441,
            258
        ],
        [
            257,
            443
        ],
        [
            443,
            442
        ],
        [
            442,
            257
        ],
        [
            259,
            444
        ],
        [
            444,
            443
        ],
        [
            443,
            259
        ],
        [
            260,
            445
        ],
        [
            445,
            444
        ],
        [
            444,
            260
        ],
        [
            467,
            342
        ],
        [
            342,
            445
        ],
        [
            445,
            467
        ],
        [
            459,
            458
        ],
        [
            458,
            250
        ],
        [
            250,
            459
        ],
        [
            289,
            392
        ],
        [
            392,
            290
        ],
        [
            290,
            289
        ],
        [
            290,
            328
        ],
        [
            328,
            460
        ],
        [
            460,
            290
        ],
        [
            376,
            433
        ],
        [
            433,
            435
        ],
        [
            435,
            376
        ],
        [
            250,
            290
        ],
        [
            290,
            392
        ],
        [
            392,
            250
        ],
        [
            411,
            416
        ],
        [
            416,
            433
        ],
        [
            433,
            411
        ],
        [
            341,
            463
        ],
        [
            463,
            464
        ],
        [
            464,
            341
        ],
        [
            453,
            464
        ],
        [
            464,
            465
        ],
        [
            465,
            453
        ],
        [
            357,
            465
        ],
        [
            465,
            412
        ],
        [
            412,
            357
        ],
        [
            343,
            412
        ],
        [
            412,
            399
        ],
        [
            399,
            343
        ],
        [
            360,
            363
        ],
        [
            363,
            440
        ],
        [
            440,
            360
        ],
        [
            437,
            399
        ],
        [
            399,
            456
        ],
        [
            456,
            437
        ],
        [
            420,
            456
        ],
        [
            456,
            363
        ],
        [
            363,
            420
        ],
        [
            401,
            435
        ],
        [
            435,
            288
        ],
        [
            288,
            401
        ],
        [
            372,
            383
        ],
        [
            383,
            353
        ],
        [
            353,
            372
        ],
        [
            339,
            255
        ],
        [
            255,
            249
        ],
        [
            249,
            339
        ],
        [
            448,
            261
        ],
        [
            261,
            255
        ],
        [
            255,
            448
        ],
        [
            133,
            243
        ],
        [
            243,
            190
        ],
        [
            190,
            133
        ],
        [
            133,
            155
        ],
        [
            155,
            112
        ],
        [
            112,
            133
        ],
        [
            33,
            246
        ],
        [
            246,
            247
        ],
        [
            247,
            33
        ],
        [
            33,
            130
        ],
        [
            130,
            25
        ],
        [
            25,
            33
        ],
        [
            398,
            384
        ],
        [
            384,
            286
        ],
        [
            286,
            398
        ],
        [
            362,
            398
        ],
        [
            398,
            414
        ],
        [
            414,
            362
        ],
        [
            362,
            463
        ],
        [
            463,
            341
        ],
        [
            341,
            362
        ],
        [
            263,
            359
        ],
        [
            359,
            467
        ],
        [
            467,
            263
        ],
        [
            263,
            249
        ],
        [
            249,
            255
        ],
        [
            255,
            263
        ],
        [
            466,
            467
        ],
        [
            467,
            260
        ],
        [
            260,
            466
        ],
        [
            75,
            60
        ],
        [
            60,
            166
        ],
        [
            166,
            75
        ],
        [
            238,
            239
        ],
        [
            239,
            79
        ],
        [
            79,
            238
        ],
        [
            162,
            127
        ],
        [
            127,
            139
        ],
        [
            139,
            162
        ],
        [
            72,
            11
        ],
        [
            11,
            37
        ],
        [
            37,
            72
        ],
        [
            121,
            232
        ],
        [
            232,
            120
        ],
        [
            120,
            121
        ],
        [
            73,
            72
        ],
        [
            72,
            39
        ],
        [
            39,
            73
        ],
        [
            114,
            128
        ],
        [
            128,
            47
        ],
        [
            47,
            114
        ],
        [
            233,
            232
        ],
        [
            232,
            128
        ],
        [
            128,
            233
        ],
        [
            103,
            104
        ],
        [
            104,
            67
        ],
        [
            67,
            103
        ],
        [
            152,
            175
        ],
        [
            175,
            148
        ],
        [
            148,
            152
        ],
        [
            119,
            118
        ],
        [
            118,
            101
        ],
        [
            101,
            119
        ],
        [
            74,
            73
        ],
        [
            73,
            40
        ],
        [
            40,
            74
        ],
        [
            107,
            9
        ],
        [
            9,
            108
        ],
        [
            108,
            107
        ],
        [
            49,
            48
        ],
        [
            48,
            131
        ],
        [
            131,
            49
        ],
        [
            32,
            194
        ],
        [
            194,
            211
        ],
        [
            211,
            32
        ],
        [
            184,
            74
        ],
        [
            74,
            185
        ],
        [
            185,
            184
        ],
        [
            191,
            80
        ],
        [
            80,
            183
        ],
        [
            183,
            191
        ],
        [
            185,
            40
        ],
        [
            40,
            186
        ],
        [
            186,
            185
        ],
        [
            119,
            230
        ],
        [
            230,
            118
        ],
        [
            118,
            119
        ],
        [
            210,
            202
        ],
        [
            202,
            214
        ],
        [
            214,
            210
        ],
        [
            84,
            83
        ],
        [
            83,
            17
        ],
        [
            17,
            84
        ],
        [
            77,
            76
        ],
        [
            76,
            146
        ],
        [
            146,
            77
        ],
        [
            161,
            160
        ],
        [
            160,
            30
        ],
        [
            30,
            161
        ],
        [
            190,
            56
        ],
        [
            56,
            173
        ],
        [
            173,
            190
        ],
        [
            182,
            106
        ],
        [
            106,
            194
        ],
        [
            194,
            182
        ],
        [
            138,
            135
        ],
        [
            135,
            192
        ],
        [
            192,
            138
        ],
        [
            129,
            203
        ],
        [
            203,
            98
        ],
        [
            98,
            129
        ],
        [
            54,
            21
        ],
        [
            21,
            68
        ],
        [
            68,
            54
        ],
        [
            5,
            51
        ],
        [
            51,
            4
        ],
        [
            4,
            5
        ],
        [
            145,
            144
        ],
        [
            144,
            23
        ],
        [
            23,
            145
        ],
        [
            90,
            77
        ],
        [
            77,
            91
        ],
        [
            91,
            90
        ],
        [
            207,
            205
        ],
        [
            205,
            187
        ],
        [
            187,
            207
        ],
        [
            83,
            201
        ],
        [
            201,
            18
        ],
        [
            18,
            83
        ],
        [
            181,
            91
        ],
        [
            91,
            182
        ],
        [
            182,
            181
        ],
        [
            180,
            90
        ],
        [
            90,
            181
        ],
        [
            181,
            180
        ],
        [
            16,
            85
        ],
        [
            85,
            17
        ],
        [
            17,
            16
        ],
        [
            205,
            206
        ],
        [
            206,
            36
        ],
        [
            36,
            205
        ],
        [
            176,
            148
        ],
        [
            148,
            140
        ],
        [
            140,
            176
        ],
        [
            165,
            92
        ],
        [
            92,
            39
        ],
        [
            39,
            165
        ],
        [
            245,
            193
        ],
        [
            193,
            244
        ],
        [
            244,
            245
        ],
        [
            27,
            159
        ],
        [
            159,
            28
        ],
        [
            28,
            27
        ],
        [
            30,
            247
        ],
        [
            247,
            161
        ],
        [
            161,
            30
        ],
        [
            174,
            236
        ],
        [
            236,
            196
        ],
        [
            196,
            174
        ],
        [
            103,
            54
        ],
        [
            54,
            104
        ],
        [
            104,
            103
        ],
        [
            55,
            193
        ],
        [
            193,
            8
        ],
        [
            8,
            55
        ],
        [
            111,
            117
        ],
        [
            117,
            31
        ],
        [
            31,
            111
        ],
        [
            221,
            189
        ],
        [
            189,
            55
        ],
        [
            55,
            221
        ],
        [
            240,
            98
        ],
        [
            98,
            99
        ],
        [
            99,
            240
        ],
        [
            142,
            126
        ],
        [
            126,
            100
        ],
        [
            100,
            142
        ],
        [
            219,
            166
        ],
        [
            166,
            218
        ],
        [
            218,
            219
        ],
        [
            112,
            155
        ],
        [
            155,
            26
        ],
        [
            26,
            112
        ],
        [
            198,
            209
        ],
        [
            209,
            131
        ],
        [
            131,
            198
        ],
        [
            169,
            135
        ],
        [
            135,
            150
        ],
        [
            150,
            169
        ],
        [
            114,
            47
        ],
        [
            47,
            217
        ],
        [
            217,
            114
        ],
        [
            224,
            223
        ],
        [
            223,
            53
        ],
        [
            53,
            224
        ],
        [
            220,
            45
        ],
        [
            45,
            134
        ],
        [
            134,
            220
        ],
        [
            32,
            211
        ],
        [
            211,
            140
        ],
        [
            140,
            32
        ],
        [
            109,
            67
        ],
        [
            67,
            108
        ],
        [
            108,
            109
        ],
        [
            146,
            43
        ],
        [
            43,
            91
        ],
        [
            91,
            146
        ],
        [
            231,
            230
        ],
        [
            230,
            120
        ],
        [
            120,
            231
        ],
        [
            113,
            226
        ],
        [
            226,
            247
        ],
        [
            247,
            113
        ],
        [
            105,
            63
        ],
        [
            63,
            52
        ],
        [
            52,
            105
        ],
        [
            241,
            238
        ],
        [
            238,
            242
        ],
        [
            242,
            241
        ],
        [
            124,
            46
        ],
        [
            46,
            156
        ],
        [
            156,
            124
        ],
        [
            95,
            78
        ],
        [
            78,
            96
        ],
        [
            96,
            95
        ],
        [
            70,
            46
        ],
        [
            46,
            63
        ],
        [
            63,
            70
        ],
        [
            116,
            143
        ],
        [
            143,
            227
        ],
        [
            227,
            116
        ],
        [
            116,
            123
        ],
        [
            123,
            111
        ],
        [
            111,
            116
        ],
        [
            1,
            44
        ],
        [
            44,
            19
        ],
        [
            19,
            1
        ],
        [
            3,
            236
        ],
        [
            236,
            51
        ],
        [
            51,
            3
        ],
        [
            207,
            216
        ],
        [
            216,
            205
        ],
        [
            205,
            207
        ],
        [
            26,
            154
        ],
        [
            154,
            22
        ],
        [
            22,
            26
        ],
        [
            165,
            39
        ],
        [
            39,
            167
        ],
        [
            167,
            165
        ],
        [
            199,
            200
        ],
        [
            200,
            208
        ],
        [
            208,
            199
        ],
        [
            101,
            36
        ],
        [
            36,
            100
        ],
        [
            100,
            101
        ],
        [
            43,
            57
        ],
        [
            57,
            202
        ],
        [
            202,
            43
        ],
        [
            242,
            20
        ],
        [
            20,
            99
        ],
        [
            99,
            242
        ],
        [
            56,
            28
        ],
        [
            28,
            157
        ],
        [
            157,
            56
        ],
        [
            124,
            35
        ],
        [
            35,
            113
        ],
        [
            113,
            124
        ],
        [
            29,
            160
        ],
        [
            160,
            27
        ],
        [
            27,
            29
        ],
        [
            211,
            204
        ],
        [
            204,
            210
        ],
        [
            210,
            211
        ],
        [
            124,
            113
        ],
        [
            113,
            46
        ],
        [
            46,
            124
        ],
        [
            106,
            43
        ],
        [
            43,
            204
        ],
        [
            204,
            106
        ],
        [
            96,
            62
        ],
        [
            62,
            77
        ],
        [
            77,
            96
        ],
        [
            227,
            137
        ],
        [
            137,
            116
        ],
        [
            116,
            227
        ],
        [
            73,
            41
        ],
        [
            41,
            72
        ],
        [
            72,
            73
        ],
        [
            36,
            203
        ],
        [
            203,
            142
        ],
        [
            142,
            36
        ],
        [
            235,
            64
        ],
        [
            64,
            240
        ],
        [
            240,
            235
        ],
        [
            48,
            49
        ],
        [
            49,
            64
        ],
        [
            64,
            48
        ],
        [
            42,
            41
        ],
        [
            41,
            74
        ],
        [
            74,
            42
        ],
        [
            214,
            212
        ],
        [
            212,
            207
        ],
        [
            207,
            214
        ],
        [
            183,
            42
        ],
        [
            42,
            184
        ],
        [
            184,
            183
        ],
        [
            210,
            169
        ],
        [
            169,
            211
        ],
        [
            211,
            210
        ],
        [
            140,
            170
        ],
        [
            170,
            176
        ],
        [
            176,
            140
        ],
        [
            104,
            105
        ],
        [
            105,
            69
        ],
        [
            69,
            104
        ],
        [
            193,
            122
        ],
        [
            122,
            168
        ],
        [
            168,
            193
        ],
        [
            50,
            123
        ],
        [
            123,
            187
        ],
        [
            187,
            50
        ],
        [
            89,
            96
        ],
        [
            96,
            90
        ],
        [
            90,
            89
        ],
        [
            66,
            65
        ],
        [
            65,
            107
        ],
        [
            107,
            66
        ],
        [
            179,
            89
        ],
        [
            89,
            180
        ],
        [
            180,
            179
        ],
        [
            119,
            101
        ],
        [
            101,
            120
        ],
        [
            120,
            119
        ],
        [
            68,
            63
        ],
        [
            63,
            104
        ],
        [
            104,
            68
        ],
        [
            234,
            93
        ],
        [
            93,
            227
        ],
        [
            227,
            234
        ],
        [
            16,
            15
        ],
        [
            15,
            85
        ],
        [
            85,
            16
        ],
        [
            209,
            129
        ],
        [
            129,
            49
        ],
        [
            49,
            209
        ],
        [
            15,
            14
        ],
        [
            14,
            86
        ],
        [
            86,
            15
        ],
        [
            107,
            55
        ],
        [
            55,
            9
        ],
        [
            9,
            107
        ],
        [
            120,
            100
        ],
        [
            100,
            121
        ],
        [
            121,
            120
        ],
        [
            153,
            145
        ],
        [
            145,
            22
        ],
        [
            22,
            153
        ],
        [
            178,
            88
        ],
        [
            88,
            179
        ],
        [
            179,
            178
        ],
        [
            197,
            6
        ],
        [
            6,
            196
        ],
        [
            196,
            197
        ],
        [
            89,
            88
        ],
        [
            88,
            96
        ],
        [
            96,
            89
        ],
        [
            135,
            138
        ],
        [
            138,
            136
        ],
        [
            136,
            135
        ],
        [
            138,
            215
        ],
        [
            215,
            172
        ],
        [
            172,
            138
        ],
        [
            218,
            115
        ],
        [
            115,
            219
        ],
        [
            219,
            218
        ],
        [
            41,
            42
        ],
        [
            42,
            81
        ],
        [
            81,
            41
        ],
        [
            5,
            195
        ],
        [
            195,
            51
        ],
        [
            51,
            5
        ],
        [
            57,
            43
        ],
        [
            43,
            61
        ],
        [
            61,
            57
        ],
        [
            208,
            171
        ],
        [
            171,
            199
        ],
        [
            199,
            208
        ],
        [
            41,
            81
        ],
        [
            81,
            38
        ],
        [
            38,
            41
        ],
        [
            224,
            53
        ],
        [
            53,
            225
        ],
        [
            225,
            224
        ],
        [
            24,
            144
        ],
        [
            144,
            110
        ],
        [
            110,
            24
        ],
        [
            105,
            52
        ],
        [
            52,
            66
        ],
        [
            66,
            105
        ],
        [
            118,
            229
        ],
        [
            229,
            117
        ],
        [
            117,
            118
        ],
        [
            227,
            34
        ],
        [
            34,
            234
        ],
        [
            234,
            227
        ],
        [
            66,
            107
        ],
        [
            107,
            69
        ],
        [
            69,
            66
        ],
        [
            10,
            109
        ],
        [
            109,
            151
        ],
        [
            151,
            10
        ],
        [
            219,
            48
        ],
        [
            48,
            235
        ],
        [
            235,
            219
        ],
        [
            183,
            62
        ],
        [
            62,
            191
        ],
        [
            191,
            183
        ],
        [
            142,
            129
        ],
        [
            129,
            126
        ],
        [
            126,
            142
        ],
        [
            116,
            111
        ],
        [
            111,
            143
        ],
        [
            143,
            116
        ],
        [
            118,
            117
        ],
        [
            117,
            50
        ],
        [
            50,
            118
        ],
        [
            223,
            222
        ],
        [
            222,
            52
        ],
        [
            52,
            223
        ],
        [
            94,
            19
        ],
        [
            19,
            141
        ],
        [
            141,
            94
        ],
        [
            222,
            221
        ],
        [
            221,
            65
        ],
        [
            65,
            222
        ],
        [
            196,
            3
        ],
        [
            3,
            197
        ],
        [
            197,
            196
        ],
        [
            45,
            220
        ],
        [
            220,
            44
        ],
        [
            44,
            45
        ],
        [
            156,
            70
        ],
        [
            70,
            139
        ],
        [
            139,
            156
        ],
        [
            188,
            122
        ],
        [
            122,
            245
        ],
        [
            245,
            188
        ],
        [
            139,
            71
        ],
        [
            71,
            162
        ],
        [
            162,
            139
        ],
        [
            149,
            170
        ],
        [
            170,
            150
        ],
        [
            150,
            149
        ],
        [
            122,
            188
        ],
        [
            188,
            196
        ],
        [
            196,
            122
        ],
        [
            206,
            216
        ],
        [
            216,
            92
        ],
        [
            92,
            206
        ],
        [
            164,
            2
        ],
        [
            2,
            167
        ],
        [
            167,
            164
        ],
        [
            242,
            141
        ],
        [
            141,
            241
        ],
        [
            241,
            242
        ],
        [
            0,
            164
        ],
        [
            164,
            37
        ],
        [
            37,
            0
        ],
        [
            11,
            72
        ],
        [
            72,
            12
        ],
        [
            12,
            11
        ],
        [
            12,
            38
        ],
        [
            38,
            13
        ],
        [
            13,
            12
        ],
        [
            70,
            63
        ],
        [
            63,
            71
        ],
        [
            71,
            70
        ],
        [
            31,
            226
        ],
        [
            226,
            111
        ],
        [
            111,
            31
        ],
        [
            36,
            101
        ],
        [
            101,
            205
        ],
        [
            205,
            36
        ],
        [
            203,
            206
        ],
        [
            206,
            165
        ],
        [
            165,
            203
        ],
        [
            126,
            209
        ],
        [
            209,
            217
        ],
        [
            217,
            126
        ],
        [
            98,
            165
        ],
        [
            165,
            97
        ],
        [
            97,
            98
        ],
        [
            237,
            220
        ],
        [
            220,
            218
        ],
        [
            218,
            237
        ],
        [
            237,
            239
        ],
        [
            239,
            241
        ],
        [
            241,
            237
        ],
        [
            210,
            214
        ],
        [
            214,
            169
        ],
        [
            169,
            210
        ],
        [
            140,
            171
        ],
        [
            171,
            32
        ],
        [
            32,
            140
        ],
        [
            241,
            125
        ],
        [
            125,
            237
        ],
        [
            237,
            241
        ],
        [
            179,
            86
        ],
        [
            86,
            178
        ],
        [
            178,
            179
        ],
        [
            180,
            85
        ],
        [
            85,
            179
        ],
        [
            179,
            180
        ],
        [
            181,
            84
        ],
        [
            84,
            180
        ],
        [
            180,
            181
        ],
        [
            182,
            83
        ],
        [
            83,
            181
        ],
        [
            181,
            182
        ],
        [
            194,
            201
        ],
        [
            201,
            182
        ],
        [
            182,
            194
        ],
        [
            177,
            137
        ],
        [
            137,
            132
        ],
        [
            132,
            177
        ],
        [
            184,
            76
        ],
        [
            76,
            183
        ],
        [
            183,
            184
        ],
        [
            185,
            61
        ],
        [
            61,
            184
        ],
        [
            184,
            185
        ],
        [
            186,
            57
        ],
        [
            57,
            185
        ],
        [
            185,
            186
        ],
        [
            216,
            212
        ],
        [
            212,
            186
        ],
        [
            186,
            216
        ],
        [
            192,
            214
        ],
        [
            214,
            187
        ],
        [
            187,
            192
        ],
        [
            139,
            34
        ],
        [
            34,
            156
        ],
        [
            156,
            139
        ],
        [
            218,
            79
        ],
        [
            79,
            237
        ],
        [
            237,
            218
        ],
        [
            147,
            123
        ],
        [
            123,
            177
        ],
        [
            177,
            147
        ],
        [
            45,
            44
        ],
        [
            44,
            4
        ],
        [
            4,
            45
        ],
        [
            208,
            201
        ],
        [
            201,
            32
        ],
        [
            32,
            208
        ],
        [
            98,
            64
        ],
        [
            64,
            129
        ],
        [
            129,
            98
        ],
        [
            192,
            213
        ],
        [
            213,
            138
        ],
        [
            138,
            192
        ],
        [
            235,
            59
        ],
        [
            59,
            219
        ],
        [
            219,
            235
        ],
        [
            141,
            242
        ],
        [
            242,
            97
        ],
        [
            97,
            141
        ],
        [
            97,
            2
        ],
        [
            2,
            141
        ],
        [
            141,
            97
        ],
        [
            240,
            75
        ],
        [
            75,
            235
        ],
        [
            235,
            240
        ],
        [
            229,
            24
        ],
        [
            24,
            228
        ],
        [
            228,
            229
        ],
        [
            31,
            25
        ],
        [
            25,
            226
        ],
        [
            226,
            31
        ],
        [
            230,
            23
        ],
        [
            23,
            229
        ],
        [
            229,
            230
        ],
        [
            231,
            22
        ],
        [
            22,
            230
        ],
        [
            230,
            231
        ],
        [
            232,
            26
        ],
        [
            26,
            231
        ],
        [
            231,
            232
        ],
        [
            233,
            112
        ],
        [
            112,
            232
        ],
        [
            232,
            233
        ],
        [
            244,
            189
        ],
        [
            189,
            243
        ],
        [
            243,
            244
        ],
        [
            189,
            221
        ],
        [
            221,
            190
        ],
        [
            190,
            189
        ],
        [
            222,
            28
        ],
        [
            28,
            221
        ],
        [
            221,
            222
        ],
        [
            223,
            27
        ],
        [
            27,
            222
        ],
        [
            222,
            223
        ],
        [
            224,
            29
        ],
        [
            29,
            223
        ],
        [
            223,
            224
        ],
        [
            225,
            30
        ],
        [
            30,
            224
        ],
        [
            224,
            225
        ],
        [
            113,
            247
        ],
        [
            247,
            225
        ],
        [
            225,
            113
        ],
        [
            99,
            60
        ],
        [
            60,
            240
        ],
        [
            240,
            99
        ],
        [
            213,
            147
        ],
        [
            147,
            215
        ],
        [
            215,
            213
        ],
        [
            60,
            20
        ],
        [
            20,
            166
        ],
        [
            166,
            60
        ],
        [
            192,
            187
        ],
        [
            187,
            213
        ],
        [
            213,
            192
        ],
        [
            243,
            112
        ],
        [
            112,
            244
        ],
        [
            244,
            243
        ],
        [
            244,
            233
        ],
        [
            233,
            245
        ],
        [
            245,
            244
        ],
        [
            245,
            128
        ],
        [
            128,
            188
        ],
        [
            188,
            245
        ],
        [
            188,
            114
        ],
        [
            114,
            174
        ],
        [
            174,
            188
        ],
        [
            134,
            131
        ],
        [
            131,
            220
        ],
        [
            220,
            134
        ],
        [
            174,
            217
        ],
        [
            217,
            236
        ],
        [
            236,
            174
        ],
        [
            236,
            198
        ],
        [
            198,
            134
        ],
        [
            134,
            236
        ],
        [
            215,
            177
        ],
        [
            177,
            58
        ],
        [
            58,
            215
        ],
        [
            156,
            143
        ],
        [
            143,
            124
        ],
        [
            124,
            156
        ],
        [
            25,
            110
        ],
        [
            110,
            7
        ],
        [
            7,
            25
        ],
        [
            31,
            228
        ],
        [
            228,
            25
        ],
        [
            25,
            31
        ],
        [
            264,
            356
        ],
        [
            356,
            368
        ],
        [
            368,
            264
        ],
        [
            0,
            11
        ],
        [
            11,
            267
        ],
        [
            267,
            0
        ],
        [
            451,
            452
        ],
        [
            452,
            349
        ],
        [
            349,
            451
        ],
        [
            267,
            302
        ],
        [
            302,
            269
        ],
        [
            269,
            267
        ],
        [
            350,
            357
        ],
        [
            357,
            277
        ],
        [
            277,
            350
        ],
        [
            350,
            452
        ],
        [
            452,
            357
        ],
        [
            357,
            350
        ],
        [
            299,
            333
        ],
        [
            333,
            297
        ],
        [
            297,
            299
        ],
        [
            396,
            175
        ],
        [
            175,
            377
        ],
        [
            377,
            396
        ],
        [
            280,
            347
        ],
        [
            347,
            330
        ],
        [
            330,
            280
        ],
        [
            269,
            303
        ],
        [
            303,
            270
        ],
        [
            270,
            269
        ],
        [
            151,
            9
        ],
        [
            9,
            337
        ],
        [
            337,
            151
        ],
        [
            344,
            278
        ],
        [
            278,
            360
        ],
        [
            360,
            344
        ],
        [
            424,
            418
        ],
        [
            418,
            431
        ],
        [
            431,
            424
        ],
        [
            270,
            304
        ],
        [
            304,
            409
        ],
        [
            409,
            270
        ],
        [
            272,
            310
        ],
        [
            310,
            407
        ],
        [
            407,
            272
        ],
        [
            322,
            270
        ],
        [
            270,
            410
        ],
        [
            410,
            322
        ],
        [
            449,
            450
        ],
        [
            450,
            347
        ],
        [
            347,
            449
        ],
        [
            432,
            422
        ],
        [
            422,
            434
        ],
        [
            434,
            432
        ],
        [
            18,
            313
        ],
        [
            313,
            17
        ],
        [
            17,
            18
        ],
        [
            291,
            306
        ],
        [
            306,
            375
        ],
        [
            375,
            291
        ],
        [
            259,
            387
        ],
        [
            387,
            260
        ],
        [
            260,
            259
        ],
        [
            424,
            335
        ],
        [
            335,
            418
        ],
        [
            418,
            424
        ],
        [
            434,
            364
        ],
        [
            364,
            416
        ],
        [
            416,
            434
        ],
        [
            391,
            423
        ],
        [
            423,
            327
        ],
        [
            327,
            391
        ],
        [
            301,
            251
        ],
        [
            251,
            298
        ],
        [
            298,
            301
        ],
        [
            275,
            281
        ],
        [
            281,
            4
        ],
        [
            4,
            275
        ],
        [
            254,
            373
        ],
        [
            373,
            253
        ],
        [
            253,
            254
        ],
        [
            375,
            307
        ],
        [
            307,
            321
        ],
        [
            321,
            375
        ],
        [
            280,
            425
        ],
        [
            425,
            411
        ],
        [
            411,
            280
        ],
        [
            200,
            421
        ],
        [
            421,
            18
        ],
        [
            18,
            200
        ],
        [
            335,
            321
        ],
        [
            321,
            406
        ],
        [
            406,
            335
        ],
        [
            321,
            320
        ],
        [
            320,
            405
        ],
        [
            405,
            321
        ],
        [
            314,
            315
        ],
        [
            315,
            17
        ],
        [
            17,
            314
        ],
        [
            423,
            426
        ],
        [
            426,
            266
        ],
        [
            266,
            423
        ],
        [
            396,
            377
        ],
        [
            377,
            369
        ],
        [
            369,
            396
        ],
        [
            270,
            322
        ],
        [
            322,
            269
        ],
        [
            269,
            270
        ],
        [
            413,
            417
        ],
        [
            417,
            464
        ],
        [
            464,
            413
        ],
        [
            385,
            386
        ],
        [
            386,
            258
        ],
        [
            258,
            385
        ],
        [
            248,
            456
        ],
        [
            456,
            419
        ],
        [
            419,
            248
        ],
        [
            298,
            284
        ],
        [
            284,
            333
        ],
        [
            333,
            298
        ],
        [
            168,
            417
        ],
        [
            417,
            8
        ],
        [
            8,
            168
        ],
        [
            448,
            346
        ],
        [
            346,
            261
        ],
        [
            261,
            448
        ],
        [
            417,
            413
        ],
        [
            413,
            285
        ],
        [
            285,
            417
        ],
        [
            326,
            327
        ],
        [
            327,
            328
        ],
        [
            328,
            326
        ],
        [
            277,
            355
        ],
        [
            355,
            329
        ],
        [
            329,
            277
        ],
        [
            309,
            392
        ],
        [
            392,
            438
        ],
        [
            438,
            309
        ],
        [
            381,
            382
        ],
        [
            382,
            256
        ],
        [
            256,
            381
        ],
        [
            279,
            429
        ],
        [
            429,
            360
        ],
        [
            360,
            279
        ],
        [
            365,
            364
        ],
        [
            364,
            379
        ],
        [
            379,
            365
        ],
        [
            355,
            277
        ],
        [
            277,
            437
        ],
        [
            437,
            355
        ],
        [
            282,
            443
        ],
        [
            443,
            283
        ],
        [
            283,
            282
        ],
        [
            281,
            275
        ],
        [
            275,
            363
        ],
        [
            363,
            281
        ],
        [
            395,
            431
        ],
        [
            431,
            369
        ],
        [
            369,
            395
        ],
        [
            299,
            297
        ],
        [
            297,
            337
        ],
        [
            337,
            299
        ],
        [
            335,
            273
        ],
        [
            273,
            321
        ],
        [
            321,
            335
        ],
        [
            348,
            450
        ],
        [
            450,
            349
        ],
        [
            349,
            348
        ],
        [
            359,
            446
        ],
        [
            446,
            467
        ],
        [
            467,
            359
        ],
        [
            283,
            293
        ],
        [
            293,
            282
        ],
        [
            282,
            283
        ],
        [
            250,
            458
        ],
        [
            458,
            462
        ],
        [
            462,
            250
        ],
        [
            300,
            276
        ],
        [
            276,
            383
        ],
        [
            383,
            300
        ],
        [
            292,
            308
        ],
        [
            308,
            325
        ],
        [
            325,
            292
        ],
        [
            283,
            276
        ],
        [
            276,
            293
        ],
        [
            293,
            283
        ],
        [
            264,
            372
        ],
        [
            372,
            447
        ],
        [
            447,
            264
        ],
        [
            346,
            352
        ],
        [
            352,
            340
        ],
        [
            340,
            346
        ],
        [
            354,
            274
        ],
        [
            274,
            19
        ],
        [
            19,
            354
        ],
        [
            363,
            456
        ],
        [
            456,
            281
        ],
        [
            281,
            363
        ],
        [
            426,
            436
        ],
        [
            436,
            425
        ],
        [
            425,
            426
        ],
        [
            380,
            381
        ],
        [
            381,
            252
        ],
        [
            252,
            380
        ],
        [
            267,
            269
        ],
        [
            269,
            393
        ],
        [
            393,
            267
        ],
        [
            421,
            200
        ],
        [
            200,
            428
        ],
        [
            428,
            421
        ],
        [
            371,
            266
        ],
        [
            266,
            329
        ],
        [
            329,
            371
        ],
        [
            432,
            287
        ],
        [
            287,
            422
        ],
        [
            422,
            432
        ],
        [
            290,
            250
        ],
        [
            250,
            328
        ],
        [
            328,
            290
        ],
        [
            385,
            258
        ],
        [
            258,
            384
        ],
        [
            384,
            385
        ],
        [
            446,
            265
        ],
        [
            265,
            342
        ],
        [
            342,
            446
        ],
        [
            386,
            387
        ],
        [
            387,
            257
        ],
        [
            257,
            386
        ],
        [
            422,
            424
        ],
        [
            424,
            430
        ],
        [
            430,
            422
        ],
        [
            445,
            342
        ],
        [
            342,
            276
        ],
        [
            276,
            445
        ],
        [
            422,
            273
        ],
        [
            273,
            424
        ],
        [
            424,
            422
        ],
        [
            306,
            292
        ],
        [
            292,
            307
        ],
        [
            307,
            306
        ],
        [
            352,
            366
        ],
        [
            366,
            345
        ],
        [
            345,
            352
        ],
        [
            268,
            271
        ],
        [
            271,
            302
        ],
        [
            302,
            268
        ],
        [
            358,
            423
        ],
        [
            423,
            371
        ],
        [
            371,
            358
        ],
        [
            327,
            294
        ],
        [
            294,
            460
        ],
        [
            460,
            327
        ],
        [
            331,
            279
        ],
        [
            279,
            294
        ],
        [
            294,
            331
        ],
        [
            303,
            271
        ],
        [
            271,
            304
        ],
        [
            304,
            303
        ],
        [
            436,
            432
        ],
        [
            432,
            427
        ],
        [
            427,
            436
        ],
        [
            304,
            272
        ],
        [
            272,
            408
        ],
        [
            408,
            304
        ],
        [
            395,
            394
        ],
        [
            394,
            431
        ],
        [
            431,
            395
        ],
        [
            378,
            395
        ],
        [
            395,
            400
        ],
        [
            400,
            378
        ],
        [
            296,
            334
        ],
        [
            334,
            299
        ],
        [
            299,
            296
        ],
        [
            6,
            351
        ],
        [
            351,
            168
        ],
        [
            168,
            6
        ],
        [
            376,
            352
        ],
        [
            352,
            411
        ],
        [
            411,
            376
        ],
        [
            307,
            325
        ],
        [
            325,
            320
        ],
        [
            320,
            307
        ],
        [
            285,
            295
        ],
        [
            295,
            336
        ],
        [
            336,
            285
        ],
        [
            320,
            319
        ],
        [
            319,
            404
        ],
        [
            404,
            320
        ],
        [
            329,
            330
        ],
        [
            330,
            349
        ],
        [
            349,
            329
        ],
        [
            334,
            293
        ],
        [
            293,
            333
        ],
        [
            333,
            334
        ],
        [
            366,
            323
        ],
        [
            323,
            447
        ],
        [
            447,
            366
        ],
        [
            316,
            15
        ],
        [
            15,
            315
        ],
        [
            315,
            316
        ],
        [
            331,
            358
        ],
        [
            358,
            279
        ],
        [
            279,
            331
        ],
        [
            317,
            14
        ],
        [
            14,
            316
        ],
        [
            316,
            317
        ],
        [
            8,
            285
        ],
        [
            285,
            9
        ],
        [
            9,
            8
        ],
        [
            277,
            329
        ],
        [
            329,
            350
        ],
        [
            350,
            277
        ],
        [
            253,
            374
        ],
        [
            374,
            252
        ],
        [
            252,
            253
        ],
        [
            319,
            318
        ],
        [
            318,
            403
        ],
        [
            403,
            319
        ],
        [
            351,
            6
        ],
        [
            6,
            419
        ],
        [
            419,
            351
        ],
        [
            324,
            318
        ],
        [
            318,
            325
        ],
        [
            325,
            324
        ],
        [
            397,
            367
        ],
        [
            367,
            365
        ],
        [
            365,
            397
        ],
        [
            288,
            435
        ],
        [
            435,
            397
        ],
        [
            397,
            288
        ],
        [
            278,
            344
        ],
        [
            344,
            439
        ],
        [
            439,
            278
        ],
        [
            310,
            272
        ],
        [
            272,
            311
        ],
        [
            311,
            310
        ],
        [
            248,
            195
        ],
        [
            195,
            281
        ],
        [
            281,
            248
        ],
        [
            375,
            273
        ],
        [
            273,
            291
        ],
        [
            291,
            375
        ],
        [
            175,
            396
        ],
        [
            396,
            199
        ],
        [
            199,
            175
        ],
        [
            312,
            311
        ],
        [
            311,
            268
        ],
        [
            268,
            312
        ],
        [
            276,
            283
        ],
        [
            283,
            445
        ],
        [
            445,
            276
        ],
        [
            390,
            373
        ],
        [
            373,
            339
        ],
        [
            339,
            390
        ],
        [
            295,
            282
        ],
        [
            282,
            296
        ],
        [
            296,
            295
        ],
        [
            448,
            449
        ],
        [
            449,
            346
        ],
        [
            346,
            448
        ],
        [
            356,
            264
        ],
        [
            264,
            454
        ],
        [
            454,
            356
        ],
        [
            337,
            336
        ],
        [
            336,
            299
        ],
        [
            299,
            337
        ],
        [
            337,
            338
        ],
        [
            338,
            151
        ],
        [
            151,
            337
        ],
        [
            294,
            278
        ],
        [
            278,
            455
        ],
        [
            455,
            294
        ],
        [
            308,
            292
        ],
        [
            292,
            415
        ],
        [
            415,
            308
        ],
        [
            429,
            358
        ],
        [
            358,
            355
        ],
        [
            355,
            429
        ],
        [
            265,
            340
        ],
        [
            340,
            372
        ],
        [
            372,
            265
        ],
        [
            352,
            346
        ],
        [
            346,
            280
        ],
        [
            280,
            352
        ],
        [
            295,
            442
        ],
        [
            442,
            282
        ],
        [
            282,
            295
        ],
        [
            354,
            19
        ],
        [
            19,
            370
        ],
        [
            370,
            354
        ],
        [
            285,
            441
        ],
        [
            441,
            295
        ],
        [
            295,
            285
        ],
        [
            195,
            248
        ],
        [
            248,
            197
        ],
        [
            197,
            195
        ],
        [
            457,
            440
        ],
        [
            440,
            274
        ],
        [
            274,
            457
        ],
        [
            301,
            300
        ],
        [
            300,
            368
        ],
        [
            368,
            301
        ],
        [
            417,
            351
        ],
        [
            351,
            465
        ],
        [
            465,
            417
        ],
        [
            251,
            301
        ],
        [
            301,
            389
        ],
        [
            389,
            251
        ],
        [
            394,
            395
        ],
        [
            395,
            379
        ],
        [
            379,
            394
        ],
        [
            399,
            412
        ],
        [
            412,
            419
        ],
        [
            419,
            399
        ],
        [
            410,
            436
        ],
        [
            436,
            322
        ],
        [
            322,
            410
        ],
        [
            326,
            2
        ],
        [
            2,
            393
        ],
        [
            393,
            326
        ],
        [
            354,
            370
        ],
        [
            370,
            461
        ],
        [
            461,
            354
        ],
        [
            393,
            164
        ],
        [
            164,
            267
        ],
        [
            267,
            393
        ],
        [
            268,
            302
        ],
        [
            302,
            12
        ],
        [
            12,
            268
        ],
        [
            312,
            268
        ],
        [
            268,
            13
        ],
        [
            13,
            312
        ],
        [
            298,
            293
        ],
        [
            293,
            301
        ],
        [
            301,
            298
        ],
        [
            265,
            446
        ],
        [
            446,
            340
        ],
        [
            340,
            265
        ],
        [
            280,
            330
        ],
        [
            330,
            425
        ],
        [
            425,
            280
        ],
        [
            322,
            426
        ],
        [
            426,
            391
        ],
        [
            391,
            322
        ],
        [
            420,
            429
        ],
        [
            429,
            437
        ],
        [
            437,
            420
        ],
        [
            393,
            391
        ],
        [
            391,
            326
        ],
        [
            326,
            393
        ],
        [
            344,
            440
        ],
        [
            440,
            438
        ],
        [
            438,
            344
        ],
        [
            458,
            459
        ],
        [
            459,
            461
        ],
        [
            461,
            458
        ],
        [
            364,
            434
        ],
        [
            434,
            394
        ],
        [
            394,
            364
        ],
        [
            428,
            396
        ],
        [
            396,
            262
        ],
        [
            262,
            428
        ],
        [
            274,
            354
        ],
        [
            354,
            457
        ],
        [
            457,
            274
        ],
        [
            317,
            316
        ],
        [
            316,
            402
        ],
        [
            402,
            317
        ],
        [
            316,
            315
        ],
        [
            315,
            403
        ],
        [
            403,
            316
        ],
        [
            315,
            314
        ],
        [
            314,
            404
        ],
        [
            404,
            315
        ],
        [
            314,
            313
        ],
        [
            313,
            405
        ],
        [
            405,
            314
        ],
        [
            313,
            421
        ],
        [
            421,
            406
        ],
        [
            406,
            313
        ],
        [
            323,
            366
        ],
        [
            366,
            361
        ],
        [
            361,
            323
        ],
        [
            292,
            306
        ],
        [
            306,
            407
        ],
        [
            407,
            292
        ],
        [
            306,
            291
        ],
        [
            291,
            408
        ],
        [
            408,
            306
        ],
        [
            291,
            287
        ],
        [
            287,
            409
        ],
        [
            409,
            291
        ],
        [
            287,
            432
        ],
        [
            432,
            410
        ],
        [
            410,
            287
        ],
        [
            427,
            434
        ],
        [
            434,
            411
        ],
        [
            411,
            427
        ],
        [
            372,
            264
        ],
        [
            264,
            383
        ],
        [
            383,
            372
        ],
        [
            459,
            309
        ],
        [
            309,
            457
        ],
        [
            457,
            459
        ],
        [
            366,
            352
        ],
        [
            352,
            401
        ],
        [
            401,
            366
        ],
        [
            1,
            274
        ],
        [
            274,
            4
        ],
        [
            4,
            1
        ],
        [
            418,
            421
        ],
        [
            421,
            262
        ],
        [
            262,
            418
        ],
        [
            331,
            294
        ],
        [
            294,
            358
        ],
        [
            358,
            331
        ],
        [
            435,
            433
        ],
        [
            433,
            367
        ],
        [
            367,
            435
        ],
        [
            392,
            289
        ],
        [
            289,
            439
        ],
        [
            439,
            392
        ],
        [
            328,
            462
        ],
        [
            462,
            326
        ],
        [
            326,
            328
        ],
        [
            94,
            2
        ],
        [
            2,
            370
        ],
        [
            370,
            94
        ],
        [
            289,
            305
        ],
        [
            305,
            455
        ],
        [
            455,
            289
        ],
        [
            339,
            254
        ],
        [
            254,
            448
        ],
        [
            448,
            339
        ],
        [
            359,
            255
        ],
        [
            255,
            446
        ],
        [
            446,
            359
        ],
        [
            254,
            253
        ],
        [
            253,
            449
        ],
        [
            449,
            254
        ],
        [
            253,
            252
        ],
        [
            252,
            450
        ],
        [
            450,
            253
        ],
        [
            252,
            256
        ],
        [
            256,
            451
        ],
        [
            451,
            252
        ],
        [
            256,
            341
        ],
        [
            341,
            452
        ],
        [
            452,
            256
        ],
        [
            414,
            413
        ],
        [
            413,
            463
        ],
        [
            463,
            414
        ],
        [
            286,
            441
        ],
        [
            441,
            414
        ],
        [
            414,
            286
        ],
        [
            286,
            258
        ],
        [
            258,
            441
        ],
        [
            441,
            286
        ],
        [
            258,
            257
        ],
        [
            257,
            442
        ],
        [
            442,
            258
        ],
        [
            257,
            259
        ],
        [
            259,
            443
        ],
        [
            443,
            257
        ],
        [
            259,
            260
        ],
        [
            260,
            444
        ],
        [
            444,
            259
        ],
        [
            260,
            467
        ],
        [
            467,
            445
        ],
        [
            445,
            260
        ],
        [
            309,
            459
        ],
        [
            459,
            250
        ],
        [
            250,
            309
        ],
        [
            305,
            289
        ],
        [
            289,
            290
        ],
        [
            290,
            305
        ],
        [
            305,
            290
        ],
        [
            290,
            460
        ],
        [
            460,
            305
        ],
        [
            401,
            376
        ],
        [
            376,
            435
        ],
        [
            435,
            401
        ],
        [
            309,
            250
        ],
        [
            250,
            392
        ],
        [
            392,
            309
        ],
        [
            376,
            411
        ],
        [
            411,
            433
        ],
        [
            433,
            376
        ],
        [
            453,
            341
        ],
        [
            341,
            464
        ],
        [
            464,
            453
        ],
        [
            357,
            453
        ],
        [
            453,
            465
        ],
        [
            465,
            357
        ],
        [
            343,
            357
        ],
        [
            357,
            412
        ],
        [
            412,
            343
        ],
        [
            437,
            343
        ],
        [
            343,
            399
        ],
        [
            399,
            437
        ],
        [
            344,
            360
        ],
        [
            360,
            440
        ],
        [
            440,
            344
        ],
        [
            420,
            437
        ],
        [
            437,
            456
        ],
        [
            456,
            420
        ],
        [
            360,
            420
        ],
        [
            420,
            363
        ],
        [
            363,
            360
        ],
        [
            361,
            401
        ],
        [
            401,
            288
        ],
        [
            288,
            361
        ],
        [
            265,
            372
        ],
        [
            372,
            353
        ],
        [
            353,
            265
        ],
        [
            390,
            339
        ],
        [
            339,
            249
        ],
        [
            249,
            390
        ],
        [
            339,
            448
        ],
        [
            448,
            255
        ],
        [
            255,
            339
        ]
    ]);
    K("VERSION", "0.4.1646425229");
}).call(this);

},{}],"jui49":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "enhanceFaceModelPrediction", ()=>enhanceFaceModelPrediction);
var _maths = require("../maths/maths");
var _faceLandmarkConstants = require("./face-landmark-constants");
// ** === ^ == Math.pow in ECMA22
const { PI, abs, sqrt, atan2, tan } = Math;
// What the face is observing in a cone shape...
const fieldOfView = (dfov, width, height)=>{
    const hypothenuse = sqrt(width * width + height * height);
    const tanDFOV = tan(dfov / 2);
    return [
        2 * atan(width * tanDFOV / hypothenuse),
        2 * atan(height * tanDFOV / hypothenuse)
    ];
};
const enhanceFaceModelPrediction = (prediction, time, flipHorizontally = true)=>{
    if (!prediction) throw Error("This is *not* a valid prediction");
    // first create an output that contains everything then overwrite it
    // you can remove this for speed reasons if you are providing a full options config
    // options = { ...DEFAULT_OPTIONS, ...options }
    const { keypoints } = prediction;
    // This is a virtual line from the top of the head to the bottom...
    // we can use this and the eyes to determine face roll, pitch, yaw
    // we can use the bounding box or actual face mesh coords
    let topOfHead = 0;
    let bottomOfHead = Number.POSITIVE_INFINITY;
    let referenceTopOfHead;
    let referenceBottomOfHead;
    let pointApexOfHead = keypoints[152];
    let pointBottomOfChin = keypoints[10];
    // Try and add all the data points we need here into annotations
    const annotations = {
        faceOval: (0, _faceLandmarkConstants.FACE_CONTOURS).faceOval.map((d)=>{
            const point = keypoints[d];
            // find the point with the highest y
            if (point.y > topOfHead) {
                topOfHead = point.y;
                referenceTopOfHead = d;
            }
            // find the point with the lowest y
            if (point.y < bottomOfHead) {
                bottomOfHead = point.y;
                referenceBottomOfHead = d;
            }
            return point;
        }),
        lips: (0, _faceLandmarkConstants.FACE_CONTOURS).lips.map((d)=>keypoints[d]),
        leftEye: (0, _faceLandmarkConstants.FACE_CONTOURS).leftEye.map((d)=>keypoints[d]),
        leftEyebrow: (0, _faceLandmarkConstants.FACE_CONTOURS).leftEyebrow.map((d)=>keypoints[d]),
        leftIris: (0, _faceLandmarkConstants.FACE_CONTOURS).leftIris.map((d)=>keypoints[d]),
        rightEye: (0, _faceLandmarkConstants.FACE_CONTOURS).rightEye.map((d)=>keypoints[d]),
        rightEyebrow: (0, _faceLandmarkConstants.FACE_CONTOURS).rightEyebrow.map((d)=>keypoints[d]),
        rightIris: (0, _faceLandmarkConstants.FACE_CONTOURS).rightIris.map((d)=>keypoints[d])
    };
    // FIXME: There is one point missing here
    annotations.outerLip = (0, _faceLandmarkConstants.LIP_PATH_OUTER).map((d)=>annotations.lips[d]);
    annotations.innerLip = (0, _faceLandmarkConstants.LIP_PATH_INNER).map((d)=>annotations.lips[d]);
    // Head ------------------------------------------------------
    // 1, 4, 5, 195, 197 are all nose based
    const noseTip = keypoints[4];
    const forehead = keypoints[9];
    const feltrum = keypoints[0];
    // const pointTopOfHead = keypoints[109]
    // const pointBottomOfHead = keypoints[400]
    // const centerOfHead = keypoints[168]
    // const forehead = keypoints[10]
    // Calculate some sizes : size of head from chin to top
    // const headHeight = bottomOfHead[1] - topOfHead[1]
    const headHeight = (0, _maths.hypoteneuse2D)(pointApexOfHead, pointBottomOfChin);
    prediction.headHeight = headHeight;
    //console.error("head", {topOfHead: pointTopOfHead, bottomOfHead: pointBottomOfHead}, headHeight )
    // This is a virtual line from the top of the head to the bottom...
    // we can use this and the eyes to determine face roll, pitch, yaw
    // we can use the bounding box or actual face mesh coords
    annotations.headVertical = [
        pointApexOfHead,
        noseTip,
        pointBottomOfChin
    ];
    // Eyes ------------------------------------------------------
    // IRIS & PUPIL data
    // Extract pupil central location
    const createPupilData = (irisData)=>{
        const inner = irisData[0];
        const up = irisData[1];
        const outer = irisData[2];
        const down = irisData[3];
        const irisWidth = Math.abs(inner.x - outer.x);
        const irisHeight = down.y - up.y;
        // const irisHeight = Math.abs( up.y - down.y)
        const pupil = {
            x: irisWidth * 0.5 + outer.x,
            y: irisHeight * 0.5 + up.y,
            diameter: Math.max(irisWidth, irisHeight)
        };
        return pupil;
    };
    const irisDataLeft = createPupilData(annotations.leftIris);
    const irisDataRight = createPupilData(annotations.rightIris);
    //const distanceBetweenIrises = hypoteneuse2D( irisDataLeft, irisDataRight )
    // const pointBetweenTheEyes = keypoints[168]
    // caruncles are the inner eye socket squishy bit near your nose
    const pointLeftEyeSocketOuter = keypoints[362];
    const pointLeftEyeCaruncle = keypoints[263];
    const pointRightEyeSocketOuter = keypoints[133];
    const pointRightEyeCaruncle = keypoints[33];
    // this is the distance between eye parts on the face and can be used
    // for both general gaze direction and scaling, as well as head rotations
    // const widthLeftEye = hypoteneuse2D( pointLeftEyeSocketOuter, pointLeftEyeCaruncle )
    // const widthRightEye = hypoteneuse2D( pointRightEyeCaruncle, pointRightEyeSocketOuter)
    // const distanceFromOuterEyeToOuterEye = hypoteneuse2D( pointLeftEyeSocketOuter, pointRightEyeSocketOuter )
    // const distanceBetweenCaruncles = hypoteneuse2D( pointLeftEyeCaruncle, pointRightEyeCaruncle)
    const leftEyeSocketWidth = (0, _maths.hypoteneuse2D)(pointLeftEyeSocketOuter, pointLeftEyeCaruncle);
    const rightEyeSocketWidth = (0, _maths.hypoteneuse2D)(pointRightEyeSocketOuter, pointRightEyeCaruncle);
    annotations.leftEyeSocket = [
        pointLeftEyeSocketOuter,
        pointLeftEyeCaruncle
    ];
    annotations.rightEyeSocket = [
        pointRightEyeSocketOuter,
        pointRightEyeCaruncle
    ];
    annotations.leftPupil = irisDataLeft;
    annotations.rightPupil = irisDataRight;
    // which ways are the eyes pointing to? we want from -1 -> 1
    // left is -ve right is +ve
    prediction.rightEyeDirection = (irisDataRight.x - pointRightEyeCaruncle.x) / rightEyeSocketWidth * -2 + 1;
    prediction.leftEyeDirection = (irisDataLeft.x - pointLeftEyeSocketOuter.x) / leftEyeSocketWidth * 2 - 1;
    prediction.eyeDirection = 0.5 * (prediction.rightEyeDirection + prediction.leftEyeDirection);
    prediction.isLookingRight = prediction.eyeDirection > 0.5;
    // Which way are we facing?
    // const eyeDirection = widthLeftEye / widthRightEye
    // const leftEyeSocketHeight =	hypoteneuse2D( annotations.leftEye[0], annotations.leftEye[4] )
    // const rightEyeSocketHeight = hypoteneuse2D( annotations.rightEye[0], annotations.rightEye[4] )
    // Eye socket extents - size of each individual eye sockets heights (eye lid openings)
    // const leftEyeSocketHeight = hypoteneuse2D( keypoints[257], keypoints[253] )
    // const rightEyeSocketHeight = hypoteneuse2D( keypoints[27], keypoints[23] )
    // const leftEyeSocketWidth = hypoteneuse2D( annotations.rightEye[0], annotations.rightEye[4] )
    // const rightEyeSocketWidth = hypoteneuse2D( annotations.rightEye[0], annotations.rightEye[4] )
    // console.error("eyes", {pointBetweenTheEyes,distanceBetweenIrises,leftEyeSocketHeight,rightEyeSocketHeight, l:annotations.leftEye, r:annotations.rightEye, leftEyeSocketWidth, rightEyeSocketWidth }, eyes )
    // - MOUTH ------------------------------------------------------
    // top 15 indexes are top lip, bottom are all the rest
    // annotations.lips[0 - 7]
    // annotations.lips[8]
    // annotations.lips[9 - 14]
    // ------------------------
    // annotations.lips[15 - 26]
    // annotations.lips[27]
    // annotations.lips[28 - 39]
    const lips = annotations.lips;
    const lipsLength = lips.length;
    const lipLength = 10;
    const midLipLength = 5;
    // Correct (ish)
    const lipUpperLeft = lips[0];
    const lipLowerLeft = lips[lipLength * 2];
    // Correct
    const lipUpperRight = lips[lipLength * 2];
    const lipLowerRight = lips[lipsLength - 1];
    // Correct
    // const lipOuterUpperMiddle = lips[lipLength + midLipLength]
    // const lipOuterLowerMiddle = lips[midLipLength]
    // Correct
    const lipInnerUpperMiddle = lips[lipsLength - midLipLength - 1];
    const lipInnerLowerMiddle = lips[lipLength * 2 + midLipLength];
    const lipVerticalOpening = (0, _maths.hypoteneuse2D)(lipInnerUpperMiddle, lipInnerLowerMiddle);
    // Average of both
    const lipHorizontalOpening = ((0, _maths.hypoteneuse2D)(lipLowerLeft, lipLowerRight) + (0, _maths.hypoteneuse2D)(lipUpperLeft, lipUpperRight)) * 0.5;
    const mouthSizeInTheory = headHeight * (0, _faceLandmarkConstants.RATIO_OF_MOUTH_TO_FACE);
    const mouthOpeness = lipVerticalOpening / mouthSizeInTheory;
    const isMouthOpen = mouthOpeness > 0.2;
    // is wider than tall?
    const isMouthWide = lipHorizontalOpening > lipVerticalOpening;
    //const lipVerticalOpening = lipVerticalOpeningX * lipVerticalOpeningX + lipVerticalOpeningY * lipVerticalOpeningY
    prediction.mouthRange = lipVerticalOpening;
    prediction.mouthRatio = mouthOpeness;
    // TODO: this is the size of the mouth as a factor of the head size
    prediction.mouthOpen = isMouthOpen;
    prediction.mouthHeight = lipVerticalOpening;
    prediction.mouthWidth = lipHorizontalOpening;
    // TODO: FIXME: mouth shape fixing
    // if it is wider than tall - E
    // if it is about the same width as height - O
    prediction.mouthShape = isMouthOpen ? !isMouthWide ? (0, _faceLandmarkConstants.MOUTH_SHAPE_O) : (0, _faceLandmarkConstants.MOUTH_SHAPE_E) : (0, _faceLandmarkConstants.MOUTH_SHAPE_CLOSED);
    // TODO: Mouth normal vector - an arrow coming out of the mouth the size
    // of the amplitude so that we can draw and visualise it on screen
    // console.log("mouthRatio", lipVerticalOpening, {ratio:lipVerticalOpening / headHeight, prediction})
    // These are the angles caused by smiling
    // We add them together and deduct them from 180 to find
    // the kinked angle of the top lip between left - feltrum - right
    // const leftSmirk = abs( determineAngle(lipUpperLeft, lipOuterUpperMiddle) ) / PI
    // const rightSmirk = abs( determineAngle(lipOuterUpperMiddle, lipUpperRight) ) / PI
    // // 0 -> 1 ()
    // // FIXME: the range is pretty much empty between 0->0.9
    // prediction.happiness = 10 * (((leftSmirk + rightSmirk) * 0.5)  - 0.9)
    // // 0 -> 1
    // prediction.leftSmirk = (leftSmirk - 1) * 100000
    // prediction.rightSmirk = (rightSmirk - 1) * 100000
    // - ORIENTATION ------------------------------------------------
    // To determine the orientation and angle of the head we do
    // some triangulation to draw right angles where we can infer
    // using trigonometry the angles against themn
    // and now we find two edges of the triangle and relate one
    // to each known width - left eye and right eye space
    // const widthBetweenLeftEyeAndCentre = (pointBetweenTheEyes.x - pointLeftEyeSocketOuter.x) * -1
    // const widthBetweenRightEyeAndCentre = pointBetweenTheEyes.x - pointRightEyeSocketOuter.x
    // FIXME: as this is -1 -> 1 we need to wrap it better
    const rawYaw = flipHorizontally ? leftEyeSocketWidth / rightEyeSocketWidth : rightEyeSocketWidth / leftEyeSocketWidth;
    const regulatedYaw = (rawYaw - 1) * 2;
    // this maps from 2 -> 0
    const yaw = (0, _maths.clamp)(regulatedYaw < 0 ? regulatedYaw * 2 : regulatedYaw, -1, 1);
    // if either eye is lower than the other : 
    // triangle between eye extents and vertical
    const rollX = pointLeftEyeSocketOuter.x - pointRightEyeSocketOuter.x;
    const rollY = pointLeftEyeSocketOuter.y - pointRightEyeSocketOuter.y;
    const rollRegular = atan2(rollX, rollY);
    const rawRoll = flipHorizontally ? -rollRegular : rollRegular;
    const regulatedRoll = (rawRoll + Math.PI * 0.5) * 1.3;
    const roll = (0, _maths.clamp)(regulatedRoll, -1, 1);
    // we use two lengths to determine the angles
    // to determine how much the head is rocking forwards and backwards
    // a triangle can be created  
    // const distanceFromFeltrumToForeHead = hypoteneuse3D( feltrum, forehead )	
    // UP & DOWN in RADIANS
    const pitchDepth = pointApexOfHead.z - pointBottomOfChin.z;
    const pitchHeight = pointApexOfHead.y - pointBottomOfChin.y;
    const pitchInRadians = atan2(pitchDepth, pitchHeight) * 1.5;
    const pitch = (0, _maths.clamp)(pitchInRadians, -1, 1);
    // FIXME: opposite / hypotenuse
    //const pitch = Math.asin(pointBetweenTheEyes.x)
    // const distanceFromFeltrumToEyeMidPoint = hypoteneuse3D( feltrum, pointBetweenTheEyes )	
    // if the chin is in front (z) of forehead, head tilting back
    // const pitchAngle = 10 * (atan2( pointBetweenTheEyes.y, feltrum.y ) - 0.7210)
    // const pitchtest = pitchAngle * PI
    // console.log( "Pitch", { pitchAngle, pitchtest, pointBetweenTheEyes} )
    /*	

	// Triangulate view cone
	// // const depth = 0.06 * FOCAL_LENGTH * canvas.width / MAX_WIDTH / sqrt((centerX - forehead[0]) ** 2 + (centerY - forehead[1]) ** 2 )
	// // const depth = IRIS_SIZE * FOCAL_LENGTH * canvas.width / MAX_WIDTH / diameter;

	// prediction.lookingRight = flipHorizontally ? !lookingRight : lookingRight

	// Looking left / Right -1 -> 1
	prediction.eyeDirection = eyeDirection 
	prediction.eyeDistance = distanceBetweenIrises
	
	// FIXME: Ideally these give a percentage of open-ness
	// prediction.leftEye = leftEyesDist / eyeScale
	prediction.leftEyeClosed = prediction.leftEye < EYE_CLOSED_AT
	
	// prediction.rightEye = rightEyesDist / eyeScale 
	prediction.rightEyeClosed = prediction.rightEye < EYE_CLOSED_AT
	
	// both together
	prediction.eyesClosed = prediction.leftEyeClosed && prediction.rightEyeClosed



/*
		
	// The rest of the app is expecting a prediction in the following
	// shape with these extra parts and arrays already pre-written
	// save our annotated parts
	prediction.annotations = annotations

	// useful sometimes (different time to audio context?)
	prediction.time = time	

	//console.log("Prediction", prediction,{ widthBetweenLeftEyeAndCentre, widthBetweenRightEyeAndCentre, keypoints, box, annotations })

	console.log( "Prediction", prediction, {annotations})

// return prediction

	// Eyes ---------------------
	// setEyeData( annotations, prediction, time, flipHorizontally )
	
	// eyes pointing in directions
	const { leftEyeIris,leftEyeLower0,leftEyeLower1,leftEyeUpper1, 
			rightEyeIris,rightEyeLower0,rightEyeLower1, rightEyeUpper0, rightEyeUpper1,
			midwayBetweenEyes } = annotations

	const irisLeft = leftEyeIris[0]
	const irisRight = rightEyeIris[0]

	// this is the distance between irises on the face
	const distanceBetweenEyes =	distanceBetween2Points(irisLeftX, irisRightX)
	// Extents of the eye vertically
	const eyeSocketHeight = distanceBetween3Points(leftEyeUpper1[ 3 ], rightEyeUpper1[ 3 ])
	// Extents of the eye horizontally
	const eyeSocketWidth = distanceBetween3Points(leftEyeUpper1[ 0 ],rightEyeUpper1[ 0 ])
	
	const midPointVector = midwayBetweenEyes[0]

	const midwayBetweenEyesX = midPointVector[0] 
	const midwayBetweenEyesY = midPointVector[1] 

	// Are we looking right or left?
	const lookingRight = irisLeftX[2] < irisRightX[2]

	// -1 -> +1
	const eyeDirection = (2 * ( midPointVector[0] - irisLeftX[0] ) / distanceBetweenEyes) - 1

	
	// FIXME: 
	const eyeScale = eyeSocketHeight / 80

	const quantityOfPointsInEye = 5//leftEyeLower1.length 
	let leftEyesDist = 0
	let rightEyesDist = 0

	// Check for eyes closed - we can do this on a loop for better results...
	// originally, p was 4
	for (let p=4; p<quantityOfPointsInEye; ++p)
	{
		leftEyesDist = distanceBetween3Points(leftEyeLower1[ p ], leftEyeUpper1[ p ])
		rightEyesDist = distanceBetween3Points(rightEyeLower1[ p ], rightEyeUpper1[ p ])
	}

	// leftEyesDist /= quantityOfPointsInEye
	// rightEyesDist /= quantityOfPointsInEye

	// const leftIrisHeight = leftEyeIris[4][1] - leftEyeIris[2][1]
	// const rightIrisHeight = rightEyeIris[4][1] - rightEyeIris[2][1]
	
	//console.log("Eyes : ",{leftIrisHeight, leftEyesDist, rightIrisHeight, rightEyesDist, eyeSocketHeight, eyeScale } )

	// add in some extras to make things easier 
	// the midpoint can be used to triangulate the yaw
	const leftEyeLowerX = leftEyeLower0[0][0] 
	const leftEyeLowerY = leftEyeLower0[0][1] 
	
	const rightEyeLowerX = rightEyeLower0[0][0] 
	const rightEyeLowerY = rightEyeLower0[0][1] 


	prediction.lookingRight = flipHorizontally ? !lookingRight : lookingRight

	// Looking left / Right -1 -> 1
	prediction.eyeDirection = eyeDirection * -1 // flipit
	prediction.eyeDistance = distanceBetweenEyes
	
	// FIXME: Ideally these give a percentage of open-ness
	prediction.leftEye = leftEyesDist / eyeScale
	prediction.leftEyeClosed = prediction.leftEye < EYE_CLOSED_AT
	
	prediction.rightEye = rightEyesDist / eyeScale 
	prediction.rightEyeClosed = prediction.rightEye < EYE_CLOSED_AT
	
	// both together
	//prediction.eyesClosed = prediction.leftEyeClosed && prediction.rightEyeClosed








	// Nose
	const {noseTip, noseBottom, noseRightCorner} = annotations
	//const {rightCheek,leftCheek, silhouette} = annotations


	
	// lengths of the triangle
	const lmx = (midwayBetweenEyesX - leftEyeLowerX) * -1
	const rmx = midwayBetweenEyesX - rightEyeLowerX

	// FIXME : flipHorizontal

	// and now we want the angle formed
	const yaw = flipHorizontally ? 
		-1 * (atan2(lmx, rmx) - 2)
		: -1 * (atan2(lmx, rmx) - 0.75)
	//const yaw = 0.5 - Math.atan( midPoint[2], -1 * midPoint[0] ) / ( 2.0 * Math.PI )
	
		// as nthis is -1 -> 1 we need to wrap it better
	
	// this is from forehead to chin...?
	// or nose to top lip?
	// if the chin is in front (z) of forehead, head tilting back
	// const pitch = 0.5 - Math.asin( my ) / PI
	// currently ranges between -0.35 -> -0.4 -> -0.35 
	const pitchAngle = atan2(topOfHead[2], noseTip[0][2] )
	const pitch = PITCH_SCALE * twist( pitchAngle / PI, -0.15 )
		
	// const pitch = flipHorizontally ? 
	// 	((Math.atan2(topOfHead[2], bottomOfHead[2] ) ) - 1.9 - 0.2 ) / HALF_PI
	// 	: (Math.atan2(midwayBetweenEyes[0][2], rmx) - 0.75)
		

	// if either eye is lower than the other
	const rollX = (leftEyeLowerX - rightEyeLowerX)
	const rollY = (leftEyeLowerY - rightEyeLowerY)

	// As this is for 350 range, we double to make it just 180
	const roll = flipHorizontally ?  
		-1 * (atan2(rollX, rollY) + HALF_PI)//Math.atan2(rollY, rollX):
		: atan2(rollX, rollY) - HALF_PI
	

	
	// Lip work --------------------------------

	const {lipsUpperInner,lipsLowerInner } = annotations
	const quantity = lipsUpperInner.length

	// central piece of the mouth
	const lipUpperLeft = lipsUpperInner[0]
	const lipLowerLeft = lipsLowerInner[0]

	const lipUpperMiddle = lipsUpperInner[5]
	const lipLowerMiddle = lipsLowerInner[5]
	
	const lipUpperRight = lipsUpperInner[quantity-1]
	const lipLowerRight = lipsLowerInner[quantity-1]

	// use hypotheneuse
	// const lipVerticalOpeningX = lipLowerMiddle[0] - lipUpperMiddle[0]
	// const lipVerticalOpeningY = lipLowerMiddle[1] - lipUpperMiddle[1]
	
	// const lipHorizontalOpeningX = lipLowerRight[0] - lipLowerLeft[0]
	// const lipHorizontalOpeningY = lipUpperRight[1] - lipUpperLeft[1]
	
	// const lipVerticalOpening = sqrt( lipVerticalOpeningX * lipVerticalOpeningX + lipVerticalOpeningY * lipVerticalOpeningY )
	// const lipHorizontalOpening = sqrt( lipVerticalOpeningX * lipVerticalOpeningX + lipVerticalOpeningY * lipVerticalOpeningY )
	const lipVerticalOpening = distanceBetween2Points( lipLowerMiddle,lipUpperMiddle )
	const lipHorizontalOpening = distanceBetween2Points( lipLowerRight, lipLowerLeft )
	
	// create triangles from the shape of the mouth
	// const upperLipLeft = [ lipUpperLeft, lipUpperMiddle ]
	
	// // this is the top left lip to fultrum (snot run)
	// // const upperLipLeftAngle = 
	
	
	// const upperLipRight = [ lipUpperMiddle, lipUpperRight ]
	
	// cona lowerLip = [ lipLowerLeft, lipLowerMiddle, lipLowerRight ]

	// const upperLip = sqrt( lipVerticalOpeningX * lipVerticalOpeningX + lipVerticalOpeningY * lipVerticalOpeningY )
	
	
	
	//const lipVerticalOpening = lipVerticalOpeningX * lipVerticalOpeningX + lipVerticalOpeningY * lipVerticalOpeningY
	prediction.mouthRange = lipVerticalOpening
	prediction.mouthRatio = lipVerticalOpening / headHeight
	prediction.mouthWidth = lipHorizontalOpening

	// TODO: FIXME: mouth shape fixing
	prediction.mouthShape = MOUTH_SHAPE_CLOSED




	// These are the angles caused by smiling
	// We add them together and deduct them from 180 to find
	// the kinked angle of the top lip between left - feltrum - right
	const leftSmirk = abs( determineAngle(lipUpperLeft, lipUpperMiddle) ) / PI
	const rightSmirk = abs( determineAngle(lipUpperMiddle, lipUpperRight) ) / PI

	// 0 -> 1 ()
	// FIXME: the range is pretty much empty between 0->0.9
	prediction.happiness = 10 * (((leftSmirk + rightSmirk) * 0.5)  - 0.9)
	// 0 -> 1
	prediction.leftSmirk = (leftSmirk - 1) * 100000
	prediction.rightSmirk = (rightSmirk - 1) * 100000
	*/ prediction.isFacingRight = yaw > 0;
    // leaning head as if to look at own chest / sky
    prediction.pitch = pitch;
    // tilting head towards shoulders
    prediction.roll = roll;
    // regular left right neck rotational movement
    prediction.yaw = yaw;
    // useful sometimes (different time to audio context?)
    prediction.time = time;
    // store new annotations internally
    prediction.annotations = annotations;
    return prediction;
};

},{"../maths/maths":"iZJNT","./face-landmark-constants":"1U5wU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hYvRN":[function(require,module,exports) {
let workerURL = require("a59229d3172afdcd");
let bundleURL = require("e6c5b5b6d5a7462");
let url = bundleURL.getBundleURL("ihyVp") + "face-worker.19cbddb0.js" + "?" + Date.now();
module.exports = workerURL(url, bundleURL.getOrigin(url), false);

},{"a59229d3172afdcd":"cn2gM","e6c5b5b6d5a7462":"lgJ39"}]},["bQiRm"], null, "parcelRequireaaed")

//# sourceMappingURL=face.8149b6ca.js.map
