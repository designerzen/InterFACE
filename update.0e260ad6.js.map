{"mappings":"4NAA0D,oCCE7CA,QAAUC,SAAA,IAAgBC,SAAS,CAACC,EAAQC,SAGpDC,EADAC,EAAc,QAkBZC,EAAgB,KACrBF,EAAIG,QAAQC,YAAAA,CAAcC,KAAM,iBAChCC,OAAOC,SAASC,UAIb,kBAAmBC,UAGtBH,OAAOI,iBAAiB,QAAQd,UAE/BI,QAAYS,UAAUE,cAAcC,SAAAA,QACrBZ,EAAIa,YAELJ,UAAUK,QAAAA,OAEjBC,QAAoBN,UAAUK,QAAQE,WACxCD,IAEHd,EAlCgB,EAACgB,EAAOC,EAAW,QACxB,IAAVD,QAEI,gBAIFE,EAAKD,EAAW,EAAI,EAAIA,EAGxBE,EAAIC,KAAKC,MAAMD,KAAKE,IAAIN,GAASI,KAAKE,IAJlC,cAMHC,YAAYP,EAAQI,KAAKI,IANtB,KAM6BL,IAAIM,QAAQP,IAAO,IAJpDQ,CAAS,QAAS,KAAM,KAAM,MAIkCP,IAsBrDQ,CAAYb,EAAYc,QAIxC7B,EAAI8B,cAAgBlC,gBACbmC,EAAY/B,EAAIa,WACtBkB,EAAUC,cAAgBpC,aACD,cAApBmC,EAAUE,SAETxB,UAAUE,cAAAA,OAEPuB,QAAyBzB,UAAUE,cAAcwB,kBACnDD,GAAoBA,EAAiB/B,SAGxCL,EAAQI,QAGTH,EAAO,0BAIRA,EAAO,sBAOXA,EAAO,+CAKIqC,OAASxC,oBAEdyC,QAAkB1C,uBAGf,4DAGH2C,EAASC,SAASC,cAAc,iBACtCF,EAAOG,UAAUC,IAAI,oBACrBJ,EAAOK,UAAY,wBAGnBL,EAAO5B,iBAAiB,SAAS,IAAI2B,KAAAA,CAAcO,MAAK,IACxDL,SAASM,gBAAgBC,YAAYR,IAE9B,QAEDS,UAEC","sources":["./node_modules/@parcel/runtime-js/lib/JSRuntime.js","./source/update.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _plugin() {\n  const data = require(\"@parcel/plugin\");\n\n  _plugin = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _utils() {\n  const data = require(\"@parcel/utils\");\n\n  _utils = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _nullthrows() {\n  const data = _interopRequireDefault(require(\"nullthrows\"));\n\n  _nullthrows = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// List of browsers that support dynamic import natively\n// https://caniuse.com/#feat=es6-module-dynamic-import\nconst DYNAMIC_IMPORT_BROWSERS = {\n  edge: '76',\n  firefox: '67',\n  chrome: '63',\n  safari: '11.1',\n  opera: '50'\n}; // Used for as=\"\" in preload/prefetch\n\nconst TYPE_TO_RESOURCE_PRIORITY = {\n  css: 'style',\n  js: 'script'\n};\nconst BROWSER_PRELOAD_LOADER = './loaders/browser/preload-loader';\nconst BROWSER_PREFETCH_LOADER = './loaders/browser/prefetch-loader';\nconst LOADERS = {\n  browser: {\n    css: './loaders/browser/css-loader',\n    html: './loaders/browser/html-loader',\n    js: './loaders/browser/js-loader',\n    wasm: './loaders/browser/wasm-loader',\n    IMPORT_POLYFILL: './loaders/browser/import-polyfill'\n  },\n  worker: {\n    js: './loaders/worker/js-loader',\n    wasm: './loaders/worker/wasm-loader',\n    IMPORT_POLYFILL: false\n  },\n  node: {\n    css: './loaders/node/css-loader',\n    html: './loaders/node/html-loader',\n    js: './loaders/node/js-loader',\n    wasm: './loaders/node/wasm-loader',\n    IMPORT_POLYFILL: null\n  }\n};\n\nfunction getLoaders(ctx) {\n  if (ctx.isWorker()) return LOADERS.worker;\n  if (ctx.isBrowser()) return LOADERS.browser;\n  if (ctx.isNode()) return LOADERS.node;\n  return null;\n}\n\nvar _default = new (_plugin().Runtime)({\n  apply({\n    bundle,\n    bundleGraph\n  }) {\n    // Dependency ids in code replaced with referenced bundle names\n    // Loader runtime added for bundle groups that don't have a native loader (e.g. HTML/CSS/Worker - isURL?),\n    // and which are not loaded by a parent bundle.\n    // Loaders also added for modules that were moved to a separate bundle because they are a different type\n    // (e.g. WASM, HTML). These should be preloaded prior to the bundle being executed. Replace the entry asset(s)\n    // with the preload module.\n    if (bundle.type !== 'js') {\n      return;\n    }\n\n    let asyncDependencies = [];\n    let otherDependencies = [];\n    bundle.traverse(node => {\n      if (node.type !== 'dependency') {\n        return;\n      }\n\n      let dependency = node.value;\n\n      if (dependency.isAsync && !dependency.isURL) {\n        asyncDependencies.push(dependency);\n      } else {\n        otherDependencies.push(dependency);\n      }\n    });\n    let assets = [];\n\n    for (let dependency of asyncDependencies) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (resolved == null) {\n        continue;\n      }\n\n      if (resolved.type === 'asset') {\n        if (!bundle.env.scopeHoist) {\n          // If this bundle already has the asset this dependency references,\n          // return a simple runtime of `Promise.resolve(internalRequire(assetId))`.\n          // The linker handles this for scope-hoisting.\n          assets.push({\n            filePath: __filename,\n            code: `module.exports = Promise.resolve(module.bundle.root(${JSON.stringify(bundleGraph.getAssetPublicId(resolved.value))}))`,\n            dependency\n          });\n        }\n      } else {\n        let loaderRuntime = getLoaderRuntime({\n          bundle,\n          dependency,\n          bundleGraph,\n          bundleGroup: resolved.value\n        });\n\n        if (loaderRuntime != null) {\n          assets.push(loaderRuntime);\n        }\n      }\n    }\n\n    for (let dependency of otherDependencies) {\n      // Resolve the dependency to a bundle. If inline, export the dependency id,\n      // which will be replaced with the contents of that bundle later.\n      let referencedBundle = bundleGraph.getReferencedBundle(dependency, bundle);\n\n      if (referencedBundle === null || referencedBundle === void 0 ? void 0 : referencedBundle.isInline) {\n        assets.push({\n          filePath: _path().default.join(__dirname, `/bundles/${referencedBundle.id}.js`),\n          code: `module.exports = ${JSON.stringify(dependency.id)};`,\n          dependency\n        });\n        continue;\n      } // Otherwise, try to resolve the dependency to an external bundle group\n      // and insert a URL to that bundle.\n\n\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if (dependency.isURL && resolved == null) {\n        // If a URL dependency was not able to be resolved, add a runtime that\n        // exports the original moduleSpecifier.\n        assets.push({\n          filePath: __filename,\n          code: `module.exports = ${JSON.stringify(dependency.moduleSpecifier)}`,\n          dependency\n        });\n        continue;\n      }\n\n      if (resolved == null || resolved.type !== 'bundle_group') {\n        continue;\n      }\n\n      let bundleGroup = resolved.value;\n      let mainBundle = (0, _nullthrows().default)(bundleGraph.getBundlesInBundleGroup(bundleGroup).find(b => {\n        let entries = b.getEntryAssets();\n        return entries.some(e => bundleGroup.entryAssetId === e.id);\n      }));\n\n      if (bundle.env.outputFormat === 'commonjs' && mainBundle.type === 'js') {\n        assets.push({\n          filePath: __filename,\n          dependency,\n          code: `module.exports = require(\"./\" + ${getRelativePathExpr(bundle, mainBundle)})`\n        });\n        continue;\n      } // URL dependency or not, fall back to including a runtime that exports the url\n\n\n      assets.push(getURLRuntime(dependency, bundle, mainBundle));\n    }\n\n    if (shouldUseRuntimeManifest(bundle) && bundleGraph.getChildBundles(bundle).length > 0 && isNewContext(bundle, bundleGraph)) {\n      assets.push({\n        filePath: __filename,\n        code: getRegisterCode(bundle, bundleGraph),\n        isEntry: true\n      });\n    }\n\n    return assets;\n  }\n\n});\n\nexports.default = _default;\n\nfunction getLoaderRuntime({\n  bundle,\n  dependency,\n  bundleGroup,\n  bundleGraph\n}) {\n  let loaders = getLoaders(bundle.env);\n\n  if (loaders == null) {\n    return;\n  }\n\n  let externalBundles = bundleGraph.getBundlesInBundleGroup(bundleGroup).filter(bundle => !bundle.isInline);\n  let mainBundle = (0, _nullthrows().default)(externalBundles.find(bundle => {\n    var _bundle$getMainEntry;\n\n    return ((_bundle$getMainEntry = bundle.getMainEntry()) === null || _bundle$getMainEntry === void 0 ? void 0 : _bundle$getMainEntry.id) === bundleGroup.entryAssetId;\n  })); // CommonJS is a synchronous module system, so there is no need to load bundles in parallel.\n  // Importing of the other bundles will be handled by the bundle group entry.\n  // Do the same thing in library mode for ES modules, as we are building for another bundler\n  // and the imports for sibling bundles will be in the target bundle.\n\n  if (bundle.env.outputFormat === 'commonjs' || bundle.env.isLibrary) {\n    externalBundles = [mainBundle];\n  } else {\n    // Otherwise, load the bundle group entry after the others.\n    externalBundles.splice(externalBundles.indexOf(mainBundle), 1);\n    externalBundles.reverse().push(mainBundle);\n  } // Determine if we need to add a dynamic import() polyfill, or if all target browsers support it natively.\n\n\n  let needsDynamicImportPolyfill = false;\n\n  if (bundle.env.isBrowser() && bundle.env.outputFormat === 'esmodule') {\n    needsDynamicImportPolyfill = !bundle.env.matchesEngines(DYNAMIC_IMPORT_BROWSERS);\n  }\n\n  let loaderModules = externalBundles.map(to => {\n    let loader = loaders[to.type];\n\n    if (!loader) {\n      return;\n    }\n\n    let relativePathExpr = getRelativePathExpr(bundle, to); // Use esmodule loader if possible\n\n    if (to.type === 'js' && to.env.outputFormat === 'esmodule') {\n      if (!needsDynamicImportPolyfill) {\n        return `import(\"./\" + ${relativePathExpr})`;\n      }\n\n      loader = (0, _nullthrows().default)(loaders.IMPORT_POLYFILL, `No import() polyfill available for context '${bundle.env.context}'`);\n    } else if (to.type === 'js' && to.env.outputFormat === 'commonjs') {\n      return `Promise.resolve(require(\"./\" + ${relativePathExpr}))`;\n    }\n\n    return `require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr})`;\n  }).filter(Boolean);\n\n  if (bundle.env.context === 'browser') {\n    loaderModules.push(...externalBundles // TODO: Allow css to preload resources as well\n    .filter(to => to.type === 'js').flatMap(from => {\n      let {\n        preload,\n        prefetch\n      } = getHintedBundleGroups(bundleGraph, from);\n      return [...getHintLoaders(bundleGraph, bundle, preload, BROWSER_PRELOAD_LOADER), ...getHintLoaders(bundleGraph, bundle, prefetch, BROWSER_PREFETCH_LOADER)];\n    }));\n  }\n\n  if (loaderModules.length === 0) {\n    return;\n  }\n\n  let loaderCode = loaderModules.join(', ');\n\n  if (loaderModules.length > 1 && (bundle.env.outputFormat === 'global' || !externalBundles.every(b => b.type === 'js'))) {\n    loaderCode = `Promise.all([${loaderCode}])`;\n\n    if (bundle.env.outputFormat !== 'global') {\n      loaderCode += `.then(r => r[r.length - 1])`;\n    }\n  } else {\n    loaderCode = `(${loaderCode})`;\n  }\n\n  if (bundle.env.outputFormat === 'global') {\n    loaderCode += `.then(() => module.bundle.root('${bundleGraph.getAssetPublicId(bundleGraph.getAssetById(bundleGroup.entryAssetId))}')${// In global output with scope hoisting, functions return exports are\n    // always returned. Otherwise, the exports are returned.\n    bundle.env.scopeHoist ? '()' : ''})`;\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = ${loaderCode};`,\n    dependency\n  };\n}\n\nfunction getHintedBundleGroups(bundleGraph, bundle) {\n  let preload = [];\n  let prefetch = [];\n  bundle.traverse(node => {\n    var _dependency$meta;\n\n    if (node.type !== 'dependency') {\n      return;\n    }\n\n    let dependency = node.value; // $FlowFixMe\n\n    let attributes = (_dependency$meta = dependency.meta) === null || _dependency$meta === void 0 ? void 0 : _dependency$meta.importAttributes;\n\n    if (dependency.isAsync && !dependency.isURL && typeof attributes === 'object' && attributes != null && ( // $FlowFixMe\n    attributes.preload || attributes.prefetch)) {\n      let resolved = bundleGraph.resolveAsyncDependency(dependency, bundle);\n\n      if ((resolved === null || resolved === void 0 ? void 0 : resolved.type) === 'bundle_group') {\n        // === true for flow\n        if (attributes.preload === true) {\n          preload.push(resolved.value);\n        }\n\n        if (attributes.prefetch === true) {\n          prefetch.push(resolved.value);\n        }\n      }\n    }\n  });\n  return {\n    preload,\n    prefetch\n  };\n}\n\nfunction getHintLoaders(bundleGraph, from, bundleGroups, loader) {\n  let hintLoaders = [];\n\n  for (let bundleGroupToPreload of bundleGroups) {\n    let bundlesToPreload = bundleGraph.getBundlesInBundleGroup(bundleGroupToPreload);\n\n    for (let bundleToPreload of bundlesToPreload) {\n      let relativePathExpr = getRelativePathExpr(from, bundleToPreload);\n      let priority = TYPE_TO_RESOURCE_PRIORITY[bundleToPreload.type];\n      hintLoaders.push(`require(${JSON.stringify(loader)})(require('./bundle-url').getBundleURL() + ${relativePathExpr}, ${priority ? JSON.stringify(priority) : 'null'}, ${JSON.stringify(bundleToPreload.target.env.outputFormat === 'esmodule')})`);\n    }\n  }\n\n  return hintLoaders;\n}\n\nfunction isNewContext(bundle, bundleGraph) {\n  let parents = bundleGraph.getParentBundles(bundle);\n  return bundle.isEntry || parents.length === 0 || parents.some(parent => parent.env.context !== bundle.env.context || parent.type !== 'js');\n}\n\nfunction getURLRuntime(dependency, from, to) {\n  let relativePathExpr = getRelativePathExpr(from, to);\n\n  if (dependency.meta.webworker === true) {\n    return {\n      filePath: __filename,\n      code: `module.exports = require('./get-worker-url')(${relativePathExpr});`,\n      dependency\n    };\n  }\n\n  return {\n    filePath: __filename,\n    code: `module.exports = require('./bundle-url').getBundleURL() + ${relativePathExpr}`,\n    dependency\n  };\n}\n\nfunction getRegisterCode(entryBundle, bundleGraph) {\n  let idToName = {};\n  bundleGraph.traverseBundles((bundle, _, actions) => {\n    if (bundle.isInline) {\n      return;\n    }\n\n    idToName[bundle.publicId] = (0, _nullthrows().default)(bundle.name);\n\n    if (bundle !== entryBundle && isNewContext(bundle, bundleGraph)) {\n      // New contexts have their own manifests, so there's no need to continue.\n      actions.skipChildren();\n    }\n  }, entryBundle);\n  return \"require('./bundle-manifest').register(JSON.parse(\" + JSON.stringify(JSON.stringify(idToName)) + '));';\n}\n\nfunction getRelativePathExpr(from, to) {\n  if (shouldUseRuntimeManifest(from)) {\n    return `require('./relative-path')(${JSON.stringify(from.publicId)}, ${JSON.stringify(to.publicId)})`;\n  }\n\n  return JSON.stringify((0, _utils().relativeBundlePath)(from, to, {\n    leadingDotSlash: false\n  }));\n}\n\nfunction shouldUseRuntimeManifest(bundle) {\n  let env = bundle.env;\n  return !env.isLibrary && env.outputFormat === 'global' && env.isBrowser();\n}","import {setToast, setFeedback} from './ui'\r\n\r\nexport const updater = async () => new Promise( (resolve,reject)  => {\r\n\t\r\n\tlet storageUsed = 0\r\n\tlet reg\r\n\r\n\tconst formatBytes = (bytes, decimals = 2) => {\r\n\t\tif (bytes === 0)\r\n\t\t{\r\n\t\t\treturn '0 Bytes';\r\n\t\t} \r\n\t  \r\n\t\tconst k = 1024;\r\n\t\tconst dm = decimals < 0 ? 0 : decimals;\r\n\t\tconst sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n\t  \r\n\t\tconst i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\t  \r\n\t\treturn parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n\t}\r\n\r\n\tconst installUpdate = () => {\r\n\t\treg.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n\t\twindow.location.reload();\r\n\t}\r\n\t\r\n\t// Check that service workers are supported\r\n\tif ('serviceWorker' in navigator) \r\n\t{\r\n\t\t// Use the window load event to keep the page load performant\r\n\t\twindow.addEventListener('load', async () => {\r\n\t\t\t\r\n\t\t\treg = await navigator.serviceWorker.register('service-worker.js');\r\n\t\t\tconst worker = reg.installing;\r\n\t\t\r\n\t\t\tif (worker && navigator.storage) \r\n\t\t\t{\r\n\t\t\t\tconst storageData = await navigator.storage.estimate();\r\n\t\t\t\tif (storageData) \r\n\t\t\t\t{\r\n\t\t\t\t\tstorageUsed = formatBytes(storageData.usage);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treg.onupdatefound = async () => {\r\n\t\t\t\tconst newWorker = reg.installing;\r\n\t\t\t\tnewWorker.onstatechange = async () => {\r\n\t\t\t\t\tif (newWorker.state === 'installed') \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (navigator.serviceWorker) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst registeredWorker = await navigator.serviceWorker.getRegistration();\r\n\t\t\t\t\t\t\tif (registeredWorker && registeredWorker.waiting) \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// show update icon!\r\n\t\t\t\t\t\t\t\tresolve(installUpdate);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\treject(\"No Service Worker\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// not instaLLed\r\n\t\t\t\t\t\treject(\"Not Installed\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}else{\r\n\t\treject(\"Service Workers not allowed\");\r\n\t}\r\n})\r\n\r\n// \r\nexport const update = async () => {\r\n\ttry{\r\n\t\tconst updateApp = await updater();\r\n\r\n\t\t// wait around\r\n\t\tsetToast(\"An Update is available! Press update to install it\" )\r\n\t\t\t\r\n\t\t// reveal update button?\r\n\t\tconst button = document.createElement('button')\r\n\t\tbutton.classList.add(\"update-available\")\r\n\t\tbutton.innerHTML = \"Update to new version\"\r\n\t\t\r\n\t\t// on button press...\r\n\t\tbutton.addEventListener('click', ()=>updateApp(), {once:true} )\r\n\t\tdocument.documentElement.appendChild(button)\r\n\r\n\t\treturn true\r\n\r\n\t}catch(error){\r\n\t\t// no updates\r\n\t\treturn false\r\n\t}\r\n}\r\n"],"names":["updater","async","Promise","resolve","reject","reg","storageUsed","installUpdate","waiting","postMessage","type","window","location","reload","navigator","addEventListener","serviceWorker","register","installing","storage","storageData","estimate","bytes","decimals","dm","i","Math","floor","log","parseFloat","pow","toFixed","sizes","formatBytes","usage","onupdatefound","newWorker","onstatechange","state","registeredWorker","getRegistration","update","updateApp","button","document","createElement","classList","add","innerHTML","once","documentElement","appendChild","error"],"version":3,"file":"update.0e260ad6.js.map"}