extends _base.pug

block title
	+title('Test:Reverb')

block nav
	a(href="./tests.pug") All Tests

block preload 

block above 

block main

	main#test-reverb

	

block styles 
	style.
		#control-panel{
			z-index:909;
		}
		#button-video{
			z-index:-1;
		}

block scripts
	script(type="module").

		import {setupThemeControls} from './theme/theme.js'
		import {addToolTips} from './dom/tooltips.js'		
			
		import { setupVolumeInterface } from './dom/ui.volume.js'
		import { setupTempoInterface } from './dom/ui.tempo.js'
		
		import AudioTimer from './timing/timer.audio.js' 
		import MIDIConnectionManager from './audio/midi/midi-connection-manager.js'
		import WebMIDIClass from './audio/midi/midi-connection-webmidi.js'
		import MIDIInstrument from './audio/instruments/instrument.midi.js'
		import {setupInterface} from './dom/ui.js'
			
		import { 
			getRecordableOutputNode,
			active, playing, 
			setupAudio,	audioContext,
			getVolume, setVolume, getPercussionNode 
		} from './audio/audio.js'

		import {Pane} from 'tweakpane'

		const start = async () => {

			const options = {}

			//- test for buttons and gadgets
			setupThemeControls( document.getElementById('select-theme') )
		
			const volume = 0.8
			const {	setVisualVolumeLevel, toggleMute } = setupVolumeInterface( volume, false, function onVolumeChanged(vol){
				console.info("Setting volume to ",vol)
				setVolume( vol )
			} )
			//- const sliderVolume = document.getElementById("volume-input-range")
			//- sliderVolume.onchange = sliderVolume.oninput = e => {
			//- 	console.log("Setting volume", e, sliderVolume.value )
			//- 	setVolume( sliderVolume.value )
			//- }

			//- createRadialMenu( document.getElementById("button-video") )
			

			const controlPanel = document.getElementById("control-panel")
			// this just adds some visual onscreen tooltips to the buttons specified
			addToolTips( controlPanel )
			
			// Test tempo
		
			const MIDIConnectionClasses = [WebMIDIClass]
			const midiManager = new MIDIConnectionManager()
			const timer = new AudioTimer()
			const audioContext = new AudioContext()

			// const instrument = new MIDIInstrument( audioContext )
			// TODO: load in any settings from localstorage
			setupTempoInterface(timer, midiManager, MIDIConnectionClasses)

			setupInterface( options )

			// hook unto the audio controls...

			const audio = await setupAudio()

			const mixer = audioContext.createGain()
			const envelope = new EnvelopeNode(audioContext)
			
			// const instrument = new OscillatorInstrument( audioContext )
			const instrument = new DualOscillatorInstrument( audioContext )
			// const instrument = new MonotronInstrument( audioContext )
			instrument.volume = 0.1
			// instrument.noteOn( 0 )
			// instrument.noteOff()
			
			/*
			// const reverb = createReverb(audioContext, 0.1, false, "./assets/audio/acoustics/emt_140_dark_5.wav").then( reverb => {
			const reverb = createCustomReverb(audioContext, {} ).then( reverb => {
				instrument.output.connect( mixer )
				mixer.connect( reverb.node )
				reverb.node.connect( audioContext.destination  )
				// reverb.node.connect( mixer )
				// mixer.connect( audioContext.destination )
			})
			*/

			const customReverbOptions = {
				// seconds
				duration:0.5, 

				gain : 0.8,
				// as ratios except sustain which is a level
				attack:0.001, 
				decay:0.1, 
				sustain:0.8,
				release:0.5,

				// booleans
				normalize : true,
				reverse:false,
				stereo:false,
				
				// noise:'white' 
				// noise:'pink'  
				noise:'white' 
			}

			const pane = new Pane(new Pane({ title: "Config", expanded: true }))
			const reverbConfig = pane.addFolder({ title: 'Reverb' })
			reverbConfig.addBinding(customReverbOptions, 'duration', { min: 0.01, max: 10 })
			reverbConfig.addBinding(customReverbOptions, 'gain', { min: 0.01, max: 2 })
			reverbConfig.addBinding(customReverbOptions, 'attack', { min: 0.01, max: 1 })
			reverbConfig.addBinding(customReverbOptions, 'decay', { min: 0.01, max: 1 })
			reverbConfig.addBinding(customReverbOptions, 'sustain', { min: 0.01, max: 1 })

			reverbConfig.addBinding(customReverbOptions, 'noise',  options: {
				white: 'white',
				pink: 'pink',
				brown: 'brown',
			})

			reverbConfig.addBinding(customReverbOptions, 'normalize')
			reverbConfig.addBinding(customReverbOptions, 'reverse')
			reverbConfig.addBinding(customReverbOptions, 'stereo')
	
			// const reverb = await createReverb(audioContext, 0.9, true, "./assets/audio/acoustics/sony_walkman_fx_403_mega_bass_+_tube.irs")
			// const reverb = await createReverb(audioContext, 0.5, true, "./assets/audio/acoustics/sony_walkman_fx_403_mega_bass.wav")
			// const reverb = await createReverb(audioContext, 0.1, true, "./assets/audio/acoustics/concert-crowd.ogg")
			// const reverb = await createReverb(audioContext, 0.1, true, "./assets/audio/acoustics/ir-hall.mp3")
			const reverb = await createCustomReverb(audioContext, customReverbOptions )
			
			// await reverb.setOptions(customReverbOptions)

			// connect audio parts
			instrument.output.connect( envelope )
			envelope.connect( mixer )
			mixer.connect( reverb.node )
			reverb.node.connect( audioContext.destination  )

			window.addEventListener( "keydown", e => {
				const isNumber = !isNaN( parseInt(event.key) )
				const focussedElement = document.activeElement
				instrument.noteOn( isNumber ? parseInt(event.key) : (Math.random() * 128) >> 0 )
			})
			window.addEventListener( "keyup", e => {
				instrument.noteOff()
			})
		}
		document.addEventListener( "DOMContentLoaded", e => start() )
