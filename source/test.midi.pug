extends _base.pug

block title
	+title('Test:MIDI')

block nav
	a(href="./tests.pug") All Tests

block preload 

block main

	main#test-midi

		//- tooltip element
		include partials/toast.pug	

		include partials/transport-panel.pug

		//- control panel with multi-levels
		include partials/control-panel.pug

block styles 
	style.
		body{
			background-image:none;
		}
		#control-panel{
			z-index:909;
		}
		#button-video{
			z-index:-1;
		}


block scripts
	script(type="module").

		// watch for MIDI connections -> link with timer and show stuff onscreen
		
		import AUDIO from "url:./assets/audio/metronome.wav"
		import { 
			getElapsed, getBarProgress,
			getBPM, getBars, getBar, getTimePerBar, getTimeBetween,
			setBar, setBars, setTimeBetween, setBPM, 
			startTimer, stopTimer, now, 
			convertBPMToPeriod, tapTempo,
			setTimingWorker
		} from './timing/timing.js' 

		import AudioTimer from './timing/timer.audio.js' 

		import MIDIConnectionManager from './audio/midi/midi-connection-manager.js'
		import WebMIDIClass from './audio/midi/midi-connection-webmidi.js'
		
		import ROLLING_WORKER_URI from 'url:./timing/timing.rolling.worker.js'
		import SETINERVAL_WORKER_URI from 'url:./timing/timing.setinterval.worker.js'
		import SETTIMEOUT_WORKER_URI from 'url:./timing/timing.settimeout.worker.js'

		import {addToolTips} from './dom/tooltips.js'		
		import {setupThemeControls} from './theme/theme.js'
		import { setupTempoInterface } from './dom/ui.tempo.js'
		import { setupVolumeInterface } from './dom/ui.volume.js'
		import { setupInterface } from './dom/ui.js'
		import { setMIDIControls } from './dom/ui.midi.js'
		import { createFeedbackNode } from "./dom/text.js"

		import MIDIInstrument from './audio/instruments/instrument.midi.js'
		
		import { 
			getRecordableOutputNode,
			active, playing, 
			setupAudio,	audioContext,
			getVolume, setVolume, getPercussionNode 
		} from './audio/audio.js'

		const COOKIE = "delicious-cookie"
		
		const tick = new Audio( AUDIO )

		const start = async () => {

			// NB. *must* be on user interaction
			const audioContext = new AudioContext()

			// TODO: load in any settings from localstorage
			const options = {}
			const controlPanel = document.getElementById("control-panel")
			
			// this assigns all the parts of the musical application
			setupAudio( audioContext )

			// UI =========================================================

			//- test for buttons and gadgets
			setupThemeControls( document.getElementById('select-theme') )
					
			// connect the user up to the buttons and dials
			setupInterface( options )


			// VOLUME -------------------------------------------
			const previousVolume = parseFloat( localStorage.getItem( COOKIE ) ?? 1 )
			setupVolumeInterface( previousVolume, vol =>{ 
				localStorage.setItem( COOKIE, vol )
				tick.volume = vol	
		  	} )
			tick.volume = previousVolume

			// this just adds some visual onscreen tooltips to the buttons specified
			addToolTips( controlPanel )

			// MIDI ---------------------------------------------
			let midiInput
			let midiOutput

			const MIDIConnectionClasses = [WebMIDIClass]
			const midiManager = new MIDIConnectionManager()

			const outputMIDIInputs = document.getElementById('midi-inputs-output')
			const outputMIDIOutputs = document.getElementById('midi-outputs-output')
			
			const setFeedback = createFeedbackNode( document.getElementById("feedback") )
			console.log("Fix text", typeof setFeedback, setFeedback, document.getElementById("feedback")  )
			// bind to buttons
			const hasMIDI = await setMIDIControls( midiManager, MIDIConnectionClasses, [], options  )
			//- if (hasMIDI)
			//- {
			//- 	setFeedback("MIDI available<br>And device(s) found", 0)
			//- }else{
			//- 	setFeedback("MIDI available<br>Connect a MIDI instrument <strong>and click the button</strong>", 0)
			//- }

			// this allows us to dispatch midi events to a mdi device
			const instrument = new MIDIInstrument( audioContext )
			


			// TEMPO --------------------------------------------
			const timer = new AudioTimer(audioContext)



			const onTick = values => {
					
				const BPM = timer.BPM
				const index = values.divisionsElapsed / 24
				
				if (index === 0)
				{
					tick.play()	
				}
					
				//- }
		
				// if we synch or external devices to this tempo
				//- if (midiOutput){
				//- 	//console.log("tick midi clock synch", midiOutput )
				//- 	// Sends a MIDI clock real-time message. 
				//- 	// According to the standard, there are 24 MIDI clocks for every quarter note.
				//- 	// midiOutput.sendClock()
				//- }
			}

			// NB. at this point we have access to the user events
			// 		so can create things that depend on audio context
			
			// FIXME: Set from options
			timer.bpm = 90

			// connect the tempo interface
			console.info("Setting up the tempo panel")

			setupTempoInterface(timer, null, null, onTick )

			// start timer and observe for changes
			timer.startTimer( ( values )=>{
			
				const { 
					divisionsElapsed,
					bar, bars, 
					barsElapsed, timePassed, 
					elapsed, expected, drift, level, intervals, lag} = values
				
				//- console.info({ 
				//- 	divisionsElapsed,
				//- 	bar, bars, 
				//- 	barsElapsed, timePassed, 
				//- 	elapsed, expected, drift, level, intervals, lag} )
				
				/* output.innerText = `TimePerBar:${getTimePerBar().toFixed(2)} TimePerBetween:${getTimeBetween().toFixed(2)}` */
				
				output.innerText = `BPM:${getBPM().toFixed(0)} intervals:${intervals} \nelapsed:${elapsed.toFixed(2)}` 
				
				outputTempoDrift.innerText = `drift:${drift.toFixed(2)} `
				outputTempoLag.innerText = `lag:${lag.toFixed(2)} ` 
				outputBeat.innerText = `Note: ${divisionsElapsed+1}/4 Bar: ${bar+1}/${bars}`
				outputBar.innerText = `Bars: ${barsElapsed}`	
					
				inputTempoField.value = getBPM()
				inputTempoRange.value = getBPM()

				inputTempoStep.value = bar + 1

				// if we synch or external devices to this tempo
				if (midiOutput){
					//console.log("tick midi clock synch", midiOutput )
					// Sends a MIDI clock real-time message. 
					// According to the standard, there are 24 MIDI clocks for every quarter note.
					// midiOutput.sendClock()
				}

			})
			
			setupTempoInterface(timer, midiManager, MIDIConnectionClasses)
		}
		
		//- document.addEventListener( "DOMContentLoaded", e => start() )
		document.addEventListener( "mousedown", e => start(), {once:true} )
