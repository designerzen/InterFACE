extends _base.pug

block title
	+title('WAM2 Test bed')

block nav

block preload 

block main
	main#wam
		h3 Web Audio Modules Version 2
		h4 Test Suite 
		p A collection of purpose built audio nodes to connect to the InterFACE
		audio#player(
			crossorigin="anonymous"
			src="https://mainline.i3s.unice.fr/WebAudioPluginBank/BasketCaseGreendayriffDI.mp3"
			controls
			loop
		)
			

	block scripts
		script(type="module").

			// this just uses Parcel to bundle the file locally
			// and stores the URL that the file is available  in the plugin constant
			//- import pluginURL from 'url:./audio/wam2/simple/index.js'

			const create = async(audioContext) => {

				// load main plugin file
				const { default: simpleWAMPlugin } = await import("./audio/wam2/simple/index.js")
				const { default: pingPongDelayWAMPlugin } = await import("./audio/wam2/pingpongdelay/index.js")
				
				// this can be auto generated bythe WAM sdk
				const hostGroupId = 1

				// You can can optionally specify additional information such as the initial state 
				// Create a new instance of the plugin, equivalent to :
				// const wam = new WAM(audioCtx);
				// await wam.initialize(initialState);

				const simplePlugin = await simpleWAMPlugin.createInstance(hostGroupId, audioContext, {})
				const pingPongDelayPlugin = await pingPongDelayWAMPlugin.createInstance(hostGroupId, audioContext, {})
					
				// GUI -----------------------------------------------------
				// Now Locate the HTMLElement for controlling playback
				const player = document.querySelector('#player')

				// Tie the UI into the HTML
				const mediaElementSource = audioContext.createMediaElementSource(player)

				// Very simple function to connect the plugin audionode to the host
				const connectPlugin = (output) => {
					const masterGain = new GainNode(output)
					//- const masterGain = new GainNode(output)
					// grab the onscreen streaming media item
					//- mediaElementSource.connect(masterGain)
					mediaElementSource.connect(simplePlugin.audioNode)
					// connect the gain to simple plugin
					//- masterGain.connect(simplePlugin.audioNode)
					// and the simple plugin to the ping pong delay
					//- simplePlugin.audioNode.connect(pingPongDelayPlugin.audioNode)
					simplePlugin.audioNode.connect(output.destination)
					// now connect our final node to the audioContext output
					//- pingPongDelayPlugin.audioNode.connect(output.destination)
				}

				// Very simple function to append the plugin root dom node to the host
				const mountPlugin = (domNode) => {
					mount.innerHtml = ''
					mount.appendChild(domNode)
				}

				// create a data object that contains the full state of the plugin
				const downloadState = async () => {
					let state = await pluginInstance.audioNode.getState()
					const blob = new Blob([JSON.stringify(state, undefined, 2)])
					const link = document.createElement('a')
					link.href = URL.createObjectURL(blob)
					link.download = 'state.json'
					link.click()
				}

				// plugins AudioNodes are bypassed by default.
				// pingPongDelayPlugin.setState({ enabled: true })

				// instance.audioNode is the plugin WebAudio node (native, AudioWorklet or
				// Composite). It can then be connected to the WebAudio graph.

				// then create the GUI
				//- const pluginDomNode = await pingPongDelayPlugin.createGui()
				//- for example
				//- document.appendChild(pluginDomNode)

				connectPlugin( audioContext )

				// now watch for events from the media player on screen
				player.onplay = () => {
					// audio context must be resumed because browser restrictions
					audioContext.resume() 
				}

				console.log("Creating WAM Plugin", {} )
			}

			const init = async () => {
					
				// make the URL relative...
				//- let testURL = pluginURL.split("?")[0]
				//- testURL = testURL.replace("http://localhost:909/", "")
				//- const wamURL = new URL(testURL, import.meta.url)
				
				// Safari...
				const AudioContext = window.AudioContext || window.webkitAudioContext || false

				if (AudioContext)
				{
					const context = new AudioContext({ latencyHint: 'playback' })
					create(context)
				}else{
					console.error("No Audio Engine on this browser ;(")
				}

				//- console.log(import.meta, "plugin URL", {pluginURL, testURL, wamURL})
			}

			// Required to start any kind of audio interaction & playback
			document.addEventListener("click", init, {once:true})
			
			